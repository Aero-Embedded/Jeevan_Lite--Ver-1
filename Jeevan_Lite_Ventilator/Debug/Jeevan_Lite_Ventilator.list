
Jeevan_Lite_Ventilator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08021fa0  08021fa0  00031fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080222c4  080222c4  000402cc  2**0
                  CONTENTS
  4 .ARM          00000008  080222c4  080222c4  000322c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080222cc  080222cc  000402cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080222cc  080222cc  000322cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080222d0  080222d0  000322d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080222d4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402cc  2**0
                  CONTENTS
 10 .bss          000186e0  200002d0  200002d0  000402d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200189b0  200189b0  000402d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000a65f2  00000000  00000000  000402fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009594  00000000  00000000  000e68ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d0  00000000  00000000  000efe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021b0  00000000  00000000  000f2358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031265  00000000  00000000  000f4508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f222  00000000  00000000  0012576d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebc0b  00000000  00000000  0016498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0025059a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000969c  00000000  00000000  002505f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021f88 	.word	0x08021f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08021f88 	.word	0x08021f88

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <APRV_Mode_Task>:
extern uint8_t now_check_breath;

extern uint8_t Breath;

void APRV_Mode_Task (void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	while(1)
	{

		if(P1.P_HIGH_TIMER>0 )
 8000eac:	4b9b      	ldr	r3, [pc, #620]	; (800111c <APRV_Mode_Task+0x278>)
 8000eae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80be 	beq.w	8001032 <APRV_Mode_Task+0x18e>
		{

			PID_Compute(&TPID);
 8000eb6:	489a      	ldr	r0, [pc, #616]	; (8001120 <APRV_Mode_Task+0x27c>)
 8000eb8:	f013 fcbe 	bl	8014838 <PID_Compute>
			P1.P_HIGH_DAC_VAL=(int16_t)PIDOut;
 8000ebc:	4b99      	ldr	r3, [pc, #612]	; (8001124 <APRV_Mode_Task+0x280>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fdd9 	bl	8000a7c <__aeabi_d2iz>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b92      	ldr	r3, [pc, #584]	; (800111c <APRV_Mode_Task+0x278>)
 8000ed2:	86da      	strh	r2, [r3, #54]	; 0x36
			Blower_Signal( P1.P_HIGH_DAC_VAL);
 8000ed4:	4b91      	ldr	r3, [pc, #580]	; (800111c <APRV_Mode_Task+0x278>)
 8000ed6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8000ed8:	4b93      	ldr	r3, [pc, #588]	; (8001128 <APRV_Mode_Task+0x284>)
 8000eda:	609a      	str	r2, [r3, #8]

			if( P1._Apnea_counter_trigger_check_time==0)
 8000edc:	4b8f      	ldr	r3, [pc, #572]	; (800111c <APRV_Mode_Task+0x278>)
 8000ede:	889b      	ldrh	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d164      	bne.n	8000fae <APRV_Mode_Task+0x10a>
			{
							if (P1._TRIG_TYPE == 1)
 8000ee4:	4b8d      	ldr	r3, [pc, #564]	; (800111c <APRV_Mode_Task+0x278>)
 8000ee6:	88db      	ldrh	r3, [r3, #6]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d122      	bne.n	8000f32 <APRV_Mode_Task+0x8e>
						    {
						        if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8000eec:	4b8f      	ldr	r3, [pc, #572]	; (800112c <APRV_Mode_Task+0x288>)
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef8:	4b88      	ldr	r3, [pc, #544]	; (800111c <APRV_Mode_Task+0x278>)
 8000efa:	edd3 6a05 	vldr	s13, [r3, #20]
 8000efe:	4b87      	ldr	r3, [pc, #540]	; (800111c <APRV_Mode_Task+0x278>)
 8000f00:	891b      	ldrh	r3, [r3, #8]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	d52e      	bpl.n	8000f76 <APRV_Mode_Task+0xd2>
						        {
						        	    Trigger=1;
 8000f18:	4b85      	ldr	r3, [pc, #532]	; (8001130 <APRV_Mode_Task+0x28c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
						        	    Trigger_Count++;
 8000f1e:	4b85      	ldr	r3, [pc, #532]	; (8001134 <APRV_Mode_Task+0x290>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a83      	ldr	r2, [pc, #524]	; (8001134 <APRV_Mode_Task+0x290>)
 8000f26:	6013      	str	r3, [r2, #0]
						        	    P1._Apnea_counter_trigger_check_time=1000;
 8000f28:	4b7c      	ldr	r3, [pc, #496]	; (800111c <APRV_Mode_Task+0x278>)
 8000f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2e:	809a      	strh	r2, [r3, #4]
 8000f30:	e021      	b.n	8000f76 <APRV_Mode_Task+0xd2>

						         }
						      }
						      else
						      {
						         if((Flow_Sensor_cal._Flow_Val>(P1.simv_trigger_offset2+P1._TRIG_LMT)))
 8000f32:	4b81      	ldr	r3, [pc, #516]	; (8001138 <APRV_Mode_Task+0x294>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3e:	4b77      	ldr	r3, [pc, #476]	; (800111c <APRV_Mode_Task+0x278>)
 8000f40:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f44:	4b75      	ldr	r3, [pc, #468]	; (800111c <APRV_Mode_Task+0x278>)
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	dd0b      	ble.n	8000f76 <APRV_Mode_Task+0xd2>
						         {

						        	 Trigger=1;
 8000f5e:	4b74      	ldr	r3, [pc, #464]	; (8001130 <APRV_Mode_Task+0x28c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
						        	 Trigger_Count++;
 8000f64:	4b73      	ldr	r3, [pc, #460]	; (8001134 <APRV_Mode_Task+0x290>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a72      	ldr	r2, [pc, #456]	; (8001134 <APRV_Mode_Task+0x290>)
 8000f6c:	6013      	str	r3, [r2, #0]
						        	  P1._Apnea_counter_trigger_check_time=1000;
 8000f6e:	4b6b      	ldr	r3, [pc, #428]	; (800111c <APRV_Mode_Task+0x278>)
 8000f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f74:	809a      	strh	r2, [r3, #4]
						         }
						        }



						        	     if (Flow_Sensor_cal._Flow_Val >= (-1) && Flow_Sensor_cal._Flow_Val <= 3)
 8000f76:	4b70      	ldr	r3, [pc, #448]	; (8001138 <APRV_Mode_Task+0x294>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	db31      	blt.n	8000fe4 <APRV_Mode_Task+0x140>
 8000f80:	4b6d      	ldr	r3, [pc, #436]	; (8001138 <APRV_Mode_Task+0x294>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	dc2d      	bgt.n	8000fe4 <APRV_Mode_Task+0x140>
						        	     {
						        	        P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <APRV_Mode_Task+0x288>)
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	4b61      	ldr	r3, [pc, #388]	; (800111c <APRV_Mode_Task+0x278>)
 8000f96:	edc3 7a05 	vstr	s15, [r3, #20]
						        	        P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <APRV_Mode_Task+0x294>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <APRV_Mode_Task+0x278>)
 8000fa8:	edc3 7a06 	vstr	s15, [r3, #24]
 8000fac:	e01a      	b.n	8000fe4 <APRV_Mode_Task+0x140>

					       }
						   else
						   {

						         	if (Flow_Sensor_cal._Flow_Val >= (-6) && Flow_Sensor_cal._Flow_Val <= 3)
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <APRV_Mode_Task+0x294>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f113 0f06 	cmn.w	r3, #6
 8000fb6:	db15      	blt.n	8000fe4 <APRV_Mode_Task+0x140>
 8000fb8:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <APRV_Mode_Task+0x294>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	dc11      	bgt.n	8000fe4 <APRV_Mode_Task+0x140>
						         	{
						         		 P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 8000fc0:	4b5a      	ldr	r3, [pc, #360]	; (800112c <APRV_Mode_Task+0x288>)
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <APRV_Mode_Task+0x278>)
 8000fce:	edc3 7a05 	vstr	s15, [r3, #20]
						         		 P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 8000fd2:	4b59      	ldr	r3, [pc, #356]	; (8001138 <APRV_Mode_Task+0x294>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <APRV_Mode_Task+0x278>)
 8000fe0:	edc3 7a06 	vstr	s15, [r3, #24]


						    }


			            if(Pressure_sensor._Pressure_Val>( P1.P_HIGH+4))
 8000fe4:	4b51      	ldr	r3, [pc, #324]	; (800112c <APRV_Mode_Task+0x288>)
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b4c      	ldr	r3, [pc, #304]	; (800111c <APRV_Mode_Task+0x278>)
 8000fec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dd0d      	ble.n	8001012 <APRV_Mode_Task+0x16e>
						{
							if(now_open_valve==1)
 8000ff6:	4b51      	ldr	r3, [pc, #324]	; (800113c <APRV_Mode_Task+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d14e      	bne.n	800109c <APRV_Mode_Task+0x1f8>
							{
								ExpValve_OPEN();
 8000ffe:	4b50      	ldr	r3, [pc, #320]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001008:	6153      	str	r3, [r2, #20]
								now_open_valve=0;
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <APRV_Mode_Task+0x298>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e044      	b.n	800109c <APRV_Mode_Task+0x1f8>

							}

						}
						else if(Pressure_sensor._Pressure_Val<=( P1.P_HIGH+4))
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <APRV_Mode_Task+0x288>)
 8001014:	791b      	ldrb	r3, [r3, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	4b40      	ldr	r3, [pc, #256]	; (800111c <APRV_Mode_Task+0x278>)
 800101a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800101e:	3304      	adds	r3, #4
 8001020:	429a      	cmp	r2, r3
 8001022:	dc3b      	bgt.n	800109c <APRV_Mode_Task+0x1f8>
						{
							ExpValve_CLOSE();
 8001024:	4b46      	ldr	r3, [pc, #280]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <APRV_Mode_Task+0x29c>)
 800102a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102e:	6153      	str	r3, [r2, #20]
 8001030:	e034      	b.n	800109c <APRV_Mode_Task+0x1f8>




		}
		else if(P1.P_LOW_TIMER>0)
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <APRV_Mode_Task+0x278>)
 8001034:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d030      	beq.n	800109c <APRV_Mode_Task+0x1f8>
		{
			Blower_Signal( 0);
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <APRV_Mode_Task+0x284>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
				if(Pressure_sensor._Pressure_Val<=(_Set_Peep))
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <APRV_Mode_Task+0x288>)
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <APRV_Mode_Task+0x2a0>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d815      	bhi.n	8001088 <APRV_Mode_Task+0x1e4>
				{

					if(lock==1)
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <APRV_Mode_Task+0x2a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d107      	bne.n	8001074 <APRV_Mode_Task+0x1d0>
					{
						lock=0;
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <APRV_Mode_Task+0x2a4>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
						vTaskDelay(Lock_delay);
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <APRV_Mode_Task+0x2a8>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f01e fbfc 	bl	801f86c <vTaskDelay>
					}

					ExpValve_CLOSE();
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4a31      	ldr	r2, [pc, #196]	; (8001140 <APRV_Mode_Task+0x29c>)
 800107a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800107e:	6153      	str	r3, [r2, #20]
					P_HIGH_FINISHED=0;
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <APRV_Mode_Task+0x2ac>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e009      	b.n	800109c <APRV_Mode_Task+0x1f8>
				}
				else if(P_HIGH_FINISHED==1)
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <APRV_Mode_Task+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <APRV_Mode_Task+0x1f8>
				{

					ExpValve_OPEN();
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <APRV_Mode_Task+0x29c>)
 8001096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800109a:	6153      	str	r3, [r2, #20]

		}



		Alert_error_count++;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <APRV_Mode_Task+0x2b0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <APRV_Mode_Task+0x2b0>)
 80010a4:	6013      	str	r3, [r2, #0]

		Patient_Circuit_Disconnected_Alert_Func();
 80010a6:	f001 f9bb 	bl	8002420 <Patient_Circuit_Disconnected_Alert_Func>
		Main_Supply_or_Battery_Indication();
 80010aa:	f000 ff0f 	bl	8001ecc <Main_Supply_or_Battery_Indication>

		if( Alert_error_count >= 500)
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <APRV_Mode_Task+0x2b0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b6:	db1e      	blt.n	80010f6 <APRV_Mode_Task+0x252>
		{
			if(Apnea_Patient_circuit_disconnected_Flag==1)
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <APRV_Mode_Task+0x2b4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10f      	bne.n	80010e0 <APRV_Mode_Task+0x23c>
			{

					Alert_Status_count++;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <APRV_Mode_Task+0x2b8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <APRV_Mode_Task+0x2b8>)
 80010c8:	6013      	str	r3, [r2, #0]
					if(Alert_Status_count>3)
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <APRV_Mode_Task+0x2b8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	dd0b      	ble.n	80010ea <APRV_Mode_Task+0x246>
					{
						//A.Alert_Now=1;
						Apnea_Patient_circuit_disconnected_Flag=0;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <APRV_Mode_Task+0x2b4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
						Alert_Status_count=0;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <APRV_Mode_Task+0x2b8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e004      	b.n	80010ea <APRV_Mode_Task+0x246>

			}
			else
			{
				//A.Alert_Now=1;
				CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <APRV_Mode_Task+0x2bc>)
 80010e2:	78d3      	ldrb	r3, [r2, #3]
 80010e4:	f36f 03c3 	bfc	r3, #3, #1
 80010e8:	70d3      	strb	r3, [r2, #3]
			}
			now_open_valve=1;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <APRV_Mode_Task+0x298>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
			Alert_error_count=0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <APRV_Mode_Task+0x2b0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
		}

		Alert_Data_send_count++;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <APRV_Mode_Task+0x2c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <APRV_Mode_Task+0x2c0>)
 80010fe:	6013      	str	r3, [r2, #0]
		if(Alert_Data_send_count>1500)
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <APRV_Mode_Task+0x2c0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001108:	4293      	cmp	r3, r2
 800110a:	dd02      	ble.n	8001112 <APRV_Mode_Task+0x26e>
		{
			//A.Alert_Now=1;
			Alert_Data_send_count=0;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <APRV_Mode_Task+0x2c0>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]

		}

		vTaskDelay(2);
 8001112:	2002      	movs	r0, #2
 8001114:	f01e fbaa 	bl	801f86c <vTaskDelay>
		if(P1.P_HIGH_TIMER>0 )
 8001118:	e6c8      	b.n	8000eac <APRV_Mode_Task+0x8>
 800111a:	bf00      	nop
 800111c:	20016960 	.word	0x20016960
 8001120:	200169a0 	.word	0x200169a0
 8001124:	20016a18 	.word	0x20016a18
 8001128:	40007400 	.word	0x40007400
 800112c:	20016cfc 	.word	0x20016cfc
 8001130:	20016e50 	.word	0x20016e50
 8001134:	200168b4 	.word	0x200168b4
 8001138:	20016c48 	.word	0x20016c48
 800113c:	2000030c 	.word	0x2000030c
 8001140:	40020400 	.word	0x40020400
 8001144:	20016a78 	.word	0x20016a78
 8001148:	20016a10 	.word	0x20016a10
 800114c:	20016d92 	.word	0x20016d92
 8001150:	200002ec 	.word	0x200002ec
 8001154:	20000308 	.word	0x20000308
 8001158:	200002f4 	.word	0x200002f4
 800115c:	20000318 	.word	0x20000318
 8001160:	20016ea8 	.word	0x20016ea8
 8001164:	2000031c 	.word	0x2000031c

08001168 <APRV_Mode_One_Time_Task>:
	}
}


void APRV_Mode_One_Time_Task (void *argument)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af02      	add	r7, sp, #8
 800116e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		if(P_LOW_TIME==1)
 8001170:	4b7c      	ldr	r3, [pc, #496]	; (8001364 <APRV_Mode_One_Time_Task+0x1fc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d177      	bne.n	8001268 <APRV_Mode_One_Time_Task+0x100>
		{

			Parkar_valve_Signal(0);
 8001178:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <APRV_Mode_One_Time_Task+0x200>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
			O2.O2_process = 0;
 800117e:	4b7b      	ldr	r3, [pc, #492]	; (800136c <APRV_Mode_One_Time_Task+0x204>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
			O2.Servo=45;
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <APRV_Mode_One_Time_Task+0x204>)
 8001186:	222d      	movs	r2, #45	; 0x2d
 8001188:	605a      	str	r2, [r3, #4]
			Servo_Angle(O2.Servo);
 800118a:	4b78      	ldr	r3, [pc, #480]	; (800136c <APRV_Mode_One_Time_Task+0x204>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4b78      	ldr	r3, [pc, #480]	; (8001370 <APRV_Mode_One_Time_Task+0x208>)
 8001190:	635a      	str	r2, [r3, #52]	; 0x34




			P_LOW_TIME=0;
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <APRV_Mode_One_Time_Task+0x1fc>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
			P_HIGH_TIME=1;
 8001198:	4b76      	ldr	r3, [pc, #472]	; (8001374 <APRV_Mode_One_Time_Task+0x20c>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
			P_HIGH_FINISHED=1;
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <APRV_Mode_One_Time_Task+0x210>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
			_Control_Byte |= (uint8_t) 0x80;
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <APRV_Mode_One_Time_Task+0x214>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <APRV_Mode_One_Time_Task+0x214>)
 80011b0:	701a      	strb	r2, [r3, #0]
			P1.P_HIGH_DAC_VAL=0;
 80011b2:	4b73      	ldr	r3, [pc, #460]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	86da      	strh	r2, [r3, #54]	; 0x36

			lock=1;                           //new
 80011b8:	4b72      	ldr	r3, [pc, #456]	; (8001384 <APRV_Mode_One_Time_Task+0x21c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

			TempSetpoint = P1.P_LOW;
 80011be:	4b70      	ldr	r3, [pc, #448]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 80011c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f945 	bl	8000454 <__aeabi_ui2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	496e      	ldr	r1, [pc, #440]	; (8001388 <APRV_Mode_One_Time_Task+0x220>)
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
			PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <APRV_Mode_One_Time_Task+0x224>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f93b 	bl	8000454 <__aeabi_ui2d>
 80011de:	4604      	mov	r4, r0
 80011e0:	460d      	mov	r5, r1
 80011e2:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <APRV_Mode_One_Time_Task+0x228>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f934 	bl	8000454 <__aeabi_ui2d>
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <APRV_Mode_One_Time_Task+0x22c>)
 80011ee:	ed93 7b00 	vldr	d7, [r3]
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2301      	movs	r3, #1
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	eeb0 2a47 	vmov.f32	s4, s14
 80011fe:	eef0 2a67 	vmov.f32	s5, s15
 8001202:	ec41 0b11 	vmov	d1, r0, r1
 8001206:	ec45 4b10 	vmov	d0, r4, r5
 800120a:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <APRV_Mode_One_Time_Task+0x220>)
 800120c:	4a62      	ldr	r2, [pc, #392]	; (8001398 <APRV_Mode_One_Time_Task+0x230>)
 800120e:	4963      	ldr	r1, [pc, #396]	; (800139c <APRV_Mode_One_Time_Task+0x234>)
 8001210:	4863      	ldr	r0, [pc, #396]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001212:	f013 fac5 	bl	80147a0 <PID>
			PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001216:	2101      	movs	r1, #1
 8001218:	4861      	ldr	r0, [pc, #388]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 800121a:	f013 fbf7 	bl	8014a0c <PID_SetMode>

			PID_SetSampleTime(&TPID, Time);
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <APRV_Mode_One_Time_Task+0x23c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	485e      	ldr	r0, [pc, #376]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001226:	f013 fd6d 	bl	8014d04 <PID_SetSampleTime>
			PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <APRV_Mode_One_Time_Task+0x240>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f910 	bl	8000454 <__aeabi_ui2d>
 8001234:	4604      	mov	r4, r0
 8001236:	460d      	mov	r5, r1
 8001238:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <APRV_Mode_One_Time_Task+0x244>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f909 	bl	8000454 <__aeabi_ui2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b11 	vmov	d1, r2, r3
 800124a:	ec45 4b10 	vmov	d0, r4, r5
 800124e:	4854      	ldr	r0, [pc, #336]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001250:	f013 fbfa 	bl	8014a48 <PID_SetOutputLimits>

			P1.P_LOW_TIMER =P1.T_LOW_VAL;
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 8001256:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 800125a:	879a      	strh	r2, [r3, #60]	; 0x3c
			vTaskDelay(P1.T_LOW_VAL);
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 800125e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001260:	4618      	mov	r0, r3
 8001262:	f01e fb03 	bl	801f86c <vTaskDelay>
 8001266:	e783      	b.n	8001170 <APRV_Mode_One_Time_Task+0x8>

		}
		else if(P_HIGH_TIME==1)
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <APRV_Mode_One_Time_Task+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f47f af7f 	bne.w	8001170 <APRV_Mode_One_Time_Task+0x8>
		{
			now_check_breath=1;
 8001272:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <APRV_Mode_One_Time_Task+0x248>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
			P1._Apnea_counter_trigger_check_time=1000;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 800127a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127e:	809a      	strh	r2, [r3, #4]
			ExpValve_CLOSE();
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <APRV_Mode_One_Time_Task+0x24c>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <APRV_Mode_One_Time_Task+0x24c>)
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	6153      	str	r3, [r2, #20]
			_Control_Byte &= (uint8_t) (~(0x80));
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <APRV_Mode_One_Time_Task+0x214>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <APRV_Mode_One_Time_Task+0x214>)
 8001298:	701a      	strb	r2, [r3, #0]
			P_HIGH_TIME=0;
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <APRV_Mode_One_Time_Task+0x20c>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
			P_LOW_TIME=1;
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <APRV_Mode_One_Time_Task+0x1fc>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
			P1.P_LOW_DAC_VAL=0;
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	871a      	strh	r2, [r3, #56]	; 0x38

			Peep_E_Valve_Lock_delay_APRV();
 80012ac:	f000 fa58 	bl	8001760 <Peep_E_Valve_Lock_delay_APRV>


			TempSetpoint = P1.P_HIGH;
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 80012b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8cc 	bl	8000454 <__aeabi_ui2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4931      	ldr	r1, [pc, #196]	; (8001388 <APRV_Mode_One_Time_Task+0x220>)
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
			PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <APRV_Mode_One_Time_Task+0x224>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8c2 	bl	8000454 <__aeabi_ui2d>
 80012d0:	4604      	mov	r4, r0
 80012d2:	460d      	mov	r5, r1
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <APRV_Mode_One_Time_Task+0x228>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8bb 	bl	8000454 <__aeabi_ui2d>
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <APRV_Mode_One_Time_Task+0x22c>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	eeb0 2a47 	vmov.f32	s4, s14
 80012f0:	eef0 2a67 	vmov.f32	s5, s15
 80012f4:	ec41 0b11 	vmov	d1, r0, r1
 80012f8:	ec45 4b10 	vmov	d0, r4, r5
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <APRV_Mode_One_Time_Task+0x220>)
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <APRV_Mode_One_Time_Task+0x230>)
 8001300:	4926      	ldr	r1, [pc, #152]	; (800139c <APRV_Mode_One_Time_Task+0x234>)
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001304:	f013 fa4c 	bl	80147a0 <PID>
			PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001308:	2101      	movs	r1, #1
 800130a:	4825      	ldr	r0, [pc, #148]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 800130c:	f013 fb7e 	bl	8014a0c <PID_SetMode>

			PID_SetSampleTime(&TPID, Time);
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <APRV_Mode_One_Time_Task+0x23c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4822      	ldr	r0, [pc, #136]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001318:	f013 fcf4 	bl	8014d04 <PID_SetSampleTime>
			PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <APRV_Mode_One_Time_Task+0x240>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f897 	bl	8000454 <__aeabi_ui2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <APRV_Mode_One_Time_Task+0x244>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f890 	bl	8000454 <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	ec43 2b11 	vmov	d1, r2, r3
 800133c:	ec45 4b10 	vmov	d0, r4, r5
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <APRV_Mode_One_Time_Task+0x238>)
 8001342:	f013 fb81 	bl	8014a48 <PID_SetOutputLimits>

			P1.P_HIGH_TIMER =P1.T_HIGH_VAL;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 8001348:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 800134c:	875a      	strh	r2, [r3, #58]	; 0x3a
			vol.Volume = 0;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <APRV_Mode_One_Time_Task+0x250>)
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
			vTaskDelay(P1.T_HIGH_VAL);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <APRV_Mode_One_Time_Task+0x218>)
 8001358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800135a:	4618      	mov	r0, r3
 800135c:	f01e fa86 	bl	801f86c <vTaskDelay>
		if(P_LOW_TIME==1)
 8001360:	e706      	b.n	8001170 <APRV_Mode_One_Time_Task+0x8>
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	40007400 	.word	0x40007400
 800136c:	20000048 	.word	0x20000048
 8001370:	40001800 	.word	0x40001800
 8001374:	200002f0 	.word	0x200002f0
 8001378:	200002ec 	.word	0x200002ec
 800137c:	20016e59 	.word	0x20016e59
 8001380:	20016960 	.word	0x20016960
 8001384:	20016a10 	.word	0x20016a10
 8001388:	20016e80 	.word	0x20016e80
 800138c:	20000136 	.word	0x20000136
 8001390:	20000137 	.word	0x20000137
 8001394:	20000138 	.word	0x20000138
 8001398:	20016a18 	.word	0x20016a18
 800139c:	20016a98 	.word	0x20016a98
 80013a0:	200169a0 	.word	0x200169a0
 80013a4:	20000140 	.word	0x20000140
 80013a8:	2000012e 	.word	0x2000012e
 80013ac:	20000130 	.word	0x20000130
 80013b0:	20000feb 	.word	0x20000feb
 80013b4:	40020400 	.word	0x40020400
 80013b8:	20016d44 	.word	0x20016d44

080013bc <APRV_PARAMETERS>:
	}

}

void APRV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
	     P1.P_HIGH = RX_PARAM_CMD_PACKET->_PIP;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	791a      	ldrb	r2, [r3, #4]
 80013c8:	4bb0      	ldr	r3, [pc, #704]	; (800168c <APRV_PARAMETERS+0x2d0>)
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	     P1.P_LOW = RX_PARAM_CMD_PACKET->_PEEP;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	795a      	ldrb	r2, [r3, #5]
 80013d2:	4bae      	ldr	r3, [pc, #696]	; (800168c <APRV_PARAMETERS+0x2d0>)
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		 P1.T_HIGH=(RX_PARAM_CMD_PACKET->_T_HIGH);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7bda      	ldrb	r2, [r3, #15]
 80013dc:	4bab      	ldr	r3, [pc, #684]	; (800168c <APRV_PARAMETERS+0x2d0>)
 80013de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		 P1.T_HIGH_VAL=(P1.T_HIGH*100);
 80013e2:	4baa      	ldr	r3, [pc, #680]	; (800168c <APRV_PARAMETERS+0x2d0>)
 80013e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	0091      	lsls	r1, r2, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001400:	85da      	strh	r2, [r3, #46]	; 0x2e
		 P1.P_HIGH_TIMER =P1.T_HIGH_VAL;
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001404:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001406:	4ba1      	ldr	r3, [pc, #644]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001408:	875a      	strh	r2, [r3, #58]	; 0x3a

		 P1.T_LOW=(RX_PARAM_CMD_PACKET->_FlowRate);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7b1a      	ldrb	r2, [r3, #12]
 800140e:	4b9f      	ldr	r3, [pc, #636]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		 P1.T_LOW_VAL=(P1.T_LOW*100);
 8001414:	4b9d      	ldr	r3, [pc, #628]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4413      	add	r3, r2
 8001422:	461a      	mov	r2, r3
 8001424:	0091      	lsls	r1, r2, #2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b96      	ldr	r3, [pc, #600]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001432:	865a      	strh	r2, [r3, #50]	; 0x32

		 P1.P_LOW_TIMER =P1.T_LOW_VAL;
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <APRV_PARAMETERS+0x2d0>)
 8001436:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8001438:	4b94      	ldr	r3, [pc, #592]	; (800168c <APRV_PARAMETERS+0x2d0>)
 800143a:	879a      	strh	r2, [r3, #60]	; 0x3c
		 P_LOW_TIME=1;
 800143c:	4b94      	ldr	r3, [pc, #592]	; (8001690 <APRV_PARAMETERS+0x2d4>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
		 P_HIGH_TIME=0;
 8001442:	4b94      	ldr	r3, [pc, #592]	; (8001694 <APRV_PARAMETERS+0x2d8>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

		 P1._Apnea_counter_trigger_check_time=1000;
 8001448:	4b90      	ldr	r3, [pc, #576]	; (800168c <APRV_PARAMETERS+0x2d0>)
 800144a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144e:	809a      	strh	r2, [r3, #4]
		 P1._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT)>>4;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b9b      	ldrb	r3, [r3, #14]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	b2db      	uxtb	r3, r3
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b8c      	ldr	r3, [pc, #560]	; (800168c <APRV_PARAMETERS+0x2d0>)
 800145c:	80da      	strh	r2, [r3, #6]
		 P1._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7b9b      	ldrb	r3, [r3, #14]
 8001462:	b29b      	uxth	r3, r3
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b88      	ldr	r3, [pc, #544]	; (800168c <APRV_PARAMETERS+0x2d0>)
 800146c:	811a      	strh	r2, [r3, #8]


		 Initial_open_valve=1;
 800146e:	4b8a      	ldr	r3, [pc, #552]	; (8001698 <APRV_PARAMETERS+0x2dc>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		 Alert_error_count=0;
 8001474:	4b89      	ldr	r3, [pc, #548]	; (800169c <APRV_PARAMETERS+0x2e0>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]


		 Dac1=300;
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <APRV_PARAMETERS+0x2e4>)
 800147c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001480:	801a      	strh	r2, [r3, #0]
		 Dac2=2000;
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <APRV_PARAMETERS+0x2e8>)
 8001484:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001488:	801a      	strh	r2, [r3, #0]
		 kp=10;
 800148a:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <APRV_PARAMETERS+0x2ec>)
 800148c:	220a      	movs	r2, #10
 800148e:	701a      	strb	r2, [r3, #0]
		 ki=9;
 8001490:	4b86      	ldr	r3, [pc, #536]	; (80016ac <APRV_PARAMETERS+0x2f0>)
 8001492:	2209      	movs	r2, #9
 8001494:	701a      	strb	r2, [r3, #0]
		 kd=1;
 8001496:	4986      	ldr	r1, [pc, #536]	; (80016b0 <APRV_PARAMETERS+0x2f4>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <APRV_PARAMETERS+0x2f8>)
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
		 Time=50;
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <APRV_PARAMETERS+0x2fc>)
 80014a4:	2232      	movs	r2, #50	; 0x32
 80014a6:	601a      	str	r2, [r3, #0]
		 Speed=100;
 80014a8:	4b84      	ldr	r3, [pc, #528]	; (80016bc <APRV_PARAMETERS+0x300>)
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	601a      	str	r2, [r3, #0]

		 _Peep_Avg_count = 1;
 80014ae:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <APRV_PARAMETERS+0x304>)
 80014b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014b4:	601a      	str	r2, [r3, #0]
		 _Peep_Avg = 1;
 80014b6:	4b83      	ldr	r3, [pc, #524]	; (80016c4 <APRV_PARAMETERS+0x308>)
 80014b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014bc:	601a      	str	r2, [r3, #0]

		 _60_Seconds=60000;				//breath
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <APRV_PARAMETERS+0x30c>)
 80014c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80014c4:	801a      	strh	r2, [r3, #0]
		 now_check_breath=0;			//breath
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <APRV_PARAMETERS+0x310>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		 Breath=0;
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <APRV_PARAMETERS+0x314>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]

		 TempSetpoint = P1.P_LOW;
 80014d2:	4b6e      	ldr	r3, [pc, #440]	; (800168c <APRV_PARAMETERS+0x2d0>)
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffbb 	bl	8000454 <__aeabi_ui2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	497c      	ldr	r1, [pc, #496]	; (80016d4 <APRV_PARAMETERS+0x318>)
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
		 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <APRV_PARAMETERS+0x2ec>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffb1 	bl	8000454 <__aeabi_ui2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <APRV_PARAMETERS+0x2f0>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffaa 	bl	8000454 <__aeabi_ui2d>
 8001500:	4b6b      	ldr	r3, [pc, #428]	; (80016b0 <APRV_PARAMETERS+0x2f4>)
 8001502:	ed93 7b00 	vldr	d7, [r3]
 8001506:	2300      	movs	r3, #0
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2301      	movs	r3, #1
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	eeb0 2a47 	vmov.f32	s4, s14
 8001512:	eef0 2a67 	vmov.f32	s5, s15
 8001516:	ec41 0b11 	vmov	d1, r0, r1
 800151a:	ec45 4b10 	vmov	d0, r4, r5
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <APRV_PARAMETERS+0x318>)
 8001520:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <APRV_PARAMETERS+0x31c>)
 8001522:	496e      	ldr	r1, [pc, #440]	; (80016dc <APRV_PARAMETERS+0x320>)
 8001524:	486e      	ldr	r0, [pc, #440]	; (80016e0 <APRV_PARAMETERS+0x324>)
 8001526:	f013 f93b 	bl	80147a0 <PID>
		 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800152a:	2101      	movs	r1, #1
 800152c:	486c      	ldr	r0, [pc, #432]	; (80016e0 <APRV_PARAMETERS+0x324>)
 800152e:	f013 fa6d 	bl	8014a0c <PID_SetMode>

		 PID_SetSampleTime(&TPID, Time);
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <APRV_PARAMETERS+0x2fc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4869      	ldr	r0, [pc, #420]	; (80016e0 <APRV_PARAMETERS+0x324>)
 800153a:	f013 fbe3 	bl	8014d04 <PID_SetSampleTime>
		 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <APRV_PARAMETERS+0x2e4>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff86 	bl	8000454 <__aeabi_ui2d>
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <APRV_PARAMETERS+0x2e8>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff7f 	bl	8000454 <__aeabi_ui2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	ec43 2b11 	vmov	d1, r2, r3
 800155e:	ec45 4b10 	vmov	d0, r4, r5
 8001562:	485f      	ldr	r0, [pc, #380]	; (80016e0 <APRV_PARAMETERS+0x324>)
 8001564:	f013 fa70 	bl	8014a48 <PID_SetOutputLimits>


		 _Set_Peep=P1.P_LOW/2;
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <APRV_PARAMETERS+0x2d0>)
 800156a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <APRV_PARAMETERS+0x328>)
 800157c:	edc3 7a00 	vstr	s15, [r3]

		 lock=1;
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <APRV_PARAMETERS+0x32c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

		 Trigger_Count=0;
 8001586:	4b59      	ldr	r3, [pc, #356]	; (80016ec <APRV_PARAMETERS+0x330>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
		 ExpValve_CLOSE();
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <APRV_PARAMETERS+0x334>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <APRV_PARAMETERS+0x334>)
 8001592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001596:	6153      	str	r3, [r2, #20]

		 vTaskSuspend(pc_mode_Handler);
 8001598:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <APRV_PARAMETERS+0x338>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f01e f999 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_cmv_Pid_Handler);
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <APRV_PARAMETERS+0x33c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f01e f994 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Pc_simv_Mode_Handler);
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <APRV_PARAMETERS+0x340>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f01e f98f 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <APRV_PARAMETERS+0x344>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f01e f98a 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_mode_Handler);
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <APRV_PARAMETERS+0x348>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f01e f985 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_Pid_Handler);
 80015ca:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <APRV_PARAMETERS+0x34c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f01e f980 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_simv_mode_Handler);
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <APRV_PARAMETERS+0x350>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f01e f97b 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_simv_Pid_Handler);
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <APRV_PARAMETERS+0x354>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f01e f976 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Psv_Handler);
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <APRV_PARAMETERS+0x358>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f01e f971 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Psv_Pid_Handler);
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <APRV_PARAMETERS+0x35c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f01e f96c 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Cpap_Handler);
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <APRV_PARAMETERS+0x360>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f01e f967 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(BiPap_Handler);
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <APRV_PARAMETERS+0x364>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f01e f962 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(BiPap_Pid_Handler);
 8001610:	4b44      	ldr	r3, [pc, #272]	; (8001724 <APRV_PARAMETERS+0x368>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f01e f95d 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <APRV_PARAMETERS+0x36c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f01e f958 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <APRV_PARAMETERS+0x370>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f01e f953 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800162e:	4b40      	ldr	r3, [pc, #256]	; (8001730 <APRV_PARAMETERS+0x374>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f01e f94e 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <APRV_PARAMETERS+0x378>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f01e f949 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(One_Time_Handler);
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <APRV_PARAMETERS+0x37c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f01e f944 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Oxygen_Handler);
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <APRV_PARAMETERS+0x380>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f01e f93f 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(HFNC_Handler);
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <APRV_PARAMETERS+0x384>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f01e f93a 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Suction_Handler);
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <APRV_PARAMETERS+0x388>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f01e f935 	bl	801f8d4 <vTaskSuspend>

		 vTaskResume(APRV_one_Handler);
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <APRV_PARAMETERS+0x38c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f01e f9f4 	bl	801fa5c <vTaskResume>
		 vTaskResume(APRV_Handler);
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <APRV_PARAMETERS+0x390>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f01e f9ef 	bl	801fa5c <vTaskResume>

		 _CurrentMode = APRV;
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <APRV_PARAMETERS+0x394>)
 8001680:	2205      	movs	r2, #5
 8001682:	701a      	strb	r2, [r3, #0]
		 _CurrentBackupMode = IdleState;
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <APRV_PARAMETERS+0x398>)
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e065      	b.n	8001758 <APRV_PARAMETERS+0x39c>
 800168c:	20016960 	.word	0x20016960
 8001690:	20000000 	.word	0x20000000
 8001694:	200002f0 	.word	0x200002f0
 8001698:	20000044 	.word	0x20000044
 800169c:	20000308 	.word	0x20000308
 80016a0:	2000012e 	.word	0x2000012e
 80016a4:	20000130 	.word	0x20000130
 80016a8:	20000136 	.word	0x20000136
 80016ac:	20000137 	.word	0x20000137
 80016b0:	20000138 	.word	0x20000138
 80016b4:	3ff00000 	.word	0x3ff00000
 80016b8:	20000140 	.word	0x20000140
 80016bc:	20000144 	.word	0x20000144
 80016c0:	20016888 	.word	0x20016888
 80016c4:	20016ccc 	.word	0x20016ccc
 80016c8:	20000fe8 	.word	0x20000fe8
 80016cc:	20000feb 	.word	0x20000feb
 80016d0:	20000fea 	.word	0x20000fea
 80016d4:	20016e80 	.word	0x20016e80
 80016d8:	20016a18 	.word	0x20016a18
 80016dc:	20016a98 	.word	0x20016a98
 80016e0:	200169a0 	.word	0x200169a0
 80016e4:	20016a78 	.word	0x20016a78
 80016e8:	20016a10 	.word	0x20016a10
 80016ec:	200168b4 	.word	0x200168b4
 80016f0:	40020400 	.word	0x40020400
 80016f4:	20016a84 	.word	0x20016a84
 80016f8:	20016a28 	.word	0x20016a28
 80016fc:	20016e60 	.word	0x20016e60
 8001700:	20016e8c 	.word	0x20016e8c
 8001704:	20016d78 	.word	0x20016d78
 8001708:	2001695c 	.word	0x2001695c
 800170c:	20016c44 	.word	0x20016c44
 8001710:	20016ad0 	.word	0x20016ad0
 8001714:	20016bf0 	.word	0x20016bf0
 8001718:	20016a74 	.word	0x20016a74
 800171c:	20016bb8 	.word	0x20016bb8
 8001720:	20016a24 	.word	0x20016a24
 8001724:	20016878 	.word	0x20016878
 8001728:	20016bcc 	.word	0x20016bcc
 800172c:	20016d3c 	.word	0x20016d3c
 8001730:	20016d7c 	.word	0x20016d7c
 8001734:	20016a7c 	.word	0x20016a7c
 8001738:	20016d40 	.word	0x20016d40
 800173c:	20016958 	.word	0x20016958
 8001740:	20016a20 	.word	0x20016a20
 8001744:	20016e5c 	.word	0x20016e5c
 8001748:	20016bc8 	.word	0x20016bc8
 800174c:	20016c00 	.word	0x20016c00
 8001750:	20016c04 	.word	0x20016c04
 8001754:	2000012c 	.word	0x2000012c

}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bdb0      	pop	{r4, r5, r7, pc}

08001760 <Peep_E_Valve_Lock_delay_APRV>:

void Peep_E_Valve_Lock_delay_APRV()
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0


		_Peep_Avg_val = _Peep_Avg / _Peep_Avg_count;
 8001764:	4b90      	ldr	r3, [pc, #576]	; (80019a8 <Peep_E_Valve_Lock_delay_APRV+0x248>)
 8001766:	edd3 6a00 	vldr	s13, [r3]
 800176a:	4b90      	ldr	r3, [pc, #576]	; (80019ac <Peep_E_Valve_Lock_delay_APRV+0x24c>)
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <Peep_E_Valve_Lock_delay_APRV+0x250>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
		_Peep_Avg_val_int = _Peep_Avg_val;
 800177a:	4b8d      	ldr	r3, [pc, #564]	; (80019b0 <Peep_E_Valve_Lock_delay_APRV+0x250>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001784:	ee17 2a90 	vmov	r2, s15
 8001788:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 800178a:	601a      	str	r2, [r3, #0]
		}*/
		//peep_max=0;



		if (_Peep_Avg_val_int > (P1.P_LOW+8) )
 800178c:	4b8a      	ldr	r3, [pc, #552]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	f103 0208 	add.w	r2, r3, #8
 8001796:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	da33      	bge.n	8001806 <Peep_E_Valve_Lock_delay_APRV+0xa6>
		{
			_Set_Peep = _Set_Peep - 1.5f;
 800179e:	4b87      	ldr	r3, [pc, #540]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80017a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ac:	4b83      	ldr	r3, [pc, #524]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
		    error_count++;
 80017b2:	4b83      	ldr	r3, [pc, #524]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a81      	ldr	r2, [pc, #516]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80017ba:	6013      	str	r3, [r2, #0]
			if (error_count > 0)
 80017bc:	4b80      	ldr	r3, [pc, #512]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd11      	ble.n	80017e8 <Peep_E_Valve_Lock_delay_APRV+0x88>
			{
				Lock_delay = Lock_delay + 30;
 80017c4:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	331e      	adds	r3, #30
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80017ce:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 80017d0:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
				if (Lock_delay > 500)
 80017d6:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017de:	d903      	bls.n	80017e8 <Peep_E_Valve_Lock_delay_APRV+0x88>
					Lock_delay = 500;
 80017e0:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80017e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017e6:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep <= 3)
 80017e8:	4b74      	ldr	r3, [pc, #464]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	f200 8188 	bhi.w	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = 3;
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 8001800:	4a71      	ldr	r2, [pc, #452]	; (80019c8 <Peep_E_Valve_Lock_delay_APRV+0x268>)
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e183      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			}
		}



		else if( (_Peep_Avg_val_int > (P1.P_LOW+2))  && (_Peep_Avg_val_int <= (P1.P_LOW+8)) )
 8001806:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180c:	1c9a      	adds	r2, r3, #2
 800180e:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	da3c      	bge.n	8001890 <Peep_E_Valve_Lock_delay_APRV+0x130>
 8001816:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 8001818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181c:	f103 0208 	add.w	r2, r3, #8
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	db33      	blt.n	8001890 <Peep_E_Valve_Lock_delay_APRV+0x130>
		{
			_Set_Peep = _Set_Peep - 1;
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
			error_count++;
 800183c:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a5f      	ldr	r2, [pc, #380]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 8001844:	6013      	str	r3, [r2, #0]
			if (error_count > 0)
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd11      	ble.n	8001872 <Peep_E_Valve_Lock_delay_APRV+0x112>
			{
				Lock_delay = Lock_delay + 20;
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	3314      	adds	r3, #20
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001858:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 800185a:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
				if (Lock_delay > 500)
 8001860:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001868:	d903      	bls.n	8001872 <Peep_E_Valve_Lock_delay_APRV+0x112>
					Lock_delay = 500;
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 800186c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001870:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep <= 3)
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800187c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	f200 8143 	bhi.w	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = 3;
 8001888:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800188a:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <Peep_E_Valve_Lock_delay_APRV+0x268>)
 800188c:	601a      	str	r2, [r3, #0]
			if (_Set_Peep <= 3)
 800188e:	e13e      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			}
		}


		else if( (_Peep_Avg_val_int > (P1.P_LOW))  && (_Peep_Avg_val_int <= (P1.P_LOW+2)) )
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 8001892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001896:	461a      	mov	r2, r3
 8001898:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	da3b      	bge.n	8001918 <Peep_E_Valve_Lock_delay_APRV+0x1b8>
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 80018a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a6:	1c9a      	adds	r2, r3, #2
 80018a8:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	db33      	blt.n	8001918 <Peep_E_Valve_Lock_delay_APRV+0x1b8>
		{
			_Set_Peep = _Set_Peep - 0.5f;
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
			error_count++;
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80018cc:	6013      	str	r3, [r2, #0]
			if (error_count > 0)
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	dd11      	ble.n	80018fa <Peep_E_Valve_Lock_delay_APRV+0x19a>
			{
				Lock_delay = Lock_delay + 10;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	330a      	adds	r3, #10
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80018e0:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
				if (Lock_delay > 500)
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018f0:	d903      	bls.n	80018fa <Peep_E_Valve_Lock_delay_APRV+0x19a>
					Lock_delay = 500;
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 80018f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018f8:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep <= 3)
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	f200 80ff 	bhi.w	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = 3;
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 8001912:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <Peep_E_Valve_Lock_delay_APRV+0x268>)
 8001914:	601a      	str	r2, [r3, #0]
			if (_Set_Peep <= 3)
 8001916:	e0fa      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			}
		}
		else if (_Peep_Avg_val_int < (P1.P_LOW -8))
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 800191a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191e:	f1a3 0208 	sub.w	r2, r3, #8
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <Peep_E_Valve_Lock_delay_APRV+0x254>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	dd52      	ble.n	80019d0 <Peep_E_Valve_Lock_delay_APRV+0x270>
		{
			_Set_Peep = _Set_Peep + 1.5;
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800193a:	edc3 7a00 	vstr	s15, [r3]

			error_count2++;
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <Peep_E_Valve_Lock_delay_APRV+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <Peep_E_Valve_Lock_delay_APRV+0x26c>)
 8001946:	6013      	str	r3, [r2, #0]
			if (error_count2 > 0)
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <Peep_E_Valve_Lock_delay_APRV+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd14      	ble.n	800197a <Peep_E_Valve_Lock_delay_APRV+0x21a>
			{
				Lock_delay = Lock_delay - 30;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	3b1e      	subs	r3, #30
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 800195a:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <Peep_E_Valve_Lock_delay_APRV+0x260>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
				if (Lock_delay < 1 || Lock_delay > 500)
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <Peep_E_Valve_Lock_delay_APRV+0x214>
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001972:	d902      	bls.n	800197a <Peep_E_Valve_Lock_delay_APRV+0x21a>
					Lock_delay = 1;
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <Peep_E_Valve_Lock_delay_APRV+0x264>)
 8001976:	2201      	movs	r2, #1
 8001978:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep > (P1.P_LOW + 10))
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <Peep_E_Valve_Lock_delay_APRV+0x258>)
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	330a      	adds	r3, #10
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	f140 80b9 	bpl.w	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = _Set_Peep;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <Peep_E_Valve_Lock_delay_APRV+0x25c>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e0b3      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
 80019a6:	bf00      	nop
 80019a8:	20016ccc 	.word	0x20016ccc
 80019ac:	20016888 	.word	0x20016888
 80019b0:	20016ec4 	.word	0x20016ec4
 80019b4:	20016a14 	.word	0x20016a14
 80019b8:	20016960 	.word	0x20016960
 80019bc:	20016a78 	.word	0x20016a78
 80019c0:	20016bd0 	.word	0x20016bd0
 80019c4:	20016d92 	.word	0x20016d92
 80019c8:	40400000 	.word	0x40400000
 80019cc:	20016b60 	.word	0x20016b60
			}
		}
		else if ((_Peep_Avg_val_int >= (P1.P_LOW -8)) && (_Peep_Avg_val_int < (P1.P_LOW-2)))
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 80019d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d6:	f1a3 0208 	sub.w	r2, r3, #8
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <Peep_E_Valve_Lock_delay_APRV+0x3cc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dc44      	bgt.n	8001a6c <Peep_E_Valve_Lock_delay_APRV+0x30c>
 80019e2:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	1e9a      	subs	r2, r3, #2
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <Peep_E_Valve_Lock_delay_APRV+0x3cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dd3c      	ble.n	8001a6c <Peep_E_Valve_Lock_delay_APRV+0x30c>
		{
			_Set_Peep = _Set_Peep + 1;
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]

			error_count2++;
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001a0e:	6013      	str	r3, [r2, #0]
			if (error_count2 > 0)
 8001a10:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dd14      	ble.n	8001a42 <Peep_E_Valve_Lock_delay_APRV+0x2e2>
			{
				Lock_delay = Lock_delay - 20;
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	3b14      	subs	r3, #20
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001a22:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 8001a24:	4b45      	ldr	r3, [pc, #276]	; (8001b3c <Peep_E_Valve_Lock_delay_APRV+0x3dc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
				if (Lock_delay < 1 || Lock_delay > 700)
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <Peep_E_Valve_Lock_delay_APRV+0x2dc>
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001a3a:	d902      	bls.n	8001a42 <Peep_E_Valve_Lock_delay_APRV+0x2e2>
					Lock_delay = 1;
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep > (P1.P_LOW + 10))
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	330a      	adds	r3, #10
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d555      	bpl.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = _Set_Peep;
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a68:	6013      	str	r3, [r2, #0]
			if (_Set_Peep > (P1.P_LOW + 10))
 8001a6a:	e050      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			}
		}


		else if ((_Peep_Avg_val_int >= (P1.P_LOW -2)) && (_Peep_Avg_val_int < (P1.P_LOW)))
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 8001a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a72:	1e9a      	subs	r2, r3, #2
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <Peep_E_Valve_Lock_delay_APRV+0x3cc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dc44      	bgt.n	8001b06 <Peep_E_Valve_Lock_delay_APRV+0x3a6>
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 8001a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <Peep_E_Valve_Lock_delay_APRV+0x3cc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dd3c      	ble.n	8001b06 <Peep_E_Valve_Lock_delay_APRV+0x3a6>
		{
			_Set_Peep = _Set_Peep + 0.5f;
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]

			error_count2++;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001aa8:	6013      	str	r3, [r2, #0]
			if (error_count2 > 0)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <Peep_E_Valve_Lock_delay_APRV+0x3d4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dd14      	ble.n	8001adc <Peep_E_Valve_Lock_delay_APRV+0x37c>
			{
				Lock_delay = Lock_delay - 10;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	3b0a      	subs	r3, #10
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001abc:	801a      	strh	r2, [r3, #0]
				error_count = 0;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <Peep_E_Valve_Lock_delay_APRV+0x3dc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
				if (Lock_delay < 1 || Lock_delay > 500)
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <Peep_E_Valve_Lock_delay_APRV+0x376>
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ad4:	d902      	bls.n	8001adc <Peep_E_Valve_Lock_delay_APRV+0x37c>
					Lock_delay = 1;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <Peep_E_Valve_Lock_delay_APRV+0x3d8>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	801a      	strh	r2, [r3, #0]
			}
			if (_Set_Peep > (P1.P_LOW + 10))
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <Peep_E_Valve_Lock_delay_APRV+0x3c8>)
 8001ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae2:	330a      	adds	r3, #10
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	d508      	bpl.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>
			{
				_Set_Peep = _Set_Peep;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001b02:	6013      	str	r3, [r2, #0]
			if (_Set_Peep > (P1.P_LOW + 10))
 8001b04:	e003      	b.n	8001b0e <Peep_E_Valve_Lock_delay_APRV+0x3ae>



		else
		{
			_Set_Peep = _Set_Peep;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <Peep_E_Valve_Lock_delay_APRV+0x3d0>)
 8001b0c:	6013      	str	r3, [r2, #0]
		}
		_Peep_Avg_count = 1;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <Peep_E_Valve_Lock_delay_APRV+0x3e0>)
 8001b10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b14:	601a      	str	r2, [r3, #0]
		_Peep_Avg = 1;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <Peep_E_Valve_Lock_delay_APRV+0x3e4>)
 8001b18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	20016960 	.word	0x20016960
 8001b2c:	20016a14 	.word	0x20016a14
 8001b30:	20016a78 	.word	0x20016a78
 8001b34:	20016b60 	.word	0x20016b60
 8001b38:	20016d92 	.word	0x20016d92
 8001b3c:	20016bd0 	.word	0x20016bd0
 8001b40:	20016888 	.word	0x20016888
 8001b44:	20016ccc 	.word	0x20016ccc

08001b48 <COMMAND_HANDLER_ALERT>:
float Total_Tidal_volume=0;
int volume_alert_check=0;
int Total_Tidal_volume_int=0;

void COMMAND_HANDLER_ALERT(ALERT_RANGE_PACKET *RX_ALERT_RANGE_PACKET)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]


	AR._RANGE_MODE_Val = RX_ALERT_RANGE_PACKET->_RANGE_MODE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	78da      	ldrb	r2, [r3, #3]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b56:	701a      	strb	r2, [r3, #0]
	AR._RANGE_VT_MIN_Val= (RX_ALERT_RANGE_PACKET->_RANGE_VT_MIN)*10;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b6a:	805a      	strh	r2, [r3, #2]
	AR._RANGE_VT_MAX_Val= (RX_ALERT_RANGE_PACKET->_RANGE_VT_MAX)*10;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	795b      	ldrb	r3, [r3, #5]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b7e:	809a      	strh	r2, [r3, #4]
	AR._RANGE_PIP_MIN_Val=RX_ALERT_RANGE_PACKET->_RANGE_PIP_MIN;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	799a      	ldrb	r2, [r3, #6]
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b86:	719a      	strb	r2, [r3, #6]
	AR._RANGE_PIP_MAX_Val=RX_ALERT_RANGE_PACKET->_RANGE_PIP_MAX;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	79da      	ldrb	r2, [r3, #7]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b8e:	71da      	strb	r2, [r3, #7]
	AR._RANGE_RR_MIN_Val=RX_ALERT_RANGE_PACKET->_RANGE_RR_MIN;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7a1a      	ldrb	r2, [r3, #8]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b96:	721a      	strb	r2, [r3, #8]
	AR._RANGE_RR_MAX_Val=RX_ALERT_RANGE_PACKET->_RANGE_RR_MAX;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7a5a      	ldrb	r2, [r3, #9]
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001b9e:	725a      	strb	r2, [r3, #9]
	AR._RANGE_MINT_VOL_MIN_Val=(RX_ALERT_RANGE_PACKET->_RANGE_MINT_VOL_MIN);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7a9b      	ldrb	r3, [r3, #10]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001ba8:	815a      	strh	r2, [r3, #10]
	AR._RANGE_MINT_VOL_MAX_Val=(RX_ALERT_RANGE_PACKET->_RANGE_MINT_VOL_MAX);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7adb      	ldrb	r3, [r3, #11]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001bb2:	819a      	strh	r2, [r3, #12]
	AR._RANGE_SPO2_MIN_Val=RX_ALERT_RANGE_PACKET->_RANGE_SPO2_MIN;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b1a      	ldrb	r2, [r3, #12]
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001bba:	739a      	strb	r2, [r3, #14]
	AR._RANGE_SPO2_MAX_Val=RX_ALERT_RANGE_PACKET->_RANGE_SPO2_MAX;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b5a      	ldrb	r2, [r3, #13]
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001bc2:	73da      	strb	r2, [r3, #15]
	AR._RANGE_PULSE_MIN_Val=RX_ALERT_RANGE_PACKET->_RANGE_PULSE_MIN;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7b9a      	ldrb	r2, [r3, #14]
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001bca:	741a      	strb	r2, [r3, #16]
	AR._RANGE_PULSE_MAX_Val=RX_ALERT_RANGE_PACKET->_RANGE_PULSE_MAX;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7bda      	ldrb	r2, [r3, #15]
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <COMMAND_HANDLER_ALERT+0x98>)
 8001bd2:	745a      	strb	r2, [r3, #17]

}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20016d80 	.word	0x20016d80

08001be4 <Battery_Information>:



void Battery_Information()
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
			Bat_Avg_val = Bat_Avg / Bat_Avg_count;
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <Battery_Information+0x88>)
 8001bec:	edd3 6a00 	vldr	s13, [r3]
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <Battery_Information+0x8c>)
 8001bf2:	ed93 7a00 	vldr	s14, [r3]
 8001bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <Battery_Information+0x90>)
 8001bfc:	edc3 7a00 	vstr	s15, [r3]
	        battery_new = Bat_Avg_val;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <Battery_Information+0x90>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <Battery_Information+0x94>)
 8001c14:	701a      	strb	r2, [r3, #0]

	    if( Mode_Not_Start!=0)
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <Battery_Information+0x98>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00f      	beq.n	8001c3e <Battery_Information+0x5a>
	    {
	        if(battery_new>battery_old)
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <Battery_Information+0x94>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <Battery_Information+0x9c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d904      	bls.n	8001c34 <Battery_Information+0x50>
	        {
	        	battery=battery_old;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <Battery_Information+0x9c>)
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <Battery_Information+0xa0>)
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	e008      	b.n	8001c46 <Battery_Information+0x62>
	        }
	        else
	        {
	        	battery=battery_new;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <Battery_Information+0x94>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <Battery_Information+0xa0>)
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e003      	b.n	8001c46 <Battery_Information+0x62>
	        }
	    }
	    else
	    {
	    	battery=battery_new;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <Battery_Information+0x94>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <Battery_Information+0xa0>)
 8001c44:	701a      	strb	r2, [r3, #0]
	    }
	        battery_old=battery_new;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <Battery_Information+0x94>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <Battery_Information+0x9c>)
 8001c4c:	701a      	strb	r2, [r3, #0]
			Bat_Avg = 2;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <Battery_Information+0x88>)
 8001c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c54:	601a      	str	r2, [r3, #0]
			Bat_Avg_count = 1;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <Battery_Information+0x8c>)
 8001c58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20016e54 	.word	0x20016e54
 8001c70:	20016a70 	.word	0x20016a70
 8001c74:	20016904 	.word	0x20016904
 8001c78:	20016bc6 	.word	0x20016bc6
 8001c7c:	20016ce4 	.word	0x20016ce4
 8001c80:	20016900 	.word	0x20016900
 8001c84:	20016e58 	.word	0x20016e58

08001c88 <SEND_ALERT_PACKET>:

void SEND_ALERT_PACKET()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

	     data_request_Check();
 8001c8c:	f000 fc36 	bl	80024fc <data_request_Check>
	     if( Mode_Not_Start!=0)
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <SEND_ALERT_PACKET+0x74>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SEND_ALERT_PACKET+0x14>
	     {
	    	 Battery_Information();
 8001c98:	f7ff ffa4 	bl	8001be4 <Battery_Information>
	     }
	     if(Trigger_Flag==1 || Trigger_Flag2==1)
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <SEND_ALERT_PACKET+0x78>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d003      	beq.n	8001cac <SEND_ALERT_PACKET+0x24>
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <SEND_ALERT_PACKET+0x7c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <SEND_ALERT_PACKET+0x28>
	     {
	    	 Clear_All_Alert_Bits();
 8001cac:	f00e fd0c 	bl	80106c8 <Clear_All_Alert_Bits>
	     }


	    _ALERT_RESPONSE_PKT.SEVENTH_FRAME_UN.FRAMEBits._ALERT_BATTERY_PERCENTAGE = battery ;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <SEND_ALERT_PACKET+0x80>)
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001cb6:	725a      	strb	r2, [r3, #9]
		_ALERT_RESPONSE_PKT._header=0x5054;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8001cc8:	705a      	strb	r2, [r3, #1]
		_ALERT_RESPONSE_PKT._length=8;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001ccc:	2208      	movs	r2, #8
 8001cce:	709a      	strb	r2, [r3, #2]
		_ALERT_RESPONSE_PKT._CRC8   = chksum8((unsigned char*)&_ALERT_RESPONSE_PKT.FIRST_FRAME_UN.FIRST_BYTES,_ALERT_RESPONSE_PKT_length);
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	480f      	ldr	r0, [pc, #60]	; (8001d10 <SEND_ALERT_PACKET+0x88>)
 8001cd4:	f00e fd66 	bl	80107a4 <chksum8>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001cde:	72da      	strb	r2, [r3, #11]
#if UART==6
		HAL_UART_Transmit(&huart6,(uint8_t*)&_ALERT_RESPONSE_PKT,sizeof(_ALERT_RESPONSE_PKT),300);
 8001ce0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	4909      	ldr	r1, [pc, #36]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <SEND_ALERT_PACKET+0x8c>)
 8001cea:	f018 fdfb 	bl	801a8e4 <HAL_UART_Transmit>
#endif
#if UART==5
		HAL_UART_Transmit_IT(&huart5,(uint8_t*)&_ALERT_RESPONSE_PKT,sizeof(_ALERT_RESPONSE_PKT));
#endif

		CDC_Transmit_FS((uint8_t*)&_ALERT_RESPONSE_PKT,sizeof(_ALERT_RESPONSE_PKT));
 8001cee:	210c      	movs	r1, #12
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <SEND_ALERT_PACKET+0x84>)
 8001cf2:	f01f fcb3 	bl	802165c <CDC_Transmit_FS>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20016ce4 	.word	0x20016ce4
 8001d00:	20016b38 	.word	0x20016b38
 8001d04:	20016d0c 	.word	0x20016d0c
 8001d08:	20016e58 	.word	0x20016e58
 8001d0c:	20016ea8 	.word	0x20016ea8
 8001d10:	20016eab 	.word	0x20016eab
 8001d14:	20016dac 	.word	0x20016dac

08001d18 <Alert_Task>:
void Alert_Task (void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	while(1)
	{

		if (S1._Mode_Val == 1 || S1._Mode_Val == 2 || S1._Mode_Val == 3 || S1._Mode_Val == 4 || _CurrentBackupMode == VCCMV_BACKUP ||_CurrentBackupMode == PCCMV_BACKUP ||    (R1.Assist_mode2==0 &&Trigger_Flag2==0 )  || (T1.Assist_mode==0 &&Trigger_Flag==0 ))
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <Alert_Task+0x64>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d023      	beq.n	8001d70 <Alert_Task+0x58>
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <Alert_Task+0x64>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d01f      	beq.n	8001d70 <Alert_Task+0x58>
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <Alert_Task+0x64>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d01b      	beq.n	8001d70 <Alert_Task+0x58>
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <Alert_Task+0x64>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d017      	beq.n	8001d70 <Alert_Task+0x58>
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <Alert_Task+0x68>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d013      	beq.n	8001d70 <Alert_Task+0x58>
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <Alert_Task+0x68>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00f      	beq.n	8001d70 <Alert_Task+0x58>
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <Alert_Task+0x6c>)
 8001d52:	7d9b      	ldrb	r3, [r3, #22]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <Alert_Task+0x48>
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <Alert_Task+0x70>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <Alert_Task+0x58>
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <Alert_Task+0x74>)
 8001d62:	7cdb      	ldrb	r3, [r3, #19]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <Alert_Task+0x5c>
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <Alert_Task+0x78>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <Alert_Task+0x5c>
		{
			Alert_Func();
 8001d70:	f000 f810 	bl	8001d94 <Alert_Func>
			Main_Supply_or_Battery_Indication();
		}*/



		vTaskDelay(2);
 8001d74:	2002      	movs	r0, #2
 8001d76:	f01d fd79 	bl	801f86c <vTaskDelay>
		if (S1._Mode_Val == 1 || S1._Mode_Val == 2 || S1._Mode_Val == 3 || S1._Mode_Val == 4 || _CurrentBackupMode == VCCMV_BACKUP ||_CurrentBackupMode == PCCMV_BACKUP ||    (R1.Assist_mode2==0 &&Trigger_Flag2==0 )  || (T1.Assist_mode==0 &&Trigger_Flag==0 ))
 8001d7a:	e7d1      	b.n	8001d20 <Alert_Task+0x8>
 8001d7c:	20016ae0 	.word	0x20016ae0
 8001d80:	2000012c 	.word	0x2000012c
 8001d84:	20016c08 	.word	0x20016c08
 8001d88:	20016d0c 	.word	0x20016d0c
 8001d8c:	20016d10 	.word	0x20016d10
 8001d90:	20016b38 	.word	0x20016b38

08001d94 <Alert_Func>:
}



void Alert_Func()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	Battery_Alert_Func();
 8001d98:	f000 f84a 	bl	8001e30 <Battery_Alert_Func>

	if (_CurrentComputationState == Compute_E_Wave)
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <Alert_Func+0x88>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d123      	bne.n	8001dec <Alert_Func+0x58>
	{
		if (_E_TIMER < 500)
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <Alert_Func+0x8c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dac:	d21e      	bcs.n	8001dec <Alert_Func+0x58>
		{
			Main_Supply_or_Battery_Indication();
 8001dae:	f000 f88d 	bl	8001ecc <Main_Supply_or_Battery_Indication>
			if (A.Alert_check_done == 1)
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <Alert_Func+0x90>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d118      	bne.n	8001dec <Alert_Func+0x58>
			{
				if(Trigger_Flag==0 && Trigger_Flag2==0)
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <Alert_Func+0x94>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d114      	bne.n	8001dec <Alert_Func+0x58>
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <Alert_Func+0x98>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d110      	bne.n	8001dec <Alert_Func+0x58>
				{
					Pip_Alert_Func();
 8001dca:	f000 f899 	bl	8001f00 <Pip_Alert_Func>
					Peep_Alert_Func();
 8001dce:	f000 f8ed 	bl	8001fac <Peep_Alert_Func>
					Minite_Volume_Alert_Func();
 8001dd2:	f000 f941 	bl	8002058 <Minite_Volume_Alert_Func>
					Tidal_Volume_Alert_Func();
 8001dd6:	f000 f9a3 	bl	8002120 <Tidal_Volume_Alert_Func>
					Respiratory_Rate_Alert_Func();
 8001dda:	f000 f9f9 	bl	80021d0 <Respiratory_Rate_Alert_Func>
					Oxygen_Alert_Func();
 8001dde:	f000 fa6d 	bl	80022bc <Oxygen_Alert_Func>
					Leak_Alert_Func();
 8001de2:	f000 faf9 	bl	80023d8 <Leak_Alert_Func>
					A.Alert_check_done = 0;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <Alert_Func+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if (_CurrentComputationState == Compute_I_Wave)
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <Alert_Func+0x88>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d110      	bne.n	8001e16 <Alert_Func+0x82>
	{
		if(A.Wait_4_cycle<=1)
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <Alert_Func+0x90>)
 8001df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d80b      	bhi.n	8001e16 <Alert_Func+0x82>
		{
			if(Trigger_Flag==0 && Trigger_Flag2==0)
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <Alert_Func+0x94>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <Alert_Func+0x82>
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <Alert_Func+0x98>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <Alert_Func+0x82>
			{
				Patient_Circuit_Disconnected_Alert_Func();
 8001e0e:	f000 fb07 	bl	8002420 <Patient_Circuit_Disconnected_Alert_Func>
				Proximal_Flow_Sensor_Reverse_Direction();
 8001e12:	f000 fb47 	bl	80024a4 <Proximal_Flow_Sensor_Reverse_Direction>
			}

		}
	}
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20016cc8 	.word	0x20016cc8
 8001e20:	20016d74 	.word	0x20016d74
 8001e24:	20016a2c 	.word	0x20016a2c
 8001e28:	20016b38 	.word	0x20016b38
 8001e2c:	20016d0c 	.word	0x20016d0c

08001e30 <Battery_Alert_Func>:



void Battery_Alert_Func()
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(S1._Mode_Val!=0)
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <Battery_Alert_Func+0x80>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d037      	beq.n	8001eac <Battery_Alert_Func+0x7c>
	{
	   if(A.Wait_4_cycle<=1)
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <Battery_Alert_Func+0x84>)
 8001e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d832      	bhi.n	8001eac <Battery_Alert_Func+0x7c>
	   {
		if(battery_raw_value<2250)
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <Battery_Alert_Func+0x88>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d814      	bhi.n	8001e7c <Battery_Alert_Func+0x4c>
		{
			SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BAT_DRAIN);
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <Battery_Alert_Func+0x8c>)
 8001e54:	78d3      	ldrb	r3, [r2, #3]
 8001e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5a:	70d3      	strb	r3, [r2, #3]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <Battery_Alert_Func+0x90>)
 8001e60:	f014 ff39 	bl	8016cd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	4817      	ldr	r0, [pc, #92]	; (8001ec4 <Battery_Alert_Func+0x94>)
 8001e68:	f014 ff35 	bl	8016cd6 <HAL_GPIO_TogglePin>
			A.Alert=1;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <Battery_Alert_Func+0x84>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	709a      	strb	r2, [r3, #2]
			vTaskDelay(500);
 8001e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e76:	f01d fcf9 	bl	801f86c <vTaskDelay>
 8001e7a:	e00e      	b.n	8001e9a <Battery_Alert_Func+0x6a>
		}
		else
		{
			CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BAT_DRAIN);
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <Battery_Alert_Func+0x8c>)
 8001e7e:	78d3      	ldrb	r3, [r2, #3]
 8001e80:	f36f 1386 	bfc	r3, #6, #1
 8001e84:	70d3      	strb	r3, [r2, #3]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,1);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2102      	movs	r1, #2
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <Battery_Alert_Func+0x90>)
 8001e8c:	f014 ff0a 	bl	8016ca4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6,0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2140      	movs	r1, #64	; 0x40
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <Battery_Alert_Func+0x94>)
 8001e96:	f014 ff05 	bl	8016ca4 <HAL_GPIO_WritePin>
		}


		if(battery<50)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <Battery_Alert_Func+0x98>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b31      	cmp	r3, #49	; 0x31
 8001ea0:	d804      	bhi.n	8001eac <Battery_Alert_Func+0x7c>
		{
			SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_BAT_DRAIN_50_PERC);
 8001ea2:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <Battery_Alert_Func+0x8c>)
 8001ea4:	7993      	ldrb	r3, [r2, #6]
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	7193      	strb	r3, [r2, #6]
		}
	   }
	}
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20016ae0 	.word	0x20016ae0
 8001eb4:	20016a2c 	.word	0x20016a2c
 8001eb8:	20016ada 	.word	0x20016ada
 8001ebc:	20016ea8 	.word	0x20016ea8
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	20016e58 	.word	0x20016e58

08001ecc <Main_Supply_or_Battery_Indication>:

void Main_Supply_or_Battery_Indication()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))==1)
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <Main_Supply_or_Battery_Indication+0x2c>)
 8001ed4:	f014 fece 	bl	8016c74 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <Main_Supply_or_Battery_Indication+0x1e>
	{
		SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_POWER);
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <Main_Supply_or_Battery_Indication+0x30>)
 8001ee0:	78d3      	ldrb	r3, [r2, #3]
 8001ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee6:	70d3      	strb	r3, [r2, #3]
	}
	else
	{
		CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_POWER);
	}
}
 8001ee8:	e004      	b.n	8001ef4 <Main_Supply_or_Battery_Indication+0x28>
		CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_POWER);
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <Main_Supply_or_Battery_Indication+0x30>)
 8001eec:	78d3      	ldrb	r3, [r2, #3]
 8001eee:	f36f 13c7 	bfc	r3, #7, #1
 8001ef2:	70d3      	strb	r3, [r2, #3]
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	20016ea8 	.word	0x20016ea8

08001f00 <Pip_Alert_Func>:

void Pip_Alert_Func()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
				if (S5.P_Max > AR._RANGE_PIP_MIN_Val && S5.P_Max < AR._RANGE_PIP_MAX_Val)
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <Pip_Alert_Func+0x9c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <Pip_Alert_Func+0xa0>)
 8001f0a:	7992      	ldrb	r2, [r2, #6]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	dd0e      	ble.n	8001f2e <Pip_Alert_Func+0x2e>
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <Pip_Alert_Func+0x9c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <Pip_Alert_Func+0xa0>)
 8001f16:	79d2      	ldrb	r2, [r2, #7]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	da08      	bge.n	8001f2e <Pip_Alert_Func+0x2e>
				{
					CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_YN);
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <Pip_Alert_Func+0xa4>)
 8001f1e:	7913      	ldrb	r3, [r2, #4]
 8001f20:	f36f 03c3 	bfc	r3, #3, #1
 8001f24:	7113      	strb	r3, [r2, #4]
					A.Pip_Alert = 0;
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	705a      	strb	r2, [r3, #1]
							SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_HL);
							A.Pip_Alert = 0;
						}
					}
				}
}
 8001f2c:	e030      	b.n	8001f90 <Pip_Alert_Func+0x90>
					A.Pip_Alert++;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f38:	705a      	strb	r2, [r3, #1]
					if (A.Pip_Alert > 3)
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d926      	bls.n	8001f90 <Pip_Alert_Func+0x90>
						A.Alert = 1;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	709a      	strb	r2, [r3, #2]
						SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_YN);
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <Pip_Alert_Func+0xa4>)
 8001f4a:	7913      	ldrb	r3, [r2, #4]
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	7113      	strb	r3, [r2, #4]
						if (AR._RANGE_PIP_MIN_Val > S5.P_Max)
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <Pip_Alert_Func+0xa0>)
 8001f54:	799b      	ldrb	r3, [r3, #6]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <Pip_Alert_Func+0x9c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dd08      	ble.n	8001f72 <Pip_Alert_Func+0x72>
							CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_HL);
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <Pip_Alert_Func+0xa4>)
 8001f62:	7913      	ldrb	r3, [r2, #4]
 8001f64:	f36f 0382 	bfc	r3, #2, #1
 8001f68:	7113      	strb	r3, [r2, #4]
							A.Pip_Alert = 0;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	705a      	strb	r2, [r3, #1]
}
 8001f70:	e00e      	b.n	8001f90 <Pip_Alert_Func+0x90>
						else if (AR._RANGE_PIP_MAX_Val < S5.P_Max)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <Pip_Alert_Func+0xa0>)
 8001f74:	79db      	ldrb	r3, [r3, #7]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <Pip_Alert_Func+0x9c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	da07      	bge.n	8001f90 <Pip_Alert_Func+0x90>
							SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_HL);
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <Pip_Alert_Func+0xa4>)
 8001f82:	7913      	ldrb	r3, [r2, #4]
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	7113      	strb	r3, [r2, #4]
							A.Pip_Alert = 0;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <Pip_Alert_Func+0xa8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	705a      	strb	r2, [r3, #1]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20016df4 	.word	0x20016df4
 8001fa0:	20016d80 	.word	0x20016d80
 8001fa4:	20016ea8 	.word	0x20016ea8
 8001fa8:	20016a2c 	.word	0x20016a2c

08001fac <Peep_Alert_Func>:

void Peep_Alert_Func()
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

		if (S5._Peep_Avg_val_int < (A.PEEP_VAL+3)&& S5._Peep_Avg_val_int > (A.PEEP_VAL-3) )
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fb2:	795b      	ldrb	r3, [r3, #5]
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <Peep_Alert_Func+0xa4>)
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	db0f      	blt.n	8001fde <Peep_Alert_Func+0x32>
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fc0:	795b      	ldrb	r3, [r3, #5]
 8001fc2:	1e9a      	subs	r2, r3, #2
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <Peep_Alert_Func+0xa4>)
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dc08      	bgt.n	8001fde <Peep_Alert_Func+0x32>
		{
			CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_PEEP_YN);
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <Peep_Alert_Func+0xa8>)
 8001fce:	7953      	ldrb	r3, [r2, #5]
 8001fd0:	f36f 03c3 	bfc	r3, #3, #1
 8001fd4:	7153      	strb	r3, [r2, #5]
			A.Peep_Alert=0;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	719a      	strb	r2, [r3, #6]
				}
			}

		}

}
 8001fdc:	e030      	b.n	8002040 <Peep_Alert_Func+0x94>
			A.Peep_Alert++;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fe0:	799b      	ldrb	r3, [r3, #6]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fe8:	719a      	strb	r2, [r3, #6]
			if(A.Peep_Alert>3)
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <Peep_Alert_Func+0xa0>)
 8001fec:	799b      	ldrb	r3, [r3, #6]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d926      	bls.n	8002040 <Peep_Alert_Func+0x94>
				A.Alert=1;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <Peep_Alert_Func+0xa0>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	709a      	strb	r2, [r3, #2]
				SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_PEEP_YN);
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <Peep_Alert_Func+0xa8>)
 8001ffa:	7953      	ldrb	r3, [r2, #5]
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	7153      	strb	r3, [r2, #5]
				if ((A.PEEP_VAL+3) > S5._Peep_Avg_val_int)
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <Peep_Alert_Func+0xa0>)
 8002004:	795b      	ldrb	r3, [r3, #5]
 8002006:	1c9a      	adds	r2, r3, #2
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <Peep_Alert_Func+0xa4>)
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	429a      	cmp	r2, r3
 800200e:	db08      	blt.n	8002022 <Peep_Alert_Func+0x76>
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_PEEP_HL);
 8002010:	4a10      	ldr	r2, [pc, #64]	; (8002054 <Peep_Alert_Func+0xa8>)
 8002012:	7953      	ldrb	r3, [r2, #5]
 8002014:	f36f 0382 	bfc	r3, #2, #1
 8002018:	7153      	strb	r3, [r2, #5]
					A.Peep_Alert=0;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <Peep_Alert_Func+0xa0>)
 800201c:	2200      	movs	r2, #0
 800201e:	719a      	strb	r2, [r3, #6]
}
 8002020:	e00e      	b.n	8002040 <Peep_Alert_Func+0x94>
				else if ((A.PEEP_VAL-3) < S5._Peep_Avg_val_int)
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <Peep_Alert_Func+0xa0>)
 8002024:	795b      	ldrb	r3, [r3, #5]
 8002026:	1e9a      	subs	r2, r3, #2
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <Peep_Alert_Func+0xa4>)
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	429a      	cmp	r2, r3
 800202e:	dc07      	bgt.n	8002040 <Peep_Alert_Func+0x94>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_PEEP_HL);
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <Peep_Alert_Func+0xa8>)
 8002032:	7953      	ldrb	r3, [r2, #5]
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	7153      	strb	r3, [r2, #5]
					A.Peep_Alert=0;
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <Peep_Alert_Func+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	719a      	strb	r2, [r3, #6]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20016a2c 	.word	0x20016a2c
 8002050:	20016df4 	.word	0x20016df4
 8002054:	20016ea8 	.word	0x20016ea8

08002058 <Minite_Volume_Alert_Func>:

void Minite_Volume_Alert_Func()
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
		}

	}*/


	   if( volume_alert_check==1)
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <Minite_Volume_Alert_Func+0xac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d14a      	bne.n	80020fa <Minite_Volume_Alert_Func+0xa2>
	   {

		   Total_Tidal_volume_int= (Total_Tidal_volume / 1000);
 8002064:	4b28      	ldr	r3, [pc, #160]	; (8002108 <Minite_Volume_Alert_Func+0xb0>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800210c <Minite_Volume_Alert_Func+0xb4>
 800206e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002076:	ee17 2a90 	vmov	r2, s15
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <Minite_Volume_Alert_Func+0xb8>)
 800207c:	601a      	str	r2, [r3, #0]

		if (Total_Tidal_volume_int > AR._RANGE_MINT_VOL_MIN_Val&& Total_Tidal_volume_int < AR._RANGE_MINT_VOL_MAX_Val)
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <Minite_Volume_Alert_Func+0xbc>)
 8002080:	895b      	ldrh	r3, [r3, #10]
 8002082:	461a      	mov	r2, r3
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <Minite_Volume_Alert_Func+0xb8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	da0f      	bge.n	80020ac <Minite_Volume_Alert_Func+0x54>
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <Minite_Volume_Alert_Func+0xbc>)
 800208e:	899b      	ldrh	r3, [r3, #12]
 8002090:	461a      	mov	r2, r3
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <Minite_Volume_Alert_Func+0xb8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	dd08      	ble.n	80020ac <Minite_Volume_Alert_Func+0x54>
		{
			CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_MINT_VOLUME_YN);
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <Minite_Volume_Alert_Func+0xc0>)
 800209c:	7913      	ldrb	r3, [r2, #4]
 800209e:	f36f 13c7 	bfc	r3, #7, #1
 80020a2:	7113      	strb	r3, [r2, #4]
			volume_alert_check=0;
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <Minite_Volume_Alert_Func+0xac>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
				}
			}

		}

}
 80020aa:	e026      	b.n	80020fa <Minite_Volume_Alert_Func+0xa2>
				A.Alert=1;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <Minite_Volume_Alert_Func+0xc4>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	709a      	strb	r2, [r3, #2]
				SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_MINT_VOLUME_YN);
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <Minite_Volume_Alert_Func+0xc0>)
 80020b4:	7913      	ldrb	r3, [r2, #4]
 80020b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ba:	7113      	strb	r3, [r2, #4]
				if (AR._RANGE_MINT_VOL_MIN_Val > Total_Tidal_volume_int)
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <Minite_Volume_Alert_Func+0xbc>)
 80020be:	895b      	ldrh	r3, [r3, #10]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <Minite_Volume_Alert_Func+0xb8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dd08      	ble.n	80020dc <Minite_Volume_Alert_Func+0x84>
					CLEAR_ALERT_BIT(SECOND_FRAME_UN,_ALERT_MINT_VOLUME_HL);
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <Minite_Volume_Alert_Func+0xc0>)
 80020cc:	7913      	ldrb	r3, [r2, #4]
 80020ce:	f36f 1386 	bfc	r3, #6, #1
 80020d2:	7113      	strb	r3, [r2, #4]
					volume_alert_check=0;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <Minite_Volume_Alert_Func+0xac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	e00e      	b.n	80020fa <Minite_Volume_Alert_Func+0xa2>
				else if (AR._RANGE_MINT_VOL_MAX_Val < Total_Tidal_volume_int)
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <Minite_Volume_Alert_Func+0xbc>)
 80020de:	899b      	ldrh	r3, [r3, #12]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <Minite_Volume_Alert_Func+0xb8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	da07      	bge.n	80020fa <Minite_Volume_Alert_Func+0xa2>
					SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_MINT_VOLUME_HL);
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <Minite_Volume_Alert_Func+0xc0>)
 80020ec:	7913      	ldrb	r3, [r2, #4]
 80020ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f2:	7113      	strb	r3, [r2, #4]
					volume_alert_check=0;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <Minite_Volume_Alert_Func+0xac>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	20000300 	.word	0x20000300
 8002108:	200002fc 	.word	0x200002fc
 800210c:	447a0000 	.word	0x447a0000
 8002110:	20000304 	.word	0x20000304
 8002114:	20016d80 	.word	0x20016d80
 8002118:	20016ea8 	.word	0x20016ea8
 800211c:	20016a2c 	.word	0x20016a2c

08002120 <Tidal_Volume_Alert_Func>:


void Tidal_Volume_Alert_Func()
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	if(V_max >AR._RANGE_VT_MIN_Val&&V_max<AR._RANGE_VT_MAX_Val)
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <Tidal_Volume_Alert_Func+0xa0>)
 8002126:	885b      	ldrh	r3, [r3, #2]
 8002128:	461a      	mov	r2, r3
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <Tidal_Volume_Alert_Func+0xa4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	da0f      	bge.n	8002152 <Tidal_Volume_Alert_Func+0x32>
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <Tidal_Volume_Alert_Func+0xa0>)
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <Tidal_Volume_Alert_Func+0xa4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	dd08      	ble.n	8002152 <Tidal_Volume_Alert_Func+0x32>
	{
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_YN);
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <Tidal_Volume_Alert_Func+0xa8>)
 8002142:	7953      	ldrb	r3, [r2, #5]
 8002144:	f36f 1345 	bfc	r3, #5, #1
 8002148:	7153      	strb	r3, [r2, #5]
		A.Tidal_Volume_Alert=0;
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 800214c:	2200      	movs	r2, #0
 800214e:	761a      	strb	r2, [r3, #24]
				A.Tidal_Volume_Alert=0;
			}
		}

	  }
}
 8002150:	e030      	b.n	80021b4 <Tidal_Volume_Alert_Func+0x94>
		A.Tidal_Volume_Alert++;
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 8002154:	7e1b      	ldrb	r3, [r3, #24]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 800215c:	761a      	strb	r2, [r3, #24]
		if(A.Tidal_Volume_Alert>3)
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 8002160:	7e1b      	ldrb	r3, [r3, #24]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d926      	bls.n	80021b4 <Tidal_Volume_Alert_Func+0x94>
			A.Alert=1;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 8002168:	2201      	movs	r2, #1
 800216a:	709a      	strb	r2, [r3, #2]
			SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_YN);
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <Tidal_Volume_Alert_Func+0xa8>)
 800216e:	7953      	ldrb	r3, [r2, #5]
 8002170:	f043 0320 	orr.w	r3, r3, #32
 8002174:	7153      	strb	r3, [r2, #5]
			if(AR._RANGE_VT_MIN_Val>V_max)
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <Tidal_Volume_Alert_Func+0xa0>)
 8002178:	885b      	ldrh	r3, [r3, #2]
 800217a:	461a      	mov	r2, r3
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <Tidal_Volume_Alert_Func+0xa4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	dd08      	ble.n	8002196 <Tidal_Volume_Alert_Func+0x76>
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_HL);
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <Tidal_Volume_Alert_Func+0xa8>)
 8002186:	7953      	ldrb	r3, [r2, #5]
 8002188:	f36f 1304 	bfc	r3, #4, #1
 800218c:	7153      	strb	r3, [r2, #5]
				A.Tidal_Volume_Alert=0;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 8002190:	2200      	movs	r2, #0
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	e00e      	b.n	80021b4 <Tidal_Volume_Alert_Func+0x94>
			else if(AR._RANGE_VT_MAX_Val<V_max)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <Tidal_Volume_Alert_Func+0xa0>)
 8002198:	889b      	ldrh	r3, [r3, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <Tidal_Volume_Alert_Func+0xa4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	da07      	bge.n	80021b4 <Tidal_Volume_Alert_Func+0x94>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_HL);
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <Tidal_Volume_Alert_Func+0xa8>)
 80021a6:	7953      	ldrb	r3, [r2, #5]
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	7153      	strb	r3, [r2, #5]
				A.Tidal_Volume_Alert=0;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <Tidal_Volume_Alert_Func+0xac>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20016d80 	.word	0x20016d80
 80021c4:	20016d60 	.word	0x20016d60
 80021c8:	20016ea8 	.word	0x20016ea8
 80021cc:	20016a2c 	.word	0x20016a2c

080021d0 <Respiratory_Rate_Alert_Func>:


void Respiratory_Rate_Alert_Func()
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	A.Acheived_RR=(60000/(A.RR_E_TIME+A.RR_I_TIME));
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 80021d6:	8b9b      	ldrh	r3, [r3, #28]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 80021dc:	8b5b      	ldrh	r3, [r3, #26]
 80021de:	4413      	add	r3, r2
 80021e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80021e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 80021f2:	edc3 7a08 	vstr	s15, [r3, #32]

	if(A.Acheived_RR >AR._RANGE_RR_MIN_Val&&A.Acheived_RR<AR._RANGE_RR_MAX_Val)
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 80021f8:	ed93 7a08 	vldr	s14, [r3, #32]
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <Respiratory_Rate_Alert_Func+0xe4>)
 80021fe:	7a1b      	ldrb	r3, [r3, #8]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	dd13      	ble.n	800223a <Respiratory_Rate_Alert_Func+0x6a>
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 8002214:	ed93 7a08 	vldr	s14, [r3, #32]
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <Respiratory_Rate_Alert_Func+0xe4>)
 800221a:	7a5b      	ldrb	r3, [r3, #9]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d505      	bpl.n	800223a <Respiratory_Rate_Alert_Func+0x6a>
	{
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_YN);
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <Respiratory_Rate_Alert_Func+0xe8>)
 8002230:	7953      	ldrb	r3, [r2, #5]
 8002232:	f36f 13c7 	bfc	r3, #7, #1
 8002236:	7153      	strb	r3, [r2, #5]
			{
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_HL);
			}
		}
	}
}
 8002238:	e034      	b.n	80022a4 <Respiratory_Rate_Alert_Func+0xd4>
		if(A.Wait_4_cycle<=1)
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 800223c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002240:	2b01      	cmp	r3, #1
 8002242:	d82f      	bhi.n	80022a4 <Respiratory_Rate_Alert_Func+0xd4>
			A.Alert=1;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 8002246:	2201      	movs	r2, #1
 8002248:	709a      	strb	r2, [r3, #2]
			SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_YN);
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <Respiratory_Rate_Alert_Func+0xe8>)
 800224c:	7953      	ldrb	r3, [r2, #5]
 800224e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002252:	7153      	strb	r3, [r2, #5]
			if(AR._RANGE_RR_MIN_Val>A.Acheived_RR)
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <Respiratory_Rate_Alert_Func+0xe4>)
 8002256:	7a1b      	ldrb	r3, [r3, #8]
 8002258:	ee07 3a90 	vmov	s15, r3
 800225c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 8002262:	edd3 7a08 	vldr	s15, [r3, #32]
 8002266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	dd05      	ble.n	800227c <Respiratory_Rate_Alert_Func+0xac>
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_HL);
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <Respiratory_Rate_Alert_Func+0xe8>)
 8002272:	7953      	ldrb	r3, [r2, #5]
 8002274:	f36f 1386 	bfc	r3, #6, #1
 8002278:	7153      	strb	r3, [r2, #5]
}
 800227a:	e013      	b.n	80022a4 <Respiratory_Rate_Alert_Func+0xd4>
			else if(AR._RANGE_RR_MAX_Val<A.Acheived_RR)
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <Respiratory_Rate_Alert_Func+0xe4>)
 800227e:	7a5b      	ldrb	r3, [r3, #9]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <Respiratory_Rate_Alert_Func+0xe0>)
 800228a:	edd3 7a08 	vldr	s15, [r3, #32]
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	d400      	bmi.n	800229a <Respiratory_Rate_Alert_Func+0xca>
}
 8002298:	e004      	b.n	80022a4 <Respiratory_Rate_Alert_Func+0xd4>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_HL);
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <Respiratory_Rate_Alert_Func+0xe8>)
 800229c:	7953      	ldrb	r3, [r2, #5]
 800229e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a2:	7153      	strb	r3, [r2, #5]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20016a2c 	.word	0x20016a2c
 80022b4:	20016d80 	.word	0x20016d80
 80022b8:	20016ea8 	.word	0x20016ea8

080022bc <Oxygen_Alert_Func>:




void Oxygen_Alert_Func()
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	if(O2._FIO2_Val>21)
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <Oxygen_Alert_Func+0x110>)
 80022c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022c6:	2b15      	cmp	r3, #21
 80022c8:	d97b      	bls.n	80023c2 <Oxygen_Alert_Func+0x106>
	{
		if(O2._FIO2_Val<=22)
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <Oxygen_Alert_Func+0x110>)
 80022cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022d0:	2b16      	cmp	r3, #22
 80022d2:	d819      	bhi.n	8002308 <Oxygen_Alert_Func+0x4c>
		{
			A.Fio2_Supply_Error++;
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 80022d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022da:	3301      	adds	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 80022e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		    if(A.Fio2_Supply_Error>5)
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 80022e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d910      	bls.n	8002310 <Oxygen_Alert_Func+0x54>
		    {
		    	  A.Alert=1;
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	709a      	strb	r2, [r3, #2]
		    	  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY);
 80022f4:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <Oxygen_Alert_Func+0x118>)
 80022f6:	78d3      	ldrb	r3, [r2, #3]
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	70d3      	strb	r3, [r2, #3]
		    	  A.Fio2_Supply_Error=0;
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002306:	e003      	b.n	8002310 <Oxygen_Alert_Func+0x54>
		    }
		 }
		else
		{
			A.Fio2_Supply_Error=0;
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25





		    	     if((O2.O2_percentage < (O2._FIO2_Val +5))&& (O2.O2_percentage > (O2._FIO2_Val-5)))
 8002310:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <Oxygen_Alert_Func+0x110>)
 8002312:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002316:	3304      	adds	r3, #4
 8002318:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <Oxygen_Alert_Func+0x110>)
 800231a:	7c12      	ldrb	r2, [r2, #16]
 800231c:	4293      	cmp	r3, r2
 800231e:	db11      	blt.n	8002344 <Oxygen_Alert_Func+0x88>
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <Oxygen_Alert_Func+0x110>)
 8002322:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002326:	3b04      	subs	r3, #4
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <Oxygen_Alert_Func+0x110>)
 800232a:	7c12      	ldrb	r2, [r2, #16]
 800232c:	4293      	cmp	r3, r2
 800232e:	dc09      	bgt.n	8002344 <Oxygen_Alert_Func+0x88>
		    	     {
		    	     	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_YN);
 8002330:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <Oxygen_Alert_Func+0x118>)
 8002332:	7913      	ldrb	r3, [r2, #4]
 8002334:	f36f 1345 	bfc	r3, #5, #1
 8002338:	7113      	strb	r3, [r2, #4]
		    	     	A.Oxygen_Alert=0;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		    	    	}
		    	     }

	}

}
 8002342:	e03e      	b.n	80023c2 <Oxygen_Alert_Func+0x106>
		    	    	if(A.Fio2_Value_Set<=1)
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 8002346:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800234a:	2b01      	cmp	r3, #1
 800234c:	d839      	bhi.n	80023c2 <Oxygen_Alert_Func+0x106>
		    	    	A.Oxygen_Alert++;
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 8002350:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002354:	3301      	adds	r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 800235a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		    	     	if(A.Oxygen_Alert>3)
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 8002360:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002364:	2b03      	cmp	r3, #3
 8002366:	d92c      	bls.n	80023c2 <Oxygen_Alert_Func+0x106>
		    	     		A.Alert=1;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 800236a:	2201      	movs	r2, #1
 800236c:	709a      	strb	r2, [r3, #2]
		    	     		SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_YN);
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <Oxygen_Alert_Func+0x118>)
 8002370:	7913      	ldrb	r3, [r2, #4]
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	7113      	strb	r3, [r2, #4]
		    	     		if (O2.O2_percentage > (O2._FIO2_Val +5))
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <Oxygen_Alert_Func+0x110>)
 800237a:	7c1b      	ldrb	r3, [r3, #16]
 800237c:	461a      	mov	r2, r3
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <Oxygen_Alert_Func+0x110>)
 8002380:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002384:	3305      	adds	r3, #5
 8002386:	429a      	cmp	r2, r3
 8002388:	dd09      	ble.n	800239e <Oxygen_Alert_Func+0xe2>
		    	     			SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_HL);
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <Oxygen_Alert_Func+0x118>)
 800238c:	7913      	ldrb	r3, [r2, #4]
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	7113      	strb	r3, [r2, #4]
		    	     			A.Oxygen_Alert=0;
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800239c:	e011      	b.n	80023c2 <Oxygen_Alert_Func+0x106>
		    	     		else if (O2.O2_percentage < (O2._FIO2_Val -5))
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <Oxygen_Alert_Func+0x110>)
 80023a0:	7c1b      	ldrb	r3, [r3, #16]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <Oxygen_Alert_Func+0x110>)
 80023a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80023aa:	3b05      	subs	r3, #5
 80023ac:	429a      	cmp	r2, r3
 80023ae:	da08      	bge.n	80023c2 <Oxygen_Alert_Func+0x106>
		    	     			CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_HL);
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <Oxygen_Alert_Func+0x118>)
 80023b2:	7913      	ldrb	r3, [r2, #4]
 80023b4:	f36f 1304 	bfc	r3, #4, #1
 80023b8:	7113      	strb	r3, [r2, #4]
		    	     			A.Oxygen_Alert=0;
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <Oxygen_Alert_Func+0x114>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	20000048 	.word	0x20000048
 80023d0:	20016a2c 	.word	0x20016a2c
 80023d4:	20016ea8 	.word	0x20016ea8

080023d8 <Leak_Alert_Func>:



void Leak_Alert_Func()
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	if(0>A.Leak)
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <Leak_Alert_Func+0x40>)
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da13      	bge.n	800240c <Leak_Alert_Func+0x34>
	{
		 A.Leak_Error_Count++;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <Leak_Alert_Func+0x40>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	3301      	adds	r3, #1
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <Leak_Alert_Func+0x40>)
 80023ec:	6353      	str	r3, [r2, #52]	; 0x34
		 if(A.Leak_Error_Count>3)
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <Leak_Alert_Func+0x40>)
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	dd0a      	ble.n	800240c <Leak_Alert_Func+0x34>
		 {
		    A.Alert=1;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <Leak_Alert_Func+0x40>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	709a      	strb	r2, [r3, #2]
		    SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LEAK_HL);
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <Leak_Alert_Func+0x44>)
 80023fe:	7993      	ldrb	r3, [r2, #6]
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	7193      	strb	r3, [r2, #6]
		    A.Leak_Error_Count=0;
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <Leak_Alert_Func+0x40>)
 8002408:	2200      	movs	r2, #0
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
		  }
	}
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20016a2c 	.word	0x20016a2c
 800241c:	20016ea8 	.word	0x20016ea8

08002420 <Patient_Circuit_Disconnected_Alert_Func>:



void Patient_Circuit_Disconnected_Alert_Func()
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	if(Pressure_sensor._Pressure_Val==0 && (Flow_Sensor_cal._Flow_Val==0 || Flow_Sensor_cal._Flow_Val==-1 || Flow_Sensor_cal._Flow_Val==-2))
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <Patient_Circuit_Disconnected_Alert_Func+0x6c>)
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d129      	bne.n	8002480 <Patient_Circuit_Disconnected_Alert_Func+0x60>
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <Patient_Circuit_Disconnected_Alert_Func+0x70>)
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <Patient_Circuit_Disconnected_Alert_Func+0x28>
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <Patient_Circuit_Disconnected_Alert_Func+0x70>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d004      	beq.n	8002448 <Patient_Circuit_Disconnected_Alert_Func+0x28>
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <Patient_Circuit_Disconnected_Alert_Func+0x70>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	f113 0f02 	cmn.w	r3, #2
 8002446:	d11b      	bne.n	8002480 <Patient_Circuit_Disconnected_Alert_Func+0x60>
	{
		if((DAC1->DHR12R1)>=300)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <Patient_Circuit_Disconnected_Alert_Func+0x74>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002450:	d316      	bcc.n	8002480 <Patient_Circuit_Disconnected_Alert_Func+0x60>
		{
				A.Patient_Circuit_disconnected++;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <Patient_Circuit_Disconnected_Alert_Func+0x78>)
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	3301      	adds	r3, #1
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <Patient_Circuit_Disconnected_Alert_Func+0x78>)
 800245a:	6393      	str	r3, [r2, #56]	; 0x38
				if(A.Patient_Circuit_disconnected>=100)
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <Patient_Circuit_Disconnected_Alert_Func+0x78>)
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b63      	cmp	r3, #99	; 0x63
 8002462:	dd0d      	ble.n	8002480 <Patient_Circuit_Disconnected_Alert_Func+0x60>
				{
					Apnea_Patient_circuit_disconnected_Flag=1;
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <Patient_Circuit_Disconnected_Alert_Func+0x7c>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
					A.Alert=1;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <Patient_Circuit_Disconnected_Alert_Func+0x78>)
 800246c:	2201      	movs	r2, #1
 800246e:	709a      	strb	r2, [r3, #2]
					SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <Patient_Circuit_Disconnected_Alert_Func+0x80>)
 8002472:	78d3      	ldrb	r3, [r2, #3]
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	70d3      	strb	r3, [r2, #3]
					A.Patient_Circuit_disconnected=0;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <Patient_Circuit_Disconnected_Alert_Func+0x78>)
 800247c:	2200      	movs	r2, #0
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
				}
		}
	}
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20016cfc 	.word	0x20016cfc
 8002490:	20016c48 	.word	0x20016c48
 8002494:	40007400 	.word	0x40007400
 8002498:	20016a2c 	.word	0x20016a2c
 800249c:	200002f4 	.word	0x200002f4
 80024a0:	20016ea8 	.word	0x20016ea8

080024a4 <Proximal_Flow_Sensor_Reverse_Direction>:


void Proximal_Flow_Sensor_Reverse_Direction()
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	if(_I_TIMER_ACHEIVED<500)
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <Proximal_Flow_Sensor_Reverse_Direction+0x48>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024b0:	d216      	bcs.n	80024e0 <Proximal_Flow_Sensor_Reverse_Direction+0x3c>
	{
		if((vol.Volume_Val<(-10)))
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <Proximal_Flow_Sensor_Reverse_Direction+0x4c>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f113 0f0a 	cmn.w	r3, #10
 80024ba:	da11      	bge.n	80024e0 <Proximal_Flow_Sensor_Reverse_Direction+0x3c>
		{
			A.Proximal_Flow_Sensor_reversed++;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <Proximal_Flow_Sensor_Reverse_Direction+0x50>)
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	3301      	adds	r3, #1
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <Proximal_Flow_Sensor_Reverse_Direction+0x50>)
 80024c4:	63d3      	str	r3, [r2, #60]	; 0x3c
			{
				 if( A.Proximal_Flow_Sensor_reversed>=300)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <Proximal_Flow_Sensor_Reverse_Direction+0x50>)
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024ce:	db07      	blt.n	80024e0 <Proximal_Flow_Sensor_Reverse_Direction+0x3c>
				 {
				 	  A.Alert=1;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <Proximal_Flow_Sensor_Reverse_Direction+0x50>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	709a      	strb	r2, [r3, #2]
				 	  SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_FLOW_SENSOR_REVERSED);
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <Proximal_Flow_Sensor_Reverse_Direction+0x54>)
 80024d8:	7993      	ldrb	r3, [r2, #6]
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	7193      	strb	r3, [r2, #6]
				 }
			}
		}
	}
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20016af4 	.word	0x20016af4
 80024f0:	20016d44 	.word	0x20016d44
 80024f4:	20016a2c 	.word	0x20016a2c
 80024f8:	20016ea8 	.word	0x20016ea8

080024fc <data_request_Check>:



void data_request_Check()
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	if( AR._RANGE_VT_MIN_Val && AR._RANGE_VT_MAX_Val && AR._RANGE_PIP_MIN_Val &&AR._RANGE_PIP_MAX_Val &&AR._RANGE_RR_MIN_Val &&AR._RANGE_RR_MAX_Val&&AR._RANGE_MINT_VOL_MIN_Val&&AR._RANGE_MINT_VOL_MAX_Val&&AR._RANGE_SPO2_MIN_Val&&AR._RANGE_SPO2_MAX_Val&&AR._RANGE_PULSE_MIN_Val&&AR._RANGE_PULSE_MAX_Val )
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <data_request_Check+0x7c>)
 8002502:	885b      	ldrh	r3, [r3, #2]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d026      	beq.n	8002556 <data_request_Check+0x5a>
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <data_request_Check+0x7c>)
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d022      	beq.n	8002556 <data_request_Check+0x5a>
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <data_request_Check+0x7c>)
 8002512:	799b      	ldrb	r3, [r3, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01e      	beq.n	8002556 <data_request_Check+0x5a>
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <data_request_Check+0x7c>)
 800251a:	79db      	ldrb	r3, [r3, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01a      	beq.n	8002556 <data_request_Check+0x5a>
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <data_request_Check+0x7c>)
 8002522:	7a1b      	ldrb	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <data_request_Check+0x5a>
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <data_request_Check+0x7c>)
 800252a:	7a5b      	ldrb	r3, [r3, #9]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <data_request_Check+0x5a>
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <data_request_Check+0x7c>)
 8002532:	895b      	ldrh	r3, [r3, #10]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <data_request_Check+0x5a>
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <data_request_Check+0x7c>)
 800253a:	899b      	ldrh	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <data_request_Check+0x5a>
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <data_request_Check+0x7c>)
 8002542:	7b9b      	ldrb	r3, [r3, #14]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <data_request_Check+0x5a>
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <data_request_Check+0x7c>)
 800254a:	7bdb      	ldrb	r3, [r3, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <data_request_Check+0x5a>
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <data_request_Check+0x7c>)
 8002552:	7c1b      	ldrb	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
			SET_ALERT_BIT(EIGHT_FRAME_UN,ALERT);
			now_check_alert=1;
		}*/
	}

	if(S1._Mode_Val==6 || S1._Mode_Val==7 || S1._Mode_Val==8)
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <data_request_Check+0x80>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d006      	beq.n	800256c <data_request_Check+0x70>
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <data_request_Check+0x80>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b07      	cmp	r3, #7
 8002564:	d002      	beq.n	800256c <data_request_Check+0x70>
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <data_request_Check+0x80>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b08      	cmp	r3, #8
	}
	if(Mode_data_error==1)
	{
		//SET_ALERT_BIT(EIGHT_FRAME_UN,MODE);
	}
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20016d80 	.word	0x20016d80
 800257c:	20016ae0 	.word	0x20016ae0

08002580 <Alert_I_Time_Parameter>:

void Alert_I_Time_Parameter()
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	A.Alert_Now=1;
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 8002586:	2201      	movs	r2, #1
 8002588:	70da      	strb	r2, [r3, #3]
	A.RR_E_TIME=_E_TIMER_ACHEIVED;
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <Alert_I_Time_Parameter+0x8c>)
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 8002590:	839a      	strh	r2, [r3, #28]
	if(A.Wait_4_cycle>=1)
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 8002594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <Alert_I_Time_Parameter+0x2c>
	{
		A.Wait_4_cycle--;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 800259e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if(A.Fio2_Value_Set>=1)
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <Alert_I_Time_Parameter+0x46>
	{
		A.Fio2_Value_Set--;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80025bc:	3b01      	subs	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	}
	A.Exp_Volume=vol.Volume;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <Alert_I_Time_Parameter+0x90>)
 80025c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d0:	ee17 2a90 	vmov	r2, s15
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
	A.Exp_Volume=A.Insp_Volume-A.Exp_Volume;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
	A.Leak=A.Insp_Volume-A.Exp_Volume;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <Alert_I_Time_Parameter+0x88>)
 80025f2:	6293      	str	r3, [r2, #40]	; 0x28

	RR_Count++;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <Alert_I_Time_Parameter+0x94>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a06      	ldr	r2, [pc, #24]	; (8002614 <Alert_I_Time_Parameter+0x94>)
 80025fc:	6013      	str	r3, [r2, #0]


}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	20016a2c 	.word	0x20016a2c
 800260c:	20016eb4 	.word	0x20016eb4
 8002610:	20016d44 	.word	0x20016d44
 8002614:	200002f8 	.word	0x200002f8

08002618 <Alert_E_Time_Parameter>:

void Alert_E_Time_Parameter()
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
	A._Max_Volume_Val=(float)(vol.Volume_Val/10);
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <Alert_E_Time_Parameter+0xa8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <Alert_E_Time_Parameter+0xac>)
 8002622:	fb82 1203 	smull	r1, r2, r2, r3
 8002626:	1092      	asrs	r2, r2, #2
 8002628:	17db      	asrs	r3, r3, #31
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 8002636:	edc3 7a02 	vstr	s15, [r3, #8]
    if(RR_Count!=0)
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <Alert_E_Time_Parameter+0xb4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <Alert_E_Time_Parameter+0x46>
    {
	  A._Max_Tidal_Volume+=V_max;
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 8002644:	ed93 7a05 	vldr	s14, [r3, #20]
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <Alert_E_Time_Parameter+0xb8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 800265a:	edc3 7a05 	vstr	s15, [r3, #20]
    }

	if(RR_Count==A.Respiratory_Rate)
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 8002660:	79db      	ldrb	r3, [r3, #7]
 8002662:	461a      	mov	r2, r3
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <Alert_E_Time_Parameter+0xb4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d10d      	bne.n	8002688 <Alert_E_Time_Parameter+0x70>
	{
		Total_Tidal_volume=A._Max_Tidal_Volume;
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <Alert_E_Time_Parameter+0xbc>)
 8002672:	6013      	str	r3, [r2, #0]
		A._Max_Tidal_Volume=0;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
		RR_Count=0;
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <Alert_E_Time_Parameter+0xb4>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
		volume_alert_check=1;
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <Alert_E_Time_Parameter+0xc0>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
	}

	A.Alert_check_done=1;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
	A.RR_I_TIME=_I_TIMER_ACHEIVED;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <Alert_E_Time_Parameter+0xc4>)
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 8002694:	835a      	strh	r2, [r3, #26]
	A.Insp_Volume=vol.Volume;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <Alert_E_Time_Parameter+0xa8>)
 8002698:	edd3 7a01 	vldr	s15, [r3, #4]
 800269c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a0:	ee17 2a90 	vmov	r2, s15
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
	A.Patient_Circuit_disconnected=0;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
	A.Proximal_Flow_Sensor_reversed=0;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <Alert_E_Time_Parameter+0xb0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20016d44 	.word	0x20016d44
 80026c4:	66666667 	.word	0x66666667
 80026c8:	20016a2c 	.word	0x20016a2c
 80026cc:	200002f8 	.word	0x200002f8
 80026d0:	20016d60 	.word	0x20016d60
 80026d4:	200002fc 	.word	0x200002fc
 80026d8:	20000300 	.word	0x20000300
 80026dc:	20016af4 	.word	0x20016af4

080026e0 <Alert_Receiving_Parameter>:

void Alert_Receiving_Parameter()
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
	A.Respiratory_Rate = (((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_RR);
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <Alert_Receiving_Parameter+0x84>)
 80026e6:	7a5a      	ldrb	r2, [r3, #9]
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 80026ea:	71da      	strb	r2, [r3, #7]
	A.Wait_4_cycle=5;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 80026ee:	2205      	movs	r2, #5
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	A.RR_I_TIME=2000;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 80026f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026fa:	835a      	strh	r2, [r3, #26]
	A.RR_E_TIME=2000;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 80026fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002702:	839a      	strh	r2, [r3, #28]
	A.Pip_Alert = 0;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002706:	2200      	movs	r2, #0
 8002708:	705a      	strb	r2, [r3, #1]
	A.Peep_Alert=0;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 800270c:	2200      	movs	r2, #0
 800270e:	719a      	strb	r2, [r3, #6]
	A.Mint_Vol_Alert=0;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002712:	2200      	movs	r2, #0
 8002714:	741a      	strb	r2, [r3, #16]
	A.Tidal_Volume_Alert=0;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002718:	2200      	movs	r2, #0
 800271a:	761a      	strb	r2, [r3, #24]
	A.Fio2_Supply_Error=0;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	A.Oxygen_Alert=0;
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	A.Leak_Error_Count=0;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 800272e:	2200      	movs	r2, #0
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
	A.Patient_Circuit_disconnected=0;
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002734:	2200      	movs	r2, #0
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
	A.Proximal_Flow_Sensor_reversed=0;
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
	A._Max_Tidal_Volume=0;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <Alert_Receiving_Parameter+0x88>)
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
	V_max=0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <Alert_Receiving_Parameter+0x8c>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
	Total_Tidal_volume_int=0;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <Alert_Receiving_Parameter+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
	RR_Count=0;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <Alert_Receiving_Parameter+0x94>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20016d28 	.word	0x20016d28
 8002768:	20016a2c 	.word	0x20016a2c
 800276c:	20016d60 	.word	0x20016d60
 8002770:	20000304 	.word	0x20000304
 8002774:	200002f8 	.word	0x200002f8

08002778 <Battery_Status>:



void Battery_Status()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	if(_CurrentComputationState==Compute_E_Wave || _CurrentMode == PSV ||  _CurrentMode == cPAP ||  _CurrentMode == BiPAP ||  _CurrentMode == APRV )
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <Battery_Status+0x13c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d00f      	beq.n	80027a4 <Battery_Status+0x2c>
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <Battery_Status+0x140>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d00b      	beq.n	80027a4 <Battery_Status+0x2c>
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <Battery_Status+0x140>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b07      	cmp	r3, #7
 8002792:	d007      	beq.n	80027a4 <Battery_Status+0x2c>
 8002794:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <Battery_Status+0x140>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d003      	beq.n	80027a4 <Battery_Status+0x2c>
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <Battery_Status+0x140>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d139      	bne.n	8002818 <Battery_Status+0xa0>
	{
		battery_raw_value=(AdcData[3]);
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <Battery_Status+0x144>)
 80027a6:	88da      	ldrh	r2, [r3, #6]
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <Battery_Status+0x148>)
 80027aa:	801a      	strh	r2, [r3, #0]
		battery1=((battery_raw_value-2250)*100)/1250;
 80027ac:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <Battery_Status+0x148>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 80027b4:	2264      	movs	r2, #100	; 0x64
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a42      	ldr	r2, [pc, #264]	; (80028c4 <Battery_Status+0x14c>)
 80027bc:	fb82 1203 	smull	r1, r2, r2, r3
 80027c0:	1252      	asrs	r2, r2, #9
 80027c2:	17db      	asrs	r3, r3, #31
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <Battery_Status+0x150>)
 80027d0:	edc3 7a00 	vstr	s15, [r3]
		if(battery1>100)
 80027d4:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <Battery_Status+0x150>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80028cc <Battery_Status+0x154>
 80027de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	dd02      	ble.n	80027ee <Battery_Status+0x76>
			battery1=100;
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <Battery_Status+0x150>)
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <Battery_Status+0x158>)
 80027ec:	601a      	str	r2, [r3, #0]

		Bat_Avg+=battery1;
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <Battery_Status+0x15c>)
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <Battery_Status+0x150>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <Battery_Status+0x15c>)
 8002800:	edc3 7a00 	vstr	s15, [r3]
		Bat_Avg_count++;
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <Battery_Status+0x160>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800280e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <Battery_Status+0x160>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
	}



	    if( Mode_Not_Start==0 )
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <Battery_Status+0x164>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d146      	bne.n	80028ae <Battery_Status+0x136>
		{
			battery_raw_value=(AdcData[3]);
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <Battery_Status+0x144>)
 8002822:	88da      	ldrh	r2, [r3, #6]
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <Battery_Status+0x148>)
 8002826:	801a      	strh	r2, [r3, #0]
			battery1=((battery_raw_value-2250)*100)/1250;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <Battery_Status+0x148>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 8002830:	2264      	movs	r2, #100	; 0x64
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <Battery_Status+0x14c>)
 8002838:	fb82 1203 	smull	r1, r2, r2, r3
 800283c:	1252      	asrs	r2, r2, #9
 800283e:	17db      	asrs	r3, r3, #31
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <Battery_Status+0x150>)
 800284c:	edc3 7a00 	vstr	s15, [r3]
			if(battery1>100)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <Battery_Status+0x150>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80028cc <Battery_Status+0x154>
 800285a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	dd02      	ble.n	800286a <Battery_Status+0xf2>
				battery1=100;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <Battery_Status+0x150>)
 8002866:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <Battery_Status+0x158>)
 8002868:	601a      	str	r2, [r3, #0]

			Bat_Avg+=battery1;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <Battery_Status+0x15c>)
 800286c:	ed93 7a00 	vldr	s14, [r3]
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <Battery_Status+0x150>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <Battery_Status+0x15c>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
			Bat_Avg_count++;
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <Battery_Status+0x160>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800288a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <Battery_Status+0x160>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
			if(Bat_Avg_count>1000)
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <Battery_Status+0x160>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028e0 <Battery_Status+0x168>
 800289e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	dc00      	bgt.n	80028aa <Battery_Status+0x132>
			{
				Battery_Information();
			}
		}
}
 80028a8:	e001      	b.n	80028ae <Battery_Status+0x136>
				Battery_Information();
 80028aa:	f7ff f99b 	bl	8001be4 <Battery_Information>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20016cc8 	.word	0x20016cc8
 80028b8:	20016c04 	.word	0x20016c04
 80028bc:	20016bbc 	.word	0x20016bbc
 80028c0:	20016ada 	.word	0x20016ada
 80028c4:	68db8bad 	.word	0x68db8bad
 80028c8:	20016aa0 	.word	0x20016aa0
 80028cc:	42c80000 	.word	0x42c80000
 80028d0:	42c80000 	.word	0x42c80000
 80028d4:	20016e54 	.word	0x20016e54
 80028d8:	20016a70 	.word	0x20016a70
 80028dc:	20016ce4 	.word	0x20016ce4
 80028e0:	447a0000 	.word	0x447a0000

080028e4 <Led_Alert>:

void Led_Alert()
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
	 if(A.Red_Led_Alert==1 && S1._Pause==0 )
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <Led_Alert+0x84>)
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d119      	bne.n	8002926 <Led_Alert+0x42>
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <Led_Alert+0x88>)
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d115      	bne.n	8002926 <Led_Alert+0x42>
	 {
		 Blue_Led_OFF();
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <Led_Alert+0x8c>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <Led_Alert+0x8c>)
 8002900:	f023 0308 	bic.w	r3, r3, #8
 8002904:	6153      	str	r3, [r2, #20]
		 Red_Led_ON();
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <Led_Alert+0x8c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <Led_Alert+0x8c>)
 800290c:	f043 0310 	orr.w	r3, r3, #16
 8002910:	6153      	str	r3, [r2, #20]
		 Green_Led_OFF();
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <Led_Alert+0x8c>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <Led_Alert+0x8c>)
 8002918:	f023 0320 	bic.w	r3, r3, #32
 800291c:	6153      	str	r3, [r2, #20]
		 A.Alert=0;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <Led_Alert+0x84>)
 8002920:	2200      	movs	r2, #0
 8002922:	709a      	strb	r2, [r3, #2]
		 Red_Led_OFF();
		 Green_Led_ON();

	 }

}
 8002924:	e01a      	b.n	800295c <Led_Alert+0x78>
	 else if(A.Red_Led_Alert==0 && S1._Pause==0)
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <Led_Alert+0x84>)
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d115      	bne.n	800295c <Led_Alert+0x78>
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <Led_Alert+0x88>)
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <Led_Alert+0x78>
		 Blue_Led_OFF();
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <Led_Alert+0x8c>)
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <Led_Alert+0x8c>)
 800293e:	f023 0308 	bic.w	r3, r3, #8
 8002942:	6153      	str	r3, [r2, #20]
		 Red_Led_OFF();
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <Led_Alert+0x8c>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <Led_Alert+0x8c>)
 800294a:	f023 0310 	bic.w	r3, r3, #16
 800294e:	6153      	str	r3, [r2, #20]
		 Green_Led_ON();
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <Led_Alert+0x8c>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4a06      	ldr	r2, [pc, #24]	; (8002970 <Led_Alert+0x8c>)
 8002956:	f043 0320 	orr.w	r3, r3, #32
 800295a:	6153      	str	r3, [r2, #20]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20016a2c 	.word	0x20016a2c
 800296c:	20016ae0 	.word	0x20016ae0
 8002970:	40020c00 	.word	0x40020c00
 8002974:	00000000 	.word	0x00000000

08002978 <BIPAP_Mode_Task>:

extern int pressure_high_error_count;      //new
extern int pressure_high_error_count2;     //new

void BIPAP_Mode_Task (void *argument)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af02      	add	r7, sp, #8
 800297e:	6078      	str	r0, [r7, #4]
	while(1)
	{



	  if(Initial_open_valve==1)
 8002980:	4bab      	ldr	r3, [pc, #684]	; (8002c30 <BIPAP_Mode_Task+0x2b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80c5 	bne.w	8002b14 <BIPAP_Mode_Task+0x19c>
	  {

	      if(one_time_only == 1)
 800298a:	4baa      	ldr	r3, [pc, #680]	; (8002c34 <BIPAP_Mode_Task+0x2bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 80b3 	bne.w	8002afa <BIPAP_Mode_Task+0x182>
		  {
	    	  Alert_error_count=0;
 8002994:	4ba8      	ldr	r3, [pc, #672]	; (8002c38 <BIPAP_Mode_Task+0x2c0>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

			 Alert_Status_count=0;
 800299a:	4ba8      	ldr	r3, [pc, #672]	; (8002c3c <BIPAP_Mode_Task+0x2c4>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]


			 Wait_Dac=1;
 80029a0:	4ba7      	ldr	r3, [pc, #668]	; (8002c40 <BIPAP_Mode_Task+0x2c8>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
			 Apnea_counter_trigger_Flag=1;
 80029a6:	4ba7      	ldr	r3, [pc, #668]	; (8002c44 <BIPAP_Mode_Task+0x2cc>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
			 now_update=1;
 80029ac:	4ba6      	ldr	r3, [pc, #664]	; (8002c48 <BIPAP_Mode_Task+0x2d0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
			 Blower_Signal(0);
 80029b2:	4ba6      	ldr	r3, [pc, #664]	; (8002c4c <BIPAP_Mode_Task+0x2d4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]



			 initial_blower_trigger=1;
 80029b8:	4ba5      	ldr	r3, [pc, #660]	; (8002c50 <BIPAP_Mode_Task+0x2d8>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
			 initial_blower_trigger2=1;
 80029be:	4ba5      	ldr	r3, [pc, #660]	; (8002c54 <BIPAP_Mode_Task+0x2dc>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
			 Start_check=0;
 80029c4:	4ba4      	ldr	r3, [pc, #656]	; (8002c58 <BIPAP_Mode_Task+0x2e0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
			 Alert_Data_send_count=0;
 80029ca:	4ba4      	ldr	r3, [pc, #656]	; (8002c5c <BIPAP_Mode_Task+0x2e4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
			 Alert_error_count=0;
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <BIPAP_Mode_Task+0x2c0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
			 Dac_control_count=0;
 80029d6:	4ba2      	ldr	r3, [pc, #648]	; (8002c60 <BIPAP_Mode_Task+0x2e8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
			 uwTick=0;
 80029dc:	4ba1      	ldr	r3, [pc, #644]	; (8002c64 <BIPAP_Mode_Task+0x2ec>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]


			 Dac1=300;
 80029e2:	4ba1      	ldr	r3, [pc, #644]	; (8002c68 <BIPAP_Mode_Task+0x2f0>)
 80029e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029e8:	801a      	strh	r2, [r3, #0]
			 Dac2=2000;
 80029ea:	4ba0      	ldr	r3, [pc, #640]	; (8002c6c <BIPAP_Mode_Task+0x2f4>)
 80029ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029f0:	801a      	strh	r2, [r3, #0]
			 kp=5;
 80029f2:	4b9f      	ldr	r3, [pc, #636]	; (8002c70 <BIPAP_Mode_Task+0x2f8>)
 80029f4:	2205      	movs	r2, #5
 80029f6:	701a      	strb	r2, [r3, #0]
			 ki=4;
 80029f8:	4b9e      	ldr	r3, [pc, #632]	; (8002c74 <BIPAP_Mode_Task+0x2fc>)
 80029fa:	2204      	movs	r2, #4
 80029fc:	701a      	strb	r2, [r3, #0]
			 kd=1;
 80029fe:	499e      	ldr	r1, [pc, #632]	; (8002c78 <BIPAP_Mode_Task+0x300>)
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b9d      	ldr	r3, [pc, #628]	; (8002c7c <BIPAP_Mode_Task+0x304>)
 8002a06:	e9c1 2300 	strd	r2, r3, [r1]
			 Time=10;
 8002a0a:	4b9d      	ldr	r3, [pc, #628]	; (8002c80 <BIPAP_Mode_Task+0x308>)
 8002a0c:	220a      	movs	r2, #10
 8002a0e:	601a      	str	r2, [r3, #0]
			 Speed=30;
 8002a10:	4b9c      	ldr	r3, [pc, #624]	; (8002c84 <BIPAP_Mode_Task+0x30c>)
 8002a12:	221e      	movs	r2, #30
 8002a14:	601a      	str	r2, [r3, #0]

			 Trigger_Count=0;
 8002a16:	4b9c      	ldr	r3, [pc, #624]	; (8002c88 <BIPAP_Mode_Task+0x310>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]



			 _60_Seconds=60000;
 8002a1c:	4b9b      	ldr	r3, [pc, #620]	; (8002c8c <BIPAP_Mode_Task+0x314>)
 8002a1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002a22:	801a      	strh	r2, [r3, #0]
			 now_check_breath=0;
 8002a24:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <BIPAP_Mode_Task+0x318>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			 Breath=0;
 8002a2a:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <BIPAP_Mode_Task+0x31c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]

			TempSetpoint = P1.EPAP_Val;
 8002a30:	4b99      	ldr	r3, [pc, #612]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002a32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fd0c 	bl	8000454 <__aeabi_ui2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4996      	ldr	r1, [pc, #600]	; (8002c9c <BIPAP_Mode_Task+0x324>)
 8002a42:	e9c1 2300 	strd	r2, r3, [r1]
			PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002a46:	4b8a      	ldr	r3, [pc, #552]	; (8002c70 <BIPAP_Mode_Task+0x2f8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd02 	bl	8000454 <__aeabi_ui2d>
 8002a50:	4604      	mov	r4, r0
 8002a52:	460d      	mov	r5, r1
 8002a54:	4b87      	ldr	r3, [pc, #540]	; (8002c74 <BIPAP_Mode_Task+0x2fc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fcfb 	bl	8000454 <__aeabi_ui2d>
 8002a5e:	4b86      	ldr	r3, [pc, #536]	; (8002c78 <BIPAP_Mode_Task+0x300>)
 8002a60:	ed93 7b00 	vldr	d7, [r3]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	eeb0 2a47 	vmov.f32	s4, s14
 8002a70:	eef0 2a67 	vmov.f32	s5, s15
 8002a74:	ec41 0b11 	vmov	d1, r0, r1
 8002a78:	ec45 4b10 	vmov	d0, r4, r5
 8002a7c:	4b87      	ldr	r3, [pc, #540]	; (8002c9c <BIPAP_Mode_Task+0x324>)
 8002a7e:	4a88      	ldr	r2, [pc, #544]	; (8002ca0 <BIPAP_Mode_Task+0x328>)
 8002a80:	4988      	ldr	r1, [pc, #544]	; (8002ca4 <BIPAP_Mode_Task+0x32c>)
 8002a82:	4889      	ldr	r0, [pc, #548]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002a84:	f011 fe8c 	bl	80147a0 <PID>
			PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4887      	ldr	r0, [pc, #540]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002a8c:	f011 ffbe 	bl	8014a0c <PID_SetMode>

			 PID_SetSampleTime(&TPID, Time);
 8002a90:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <BIPAP_Mode_Task+0x308>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4884      	ldr	r0, [pc, #528]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002a98:	f012 f934 	bl	8014d04 <PID_SetSampleTime>
			 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8002a9c:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <BIPAP_Mode_Task+0x2f0>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fcd7 	bl	8000454 <__aeabi_ui2d>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	460d      	mov	r5, r1
 8002aaa:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <BIPAP_Mode_Task+0x2f4>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fcd0 	bl	8000454 <__aeabi_ui2d>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	ec43 2b11 	vmov	d1, r2, r3
 8002abc:	ec45 4b10 	vmov	d0, r4, r5
 8002ac0:	4879      	ldr	r0, [pc, #484]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002ac2:	f011 ffc1 	bl	8014a48 <PID_SetOutputLimits>


			 Parkar_valve_Signal(0);
 8002ac6:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <BIPAP_Mode_Task+0x2d4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	615a      	str	r2, [r3, #20]
			  O2.O2_process = 0;
 8002acc:	4b77      	ldr	r3, [pc, #476]	; (8002cac <BIPAP_Mode_Task+0x334>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
			  O2.Servo=45;
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <BIPAP_Mode_Task+0x334>)
 8002ad4:	222d      	movs	r2, #45	; 0x2d
 8002ad6:	605a      	str	r2, [r3, #4]
			  Servo_Angle(O2.Servo);
 8002ad8:	4b74      	ldr	r3, [pc, #464]	; (8002cac <BIPAP_Mode_Task+0x334>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <BIPAP_Mode_Task+0x338>)
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34

			 pressure_acheived=1;
 8002ae0:	4b74      	ldr	r3, [pc, #464]	; (8002cb4 <BIPAP_Mode_Task+0x33c>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]


			 pressure_high_error_count=0;        //new
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <BIPAP_Mode_Task+0x340>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
			 pressure_high_error_count2=0;       //new
 8002aec:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <BIPAP_Mode_Task+0x344>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

			 one_time_only=0;
 8002af2:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <BIPAP_Mode_Task+0x2bc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e00c      	b.n	8002b14 <BIPAP_Mode_Task+0x19c>


	      else
	      {

				  Initial_open_valve=0;
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <BIPAP_Mode_Task+0x2b8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
				  ExpValve_OPEN();
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0a:	6153      	str	r3, [r2, #20]
				  vTaskDelay(700);
 8002b0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b10:	f01c feac 	bl	801f86c <vTaskDelay>
	      }

	  }

		if(now_update==1)
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <BIPAP_Mode_Task+0x2d0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 80fa 	bne.w	8002d12 <BIPAP_Mode_Task+0x39a>
		{

			if(Pressure_sensor._Pressure_Val<=(P1.EPAP_Val-5))
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002b20:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b24:	3b04      	subs	r3, #4
 8002b26:	4a67      	ldr	r2, [pc, #412]	; (8002cc4 <BIPAP_Mode_Task+0x34c>)
 8002b28:	7912      	ldrb	r2, [r2, #4]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f340 80d0 	ble.w	8002cd0 <BIPAP_Mode_Task+0x358>
			{
				ExpValve_CLOSE();
 8002b30:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4a62      	ldr	r2, [pc, #392]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3a:	6153      	str	r3, [r2, #20]
				P1._Apnea_counter_trigger_check_time=2000;
 8002b3c:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002b3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b42:	809a      	strh	r2, [r3, #4]
				P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8002b44:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002b46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002b48:	461a      	mov	r2, r3
 8002b4a:	0152      	lsls	r2, r2, #5
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002b58:	849a      	strh	r2, [r3, #36]	; 0x24
				ExpValve_CLOSE();
 8002b5a:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <BIPAP_Mode_Task+0x348>)
 8002b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b64:	6153      	str	r3, [r2, #20]




				uwTick=0;
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <BIPAP_Mode_Task+0x2ec>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
				TPID.OutputSum=500;
 8002b6c:	494e      	ldr	r1, [pc, #312]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <BIPAP_Mode_Task+0x350>)
 8002b74:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				Speed=30;
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <BIPAP_Mode_Task+0x30c>)
 8002b7a:	221e      	movs	r2, #30
 8002b7c:	601a      	str	r2, [r3, #0]

				kp=5;
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <BIPAP_Mode_Task+0x2f8>)
 8002b80:	2205      	movs	r2, #5
 8002b82:	701a      	strb	r2, [r3, #0]
				ki=4;
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <BIPAP_Mode_Task+0x2fc>)
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]

				TempSetpoint = P1.EPAP_Val ;
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <BIPAP_Mode_Task+0x320>)
 8002b8c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc5f 	bl	8000454 <__aeabi_ui2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4940      	ldr	r1, [pc, #256]	; (8002c9c <BIPAP_Mode_Task+0x324>)
 8002b9c:	e9c1 2300 	strd	r2, r3, [r1]
				PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <BIPAP_Mode_Task+0x2f8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fc55 	bl	8000454 <__aeabi_ui2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <BIPAP_Mode_Task+0x2fc>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fc4e 	bl	8000454 <__aeabi_ui2d>
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <BIPAP_Mode_Task+0x300>)
 8002bba:	ed93 7b00 	vldr	d7, [r3]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	eeb0 2a47 	vmov.f32	s4, s14
 8002bca:	eef0 2a67 	vmov.f32	s5, s15
 8002bce:	ec41 0b11 	vmov	d1, r0, r1
 8002bd2:	ec45 4b10 	vmov	d0, r4, r5
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <BIPAP_Mode_Task+0x324>)
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <BIPAP_Mode_Task+0x328>)
 8002bda:	4932      	ldr	r1, [pc, #200]	; (8002ca4 <BIPAP_Mode_Task+0x32c>)
 8002bdc:	4832      	ldr	r0, [pc, #200]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002bde:	f011 fddf 	bl	80147a0 <PID>
				PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8002be2:	2101      	movs	r1, #1
 8002be4:	4830      	ldr	r0, [pc, #192]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002be6:	f011 ff11 	bl	8014a0c <PID_SetMode>

				PID_SetSampleTime(&TPID, Time);
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <BIPAP_Mode_Task+0x308>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	482d      	ldr	r0, [pc, #180]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002bf2:	f012 f887 	bl	8014d04 <PID_SetSampleTime>
				PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <BIPAP_Mode_Task+0x2f0>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fc2a 	bl	8000454 <__aeabi_ui2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <BIPAP_Mode_Task+0x2f4>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc23 	bl	8000454 <__aeabi_ui2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	ec43 2b11 	vmov	d1, r2, r3
 8002c16:	ec45 4b10 	vmov	d0, r4, r5
 8002c1a:	4823      	ldr	r0, [pc, #140]	; (8002ca8 <BIPAP_Mode_Task+0x330>)
 8002c1c:	f011 ff14 	bl	8014a48 <PID_SetOutputLimits>
				vol.Volume = 0;
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <BIPAP_Mode_Task+0x354>)
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
				now_update=0;
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <BIPAP_Mode_Task+0x2d0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e070      	b.n	8002d12 <BIPAP_Mode_Task+0x39a>
 8002c30:	20000044 	.word	0x20000044
 8002c34:	20000128 	.word	0x20000128
 8002c38:	20000308 	.word	0x20000308
 8002c3c:	20000318 	.word	0x20000318
 8002c40:	20000118 	.word	0x20000118
 8002c44:	2000011c 	.word	0x2000011c
 8002c48:	20016b28 	.word	0x20016b28
 8002c4c:	40007400 	.word	0x40007400
 8002c50:	20000120 	.word	0x20000120
 8002c54:	20000124 	.word	0x20000124
 8002c58:	20000328 	.word	0x20000328
 8002c5c:	2000031c 	.word	0x2000031c
 8002c60:	20000320 	.word	0x20000320
 8002c64:	20017094 	.word	0x20017094
 8002c68:	2000012e 	.word	0x2000012e
 8002c6c:	20000130 	.word	0x20000130
 8002c70:	20000136 	.word	0x20000136
 8002c74:	20000137 	.word	0x20000137
 8002c78:	20000138 	.word	0x20000138
 8002c7c:	3ff00000 	.word	0x3ff00000
 8002c80:	20000140 	.word	0x20000140
 8002c84:	20000144 	.word	0x20000144
 8002c88:	200168b4 	.word	0x200168b4
 8002c8c:	20000fe8 	.word	0x20000fe8
 8002c90:	20000feb 	.word	0x20000feb
 8002c94:	20000fea 	.word	0x20000fea
 8002c98:	20016960 	.word	0x20016960
 8002c9c:	20016e80 	.word	0x20016e80
 8002ca0:	20016a18 	.word	0x20016a18
 8002ca4:	20016a98 	.word	0x20016a98
 8002ca8:	200169a0 	.word	0x200169a0
 8002cac:	20000048 	.word	0x20000048
 8002cb0:	40001800 	.word	0x40001800
 8002cb4:	20000114 	.word	0x20000114
 8002cb8:	2000032c 	.word	0x2000032c
 8002cbc:	20000330 	.word	0x20000330
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	20016cfc 	.word	0x20016cfc
 8002cc8:	407f4000 	.word	0x407f4000
 8002ccc:	20016d44 	.word	0x20016d44
			}
			else if(Pressure_sensor._Pressure_Val>(P1.EPAP_Val-5))
 8002cd0:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002cd2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	4a8b      	ldr	r2, [pc, #556]	; (8002f08 <BIPAP_Mode_Task+0x590>)
 8002cda:	7912      	ldrb	r2, [r2, #4]
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	dc18      	bgt.n	8002d12 <BIPAP_Mode_Task+0x39a>
			{
				ExpValve_OPEN();
 8002ce0:	4b8a      	ldr	r3, [pc, #552]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4a89      	ldr	r2, [pc, #548]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cea:	6153      	str	r3, [r2, #20]
				vTaskDelay(600);
 8002cec:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002cf0:	f01c fdbc 	bl	801f86c <vTaskDelay>
				vol.Volume = 0;
 8002cf4:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <BIPAP_Mode_Task+0x598>)
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
				P1.EPAP_DAC_Val=0;
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	859a      	strh	r2, [r3, #44]	; 0x2c
				Blower_Signal(P1.EPAP_DAC_Val);
 8002d02:	4b80      	ldr	r3, [pc, #512]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d06:	4b83      	ldr	r3, [pc, #524]	; (8002f14 <BIPAP_Mode_Task+0x59c>)
 8002d08:	609a      	str	r2, [r3, #8]
				P1._Apnea_counter_trigger_check_time=2000;
 8002d0a:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002d0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d10:	809a      	strh	r2, [r3, #4]
			}
	   }

		/*****************************   air release    *****************************************/

				if(now_update==3)
 8002d12:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <BIPAP_Mode_Task+0x5a0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	f040 8089 	bne.w	8002e2e <BIPAP_Mode_Task+0x4b6>
				{

					if(Pressure_sensor._Pressure_Val<=(P1.EPAP_Val-4))
 8002d1c:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002d1e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d22:	3b03      	subs	r3, #3
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <BIPAP_Mode_Task+0x590>)
 8002d26:	7912      	ldrb	r2, [r2, #4]
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	dd6b      	ble.n	8002e04 <BIPAP_Mode_Task+0x48c>
					{
						ExpValve_CLOSE();
 8002d2c:	4b77      	ldr	r3, [pc, #476]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	4a76      	ldr	r2, [pc, #472]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d36:	6153      	str	r3, [r2, #20]
						P1._Apnea_counter_trigger_check_time=2000;
 8002d38:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002d3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d3e:	809a      	strh	r2, [r3, #4]

						uwTick=0;
 8002d40:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <BIPAP_Mode_Task+0x5a4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
						TPID.OutputSum=500;
 8002d46:	4976      	ldr	r1, [pc, #472]	; (8002f20 <BIPAP_Mode_Task+0x5a8>)
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	4b75      	ldr	r3, [pc, #468]	; (8002f24 <BIPAP_Mode_Task+0x5ac>)
 8002d4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
						Speed=30;
 8002d52:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <BIPAP_Mode_Task+0x5b0>)
 8002d54:	221e      	movs	r2, #30
 8002d56:	601a      	str	r2, [r3, #0]

						kp=5;
 8002d58:	4b74      	ldr	r3, [pc, #464]	; (8002f2c <BIPAP_Mode_Task+0x5b4>)
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	701a      	strb	r2, [r3, #0]
						ki=4;
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <BIPAP_Mode_Task+0x5b8>)
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]

						TempSetpoint = (P1.EPAP_Val );
 8002d64:	4b67      	ldr	r3, [pc, #412]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002d66:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fb72 	bl	8000454 <__aeabi_ui2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	496f      	ldr	r1, [pc, #444]	; (8002f34 <BIPAP_Mode_Task+0x5bc>)
 8002d76:	e9c1 2300 	strd	r2, r3, [r1]
						PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <BIPAP_Mode_Task+0x5b4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fb68 	bl	8000454 <__aeabi_ui2d>
 8002d84:	4604      	mov	r4, r0
 8002d86:	460d      	mov	r5, r1
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <BIPAP_Mode_Task+0x5b8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fb61 	bl	8000454 <__aeabi_ui2d>
 8002d92:	4b69      	ldr	r3, [pc, #420]	; (8002f38 <BIPAP_Mode_Task+0x5c0>)
 8002d94:	ed93 7b00 	vldr	d7, [r3]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	eeb0 2a47 	vmov.f32	s4, s14
 8002da4:	eef0 2a67 	vmov.f32	s5, s15
 8002da8:	ec41 0b11 	vmov	d1, r0, r1
 8002dac:	ec45 4b10 	vmov	d0, r4, r5
 8002db0:	4b60      	ldr	r3, [pc, #384]	; (8002f34 <BIPAP_Mode_Task+0x5bc>)
 8002db2:	4a62      	ldr	r2, [pc, #392]	; (8002f3c <BIPAP_Mode_Task+0x5c4>)
 8002db4:	4962      	ldr	r1, [pc, #392]	; (8002f40 <BIPAP_Mode_Task+0x5c8>)
 8002db6:	485a      	ldr	r0, [pc, #360]	; (8002f20 <BIPAP_Mode_Task+0x5a8>)
 8002db8:	f011 fcf2 	bl	80147a0 <PID>
						PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4858      	ldr	r0, [pc, #352]	; (8002f20 <BIPAP_Mode_Task+0x5a8>)
 8002dc0:	f011 fe24 	bl	8014a0c <PID_SetMode>

						PID_SetSampleTime(&TPID, Time);
 8002dc4:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <BIPAP_Mode_Task+0x5cc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4855      	ldr	r0, [pc, #340]	; (8002f20 <BIPAP_Mode_Task+0x5a8>)
 8002dcc:	f011 ff9a 	bl	8014d04 <PID_SetSampleTime>
						PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8002dd0:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <BIPAP_Mode_Task+0x5d0>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb3d 	bl	8000454 <__aeabi_ui2d>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <BIPAP_Mode_Task+0x5d4>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fb36 	bl	8000454 <__aeabi_ui2d>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	ec43 2b11 	vmov	d1, r2, r3
 8002df0:	ec45 4b10 	vmov	d0, r4, r5
 8002df4:	484a      	ldr	r0, [pc, #296]	; (8002f20 <BIPAP_Mode_Task+0x5a8>)
 8002df6:	f011 fe27 	bl	8014a48 <PID_SetOutputLimits>

						now_update=0;
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <BIPAP_Mode_Task+0x5a0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f000 bd82 	b.w	8003908 <BIPAP_Mode_Task+0xf90>
					}
					else if(Pressure_sensor._Pressure_Val>(P1.EPAP_Val-4))
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002e06:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002e0a:	3b03      	subs	r3, #3
 8002e0c:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <BIPAP_Mode_Task+0x590>)
 8002e0e:	7912      	ldrb	r2, [r2, #4]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	f300 8579 	bgt.w	8003908 <BIPAP_Mode_Task+0xf90>
					{
						ExpValve_OPEN();
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <BIPAP_Mode_Task+0x594>)
 8002e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e20:	6153      	str	r3, [r2, #20]
						vTaskDelay(600);
 8002e22:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002e26:	f01c fd21 	bl	801f86c <vTaskDelay>
 8002e2a:	f000 bd6d 	b.w	8003908 <BIPAP_Mode_Task+0xf90>
					}
			   }

		/*********************************************************************/

		else if((P1._APNEA_COUNTER >0) && (Trigger==0 )&& (now_update==0))
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <BIPAP_Mode_Task+0x58c>)
 8002e30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 84a4 	beq.w	8003780 <BIPAP_Mode_Task+0xe08>
 8002e38:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <BIPAP_Mode_Task+0x5d8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 849f 	bne.w	8003780 <BIPAP_Mode_Task+0xe08>
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <BIPAP_Mode_Task+0x5a0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 849a 	bne.w	8003780 <BIPAP_Mode_Task+0xe08>
		{

			_Control_Byte |= (uint8_t) 0x80;
 8002e4c:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <BIPAP_Mode_Task+0x5dc>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <BIPAP_Mode_Task+0x5dc>)
 8002e58:	701a      	strb	r2, [r3, #0]





			Alert_Data_send_count++;
 8002e5a:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <BIPAP_Mode_Task+0x5e0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <BIPAP_Mode_Task+0x5e0>)
 8002e62:	6013      	str	r3, [r2, #0]
			if(Alert_Data_send_count>1500)
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <BIPAP_Mode_Task+0x5e0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	dd05      	ble.n	8002e7c <BIPAP_Mode_Task+0x504>
			{
				A.Alert_Now=1;
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <BIPAP_Mode_Task+0x5e4>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	70da      	strb	r2, [r3, #3]
				Alert_Data_send_count=0;
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <BIPAP_Mode_Task+0x5e0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

			}



			if(pressure_acheived == 0)
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <BIPAP_Mode_Task+0x5e8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <BIPAP_Mode_Task+0x530>
			{
				Dac_control_count++;
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <BIPAP_Mode_Task+0x5ec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <BIPAP_Mode_Task+0x5ec>)
 8002e8c:	6013      	str	r3, [r2, #0]
				if(Dac_control_count>250)
 8002e8e:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <BIPAP_Mode_Task+0x5ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2bfa      	cmp	r3, #250	; 0xfa
 8002e94:	dd08      	ble.n	8002ea8 <BIPAP_Mode_Task+0x530>
				{
					pressure_acheived=1;
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <BIPAP_Mode_Task+0x5e8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
					Dac_control_count=0;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <BIPAP_Mode_Task+0x5ec>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
					Wait_Dac=1;
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <BIPAP_Mode_Task+0x5f0>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
				}
			}



			Alert_error_count++;
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <BIPAP_Mode_Task+0x5f4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <BIPAP_Mode_Task+0x5f4>)
 8002eb0:	6013      	str	r3, [r2, #0]

			Patient_Circuit_Disconnected_Alert_Func();
 8002eb2:	f7ff fab5 	bl	8002420 <Patient_Circuit_Disconnected_Alert_Func>
			Main_Supply_or_Battery_Indication();
 8002eb6:	f7ff f809 	bl	8001ecc <Main_Supply_or_Battery_Indication>

			if( Alert_error_count >= 500)
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <BIPAP_Mode_Task+0x5f4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec2:	db67      	blt.n	8002f94 <BIPAP_Mode_Task+0x61c>
			{
				if(Apnea_Patient_circuit_disconnected_Flag==1)
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <BIPAP_Mode_Task+0x5f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d155      	bne.n	8002f78 <BIPAP_Mode_Task+0x600>
				{

						Alert_Status_count++;
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <BIPAP_Mode_Task+0x5fc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a28      	ldr	r2, [pc, #160]	; (8002f74 <BIPAP_Mode_Task+0x5fc>)
 8002ed4:	6013      	str	r3, [r2, #0]
						if(Alert_Status_count>1)
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <BIPAP_Mode_Task+0x5fc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	dd54      	ble.n	8002f88 <BIPAP_Mode_Task+0x610>
						{
							A.Alert_Now=1;
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <BIPAP_Mode_Task+0x5e4>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	70da      	strb	r2, [r3, #3]
							Apnea_Patient_circuit_disconnected_Flag=0;
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <BIPAP_Mode_Task+0x5f8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

							Alert_Status_count=0;
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <BIPAP_Mode_Task+0x5fc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
							Alert_Data_send_count=0;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <BIPAP_Mode_Task+0x5e0>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
							Dac_control_count =0;
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <BIPAP_Mode_Task+0x5ec>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
							Alert_error_count=0;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <BIPAP_Mode_Task+0x5f4>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e041      	b.n	8002f88 <BIPAP_Mode_Task+0x610>
 8002f04:	20016960 	.word	0x20016960
 8002f08:	20016cfc 	.word	0x20016cfc
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	20016d44 	.word	0x20016d44
 8002f14:	40007400 	.word	0x40007400
 8002f18:	20016b28 	.word	0x20016b28
 8002f1c:	20017094 	.word	0x20017094
 8002f20:	200169a0 	.word	0x200169a0
 8002f24:	407f4000 	.word	0x407f4000
 8002f28:	20000144 	.word	0x20000144
 8002f2c:	20000136 	.word	0x20000136
 8002f30:	20000137 	.word	0x20000137
 8002f34:	20016e80 	.word	0x20016e80
 8002f38:	20000138 	.word	0x20000138
 8002f3c:	20016a18 	.word	0x20016a18
 8002f40:	20016a98 	.word	0x20016a98
 8002f44:	20000140 	.word	0x20000140
 8002f48:	2000012e 	.word	0x2000012e
 8002f4c:	20000130 	.word	0x20000130
 8002f50:	20016e50 	.word	0x20016e50
 8002f54:	20016e59 	.word	0x20016e59
 8002f58:	2000031c 	.word	0x2000031c
 8002f5c:	20016a2c 	.word	0x20016a2c
 8002f60:	20000114 	.word	0x20000114
 8002f64:	20000320 	.word	0x20000320
 8002f68:	20000118 	.word	0x20000118
 8002f6c:	20000308 	.word	0x20000308
 8002f70:	200002f4 	.word	0x200002f4
 8002f74:	20000318 	.word	0x20000318
						}

				}
				else
				{
					A.Alert_Now=1;
 8002f78:	4b71      	ldr	r3, [pc, #452]	; (8003140 <BIPAP_Mode_Task+0x7c8>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	70da      	strb	r2, [r3, #3]
					CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 8002f7e:	4a71      	ldr	r2, [pc, #452]	; (8003144 <BIPAP_Mode_Task+0x7cc>)
 8002f80:	78d3      	ldrb	r3, [r2, #3]
 8002f82:	f36f 03c3 	bfc	r3, #3, #1
 8002f86:	70d3      	strb	r3, [r2, #3]
				}
				now_open_valve=1;
 8002f88:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <BIPAP_Mode_Task+0x7d0>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
				Alert_error_count=0;
 8002f8e:	4b6f      	ldr	r3, [pc, #444]	; (800314c <BIPAP_Mode_Task+0x7d4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
			}



			  if((pressure_acheived == 1 )&& (Wait_Dac == 1))
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <BIPAP_Mode_Task+0x7d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d116      	bne.n	8002fca <BIPAP_Mode_Task+0x652>
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <BIPAP_Mode_Task+0x7dc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d112      	bne.n	8002fca <BIPAP_Mode_Task+0x652>
				{
					PID_Compute(&TPID);
 8002fa4:	486c      	ldr	r0, [pc, #432]	; (8003158 <BIPAP_Mode_Task+0x7e0>)
 8002fa6:	f011 fc47 	bl	8014838 <PID_Compute>
					P1.EPAP_DAC_Val=(int16_t)PIDOut;
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <BIPAP_Mode_Task+0x7e4>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fd62 	bl	8000a7c <__aeabi_d2iz>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	4b68      	ldr	r3, [pc, #416]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8002fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
					Blower_Signal( P1.EPAP_DAC_Val);
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8002fc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <BIPAP_Mode_Task+0x7ec>)
 8002fc8:	609a      	str	r2, [r3, #8]
				}



			  if((Flow_Sensor_cal._Flow_Val>0 )  &&  (pressure_acheived==0))
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <BIPAP_Mode_Task+0x7f0>)
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dd2e      	ble.n	8003030 <BIPAP_Mode_Task+0x6b8>
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <BIPAP_Mode_Task+0x7d8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12a      	bne.n	8003030 <BIPAP_Mode_Task+0x6b8>
			  {
				if( P1._Apnea_counter_trigger_check_time==0)
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8002fdc:	889b      	ldrh	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d126      	bne.n	8003030 <BIPAP_Mode_Task+0x6b8>
				{
					 if(pressure_acheived==0)
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <BIPAP_Mode_Task+0x7d8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d122      	bne.n	8003030 <BIPAP_Mode_Task+0x6b8>
					  {
						 if( (Start_check_time==0) && (Start_check==1))
 8002fea:	4b60      	ldr	r3, [pc, #384]	; (800316c <BIPAP_Mode_Task+0x7f4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11e      	bne.n	8003030 <BIPAP_Mode_Task+0x6b8>
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <BIPAP_Mode_Task+0x7f8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d11a      	bne.n	8003030 <BIPAP_Mode_Task+0x6b8>
						 {
							 Blower_Signal(0);
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <BIPAP_Mode_Task+0x7ec>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
							 Wait_Dac=0;
 8003000:	4b54      	ldr	r3, [pc, #336]	; (8003154 <BIPAP_Mode_Task+0x7dc>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
							 uwTick=0;
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <BIPAP_Mode_Task+0x7fc>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
							 TPID.OutputSum=300;
 800300c:	4952      	ldr	r1, [pc, #328]	; (8003158 <BIPAP_Mode_Task+0x7e0>)
 800300e:	a34a      	add	r3, pc, #296	; (adr r3, 8003138 <BIPAP_Mode_Task+0x7c0>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

							 Dac_control_count=0;
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <BIPAP_Mode_Task+0x800>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
							 Alert_Data_send_count=0;
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <BIPAP_Mode_Task+0x804>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
							 Alert_Status_count=0;
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <BIPAP_Mode_Task+0x808>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
							 Alert_error_count=0;
 800302a:	4b48      	ldr	r3, [pc, #288]	; (800314c <BIPAP_Mode_Task+0x7d4>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
			  }




			if(Pressure_sensor._Pressure_Val >= (P1.EPAP_Val))
 8003030:	4b54      	ldr	r3, [pc, #336]	; (8003184 <BIPAP_Mode_Task+0x80c>)
 8003032:	791a      	ldrb	r2, [r3, #4]
 8003034:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8003036:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800303a:	429a      	cmp	r2, r3
 800303c:	d320      	bcc.n	8003080 <BIPAP_Mode_Task+0x708>
			{
				if((initial_blower_trigger==0))
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <BIPAP_Mode_Task+0x810>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d112      	bne.n	800306c <BIPAP_Mode_Task+0x6f4>
				{
					if(Start_check_time==0)
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <BIPAP_Mode_Task+0x7f4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <BIPAP_Mode_Task+0x708>
					{
						pressure_acheived=0;
 800304e:	4b40      	ldr	r3, [pc, #256]	; (8003150 <BIPAP_Mode_Task+0x7d8>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
						if(Apnea_counter_trigger_Flag==1)
 8003054:	4b4d      	ldr	r3, [pc, #308]	; (800318c <BIPAP_Mode_Task+0x814>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d111      	bne.n	8003080 <BIPAP_Mode_Task+0x708>
						{
							if(Flow_Sensor_cal._Flow_Val==0)
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <BIPAP_Mode_Task+0x7f0>)
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <BIPAP_Mode_Task+0x708>
							{
								Apnea_counter_trigger_Flag=0;
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <BIPAP_Mode_Task+0x814>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e009      	b.n	8003080 <BIPAP_Mode_Task+0x708>
						}
					}
				}
				 else
				 {
					 initial_blower_trigger=0;
 800306c:	4b46      	ldr	r3, [pc, #280]	; (8003188 <BIPAP_Mode_Task+0x810>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
					 Start_check=1;
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <BIPAP_Mode_Task+0x7f8>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]
					 Start_check_time=500;
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <BIPAP_Mode_Task+0x7f4>)
 800307a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800307e:	601a      	str	r2, [r3, #0]
			}



			  /****************  psv air release   ******************************/
			        if(Pressure_sensor._Pressure_Val >= (P1.EPAP_Val +5))
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8003082:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003086:	3304      	adds	r3, #4
 8003088:	4a3e      	ldr	r2, [pc, #248]	; (8003184 <BIPAP_Mode_Task+0x80c>)
 800308a:	7912      	ldrb	r2, [r2, #4]
 800308c:	4293      	cmp	r3, r2
 800308e:	da14      	bge.n	80030ba <BIPAP_Mode_Task+0x742>
			        {
			        	pressure_high_error_count++;
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <BIPAP_Mode_Task+0x818>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <BIPAP_Mode_Task+0x818>)
 8003098:	6013      	str	r3, [r2, #0]
			        	P1._Apnea_counter_trigger_check_time=1000;
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 800309c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a0:	809a      	strh	r2, [r3, #4]
			        	if(pressure_high_error_count>1000)
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <BIPAP_Mode_Task+0x818>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030aa:	dd1e      	ble.n	80030ea <BIPAP_Mode_Task+0x772>
			        	{
			        		now_update=3;
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <BIPAP_Mode_Task+0x81c>)
 80030ae:	2203      	movs	r2, #3
 80030b0:	601a      	str	r2, [r3, #0]
			        		pressure_high_error_count=0;
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <BIPAP_Mode_Task+0x818>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e017      	b.n	80030ea <BIPAP_Mode_Task+0x772>
			        	}

			        }

			        else if(Pressure_sensor._Pressure_Val < (P1.EPAP_Val +5))
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 80030bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030c0:	3304      	adds	r3, #4
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <BIPAP_Mode_Task+0x80c>)
 80030c4:	7912      	ldrb	r2, [r2, #4]
 80030c6:	4293      	cmp	r3, r2
 80030c8:	db0f      	blt.n	80030ea <BIPAP_Mode_Task+0x772>
			        {
			        	pressure_high_error_count2++;
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <BIPAP_Mode_Task+0x820>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	4a31      	ldr	r2, [pc, #196]	; (8003198 <BIPAP_Mode_Task+0x820>)
 80030d2:	6013      	str	r3, [r2, #0]
			        	if(pressure_high_error_count2>1000)
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <BIPAP_Mode_Task+0x820>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030dc:	dd05      	ble.n	80030ea <BIPAP_Mode_Task+0x772>
			        	{
			        		pressure_high_error_count=0;
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <BIPAP_Mode_Task+0x818>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
			        		pressure_high_error_count2=0;
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <BIPAP_Mode_Task+0x820>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

			/*********************************************************************/



			if( P1._Apnea_counter_trigger_check_time==0 && Apnea_counter_trigger_Flag==0)
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 80030ec:	889b      	ldrh	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 82e3 	bne.w	80036ba <BIPAP_Mode_Task+0xd42>
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <BIPAP_Mode_Task+0x814>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 82de 	bne.w	80036ba <BIPAP_Mode_Task+0xd42>
			{
				if (P1._TRIG_TYPE == 1)
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8003100:	88db      	ldrh	r3, [r3, #6]
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 81a8 	bne.w	8003458 <BIPAP_Mode_Task+0xae0>
			    {
			        if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <BIPAP_Mode_Task+0x80c>)
 800310a:	791b      	ldrb	r3, [r3, #4]
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 8003116:	edd3 6a05 	vldr	s13, [r3, #20]
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <BIPAP_Mode_Task+0x7e8>)
 800311c:	891b      	ldrh	r3, [r3, #8]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003126:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800312a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003132:	d433      	bmi.n	800319c <BIPAP_Mode_Task+0x824>
				if (P1._TRIG_TYPE == 1)
 8003134:	e31c      	b.n	8003770 <BIPAP_Mode_Task+0xdf8>
 8003136:	bf00      	nop
 8003138:	00000000 	.word	0x00000000
 800313c:	4072c000 	.word	0x4072c000
 8003140:	20016a2c 	.word	0x20016a2c
 8003144:	20016ea8 	.word	0x20016ea8
 8003148:	2000030c 	.word	0x2000030c
 800314c:	20000308 	.word	0x20000308
 8003150:	20000114 	.word	0x20000114
 8003154:	20000118 	.word	0x20000118
 8003158:	200169a0 	.word	0x200169a0
 800315c:	20016a18 	.word	0x20016a18
 8003160:	20016960 	.word	0x20016960
 8003164:	40007400 	.word	0x40007400
 8003168:	20016c48 	.word	0x20016c48
 800316c:	20000324 	.word	0x20000324
 8003170:	20000328 	.word	0x20000328
 8003174:	20017094 	.word	0x20017094
 8003178:	20000320 	.word	0x20000320
 800317c:	2000031c 	.word	0x2000031c
 8003180:	20000318 	.word	0x20000318
 8003184:	20016cfc 	.word	0x20016cfc
 8003188:	20000120 	.word	0x20000120
 800318c:	2000011c 	.word	0x2000011c
 8003190:	2000032c 	.word	0x2000032c
 8003194:	20016b28 	.word	0x20016b28
 8003198:	20000330 	.word	0x20000330
			        {


			        	if (_CurrentBackupMode == PCCMV_BACKUP)
 800319c:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <BIPAP_Mode_Task+0xa80>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8090 	bne.w	80032c6 <BIPAP_Mode_Task+0x94e>
			        	{
			        		now_check_breath=1;
 80031a6:	4b95      	ldr	r3, [pc, #596]	; (80033fc <BIPAP_Mode_Task+0xa84>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
			        		_Control_Byte &= (uint8_t) (~(0x80));
 80031ac:	4b94      	ldr	r3, [pc, #592]	; (8003400 <BIPAP_Mode_Task+0xa88>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b92      	ldr	r3, [pc, #584]	; (8003400 <BIPAP_Mode_Task+0xa88>)
 80031b8:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 80031ba:	4b92      	ldr	r3, [pc, #584]	; (8003404 <BIPAP_Mode_Task+0xa8c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a90      	ldr	r2, [pc, #576]	; (8003404 <BIPAP_Mode_Task+0xa8c>)
 80031c2:	6013      	str	r3, [r2, #0]
			        		_I_TIMER = P1.T_HIGH_VAL;
 80031c4:	4b90      	ldr	r3, [pc, #576]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b90      	ldr	r3, [pc, #576]	; (800340c <BIPAP_Mode_Task+0xa94>)
 80031cc:	601a      	str	r2, [r3, #0]
			        		P1.EPAP_DAC_Val=0;
 80031ce:	4b8e      	ldr	r3, [pc, #568]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	859a      	strh	r2, [r3, #44]	; 0x2c
			        		Blower_Signal(P1.EPAP_DAC_Val);
 80031d4:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 80031d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d8:	4b8d      	ldr	r3, [pc, #564]	; (8003410 <BIPAP_Mode_Task+0xa98>)
 80031da:	609a      	str	r2, [r3, #8]
			        		vol.Volume = 0;
 80031dc:	4b8d      	ldr	r3, [pc, #564]	; (8003414 <BIPAP_Mode_Task+0xa9c>)
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
			        		ExpValve_CLOSE();
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <BIPAP_Mode_Task+0xaa0>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a8b      	ldr	r2, [pc, #556]	; (8003418 <BIPAP_Mode_Task+0xaa0>)
 80031ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ee:	6153      	str	r3, [r2, #20]


			        		uwTick=0;
 80031f0:	4b8a      	ldr	r3, [pc, #552]	; (800341c <BIPAP_Mode_Task+0xaa4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
							TPID.OutputSum=300;
 80031f6:	498a      	ldr	r1, [pc, #552]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 80031f8:	a37d      	add	r3, pc, #500	; (adr r3, 80033f0 <BIPAP_Mode_Task+0xa78>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							Speed=40;
 8003202:	4b88      	ldr	r3, [pc, #544]	; (8003424 <BIPAP_Mode_Task+0xaac>)
 8003204:	2228      	movs	r2, #40	; 0x28
 8003206:	601a      	str	r2, [r3, #0]
							kp=5;
 8003208:	4b87      	ldr	r3, [pc, #540]	; (8003428 <BIPAP_Mode_Task+0xab0>)
 800320a:	2205      	movs	r2, #5
 800320c:	701a      	strb	r2, [r3, #0]
							ki=4;
 800320e:	4b87      	ldr	r3, [pc, #540]	; (800342c <BIPAP_Mode_Task+0xab4>)
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]

			        		TempSetpoint = P1.IPAP_Val;
 8003214:	4b7c      	ldr	r3, [pc, #496]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 8003216:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f91a 	bl	8000454 <__aeabi_ui2d>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4982      	ldr	r1, [pc, #520]	; (8003430 <BIPAP_Mode_Task+0xab8>)
 8003226:	e9c1 2300 	strd	r2, r3, [r1]
			        		PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <BIPAP_Mode_Task+0xab0>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f910 	bl	8000454 <__aeabi_ui2d>
 8003234:	4604      	mov	r4, r0
 8003236:	460d      	mov	r5, r1
 8003238:	4b7c      	ldr	r3, [pc, #496]	; (800342c <BIPAP_Mode_Task+0xab4>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f909 	bl	8000454 <__aeabi_ui2d>
 8003242:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <BIPAP_Mode_Task+0xabc>)
 8003244:	ed93 7b00 	vldr	d7, [r3]
 8003248:	2300      	movs	r3, #0
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	2301      	movs	r3, #1
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	eeb0 2a47 	vmov.f32	s4, s14
 8003254:	eef0 2a67 	vmov.f32	s5, s15
 8003258:	ec41 0b11 	vmov	d1, r0, r1
 800325c:	ec45 4b10 	vmov	d0, r4, r5
 8003260:	4b73      	ldr	r3, [pc, #460]	; (8003430 <BIPAP_Mode_Task+0xab8>)
 8003262:	4a75      	ldr	r2, [pc, #468]	; (8003438 <BIPAP_Mode_Task+0xac0>)
 8003264:	4975      	ldr	r1, [pc, #468]	; (800343c <BIPAP_Mode_Task+0xac4>)
 8003266:	486e      	ldr	r0, [pc, #440]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 8003268:	f011 fa9a 	bl	80147a0 <PID>
			        		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800326c:	2101      	movs	r1, #1
 800326e:	486c      	ldr	r0, [pc, #432]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 8003270:	f011 fbcc 	bl	8014a0c <PID_SetMode>

			        		PID_SetSampleTime(&TPID, Time);
 8003274:	4b72      	ldr	r3, [pc, #456]	; (8003440 <BIPAP_Mode_Task+0xac8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4869      	ldr	r0, [pc, #420]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 800327c:	f011 fd42 	bl	8014d04 <PID_SetSampleTime>
			        		PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8003280:	4b70      	ldr	r3, [pc, #448]	; (8003444 <BIPAP_Mode_Task+0xacc>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f8e5 	bl	8000454 <__aeabi_ui2d>
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1
 800328e:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <BIPAP_Mode_Task+0xad0>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f8de 	bl	8000454 <__aeabi_ui2d>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	ec43 2b11 	vmov	d1, r2, r3
 80032a0:	ec45 4b10 	vmov	d0, r4, r5
 80032a4:	485e      	ldr	r0, [pc, #376]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 80032a6:	f011 fbcf 	bl	8014a48 <PID_SetOutputLimits>

			        		Trigger=1;
 80032aa:	4b68      	ldr	r3, [pc, #416]	; (800344c <BIPAP_Mode_Task+0xad4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
			        		vTaskResume(BiPap_Pid_Handler);
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <BIPAP_Mode_Task+0xad8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f01c fbd1 	bl	801fa5c <vTaskResume>
			        		vTaskSuspend(BiPap_Handler);
 80032ba:	4b66      	ldr	r3, [pc, #408]	; (8003454 <BIPAP_Mode_Task+0xadc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f01c fb08 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 80032c4:	e254      	b.n	8003770 <BIPAP_Mode_Task+0xdf8>

			        	}
			        	else if (_CurrentBackupMode == VCCMV_BACKUP)
 80032c6:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <BIPAP_Mode_Task+0xa80>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	f040 8250 	bne.w	8003770 <BIPAP_Mode_Task+0xdf8>
			        	{
			        		now_check_breath=1;
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <BIPAP_Mode_Task+0xa84>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
			        		_Control_Byte &= (uint8_t) (~(0x80));
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <BIPAP_Mode_Task+0xa88>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b47      	ldr	r3, [pc, #284]	; (8003400 <BIPAP_Mode_Task+0xa88>)
 80032e2:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <BIPAP_Mode_Task+0xa8c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a46      	ldr	r2, [pc, #280]	; (8003404 <BIPAP_Mode_Task+0xa8c>)
 80032ec:	6013      	str	r3, [r2, #0]
			        		_I_TIMER = P1.T_HIGH_VAL;
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 80032f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b45      	ldr	r3, [pc, #276]	; (800340c <BIPAP_Mode_Task+0xa94>)
 80032f6:	601a      	str	r2, [r3, #0]
			        		P1.EPAP_DAC_Val=0;
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	859a      	strh	r2, [r3, #44]	; 0x2c
			        		Blower_Signal(P1.EPAP_DAC_Val);
 80032fe:	4b42      	ldr	r3, [pc, #264]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 8003300:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003302:	4b43      	ldr	r3, [pc, #268]	; (8003410 <BIPAP_Mode_Task+0xa98>)
 8003304:	609a      	str	r2, [r3, #8]
			        		vol.Volume = 0;
 8003306:	4b43      	ldr	r3, [pc, #268]	; (8003414 <BIPAP_Mode_Task+0xa9c>)
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
			        		ExpValve_CLOSE();
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <BIPAP_Mode_Task+0xaa0>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <BIPAP_Mode_Task+0xaa0>)
 8003314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003318:	6153      	str	r3, [r2, #20]


			        		uwTick=0;
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <BIPAP_Mode_Task+0xaa4>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
							TPID.OutputSum=300;
 8003320:	493f      	ldr	r1, [pc, #252]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 8003322:	a333      	add	r3, pc, #204	; (adr r3, 80033f0 <BIPAP_Mode_Task+0xa78>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							Speed=40;
 800332c:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <BIPAP_Mode_Task+0xaac>)
 800332e:	2228      	movs	r2, #40	; 0x28
 8003330:	601a      	str	r2, [r3, #0]
							kp=5;
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <BIPAP_Mode_Task+0xab0>)
 8003334:	2205      	movs	r2, #5
 8003336:	701a      	strb	r2, [r3, #0]
							ki=4;
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <BIPAP_Mode_Task+0xab4>)
 800333a:	2204      	movs	r2, #4
 800333c:	701a      	strb	r2, [r3, #0]

			        		TempSetpoint = P1.IPAP_Val;
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <BIPAP_Mode_Task+0xa90>)
 8003340:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f885 	bl	8000454 <__aeabi_ui2d>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4938      	ldr	r1, [pc, #224]	; (8003430 <BIPAP_Mode_Task+0xab8>)
 8003350:	e9c1 2300 	strd	r2, r3, [r1]
			        		PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003354:	4b34      	ldr	r3, [pc, #208]	; (8003428 <BIPAP_Mode_Task+0xab0>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd f87b 	bl	8000454 <__aeabi_ui2d>
 800335e:	4604      	mov	r4, r0
 8003360:	460d      	mov	r5, r1
 8003362:	4b32      	ldr	r3, [pc, #200]	; (800342c <BIPAP_Mode_Task+0xab4>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f874 	bl	8000454 <__aeabi_ui2d>
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <BIPAP_Mode_Task+0xabc>)
 800336e:	ed93 7b00 	vldr	d7, [r3]
 8003372:	2300      	movs	r3, #0
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	2301      	movs	r3, #1
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	eeb0 2a47 	vmov.f32	s4, s14
 800337e:	eef0 2a67 	vmov.f32	s5, s15
 8003382:	ec41 0b11 	vmov	d1, r0, r1
 8003386:	ec45 4b10 	vmov	d0, r4, r5
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <BIPAP_Mode_Task+0xab8>)
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <BIPAP_Mode_Task+0xac0>)
 800338e:	492b      	ldr	r1, [pc, #172]	; (800343c <BIPAP_Mode_Task+0xac4>)
 8003390:	4823      	ldr	r0, [pc, #140]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 8003392:	f011 fa05 	bl	80147a0 <PID>
			        		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003396:	2101      	movs	r1, #1
 8003398:	4821      	ldr	r0, [pc, #132]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 800339a:	f011 fb37 	bl	8014a0c <PID_SetMode>

			        		PID_SetSampleTime(&TPID, Time);
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <BIPAP_Mode_Task+0xac8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	481e      	ldr	r0, [pc, #120]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 80033a6:	f011 fcad 	bl	8014d04 <PID_SetSampleTime>
			        		PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <BIPAP_Mode_Task+0xacc>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f850 	bl	8000454 <__aeabi_ui2d>
 80033b4:	4604      	mov	r4, r0
 80033b6:	460d      	mov	r5, r1
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <BIPAP_Mode_Task+0xad0>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f849 	bl	8000454 <__aeabi_ui2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	ec43 2b11 	vmov	d1, r2, r3
 80033ca:	ec45 4b10 	vmov	d0, r4, r5
 80033ce:	4814      	ldr	r0, [pc, #80]	; (8003420 <BIPAP_Mode_Task+0xaa8>)
 80033d0:	f011 fb3a 	bl	8014a48 <PID_SetOutputLimits>


			        		Trigger=1;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <BIPAP_Mode_Task+0xad4>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
			        		vTaskResume(BiPap_Pid_Handler);
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <BIPAP_Mode_Task+0xad8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f01c fb3c 	bl	801fa5c <vTaskResume>
			        		vTaskSuspend(BiPap_Handler);
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <BIPAP_Mode_Task+0xadc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f01c fa73 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 80033ee:	e1bf      	b.n	8003770 <BIPAP_Mode_Task+0xdf8>
 80033f0:	00000000 	.word	0x00000000
 80033f4:	4072c000 	.word	0x4072c000
 80033f8:	2000012c 	.word	0x2000012c
 80033fc:	20000feb 	.word	0x20000feb
 8003400:	20016e59 	.word	0x20016e59
 8003404:	200168b4 	.word	0x200168b4
 8003408:	20016960 	.word	0x20016960
 800340c:	20016df0 	.word	0x20016df0
 8003410:	40007400 	.word	0x40007400
 8003414:	20016d44 	.word	0x20016d44
 8003418:	40020400 	.word	0x40020400
 800341c:	20017094 	.word	0x20017094
 8003420:	200169a0 	.word	0x200169a0
 8003424:	20000144 	.word	0x20000144
 8003428:	20000136 	.word	0x20000136
 800342c:	20000137 	.word	0x20000137
 8003430:	20016e80 	.word	0x20016e80
 8003434:	20000138 	.word	0x20000138
 8003438:	20016a18 	.word	0x20016a18
 800343c:	20016a98 	.word	0x20016a98
 8003440:	20000140 	.word	0x20000140
 8003444:	2000012e 	.word	0x2000012e
 8003448:	20000130 	.word	0x20000130
 800344c:	20016e50 	.word	0x20016e50
 8003450:	20016878 	.word	0x20016878
 8003454:	20016a24 	.word	0x20016a24
			        	}
			         }
			      }
			      else
			      {
			         if((Flow_Sensor_cal._Flow_Val>(P1._TRIG_LMT)))
 8003458:	4bab      	ldr	r3, [pc, #684]	; (8003708 <BIPAP_Mode_Task+0xd90>)
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4aab      	ldr	r2, [pc, #684]	; (800370c <BIPAP_Mode_Task+0xd94>)
 800345e:	8912      	ldrh	r2, [r2, #8]
 8003460:	4293      	cmp	r3, r2
 8003462:	f340 8185 	ble.w	8003770 <BIPAP_Mode_Task+0xdf8>
			         {


						if (_CurrentBackupMode == PCCMV_BACKUP)
 8003466:	4baa      	ldr	r3, [pc, #680]	; (8003710 <BIPAP_Mode_Task+0xd98>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8090 	bne.w	8003590 <BIPAP_Mode_Task+0xc18>
						{
							now_check_breath=1;
 8003470:	4ba8      	ldr	r3, [pc, #672]	; (8003714 <BIPAP_Mode_Task+0xd9c>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
							_Control_Byte &= (uint8_t) (~(0x80));
 8003476:	4ba8      	ldr	r3, [pc, #672]	; (8003718 <BIPAP_Mode_Task+0xda0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4ba5      	ldr	r3, [pc, #660]	; (8003718 <BIPAP_Mode_Task+0xda0>)
 8003482:	701a      	strb	r2, [r3, #0]
							Trigger_Count++;
 8003484:	4ba5      	ldr	r3, [pc, #660]	; (800371c <BIPAP_Mode_Task+0xda4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4aa4      	ldr	r2, [pc, #656]	; (800371c <BIPAP_Mode_Task+0xda4>)
 800348c:	6013      	str	r3, [r2, #0]
							_I_TIMER = P1.T_HIGH_VAL;
 800348e:	4b9f      	ldr	r3, [pc, #636]	; (800370c <BIPAP_Mode_Task+0xd94>)
 8003490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003492:	461a      	mov	r2, r3
 8003494:	4ba2      	ldr	r3, [pc, #648]	; (8003720 <BIPAP_Mode_Task+0xda8>)
 8003496:	601a      	str	r2, [r3, #0]
							P1.EPAP_DAC_Val=0;
 8003498:	4b9c      	ldr	r3, [pc, #624]	; (800370c <BIPAP_Mode_Task+0xd94>)
 800349a:	2200      	movs	r2, #0
 800349c:	859a      	strh	r2, [r3, #44]	; 0x2c
							Blower_Signal(P1.EPAP_DAC_Val);
 800349e:	4b9b      	ldr	r3, [pc, #620]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80034a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034a2:	4ba0      	ldr	r3, [pc, #640]	; (8003724 <BIPAP_Mode_Task+0xdac>)
 80034a4:	609a      	str	r2, [r3, #8]
							vol.Volume = 0;
 80034a6:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <BIPAP_Mode_Task+0xdb0>)
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
							ExpValve_CLOSE();
 80034ae:	4b9f      	ldr	r3, [pc, #636]	; (800372c <BIPAP_Mode_Task+0xdb4>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4a9e      	ldr	r2, [pc, #632]	; (800372c <BIPAP_Mode_Task+0xdb4>)
 80034b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034b8:	6153      	str	r3, [r2, #20]

							uwTick=0;
 80034ba:	4b9d      	ldr	r3, [pc, #628]	; (8003730 <BIPAP_Mode_Task+0xdb8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
							TPID.OutputSum=300;
 80034c0:	499c      	ldr	r1, [pc, #624]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 80034c2:	a38f      	add	r3, pc, #572	; (adr r3, 8003700 <BIPAP_Mode_Task+0xd88>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							Speed=40;
 80034cc:	4b9a      	ldr	r3, [pc, #616]	; (8003738 <BIPAP_Mode_Task+0xdc0>)
 80034ce:	2228      	movs	r2, #40	; 0x28
 80034d0:	601a      	str	r2, [r3, #0]
							kp=5;
 80034d2:	4b9a      	ldr	r3, [pc, #616]	; (800373c <BIPAP_Mode_Task+0xdc4>)
 80034d4:	2205      	movs	r2, #5
 80034d6:	701a      	strb	r2, [r3, #0]
							ki=4;
 80034d8:	4b99      	ldr	r3, [pc, #612]	; (8003740 <BIPAP_Mode_Task+0xdc8>)
 80034da:	2204      	movs	r2, #4
 80034dc:	701a      	strb	r2, [r3, #0]

							TempSetpoint = P1.IPAP_Val;
 80034de:	4b8b      	ldr	r3, [pc, #556]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80034e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fc ffb5 	bl	8000454 <__aeabi_ui2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4995      	ldr	r1, [pc, #596]	; (8003744 <BIPAP_Mode_Task+0xdcc>)
 80034f0:	e9c1 2300 	strd	r2, r3, [r1]
							PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80034f4:	4b91      	ldr	r3, [pc, #580]	; (800373c <BIPAP_Mode_Task+0xdc4>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fc ffab 	bl	8000454 <__aeabi_ui2d>
 80034fe:	4604      	mov	r4, r0
 8003500:	460d      	mov	r5, r1
 8003502:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <BIPAP_Mode_Task+0xdc8>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fc ffa4 	bl	8000454 <__aeabi_ui2d>
 800350c:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <BIPAP_Mode_Task+0xdd0>)
 800350e:	ed93 7b00 	vldr	d7, [r3]
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2301      	movs	r3, #1
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	eeb0 2a47 	vmov.f32	s4, s14
 800351e:	eef0 2a67 	vmov.f32	s5, s15
 8003522:	ec41 0b11 	vmov	d1, r0, r1
 8003526:	ec45 4b10 	vmov	d0, r4, r5
 800352a:	4b86      	ldr	r3, [pc, #536]	; (8003744 <BIPAP_Mode_Task+0xdcc>)
 800352c:	4a87      	ldr	r2, [pc, #540]	; (800374c <BIPAP_Mode_Task+0xdd4>)
 800352e:	4988      	ldr	r1, [pc, #544]	; (8003750 <BIPAP_Mode_Task+0xdd8>)
 8003530:	4880      	ldr	r0, [pc, #512]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 8003532:	f011 f935 	bl	80147a0 <PID>
							PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003536:	2101      	movs	r1, #1
 8003538:	487e      	ldr	r0, [pc, #504]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 800353a:	f011 fa67 	bl	8014a0c <PID_SetMode>

							PID_SetSampleTime(&TPID, Time);
 800353e:	4b85      	ldr	r3, [pc, #532]	; (8003754 <BIPAP_Mode_Task+0xddc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4619      	mov	r1, r3
 8003544:	487b      	ldr	r0, [pc, #492]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 8003546:	f011 fbdd 	bl	8014d04 <PID_SetSampleTime>
							PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800354a:	4b83      	ldr	r3, [pc, #524]	; (8003758 <BIPAP_Mode_Task+0xde0>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc ff80 	bl	8000454 <__aeabi_ui2d>
 8003554:	4604      	mov	r4, r0
 8003556:	460d      	mov	r5, r1
 8003558:	4b80      	ldr	r3, [pc, #512]	; (800375c <BIPAP_Mode_Task+0xde4>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc ff79 	bl	8000454 <__aeabi_ui2d>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	ec43 2b11 	vmov	d1, r2, r3
 800356a:	ec45 4b10 	vmov	d0, r4, r5
 800356e:	4871      	ldr	r0, [pc, #452]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 8003570:	f011 fa6a 	bl	8014a48 <PID_SetOutputLimits>


							Trigger=1;
 8003574:	4b7a      	ldr	r3, [pc, #488]	; (8003760 <BIPAP_Mode_Task+0xde8>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
							vTaskResume(BiPap_Pid_Handler);
 800357a:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <BIPAP_Mode_Task+0xdec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f01c fa6c 	bl	801fa5c <vTaskResume>
							vTaskSuspend(BiPap_Handler);
 8003584:	4b78      	ldr	r3, [pc, #480]	; (8003768 <BIPAP_Mode_Task+0xdf0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f01c f9a3 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 800358e:	e0ef      	b.n	8003770 <BIPAP_Mode_Task+0xdf8>

						}
						else if (_CurrentBackupMode == VCCMV_BACKUP)
 8003590:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <BIPAP_Mode_Task+0xd98>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 80eb 	bne.w	8003770 <BIPAP_Mode_Task+0xdf8>
						{
							now_check_breath=1;
 800359a:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <BIPAP_Mode_Task+0xd9c>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
							_Control_Byte &= (uint8_t) (~(0x80));
 80035a0:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <BIPAP_Mode_Task+0xda0>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <BIPAP_Mode_Task+0xda0>)
 80035ac:	701a      	strb	r2, [r3, #0]
							Trigger_Count++;
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <BIPAP_Mode_Task+0xda4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a59      	ldr	r2, [pc, #356]	; (800371c <BIPAP_Mode_Task+0xda4>)
 80035b6:	6013      	str	r3, [r2, #0]
							_I_TIMER = P1.T_HIGH_VAL;
 80035b8:	4b54      	ldr	r3, [pc, #336]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80035ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035bc:	461a      	mov	r2, r3
 80035be:	4b58      	ldr	r3, [pc, #352]	; (8003720 <BIPAP_Mode_Task+0xda8>)
 80035c0:	601a      	str	r2, [r3, #0]
							P1.EPAP_DAC_Val=0;
 80035c2:	4b52      	ldr	r3, [pc, #328]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	859a      	strh	r2, [r3, #44]	; 0x2c
							Blower_Signal(P1.EPAP_DAC_Val);
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80035ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035cc:	4b55      	ldr	r3, [pc, #340]	; (8003724 <BIPAP_Mode_Task+0xdac>)
 80035ce:	609a      	str	r2, [r3, #8]
							vol.Volume = 0;
 80035d0:	4b55      	ldr	r3, [pc, #340]	; (8003728 <BIPAP_Mode_Task+0xdb0>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
							ExpValve_CLOSE();
 80035d8:	4b54      	ldr	r3, [pc, #336]	; (800372c <BIPAP_Mode_Task+0xdb4>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4a53      	ldr	r2, [pc, #332]	; (800372c <BIPAP_Mode_Task+0xdb4>)
 80035de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035e2:	6153      	str	r3, [r2, #20]

							uwTick=0;
 80035e4:	4b52      	ldr	r3, [pc, #328]	; (8003730 <BIPAP_Mode_Task+0xdb8>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
							TPID.OutputSum=300;
 80035ea:	4952      	ldr	r1, [pc, #328]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 80035ec:	a344      	add	r3, pc, #272	; (adr r3, 8003700 <BIPAP_Mode_Task+0xd88>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							Speed=40;
 80035f6:	4b50      	ldr	r3, [pc, #320]	; (8003738 <BIPAP_Mode_Task+0xdc0>)
 80035f8:	2228      	movs	r2, #40	; 0x28
 80035fa:	601a      	str	r2, [r3, #0]
							kp=5;
 80035fc:	4b4f      	ldr	r3, [pc, #316]	; (800373c <BIPAP_Mode_Task+0xdc4>)
 80035fe:	2205      	movs	r2, #5
 8003600:	701a      	strb	r2, [r3, #0]
							ki=4;
 8003602:	4b4f      	ldr	r3, [pc, #316]	; (8003740 <BIPAP_Mode_Task+0xdc8>)
 8003604:	2204      	movs	r2, #4
 8003606:	701a      	strb	r2, [r3, #0]

							TempSetpoint = P1.IPAP_Val;
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <BIPAP_Mode_Task+0xd94>)
 800360a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc ff20 	bl	8000454 <__aeabi_ui2d>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	494a      	ldr	r1, [pc, #296]	; (8003744 <BIPAP_Mode_Task+0xdcc>)
 800361a:	e9c1 2300 	strd	r2, r3, [r1]
							PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <BIPAP_Mode_Task+0xdc4>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff16 	bl	8000454 <__aeabi_ui2d>
 8003628:	4604      	mov	r4, r0
 800362a:	460d      	mov	r5, r1
 800362c:	4b44      	ldr	r3, [pc, #272]	; (8003740 <BIPAP_Mode_Task+0xdc8>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff0f 	bl	8000454 <__aeabi_ui2d>
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <BIPAP_Mode_Task+0xdd0>)
 8003638:	ed93 7b00 	vldr	d7, [r3]
 800363c:	2300      	movs	r3, #0
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2301      	movs	r3, #1
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	eeb0 2a47 	vmov.f32	s4, s14
 8003648:	eef0 2a67 	vmov.f32	s5, s15
 800364c:	ec41 0b11 	vmov	d1, r0, r1
 8003650:	ec45 4b10 	vmov	d0, r4, r5
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <BIPAP_Mode_Task+0xdcc>)
 8003656:	4a3d      	ldr	r2, [pc, #244]	; (800374c <BIPAP_Mode_Task+0xdd4>)
 8003658:	493d      	ldr	r1, [pc, #244]	; (8003750 <BIPAP_Mode_Task+0xdd8>)
 800365a:	4836      	ldr	r0, [pc, #216]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 800365c:	f011 f8a0 	bl	80147a0 <PID>
							PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003660:	2101      	movs	r1, #1
 8003662:	4834      	ldr	r0, [pc, #208]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 8003664:	f011 f9d2 	bl	8014a0c <PID_SetMode>

							PID_SetSampleTime(&TPID, Time);
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <BIPAP_Mode_Task+0xddc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	4831      	ldr	r0, [pc, #196]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 8003670:	f011 fb48 	bl	8014d04 <PID_SetSampleTime>
							PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <BIPAP_Mode_Task+0xde0>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc feeb 	bl	8000454 <__aeabi_ui2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <BIPAP_Mode_Task+0xde4>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fee4 	bl	8000454 <__aeabi_ui2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	ec43 2b11 	vmov	d1, r2, r3
 8003694:	ec45 4b10 	vmov	d0, r4, r5
 8003698:	4826      	ldr	r0, [pc, #152]	; (8003734 <BIPAP_Mode_Task+0xdbc>)
 800369a:	f011 f9d5 	bl	8014a48 <PID_SetOutputLimits>


							Trigger=1;
 800369e:	4b30      	ldr	r3, [pc, #192]	; (8003760 <BIPAP_Mode_Task+0xde8>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
							vTaskResume(BiPap_Pid_Handler);
 80036a4:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <BIPAP_Mode_Task+0xdec>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f01c f9d7 	bl	801fa5c <vTaskResume>
							vTaskSuspend(BiPap_Handler);
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <BIPAP_Mode_Task+0xdf0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f01c f90e 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 80036b8:	e05a      	b.n	8003770 <BIPAP_Mode_Task+0xdf8>

		       }
			   else
			   {

				   if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<3))
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <BIPAP_Mode_Task+0xd90>)
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <BIPAP_Mode_Task+0xd5c>
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <BIPAP_Mode_Task+0xd90>)
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f113 0f08 	cmn.w	r3, #8
 80036ca:	db52      	blt.n	8003772 <BIPAP_Mode_Task+0xdfa>
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <BIPAP_Mode_Task+0xd90>)
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	dc4e      	bgt.n	8003772 <BIPAP_Mode_Task+0xdfa>
			         	{
			         		 P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <BIPAP_Mode_Task+0xdf4>)
 80036d6:	791b      	ldrb	r3, [r3, #4]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80036e2:	edc3 7a05 	vstr	s15, [r3, #20]
			         		P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <BIPAP_Mode_Task+0xd90>)
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <BIPAP_Mode_Task+0xd94>)
 80036f4:	edc3 7a06 	vstr	s15, [r3, #24]
 80036f8:	e03b      	b.n	8003772 <BIPAP_Mode_Task+0xdfa>
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	00000000 	.word	0x00000000
 8003704:	4072c000 	.word	0x4072c000
 8003708:	20016c48 	.word	0x20016c48
 800370c:	20016960 	.word	0x20016960
 8003710:	2000012c 	.word	0x2000012c
 8003714:	20000feb 	.word	0x20000feb
 8003718:	20016e59 	.word	0x20016e59
 800371c:	200168b4 	.word	0x200168b4
 8003720:	20016df0 	.word	0x20016df0
 8003724:	40007400 	.word	0x40007400
 8003728:	20016d44 	.word	0x20016d44
 800372c:	40020400 	.word	0x40020400
 8003730:	20017094 	.word	0x20017094
 8003734:	200169a0 	.word	0x200169a0
 8003738:	20000144 	.word	0x20000144
 800373c:	20000136 	.word	0x20000136
 8003740:	20000137 	.word	0x20000137
 8003744:	20016e80 	.word	0x20016e80
 8003748:	20000138 	.word	0x20000138
 800374c:	20016a18 	.word	0x20016a18
 8003750:	20016a98 	.word	0x20016a98
 8003754:	20000140 	.word	0x20000140
 8003758:	2000012e 	.word	0x2000012e
 800375c:	20000130 	.word	0x20000130
 8003760:	20016e50 	.word	0x20016e50
 8003764:	20016878 	.word	0x20016878
 8003768:	20016a24 	.word	0x20016a24
 800376c:	20016cfc 	.word	0x20016cfc
				if (P1._TRIG_TYPE == 1)
 8003770:	bf00      	nop
			         	}


			    }

			ExpValve_CLOSE();
 8003772:	4b68      	ldr	r3, [pc, #416]	; (8003914 <BIPAP_Mode_Task+0xf9c>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4a67      	ldr	r2, [pc, #412]	; (8003914 <BIPAP_Mode_Task+0xf9c>)
 8003778:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800377c:	6153      	str	r3, [r2, #20]
 800377e:	e0c3      	b.n	8003908 <BIPAP_Mode_Task+0xf90>


		}

		else if(P1._APNEA_COUNTER == 0)
 8003780:	4b65      	ldr	r3, [pc, #404]	; (8003918 <BIPAP_Mode_Task+0xfa0>)
 8003782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 80bf 	bne.w	8003908 <BIPAP_Mode_Task+0xf90>
		{
			Alert_Receiving_Parameter();
 800378a:	f7fe ffa9 	bl	80026e0 <Alert_Receiving_Parameter>
			vTaskResume(alert_Handler);
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <BIPAP_Mode_Task+0xfa4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f01c f962 	bl	801fa5c <vTaskResume>
			Trigger=0;
 8003798:	4b61      	ldr	r3, [pc, #388]	; (8003920 <BIPAP_Mode_Task+0xfa8>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
			SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_APNEA);
 800379e:	4a61      	ldr	r2, [pc, #388]	; (8003924 <BIPAP_Mode_Task+0xfac>)
 80037a0:	78d3      	ldrb	r3, [r2, #3]
 80037a2:	f043 0320 	orr.w	r3, r3, #32
 80037a6:	70d3      	strb	r3, [r2, #3]
			A.Alert_Now=1;
 80037a8:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <BIPAP_Mode_Task+0xfb0>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	70da      	strb	r2, [r3, #3]
			A.Apnea_UART_alert=1;
 80037ae:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <BIPAP_Mode_Task+0xfb0>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	711a      	strb	r2, [r3, #4]
			A.Alert=1;
 80037b4:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <BIPAP_Mode_Task+0xfb0>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	709a      	strb	r2, [r3, #2]
			Trigger_Count=0;
 80037ba:	4b5c      	ldr	r3, [pc, #368]	; (800392c <BIPAP_Mode_Task+0xfb4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
			A.Red_Led_Alert=1;
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <BIPAP_Mode_Task+0xfb0>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Led_Alert();
 80037c8:	f7ff f88c 	bl	80028e4 <Led_Alert>
			P1.EPAP_DAC_Val=0;
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <BIPAP_Mode_Task+0xfa0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	859a      	strh	r2, [r3, #44]	; 0x2c
			Blower_Signal(P1.EPAP_DAC_Val);
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <BIPAP_Mode_Task+0xfa0>)
 80037d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d6:	4b56      	ldr	r3, [pc, #344]	; (8003930 <BIPAP_Mode_Task+0xfb8>)
 80037d8:	609a      	str	r2, [r3, #8]
			S5.peep_process_done=0;
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <BIPAP_Mode_Task+0xfbc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 80037e0:	4b54      	ldr	r3, [pc, #336]	; (8003934 <BIPAP_Mode_Task+0xfbc>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
			P1.Apnea_Mode=0;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <BIPAP_Mode_Task+0xfa0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			O2_Parameter();
 80037ee:	f007 f957 	bl	800aaa0 <O2_Parameter>
			if(_CurrentBackupMode == PCCMV_BACKUP )
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <BIPAP_Mode_Task+0xfc0>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d13c      	bne.n	8003874 <BIPAP_Mode_Task+0xefc>
			{
				S5.Lock_delay=100;
 80037fa:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <BIPAP_Mode_Task+0xfbc>)
 80037fc:	2264      	movs	r2, #100	; 0x64
 80037fe:	879a      	strh	r2, [r3, #60]	; 0x3c
				_CurrentWaveFormState = Generate_E_Wave;
 8003800:	4b4e      	ldr	r3, [pc, #312]	; (800393c <BIPAP_Mode_Task+0xfc4>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <BIPAP_Mode_Task+0xfc8>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <BIPAP_Mode_Task+0xfcc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f01c f923 	bl	801fa5c <vTaskResume>
			    vTaskResume(Back_Up_PC_CMV_Mode_Handler);
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <BIPAP_Mode_Task+0xfd0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f01c f91e 	bl	801fa5c <vTaskResume>
			    vTaskResume(PID_Back_Up_PC_CMV_Mode_Handler);
 8003820:	4b4a      	ldr	r3, [pc, #296]	; (800394c <BIPAP_Mode_Task+0xfd4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f01c f919 	bl	801fa5c <vTaskResume>
			    if(O2._FIO2_Val>21)
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 800382c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003830:	2b15      	cmp	r3, #21
 8003832:	d905      	bls.n	8003840 <BIPAP_Mode_Task+0xec8>
			    {
			    	vTaskResume(Oxygen_Handler);
 8003834:	4b47      	ldr	r3, [pc, #284]	; (8003954 <BIPAP_Mode_Task+0xfdc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f01c f90f 	bl	801fa5c <vTaskResume>
 800383e:	e00f      	b.n	8003860 <BIPAP_Mode_Task+0xee8>
			    }
			    else if(O2._FIO2_Val<=21)
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 8003842:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003846:	2b15      	cmp	r3, #21
 8003848:	d80a      	bhi.n	8003860 <BIPAP_Mode_Task+0xee8>
			    {
			    	O2.O2_DAC=0;
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 800384c:	2200      	movs	r2, #0
 800384e:	811a      	strh	r2, [r3, #8]
			    	Parkar_valve_Signal(0);
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <BIPAP_Mode_Task+0xfb8>)
 8003852:	2200      	movs	r2, #0
 8003854:	615a      	str	r2, [r3, #20]
			    	vTaskSuspend(Oxygen_Handler);
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <BIPAP_Mode_Task+0xfdc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f01c f83a 	bl	801f8d4 <vTaskSuspend>
			    }

			    vTaskSuspend(BiPap_Handler);
 8003860:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <BIPAP_Mode_Task+0xfe0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f01c f835 	bl	801f8d4 <vTaskSuspend>
			    vTaskSuspend(BiPap_Pid_Handler);
 800386a:	4b3c      	ldr	r3, [pc, #240]	; (800395c <BIPAP_Mode_Task+0xfe4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f01c f830 	bl	801f8d4 <vTaskSuspend>
			}


			if(_CurrentBackupMode == VCCMV_BACKUP )
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <BIPAP_Mode_Task+0xfc0>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d145      	bne.n	8003908 <BIPAP_Mode_Task+0xf90>
			{
				S5.Lock_delay=10;
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <BIPAP_Mode_Task+0xfbc>)
 800387e:	220a      	movs	r2, #10
 8003880:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5._Set_Peep=D1._PEEP_Val;
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <BIPAP_Mode_Task+0xfe8>)
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <BIPAP_Mode_Task+0xfbc>)
 8003890:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				_CurrentWaveFormState = Generate_E_Wave;
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <BIPAP_Mode_Task+0xfc4>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 800389a:	4b29      	ldr	r3, [pc, #164]	; (8003940 <BIPAP_Mode_Task+0xfc8>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <BIPAP_Mode_Task+0xfcc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f01c f8d9 	bl	801fa5c <vTaskResume>
				vTaskResume(Back_Up_VC_CMV_Mode_Handler);
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <BIPAP_Mode_Task+0xfec>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f01c f8d4 	bl	801fa5c <vTaskResume>
				vTaskResume(PID_Back_Up_VC_CMV_Mode_Handler);
 80038b4:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <BIPAP_Mode_Task+0xff0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f01c f8cf 	bl	801fa5c <vTaskResume>

				if(O2._FIO2_Val>21)
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 80038c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038c4:	2b15      	cmp	r3, #21
 80038c6:	d905      	bls.n	80038d4 <BIPAP_Mode_Task+0xf5c>
				{
					vTaskResume(Oxygen_Handler);
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <BIPAP_Mode_Task+0xfdc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f01c f8c5 	bl	801fa5c <vTaskResume>
 80038d2:	e00f      	b.n	80038f4 <BIPAP_Mode_Task+0xf7c>
				}
				else if(O2._FIO2_Val<=21)
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 80038d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038da:	2b15      	cmp	r3, #21
 80038dc:	d80a      	bhi.n	80038f4 <BIPAP_Mode_Task+0xf7c>
				{
					O2.O2_DAC=0;
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <BIPAP_Mode_Task+0xfd8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	811a      	strh	r2, [r3, #8]
					Parkar_valve_Signal(0);
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <BIPAP_Mode_Task+0xfb8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	615a      	str	r2, [r3, #20]
					vTaskSuspend(Oxygen_Handler);
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <BIPAP_Mode_Task+0xfdc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f01b fff0 	bl	801f8d4 <vTaskSuspend>
				}

				vTaskSuspend(BiPap_Handler);
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <BIPAP_Mode_Task+0xfe0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f01b ffeb 	bl	801f8d4 <vTaskSuspend>
				vTaskSuspend(BiPap_Pid_Handler);
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <BIPAP_Mode_Task+0xfe4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f01b ffe6 	bl	801f8d4 <vTaskSuspend>
			}
		}
		vTaskDelay(2);
 8003908:	2002      	movs	r0, #2
 800390a:	f01b ffaf 	bl	801f86c <vTaskDelay>
	  if(Initial_open_valve==1)
 800390e:	f7ff b837 	b.w	8002980 <BIPAP_Mode_Task+0x8>
 8003912:	bf00      	nop
 8003914:	40020400 	.word	0x40020400
 8003918:	20016960 	.word	0x20016960
 800391c:	20016ad4 	.word	0x20016ad4
 8003920:	20016e50 	.word	0x20016e50
 8003924:	20016ea8 	.word	0x20016ea8
 8003928:	20016a2c 	.word	0x20016a2c
 800392c:	200168b4 	.word	0x200168b4
 8003930:	40007400 	.word	0x40007400
 8003934:	20016df4 	.word	0x20016df4
 8003938:	2000012c 	.word	0x2000012c
 800393c:	20016adc 	.word	0x20016adc
 8003940:	20016cc8 	.word	0x20016cc8
 8003944:	20016d40 	.word	0x20016d40
 8003948:	20016bcc 	.word	0x20016bcc
 800394c:	20016d3c 	.word	0x20016d3c
 8003950:	20000048 	.word	0x20000048
 8003954:	20016958 	.word	0x20016958
 8003958:	20016a24 	.word	0x20016a24
 800395c:	20016878 	.word	0x20016878
 8003960:	20016e90 	.word	0x20016e90
 8003964:	20016d7c 	.word	0x20016d7c
 8003968:	20016a7c 	.word	0x20016a7c

0800396c <BIPAP_PARAMETERS>:
	}

}

void BIPAP_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	     P1.IPAP_Val = RX_PARAM_CMD_PACKET->_PIP;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	791a      	ldrb	r2, [r3, #4]
 8003978:	4b93      	ldr	r3, [pc, #588]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 800397a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	     P1.EPAP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	795a      	ldrb	r2, [r3, #5]
 8003982:	4b91      	ldr	r3, [pc, #580]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003984:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	     P1._Apnea_counter_trigger_check_time=2000;
 8003988:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 800398a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800398e:	809a      	strh	r2, [r3, #4]
		 P1._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT)>>4;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7b9b      	ldrb	r3, [r3, #14]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	b2db      	uxtb	r3, r3
 8003998:	b29a      	uxth	r2, r3
 800399a:	4b8b      	ldr	r3, [pc, #556]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 800399c:	80da      	strh	r2, [r3, #6]
		 P1._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7b9b      	ldrb	r3, [r3, #14]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	4b87      	ldr	r3, [pc, #540]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039ac:	811a      	strh	r2, [r3, #8]
		 P1._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7adb      	ldrb	r3, [r3, #11]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b83      	ldr	r3, [pc, #524]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039bc:	815a      	strh	r2, [r3, #10]
		 P1.T_HIGH=((RX_PARAM_CMD_PACKET->_T_HIGH));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7bda      	ldrb	r2, [r3, #15]
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		 P1.T_HIGH_VAL=(P1.T_HIGH*1000);
 80039c8:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	0152      	lsls	r2, r2, #5
 80039d4:	1ad2      	subs	r2, r2, r3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039e0:	85da      	strh	r2, [r3, #46]	; 0x2e

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 80039e2:	4b7a      	ldr	r3, [pc, #488]	; (8003bcc <BIPAP_PARAMETERS+0x260>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <BIPAP_PARAMETERS+0x92>
		 {
			 P1._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <BIPAP_PARAMETERS+0x264>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039f2:	899b      	ldrh	r3, [r3, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 80039fa:	81da      	strh	r2, [r3, #14]
 80039fc:	e00c      	b.n	8003a18 <BIPAP_PARAMETERS+0xac>
		 }

		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <BIPAP_PARAMETERS+0x260>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <BIPAP_PARAMETERS+0xac>
		 {

			 P1._TOLERANCE_EWAVE = D2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 8003a06:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <BIPAP_PARAMETERS+0x268>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4b6e      	ldr	r3, [pc, #440]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a0e:	899b      	ldrh	r3, [r3, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a16:	81da      	strh	r2, [r3, #14]
		 }
		 P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 8003a18:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a1a:	89db      	ldrh	r3, [r3, #14]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fd29 	bl	8000474 <__aeabi_i2d>
 8003a22:	4604      	mov	r4, r0
 8003a24:	460d      	mov	r5, r1
 8003a26:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a28:	895b      	ldrh	r3, [r3, #10]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	ee17 0a90 	vmov	r0, s15
 8003a36:	f7fc fd2f 	bl	8000498 <__aeabi_f2d>
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <BIPAP_PARAMETERS+0x26c>)
 8003a40:	f7fc fd82 	bl	8000548 <__aeabi_dmul>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <BIPAP_PARAMETERS+0x270>)
 8003a52:	f7fc fea3 	bl	800079c <__aeabi_ddiv>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fd73 	bl	8000548 <__aeabi_dmul>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fd f82f 	bl	8000acc <__aeabi_d2uiz>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a74:	821a      	strh	r2, [r3, #16]
		 P1._APNEA_TIME = RX_PARAM_CMD_PACKET->_APNEA;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7b5b      	ldrb	r3, [r3, #13]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a7e:	845a      	strh	r2, [r3, #34]	; 0x22
		 P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8003a80:	4b51      	ldr	r3, [pc, #324]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a82:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a84:	461a      	mov	r2, r3
 8003a86:	0152      	lsls	r2, r2, #5
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <BIPAP_PARAMETERS+0x25c>)
 8003a94:	849a      	strh	r2, [r3, #36]	; 0x24


		 Initial_open_valve=1;
 8003a96:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <BIPAP_PARAMETERS+0x274>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
		 one_time_only=1;
 8003a9c:	4b51      	ldr	r3, [pc, #324]	; (8003be4 <BIPAP_PARAMETERS+0x278>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

		 ExpValve_CLOSE();
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <BIPAP_PARAMETERS+0x27c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4a50      	ldr	r2, [pc, #320]	; (8003be8 <BIPAP_PARAMETERS+0x27c>)
 8003aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aac:	6153      	str	r3, [r2, #20]
		 Trigger_Count=0;
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <BIPAP_PARAMETERS+0x280>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

		 vTaskSuspend(pc_mode_Handler);
 8003ab4:	4b4e      	ldr	r3, [pc, #312]	; (8003bf0 <BIPAP_PARAMETERS+0x284>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f01b ff0b 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_cmv_Pid_Handler);
 8003abe:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <BIPAP_PARAMETERS+0x288>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f01b ff06 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Pc_simv_Mode_Handler);
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <BIPAP_PARAMETERS+0x28c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f01b ff01 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8003ad2:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <BIPAP_PARAMETERS+0x290>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f01b fefc 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_mode_Handler);
 8003adc:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <BIPAP_PARAMETERS+0x294>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f01b fef7 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_Pid_Handler);
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <BIPAP_PARAMETERS+0x298>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f01b fef2 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_simv_mode_Handler);
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <BIPAP_PARAMETERS+0x29c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f01b feed 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_simv_Pid_Handler);
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <BIPAP_PARAMETERS+0x2a0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f01b fee8 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Psv_Handler);
 8003b04:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <BIPAP_PARAMETERS+0x2a4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f01b fee3 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Psv_Pid_Handler);
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <BIPAP_PARAMETERS+0x2a8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f01b fede 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Cpap_Handler);
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <BIPAP_PARAMETERS+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f01b fed9 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(APRV_Handler);
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <BIPAP_PARAMETERS+0x2b0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f01b fed4 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(APRV_one_Handler);
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <BIPAP_PARAMETERS+0x2b4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f01b fecf 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <BIPAP_PARAMETERS+0x2b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f01b feca 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <BIPAP_PARAMETERS+0x2bc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f01b fec5 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8003b4a:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <BIPAP_PARAMETERS+0x2c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f01b fec0 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8003b54:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <BIPAP_PARAMETERS+0x2c4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f01b febb 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(One_Time_Handler);
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <BIPAP_PARAMETERS+0x2c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f01b feb6 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Oxygen_Handler);
 8003b68:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <BIPAP_PARAMETERS+0x2cc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f01b feb1 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(alert_Handler);
 8003b72:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <BIPAP_PARAMETERS+0x2d0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f01b feac 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(HFNC_Handler);
 8003b7c:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <BIPAP_PARAMETERS+0x2d4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f01b fea7 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Suction_Handler);
 8003b86:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <BIPAP_PARAMETERS+0x2d8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f01b fea2 	bl	801f8d4 <vTaskSuspend>

		 vTaskResume(BiPap_Handler);
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <BIPAP_PARAMETERS+0x2dc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f01b ff61 	bl	801fa5c <vTaskResume>

		 _CurrentMode = BiPAP;
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <BIPAP_PARAMETERS+0x2e0>)
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	701a      	strb	r2, [r3, #0]

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <BIPAP_PARAMETERS+0x260>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <BIPAP_PARAMETERS+0x244>
		 {
			 S1._Mode_Val=10;
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <BIPAP_PARAMETERS+0x2e4>)
 8003baa:	220a      	movs	r2, #10
 8003bac:	701a      	strb	r2, [r3, #0]
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
		 {
			 S1._Mode_Val=11;
		 }

}
 8003bae:	e006      	b.n	8003bbe <BIPAP_PARAMETERS+0x252>
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <BIPAP_PARAMETERS+0x260>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <BIPAP_PARAMETERS+0x252>
			 S1._Mode_Val=11;
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <BIPAP_PARAMETERS+0x2e4>)
 8003bba:	220b      	movs	r2, #11
 8003bbc:	701a      	strb	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20016960 	.word	0x20016960
 8003bcc:	2000012c 	.word	0x2000012c
 8003bd0:	20016cd4 	.word	0x20016cd4
 8003bd4:	20016cc0 	.word	0x20016cc0
 8003bd8:	40240000 	.word	0x40240000
 8003bdc:	40590000 	.word	0x40590000
 8003be0:	20000044 	.word	0x20000044
 8003be4:	20000128 	.word	0x20000128
 8003be8:	40020400 	.word	0x40020400
 8003bec:	200168b4 	.word	0x200168b4
 8003bf0:	20016a84 	.word	0x20016a84
 8003bf4:	20016a28 	.word	0x20016a28
 8003bf8:	20016e60 	.word	0x20016e60
 8003bfc:	20016e8c 	.word	0x20016e8c
 8003c00:	20016d78 	.word	0x20016d78
 8003c04:	2001695c 	.word	0x2001695c
 8003c08:	20016c44 	.word	0x20016c44
 8003c0c:	20016ad0 	.word	0x20016ad0
 8003c10:	20016bf0 	.word	0x20016bf0
 8003c14:	20016a74 	.word	0x20016a74
 8003c18:	20016bb8 	.word	0x20016bb8
 8003c1c:	20016c00 	.word	0x20016c00
 8003c20:	20016bc8 	.word	0x20016bc8
 8003c24:	20016bcc 	.word	0x20016bcc
 8003c28:	20016d3c 	.word	0x20016d3c
 8003c2c:	20016d7c 	.word	0x20016d7c
 8003c30:	20016a7c 	.word	0x20016a7c
 8003c34:	20016d40 	.word	0x20016d40
 8003c38:	20016958 	.word	0x20016958
 8003c3c:	20016ad4 	.word	0x20016ad4
 8003c40:	20016a20 	.word	0x20016a20
 8003c44:	20016e5c 	.word	0x20016e5c
 8003c48:	20016a24 	.word	0x20016a24
 8003c4c:	20016c04 	.word	0x20016c04
 8003c50:	20016ae0 	.word	0x20016ae0

08003c54 <BIPAP_PID_Mode_Task>:



void BIPAP_PID_Mode_Task (void *argument)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(_I_TIMER>0)
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <BIPAP_PID_Mode_Task+0xcc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01c      	beq.n	8003c9e <BIPAP_PID_Mode_Task+0x4a>
		{
			PID_Compute(&TPID);
 8003c64:	482f      	ldr	r0, [pc, #188]	; (8003d24 <BIPAP_PID_Mode_Task+0xd0>)
 8003c66:	f010 fde7 	bl	8014838 <PID_Compute>
			P1.IPAP_DAC_Val=(int16_t)PIDOut;
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <BIPAP_PID_Mode_Task+0xd4>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fc ff02 	bl	8000a7c <__aeabi_d2iz>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
			Blower_Signal( P1.IPAP_DAC_Val);
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003c84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <BIPAP_PID_Mode_Task+0xdc>)
 8003c88:	609a      	str	r2, [r3, #8]
			pressure_acheived=1;
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <BIPAP_PID_Mode_Task+0xe0>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
			Wait_Dac=1;
 8003c90:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <BIPAP_PID_Mode_Task+0xe4>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
			Apnea_counter_trigger_Flag=1;
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <BIPAP_PID_Mode_Task+0xe8>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e03b      	b.n	8003d16 <BIPAP_PID_Mode_Task+0xc2>


		}
		else if(_I_TIMER==0)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <BIPAP_PID_Mode_Task+0xcc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d137      	bne.n	8003d16 <BIPAP_PID_Mode_Task+0xc2>
		{

			P1.IPAP_DAC_Val=0;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
			Blower_Signal( P1.IPAP_DAC_Val);
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003cae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <BIPAP_PID_Mode_Task+0xdc>)
 8003cb2:	609a      	str	r2, [r3, #8]
			Trigger=0;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <BIPAP_PID_Mode_Task+0xec>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
			now_update=1;
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <BIPAP_PID_Mode_Task+0xf0>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

			P1._Apnea_counter_trigger_check_time=2000;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003cc2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003cc6:	809a      	strh	r2, [r3, #4]
			P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003cca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003ccc:	461a      	mov	r2, r3
 8003cce:	0152      	lsls	r2, r2, #5
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <BIPAP_PID_Mode_Task+0xd8>)
 8003cdc:	849a      	strh	r2, [r3, #36]	; 0x24

			Apnea_counter_trigger_Flag=1;
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <BIPAP_PID_Mode_Task+0xe8>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
			Alert_Data_send_count=0;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <BIPAP_PID_Mode_Task+0xf4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
			Alert_error_count=0;
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <BIPAP_PID_Mode_Task+0xf8>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
			Dac_control_count=0;
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <BIPAP_PID_Mode_Task+0xfc>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

			pressure_high_error_count=0;    //new
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <BIPAP_PID_Mode_Task+0x100>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
		    pressure_high_error_count2=0;   //new
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <BIPAP_PID_Mode_Task+0x104>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

			vTaskResume(BiPap_Handler);
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <BIPAP_PID_Mode_Task+0x108>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f01b fea8 	bl	801fa5c <vTaskResume>
			vTaskSuspend(BiPap_Pid_Handler);
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <BIPAP_PID_Mode_Task+0x10c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f01b fddf 	bl	801f8d4 <vTaskSuspend>
		}


		vTaskDelay(2);
 8003d16:	2002      	movs	r0, #2
 8003d18:	f01b fda8 	bl	801f86c <vTaskDelay>
		if(_I_TIMER>0)
 8003d1c:	e79e      	b.n	8003c5c <BIPAP_PID_Mode_Task+0x8>
 8003d1e:	bf00      	nop
 8003d20:	20016df0 	.word	0x20016df0
 8003d24:	200169a0 	.word	0x200169a0
 8003d28:	20016a18 	.word	0x20016a18
 8003d2c:	20016960 	.word	0x20016960
 8003d30:	40007400 	.word	0x40007400
 8003d34:	20000114 	.word	0x20000114
 8003d38:	20000118 	.word	0x20000118
 8003d3c:	2000011c 	.word	0x2000011c
 8003d40:	20016e50 	.word	0x20016e50
 8003d44:	20016b28 	.word	0x20016b28
 8003d48:	2000031c 	.word	0x2000031c
 8003d4c:	20000308 	.word	0x20000308
 8003d50:	20000320 	.word	0x20000320
 8003d54:	2000032c 	.word	0x2000032c
 8003d58:	20000330 	.word	0x20000330
 8003d5c:	20016a24 	.word	0x20016a24
 8003d60:	20016878 	.word	0x20016878
 8003d64:	00000000 	.word	0x00000000

08003d68 <Back_Up_PC_CMV_Mode_Task>:
extern int Alert_error_count;
extern int Dac_control_count;
extern uint8_t now_check_breath;

void Back_Up_PC_CMV_Mode_Task(void *argument)
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <Back_Up_PC_CMV_Mode_Task+0x13c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f000 8686 	beq.w	8004a86 <Back_Up_PC_CMV_Mode_Task+0xd1e>
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	f300 8685 	bgt.w	8004a8a <Back_Up_PC_CMV_Mode_Task+0xd22>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <Back_Up_PC_CMV_Mode_Task+0x24>
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d013      	beq.n	8003db0 <Back_Up_PC_CMV_Mode_Task+0x48>

				break;
				case NoComputeState:
				break;
				default:
				break;
 8003d88:	f000 be7f 	b.w	8004a8a <Back_Up_PC_CMV_Mode_Task+0xd22>
					ExpValve_CLOSE();
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	4a45      	ldr	r2, [pc, #276]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003d92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d96:	6153      	str	r3, [r2, #20]
					Blower_Signal( B4._DAC_VAL0);
 8003d98:	4b44      	ldr	r3, [pc, #272]	; (8003eac <Back_Up_PC_CMV_Mode_Task+0x144>)
 8003d9a:	889a      	ldrh	r2, [r3, #4]
 8003d9c:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <Back_Up_PC_CMV_Mode_Task+0x148>)
 8003d9e:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 8003da0:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c
					S5.lock=1;
 8003da6:	4b43      	ldr	r3, [pc, #268]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
				break;
 8003dac:	f000 be70 	b.w	8004a90 <Back_Up_PC_CMV_Mode_Task+0xd28>
					B4._DAC_VAL0=0;
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <Back_Up_PC_CMV_Mode_Task+0x144>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	809a      	strh	r2, [r3, #4]
					Blower_Signal( B4._DAC_VAL0);
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <Back_Up_PC_CMV_Mode_Task+0x144>)
 8003db8:	889a      	ldrh	r2, [r3, #4]
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <Back_Up_PC_CMV_Mode_Task+0x148>)
 8003dbc:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d116      	bne.n	8003df4 <Back_Up_PC_CMV_Mode_Task+0x8c>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8003dc6:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <Back_Up_PC_CMV_Mode_Task+0x150>)
 8003dc8:	791b      	ldrb	r3, [r3, #4]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003dd4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	d504      	bpl.n	8003dec <Back_Up_PC_CMV_Mode_Task+0x84>
										Blower_Signal( B4._DAC_VAL0);
 8003de2:	4b32      	ldr	r3, [pc, #200]	; (8003eac <Back_Up_PC_CMV_Mode_Task+0x144>)
 8003de4:	889a      	ldrh	r2, [r3, #4]
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <Back_Up_PC_CMV_Mode_Task+0x148>)
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	e003      	b.n	8003df4 <Back_Up_PC_CMV_Mode_Task+0x8c>
										Blower_Signal( B4._DAC_VAL0);
 8003dec:	4b2f      	ldr	r3, [pc, #188]	; (8003eac <Back_Up_PC_CMV_Mode_Task+0x144>)
 8003dee:	889a      	ldrh	r2, [r3, #4]
 8003df0:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <Back_Up_PC_CMV_Mode_Task+0x148>)
 8003df2:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <Back_Up_PC_CMV_Mode_Task+0x150>)
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d815      	bhi.n	8003e3c <Back_Up_PC_CMV_Mode_Task+0xd4>
								if(S5.lock==1)
 8003e10:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <Back_Up_PC_CMV_Mode_Task+0xc0>
									S5.lock=0;
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
									vTaskDelay(S5.Lock_delay);
 8003e1e:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f01b fd22 	bl	801f86c <vTaskDelay>
								S5.peep_process_done=1;
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	64da      	str	r2, [r3, #76]	; 0x4c
								ExpValve_CLOSE();
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003e34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e38:	6153      	str	r3, [r2, #20]
 8003e3a:	e009      	b.n	8003e50 <Back_Up_PC_CMV_Mode_Task+0xe8>
							else if(S5.peep_process_done==0)
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <Back_Up_PC_CMV_Mode_Task+0x14c>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <Back_Up_PC_CMV_Mode_Task+0xe8>
								ExpValve_OPEN();
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <Back_Up_PC_CMV_Mode_Task+0x140>)
 8003e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4e:	6153      	str	r3, [r2, #20]
										if(_E_TIMER <= (P1._TRIG_WINDOW) &&  _E_TIMER != 0)
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <Back_Up_PC_CMV_Mode_Task+0x154>)
 8003e52:	8a1b      	ldrh	r3, [r3, #16]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <Back_Up_PC_CMV_Mode_Task+0x158>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f0c0 85f1 	bcc.w	8004a42 <Back_Up_PC_CMV_Mode_Task+0xcda>
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <Back_Up_PC_CMV_Mode_Task+0x158>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 85ec 	beq.w	8004a42 <Back_Up_PC_CMV_Mode_Task+0xcda>
											if(P1._TRIG_TYPE==1)
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <Back_Up_PC_CMV_Mode_Task+0x154>)
 8003e6c:	88db      	ldrh	r3, [r3, #6]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	f040 82d5 	bne.w	800441e <Back_Up_PC_CMV_Mode_Task+0x6b6>
												if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <Back_Up_PC_CMV_Mode_Task+0x150>)
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <Back_Up_PC_CMV_Mode_Task+0x154>)
 8003e82:	edd3 6a05 	vldr	s13, [r3, #20]
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <Back_Up_PC_CMV_Mode_Task+0x154>)
 8003e88:	891b      	ldrh	r3, [r3, #8]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	d411      	bmi.n	8003ec4 <Back_Up_PC_CMV_Mode_Task+0x15c>
											if(P1._TRIG_TYPE==1)
 8003ea0:	f000 bdef 	b.w	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
 8003ea4:	20016cc8 	.word	0x20016cc8
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	20000004 	.word	0x20000004
 8003eb0:	40007400 	.word	0x40007400
 8003eb4:	20016df4 	.word	0x20016df4
 8003eb8:	20016cfc 	.word	0x20016cfc
 8003ebc:	20016960 	.word	0x20016960
 8003ec0:	20016d74 	.word	0x20016d74
													if(_CurrentMode==PSV)
 8003ec4:	4bac      	ldr	r3, [pc, #688]	; (8004178 <Back_Up_PC_CMV_Mode_Task+0x410>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	f040 80c8 	bne.w	800405e <Back_Up_PC_CMV_Mode_Task+0x2f6>
														_Control_Byte &= (uint8_t) (~(0x80));
 8003ece:	4bab      	ldr	r3, [pc, #684]	; (800417c <Back_Up_PC_CMV_Mode_Task+0x414>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4ba8      	ldr	r3, [pc, #672]	; (800417c <Back_Up_PC_CMV_Mode_Task+0x414>)
 8003eda:	701a      	strb	r2, [r3, #0]
														A.Alert=1;
 8003edc:	4ba8      	ldr	r3, [pc, #672]	; (8004180 <Back_Up_PC_CMV_Mode_Task+0x418>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	709a      	strb	r2, [r3, #2]
														A.Red_Led_Alert=0;
 8003ee2:	4ba7      	ldr	r3, [pc, #668]	; (8004180 <Back_Up_PC_CMV_Mode_Task+0x418>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
														Led_Alert();
 8003eea:	f7fe fcfb 	bl	80028e4 <Led_Alert>
														uwTick=0;
 8003eee:	4ba5      	ldr	r3, [pc, #660]	; (8004184 <Back_Up_PC_CMV_Mode_Task+0x41c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
														TPID.OutputSum=300;
 8003ef4:	49a4      	ldr	r1, [pc, #656]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8003ef6:	a39e      	add	r3, pc, #632	; (adr r3, 8004170 <Back_Up_PC_CMV_Mode_Task+0x408>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
														Speed=40;
 8003f00:	4ba2      	ldr	r3, [pc, #648]	; (800418c <Back_Up_PC_CMV_Mode_Task+0x424>)
 8003f02:	2228      	movs	r2, #40	; 0x28
 8003f04:	601a      	str	r2, [r3, #0]
														kp=5;
 8003f06:	4ba2      	ldr	r3, [pc, #648]	; (8004190 <Back_Up_PC_CMV_Mode_Task+0x428>)
 8003f08:	2205      	movs	r2, #5
 8003f0a:	701a      	strb	r2, [r3, #0]
														ki=4;
 8003f0c:	4ba1      	ldr	r3, [pc, #644]	; (8004194 <Back_Up_PC_CMV_Mode_Task+0x42c>)
 8003f0e:	2204      	movs	r2, #4
 8003f10:	701a      	strb	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 8003f12:	4ba1      	ldr	r3, [pc, #644]	; (8004198 <Back_Up_PC_CMV_Mode_Task+0x430>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
														Apnea_counter_trigger_Flag=1;    //new
 8003f18:	4ba0      	ldr	r3, [pc, #640]	; (800419c <Back_Up_PC_CMV_Mode_Task+0x434>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 8003f1e:	4b9e      	ldr	r3, [pc, #632]	; (8004198 <Back_Up_PC_CMV_Mode_Task+0x430>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
														Alert_error_count=0;             //new
 8003f24:	4b9e      	ldr	r3, [pc, #632]	; (80041a0 <Back_Up_PC_CMV_Mode_Task+0x438>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
														Dac_control_count=0;             //new
 8003f2a:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <Back_Up_PC_CMV_Mode_Task+0x43c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
														uwTick=0;                         //new
 8003f30:	4b94      	ldr	r3, [pc, #592]	; (8004184 <Back_Up_PC_CMV_Mode_Task+0x41c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
														       TempSetpoint = (P1.PIP_PSV_Val);
 8003f36:	4b9c      	ldr	r3, [pc, #624]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc fa8a 	bl	8000454 <__aeabi_ui2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4999      	ldr	r1, [pc, #612]	; (80041ac <Back_Up_PC_CMV_Mode_Task+0x444>)
 8003f46:	e9c1 2300 	strd	r2, r3, [r1]
																PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003f4a:	4b91      	ldr	r3, [pc, #580]	; (8004190 <Back_Up_PC_CMV_Mode_Task+0x428>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc fa80 	bl	8000454 <__aeabi_ui2d>
 8003f54:	4604      	mov	r4, r0
 8003f56:	460d      	mov	r5, r1
 8003f58:	4b8e      	ldr	r3, [pc, #568]	; (8004194 <Back_Up_PC_CMV_Mode_Task+0x42c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fa79 	bl	8000454 <__aeabi_ui2d>
 8003f62:	4b93      	ldr	r3, [pc, #588]	; (80041b0 <Back_Up_PC_CMV_Mode_Task+0x448>)
 8003f64:	ed93 7b00 	vldr	d7, [r3]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	eeb0 2a47 	vmov.f32	s4, s14
 8003f74:	eef0 2a67 	vmov.f32	s5, s15
 8003f78:	ec41 0b11 	vmov	d1, r0, r1
 8003f7c:	ec45 4b10 	vmov	d0, r4, r5
 8003f80:	4b8a      	ldr	r3, [pc, #552]	; (80041ac <Back_Up_PC_CMV_Mode_Task+0x444>)
 8003f82:	4a8c      	ldr	r2, [pc, #560]	; (80041b4 <Back_Up_PC_CMV_Mode_Task+0x44c>)
 8003f84:	498c      	ldr	r1, [pc, #560]	; (80041b8 <Back_Up_PC_CMV_Mode_Task+0x450>)
 8003f86:	4880      	ldr	r0, [pc, #512]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8003f88:	f010 fc0a 	bl	80147a0 <PID>
																PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	487e      	ldr	r0, [pc, #504]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8003f90:	f010 fd3c 	bl	8014a0c <PID_SetMode>
																PID_SetSampleTime(&TPID, Time);
 8003f94:	4b89      	ldr	r3, [pc, #548]	; (80041bc <Back_Up_PC_CMV_Mode_Task+0x454>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	487b      	ldr	r0, [pc, #492]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8003f9c:	f010 feb2 	bl	8014d04 <PID_SetSampleTime>
																PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8003fa0:	4b87      	ldr	r3, [pc, #540]	; (80041c0 <Back_Up_PC_CMV_Mode_Task+0x458>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fa55 	bl	8000454 <__aeabi_ui2d>
 8003faa:	4604      	mov	r4, r0
 8003fac:	460d      	mov	r5, r1
 8003fae:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <Back_Up_PC_CMV_Mode_Task+0x45c>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fa4e 	bl	8000454 <__aeabi_ui2d>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	ec43 2b11 	vmov	d1, r2, r3
 8003fc0:	ec45 4b10 	vmov	d0, r4, r5
 8003fc4:	4870      	ldr	r0, [pc, #448]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8003fc6:	f010 fd3f 	bl	8014a48 <PID_SetOutputLimits>
														P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 8003fca:	4b77      	ldr	r3, [pc, #476]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 8003fcc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003fce:	461a      	mov	r2, r3
 8003fd0:	0152      	lsls	r2, r2, #5
 8003fd2:	1ad2      	subs	r2, r2, r3
 8003fd4:	0092      	lsls	r2, r2, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 8003fde:	849a      	strh	r2, [r3, #36]	; 0x24
														P1._Apnea_counter_trigger_check_time = 2000;
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 8003fe2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fe6:	809a      	strh	r2, [r3, #4]
														Trigger = 1;
 8003fe8:	4b77      	ldr	r3, [pc, #476]	; (80041c8 <Back_Up_PC_CMV_Mode_Task+0x460>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
														now_update = 2;
 8003fee:	4b77      	ldr	r3, [pc, #476]	; (80041cc <Back_Up_PC_CMV_Mode_Task+0x464>)
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	601a      	str	r2, [r3, #0]
														B4._DAC_VAL0 = 0;
 8003ff4:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <Back_Up_PC_CMV_Mode_Task+0x468>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	809a      	strh	r2, [r3, #4]
														P1.Apnea_Mode=1;
 8003ffa:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
														_I_TIMER = B2._I_TIMER_HOLD;
 8004002:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <Back_Up_PC_CMV_Mode_Task+0x46c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a74      	ldr	r2, [pc, #464]	; (80041d8 <Back_Up_PC_CMV_Mode_Task+0x470>)
 8004008:	6013      	str	r3, [r2, #0]
														pressure_acheived=1;
 800400a:	4b74      	ldr	r3, [pc, #464]	; (80041dc <Back_Up_PC_CMV_Mode_Task+0x474>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
														Alert_Status_count=0;
 8004010:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <Back_Up_PC_CMV_Mode_Task+0x478>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
														Wait_Dac=1;
 8004016:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <Back_Up_PC_CMV_Mode_Task+0x47c>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
														Parkar_valve_Signal(0);
 800401c:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <Back_Up_PC_CMV_Mode_Task+0x480>)
 800401e:	2200      	movs	r2, #0
 8004020:	615a      	str	r2, [r3, #20]
													  O2.O2_process = 0;
 8004022:	4b72      	ldr	r3, [pc, #456]	; (80041ec <Back_Up_PC_CMV_Mode_Task+0x484>)
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]
													  O2.Servo=45;
 8004028:	4b70      	ldr	r3, [pc, #448]	; (80041ec <Back_Up_PC_CMV_Mode_Task+0x484>)
 800402a:	222d      	movs	r2, #45	; 0x2d
 800402c:	605a      	str	r2, [r3, #4]
													  Servo_Angle(O2.Servo);
 800402e:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <Back_Up_PC_CMV_Mode_Task+0x484>)
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <Back_Up_PC_CMV_Mode_Task+0x488>)
 8004034:	635a      	str	r2, [r3, #52]	; 0x34
														vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8004036:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <Back_Up_PC_CMV_Mode_Task+0x48c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f01b fc4a 	bl	801f8d4 <vTaskSuspend>
														vTaskResume(Psv_Pid_Handler);
 8004040:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <Back_Up_PC_CMV_Mode_Task+0x490>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f01b fd09 	bl	801fa5c <vTaskResume>
														vTaskSuspend(One_Time_Handler);
 800404a:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <Back_Up_PC_CMV_Mode_Task+0x494>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f01b fc40 	bl	801f8d4 <vTaskSuspend>
														vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8004054:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <Back_Up_PC_CMV_Mode_Task+0x498>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f01b fc3b 	bl	801f8d4 <vTaskSuspend>
													if(_CurrentMode==cPAP)
 800405e:	4b46      	ldr	r3, [pc, #280]	; (8004178 <Back_Up_PC_CMV_Mode_Task+0x410>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b07      	cmp	r3, #7
 8004064:	f040 8110 	bne.w	8004288 <Back_Up_PC_CMV_Mode_Task+0x520>
														_Control_Byte &= (uint8_t) (~(0x80));
 8004068:	4b44      	ldr	r3, [pc, #272]	; (800417c <Back_Up_PC_CMV_Mode_Task+0x414>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4b42      	ldr	r3, [pc, #264]	; (800417c <Back_Up_PC_CMV_Mode_Task+0x414>)
 8004074:	701a      	strb	r2, [r3, #0]
														A.Alert=1;
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <Back_Up_PC_CMV_Mode_Task+0x418>)
 8004078:	2201      	movs	r2, #1
 800407a:	709a      	strb	r2, [r3, #2]
														A.Red_Led_Alert=0;
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <Back_Up_PC_CMV_Mode_Task+0x418>)
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
														Led_Alert();
 8004084:	f7fe fc2e 	bl	80028e4 <Led_Alert>
														P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 8004088:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 800408a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800408c:	461a      	mov	r2, r3
 800408e:	0152      	lsls	r2, r2, #5
 8004090:	1ad2      	subs	r2, r2, r3
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	b29a      	uxth	r2, r3
 800409a:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 800409c:	849a      	strh	r2, [r3, #36]	; 0x24
														Trigger = 0;
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <Back_Up_PC_CMV_Mode_Task+0x460>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
														now_update = 0;
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <Back_Up_PC_CMV_Mode_Task+0x464>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
														B4._DAC_VAL0 = 0;
 80040aa:	4b49      	ldr	r3, [pc, #292]	; (80041d0 <Back_Up_PC_CMV_Mode_Task+0x468>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	809a      	strh	r2, [r3, #4]
														P1.Apnea_Mode=1;
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
														P1._Apnea_counter_trigger_check_time = 3000;
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 80040ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80040be:	809a      	strh	r2, [r3, #4]
														uwTick=0;
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <Back_Up_PC_CMV_Mode_Task+0x41c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
														TPID.OutputSum=300;
 80040c6:	4930      	ldr	r1, [pc, #192]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 80040c8:	a329      	add	r3, pc, #164	; (adr r3, 8004170 <Back_Up_PC_CMV_Mode_Task+0x408>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
														Speed=40;
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <Back_Up_PC_CMV_Mode_Task+0x424>)
 80040d4:	2228      	movs	r2, #40	; 0x28
 80040d6:	601a      	str	r2, [r3, #0]
														kp=5;
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <Back_Up_PC_CMV_Mode_Task+0x428>)
 80040da:	2205      	movs	r2, #5
 80040dc:	701a      	strb	r2, [r3, #0]
														ki=4;
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <Back_Up_PC_CMV_Mode_Task+0x42c>)
 80040e0:	2204      	movs	r2, #4
 80040e2:	701a      	strb	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 80040e4:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <Back_Up_PC_CMV_Mode_Task+0x430>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
														Apnea_counter_trigger_Flag=1;    //new
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <Back_Up_PC_CMV_Mode_Task+0x434>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <Back_Up_PC_CMV_Mode_Task+0x430>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
														Alert_error_count=0;             //new
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <Back_Up_PC_CMV_Mode_Task+0x438>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
														Dac_control_count=0;             //new
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <Back_Up_PC_CMV_Mode_Task+0x43c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
														uwTick=0;                         //new
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <Back_Up_PC_CMV_Mode_Task+0x41c>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
														TempSetpoint = P1.PEEP_CPAP_Val;
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <Back_Up_PC_CMV_Mode_Task+0x440>)
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc f9a1 	bl	8000454 <__aeabi_ui2d>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4925      	ldr	r1, [pc, #148]	; (80041ac <Back_Up_PC_CMV_Mode_Task+0x444>)
 8004118:	e9c1 2300 	strd	r2, r3, [r1]
														PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <Back_Up_PC_CMV_Mode_Task+0x428>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc f997 	bl	8000454 <__aeabi_ui2d>
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <Back_Up_PC_CMV_Mode_Task+0x42c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc f990 	bl	8000454 <__aeabi_ui2d>
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <Back_Up_PC_CMV_Mode_Task+0x448>)
 8004136:	ed93 7b00 	vldr	d7, [r3]
 800413a:	2300      	movs	r3, #0
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	2301      	movs	r3, #1
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	eeb0 2a47 	vmov.f32	s4, s14
 8004146:	eef0 2a67 	vmov.f32	s5, s15
 800414a:	ec41 0b11 	vmov	d1, r0, r1
 800414e:	ec45 4b10 	vmov	d0, r4, r5
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <Back_Up_PC_CMV_Mode_Task+0x444>)
 8004154:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <Back_Up_PC_CMV_Mode_Task+0x44c>)
 8004156:	4918      	ldr	r1, [pc, #96]	; (80041b8 <Back_Up_PC_CMV_Mode_Task+0x450>)
 8004158:	480b      	ldr	r0, [pc, #44]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 800415a:	f010 fb21 	bl	80147a0 <PID>
														PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800415e:	2101      	movs	r1, #1
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <Back_Up_PC_CMV_Mode_Task+0x420>)
 8004162:	f010 fc53 	bl	8014a0c <PID_SetMode>
														PID_SetSampleTime(&TPID, Time);
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <Back_Up_PC_CMV_Mode_Task+0x454>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	e04a      	b.n	8004204 <Back_Up_PC_CMV_Mode_Task+0x49c>
 800416e:	bf00      	nop
 8004170:	00000000 	.word	0x00000000
 8004174:	4072c000 	.word	0x4072c000
 8004178:	20016c04 	.word	0x20016c04
 800417c:	20016e59 	.word	0x20016e59
 8004180:	20016a2c 	.word	0x20016a2c
 8004184:	20017094 	.word	0x20017094
 8004188:	200169a0 	.word	0x200169a0
 800418c:	20000144 	.word	0x20000144
 8004190:	20000136 	.word	0x20000136
 8004194:	20000137 	.word	0x20000137
 8004198:	2000031c 	.word	0x2000031c
 800419c:	2000011c 	.word	0x2000011c
 80041a0:	20000308 	.word	0x20000308
 80041a4:	20000320 	.word	0x20000320
 80041a8:	20016960 	.word	0x20016960
 80041ac:	20016e80 	.word	0x20016e80
 80041b0:	20000138 	.word	0x20000138
 80041b4:	20016a18 	.word	0x20016a18
 80041b8:	20016a98 	.word	0x20016a98
 80041bc:	20000140 	.word	0x20000140
 80041c0:	2000012e 	.word	0x2000012e
 80041c4:	20000130 	.word	0x20000130
 80041c8:	20016e50 	.word	0x20016e50
 80041cc:	20016b28 	.word	0x20016b28
 80041d0:	20000004 	.word	0x20000004
 80041d4:	20016cd4 	.word	0x20016cd4
 80041d8:	20016df0 	.word	0x20016df0
 80041dc:	20000114 	.word	0x20000114
 80041e0:	20000318 	.word	0x20000318
 80041e4:	20000118 	.word	0x20000118
 80041e8:	40007400 	.word	0x40007400
 80041ec:	20000048 	.word	0x20000048
 80041f0:	40001800 	.word	0x40001800
 80041f4:	20016d3c 	.word	0x20016d3c
 80041f8:	20016a74 	.word	0x20016a74
 80041fc:	20016d40 	.word	0x20016d40
 8004200:	20016bcc 	.word	0x20016bcc
 8004204:	4894      	ldr	r0, [pc, #592]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 8004206:	f010 fd7d 	bl	8014d04 <PID_SetSampleTime>
														PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800420a:	4b94      	ldr	r3, [pc, #592]	; (800445c <Back_Up_PC_CMV_Mode_Task+0x6f4>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc f920 	bl	8000454 <__aeabi_ui2d>
 8004214:	4604      	mov	r4, r0
 8004216:	460d      	mov	r5, r1
 8004218:	4b91      	ldr	r3, [pc, #580]	; (8004460 <Back_Up_PC_CMV_Mode_Task+0x6f8>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc f919 	bl	8000454 <__aeabi_ui2d>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	ec43 2b11 	vmov	d1, r2, r3
 800422a:	ec45 4b10 	vmov	d0, r4, r5
 800422e:	488a      	ldr	r0, [pc, #552]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 8004230:	f010 fc0a 	bl	8014a48 <PID_SetOutputLimits>
														pressure_acheived=1;
 8004234:	4b8b      	ldr	r3, [pc, #556]	; (8004464 <Back_Up_PC_CMV_Mode_Task+0x6fc>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
														Alert_Status_count=0;
 800423a:	4b8b      	ldr	r3, [pc, #556]	; (8004468 <Back_Up_PC_CMV_Mode_Task+0x700>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
														Wait_Dac=1;
 8004240:	4b8a      	ldr	r3, [pc, #552]	; (800446c <Back_Up_PC_CMV_Mode_Task+0x704>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
														Parkar_valve_Signal(0);
 8004246:	4b8a      	ldr	r3, [pc, #552]	; (8004470 <Back_Up_PC_CMV_Mode_Task+0x708>)
 8004248:	2200      	movs	r2, #0
 800424a:	615a      	str	r2, [r3, #20]
														  O2.O2_process = 0;
 800424c:	4b89      	ldr	r3, [pc, #548]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
														  O2.Servo=45;
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 8004254:	222d      	movs	r2, #45	; 0x2d
 8004256:	605a      	str	r2, [r3, #4]
														  Servo_Angle(O2.Servo);
 8004258:	4b86      	ldr	r3, [pc, #536]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4b86      	ldr	r3, [pc, #536]	; (8004478 <Back_Up_PC_CMV_Mode_Task+0x710>)
 800425e:	635a      	str	r2, [r3, #52]	; 0x34
														vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8004260:	4b86      	ldr	r3, [pc, #536]	; (800447c <Back_Up_PC_CMV_Mode_Task+0x714>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f01b fb35 	bl	801f8d4 <vTaskSuspend>
														vTaskResume(Cpap_Handler);
 800426a:	4b85      	ldr	r3, [pc, #532]	; (8004480 <Back_Up_PC_CMV_Mode_Task+0x718>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f01b fbf4 	bl	801fa5c <vTaskResume>
														vTaskSuspend(One_Time_Handler);
 8004274:	4b83      	ldr	r3, [pc, #524]	; (8004484 <Back_Up_PC_CMV_Mode_Task+0x71c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f01b fb2b 	bl	801f8d4 <vTaskSuspend>
														vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800427e:	4b82      	ldr	r3, [pc, #520]	; (8004488 <Back_Up_PC_CMV_Mode_Task+0x720>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f01b fb26 	bl	801f8d4 <vTaskSuspend>
													if(_CurrentMode==BiPAP)
 8004288:	4b80      	ldr	r3, [pc, #512]	; (800448c <Back_Up_PC_CMV_Mode_Task+0x724>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	f040 83f8 	bne.w	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
														_Control_Byte &= (uint8_t) (~(0x80));
 8004292:	4b7f      	ldr	r3, [pc, #508]	; (8004490 <Back_Up_PC_CMV_Mode_Task+0x728>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	4b7c      	ldr	r3, [pc, #496]	; (8004490 <Back_Up_PC_CMV_Mode_Task+0x728>)
 800429e:	701a      	strb	r2, [r3, #0]
														A.Alert=1;
 80042a0:	4b7c      	ldr	r3, [pc, #496]	; (8004494 <Back_Up_PC_CMV_Mode_Task+0x72c>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	709a      	strb	r2, [r3, #2]
														A.Red_Led_Alert=0;
 80042a6:	4b7b      	ldr	r3, [pc, #492]	; (8004494 <Back_Up_PC_CMV_Mode_Task+0x72c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
														Led_Alert();
 80042ae:	f7fe fb19 	bl	80028e4 <Led_Alert>
														uwTick=0;
 80042b2:	4b79      	ldr	r3, [pc, #484]	; (8004498 <Back_Up_PC_CMV_Mode_Task+0x730>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
														TPID.OutputSum=300;
 80042b8:	4967      	ldr	r1, [pc, #412]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 80042ba:	a365      	add	r3, pc, #404	; (adr r3, 8004450 <Back_Up_PC_CMV_Mode_Task+0x6e8>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
														Speed=40;
 80042c4:	4b75      	ldr	r3, [pc, #468]	; (800449c <Back_Up_PC_CMV_Mode_Task+0x734>)
 80042c6:	2228      	movs	r2, #40	; 0x28
 80042c8:	601a      	str	r2, [r3, #0]
														kp=5;
 80042ca:	4b75      	ldr	r3, [pc, #468]	; (80044a0 <Back_Up_PC_CMV_Mode_Task+0x738>)
 80042cc:	2205      	movs	r2, #5
 80042ce:	701a      	strb	r2, [r3, #0]
														ki=4;
 80042d0:	4b74      	ldr	r3, [pc, #464]	; (80044a4 <Back_Up_PC_CMV_Mode_Task+0x73c>)
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 80042d6:	4b74      	ldr	r3, [pc, #464]	; (80044a8 <Back_Up_PC_CMV_Mode_Task+0x740>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
														Apnea_counter_trigger_Flag=1;    //new
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <Back_Up_PC_CMV_Mode_Task+0x744>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
														Alert_Data_send_count=0;         //new
 80042e2:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <Back_Up_PC_CMV_Mode_Task+0x740>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
														Alert_error_count=0;             //new
 80042e8:	4b71      	ldr	r3, [pc, #452]	; (80044b0 <Back_Up_PC_CMV_Mode_Task+0x748>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
														Dac_control_count=0;             //new
 80042ee:	4b71      	ldr	r3, [pc, #452]	; (80044b4 <Back_Up_PC_CMV_Mode_Task+0x74c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
														uwTick=0;                         //new
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <Back_Up_PC_CMV_Mode_Task+0x730>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
														TempSetpoint = (P1.EPAP_Val);
 80042fa:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 80042fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc f8a7 	bl	8000454 <__aeabi_ui2d>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	496c      	ldr	r1, [pc, #432]	; (80044bc <Back_Up_PC_CMV_Mode_Task+0x754>)
 800430c:	e9c1 2300 	strd	r2, r3, [r1]
														PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <Back_Up_PC_CMV_Mode_Task+0x738>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc f89d 	bl	8000454 <__aeabi_ui2d>
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
 800431e:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <Back_Up_PC_CMV_Mode_Task+0x73c>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc f896 	bl	8000454 <__aeabi_ui2d>
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <Back_Up_PC_CMV_Mode_Task+0x758>)
 800432a:	ed93 7b00 	vldr	d7, [r3]
 800432e:	2300      	movs	r3, #0
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2301      	movs	r3, #1
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	eeb0 2a47 	vmov.f32	s4, s14
 800433a:	eef0 2a67 	vmov.f32	s5, s15
 800433e:	ec41 0b11 	vmov	d1, r0, r1
 8004342:	ec45 4b10 	vmov	d0, r4, r5
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <Back_Up_PC_CMV_Mode_Task+0x754>)
 8004348:	4a5e      	ldr	r2, [pc, #376]	; (80044c4 <Back_Up_PC_CMV_Mode_Task+0x75c>)
 800434a:	495f      	ldr	r1, [pc, #380]	; (80044c8 <Back_Up_PC_CMV_Mode_Task+0x760>)
 800434c:	4842      	ldr	r0, [pc, #264]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 800434e:	f010 fa27 	bl	80147a0 <PID>
														PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8004352:	2101      	movs	r1, #1
 8004354:	4840      	ldr	r0, [pc, #256]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 8004356:	f010 fb59 	bl	8014a0c <PID_SetMode>
														PID_SetSampleTime(&TPID, Time);
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <Back_Up_PC_CMV_Mode_Task+0x764>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	483d      	ldr	r0, [pc, #244]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 8004362:	f010 fccf 	bl	8014d04 <PID_SetSampleTime>
														PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8004366:	4b3d      	ldr	r3, [pc, #244]	; (800445c <Back_Up_PC_CMV_Mode_Task+0x6f4>)
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f872 	bl	8000454 <__aeabi_ui2d>
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <Back_Up_PC_CMV_Mode_Task+0x6f8>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc f86b 	bl	8000454 <__aeabi_ui2d>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	ec43 2b11 	vmov	d1, r2, r3
 8004386:	ec45 4b10 	vmov	d0, r4, r5
 800438a:	4833      	ldr	r0, [pc, #204]	; (8004458 <Back_Up_PC_CMV_Mode_Task+0x6f0>)
 800438c:	f010 fb5c 	bl	8014a48 <PID_SetOutputLimits>
														pressure_acheived=1;
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <Back_Up_PC_CMV_Mode_Task+0x6fc>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
														Alert_Status_count=0;
 8004396:	4b34      	ldr	r3, [pc, #208]	; (8004468 <Back_Up_PC_CMV_Mode_Task+0x700>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
														Wait_Dac=1;
 800439c:	4b33      	ldr	r3, [pc, #204]	; (800446c <Back_Up_PC_CMV_Mode_Task+0x704>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
														P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 80043a2:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 80043a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80043a6:	461a      	mov	r2, r3
 80043a8:	0152      	lsls	r2, r2, #5
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 80043b6:	849a      	strh	r2, [r3, #36]	; 0x24
														P1._Apnea_counter_trigger_check_time = 3000;
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 80043ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80043be:	809a      	strh	r2, [r3, #4]
														Trigger = 0;
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <Back_Up_PC_CMV_Mode_Task+0x768>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
														now_update = 0;
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <Back_Up_PC_CMV_Mode_Task+0x76c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
														B4._DAC_VAL0 = 0;
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <Back_Up_PC_CMV_Mode_Task+0x770>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	809a      	strh	r2, [r3, #4]
														P1.Apnea_Mode=1;
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
														Parkar_valve_Signal(0);
 80043da:	4b25      	ldr	r3, [pc, #148]	; (8004470 <Back_Up_PC_CMV_Mode_Task+0x708>)
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
														  O2.O2_process = 0;
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
														  O2.Servo=45;
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 80043e8:	222d      	movs	r2, #45	; 0x2d
 80043ea:	605a      	str	r2, [r3, #4]
														  Servo_Angle(O2.Servo);
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <Back_Up_PC_CMV_Mode_Task+0x70c>)
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <Back_Up_PC_CMV_Mode_Task+0x710>)
 80043f2:	635a      	str	r2, [r3, #52]	; 0x34
														vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <Back_Up_PC_CMV_Mode_Task+0x714>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f01b fa6b 	bl	801f8d4 <vTaskSuspend>
														vTaskResume(BiPap_Handler);
 80043fe:	4b37      	ldr	r3, [pc, #220]	; (80044dc <Back_Up_PC_CMV_Mode_Task+0x774>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f01b fb2a 	bl	801fa5c <vTaskResume>
														vTaskSuspend(One_Time_Handler);
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <Back_Up_PC_CMV_Mode_Task+0x71c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f01b fa61 	bl	801f8d4 <vTaskSuspend>
														vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <Back_Up_PC_CMV_Mode_Task+0x720>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f01b fa5c 	bl	801f8d4 <vTaskSuspend>
											if(P1._TRIG_TYPE==1)
 800441c:	e331      	b.n	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
												if((Flow_Sensor_cal._Flow_Val>(P1.simv_trigger_offset2+P1._TRIG_LMT)))
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <Back_Up_PC_CMV_Mode_Task+0x778>)
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800442a:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 800442c:	edd3 6a06 	vldr	s13, [r3, #24]
 8004430:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <Back_Up_PC_CMV_Mode_Task+0x750>)
 8004432:	891b      	ldrh	r3, [r3, #8]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	dc4c      	bgt.n	80044e4 <Back_Up_PC_CMV_Mode_Task+0x77c>
											if(P1._TRIG_TYPE==1)
 800444a:	e31a      	b.n	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
 800444c:	f3af 8000 	nop.w
 8004450:	00000000 	.word	0x00000000
 8004454:	4072c000 	.word	0x4072c000
 8004458:	200169a0 	.word	0x200169a0
 800445c:	2000012e 	.word	0x2000012e
 8004460:	20000130 	.word	0x20000130
 8004464:	20000114 	.word	0x20000114
 8004468:	20000318 	.word	0x20000318
 800446c:	20000118 	.word	0x20000118
 8004470:	40007400 	.word	0x40007400
 8004474:	20000048 	.word	0x20000048
 8004478:	40001800 	.word	0x40001800
 800447c:	20016d3c 	.word	0x20016d3c
 8004480:	20016bb8 	.word	0x20016bb8
 8004484:	20016d40 	.word	0x20016d40
 8004488:	20016bcc 	.word	0x20016bcc
 800448c:	20016c04 	.word	0x20016c04
 8004490:	20016e59 	.word	0x20016e59
 8004494:	20016a2c 	.word	0x20016a2c
 8004498:	20017094 	.word	0x20017094
 800449c:	20000144 	.word	0x20000144
 80044a0:	20000136 	.word	0x20000136
 80044a4:	20000137 	.word	0x20000137
 80044a8:	2000031c 	.word	0x2000031c
 80044ac:	2000011c 	.word	0x2000011c
 80044b0:	20000308 	.word	0x20000308
 80044b4:	20000320 	.word	0x20000320
 80044b8:	20016960 	.word	0x20016960
 80044bc:	20016e80 	.word	0x20016e80
 80044c0:	20000138 	.word	0x20000138
 80044c4:	20016a18 	.word	0x20016a18
 80044c8:	20016a98 	.word	0x20016a98
 80044cc:	20000140 	.word	0x20000140
 80044d0:	20016e50 	.word	0x20016e50
 80044d4:	20016b28 	.word	0x20016b28
 80044d8:	20000004 	.word	0x20000004
 80044dc:	20016a24 	.word	0x20016a24
 80044e0:	20016c48 	.word	0x20016c48
														if (_CurrentMode == PSV)
 80044e4:	4baa      	ldr	r3, [pc, #680]	; (8004790 <Back_Up_PC_CMV_Mode_Task+0xa28>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	f040 80c8 	bne.w	800467e <Back_Up_PC_CMV_Mode_Task+0x916>
															_Control_Byte &= (uint8_t) (~(0x80));
 80044ee:	4ba9      	ldr	r3, [pc, #676]	; (8004794 <Back_Up_PC_CMV_Mode_Task+0xa2c>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4ba6      	ldr	r3, [pc, #664]	; (8004794 <Back_Up_PC_CMV_Mode_Task+0xa2c>)
 80044fa:	701a      	strb	r2, [r3, #0]
															A.Alert=1;
 80044fc:	4ba6      	ldr	r3, [pc, #664]	; (8004798 <Back_Up_PC_CMV_Mode_Task+0xa30>)
 80044fe:	2201      	movs	r2, #1
 8004500:	709a      	strb	r2, [r3, #2]
															A.Red_Led_Alert=0;
 8004502:	4ba5      	ldr	r3, [pc, #660]	; (8004798 <Back_Up_PC_CMV_Mode_Task+0xa30>)
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
															Led_Alert();
 800450a:	f7fe f9eb 	bl	80028e4 <Led_Alert>
															uwTick=0;
 800450e:	4ba3      	ldr	r3, [pc, #652]	; (800479c <Back_Up_PC_CMV_Mode_Task+0xa34>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
															TPID.OutputSum=300;
 8004514:	49a2      	ldr	r1, [pc, #648]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 8004516:	a39c      	add	r3, pc, #624	; (adr r3, 8004788 <Back_Up_PC_CMV_Mode_Task+0xa20>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
															Speed=40;
 8004520:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <Back_Up_PC_CMV_Mode_Task+0xa3c>)
 8004522:	2228      	movs	r2, #40	; 0x28
 8004524:	601a      	str	r2, [r3, #0]
															kp=5;
 8004526:	4ba0      	ldr	r3, [pc, #640]	; (80047a8 <Back_Up_PC_CMV_Mode_Task+0xa40>)
 8004528:	2205      	movs	r2, #5
 800452a:	701a      	strb	r2, [r3, #0]
															ki=4;
 800452c:	4b9f      	ldr	r3, [pc, #636]	; (80047ac <Back_Up_PC_CMV_Mode_Task+0xa44>)
 800452e:	2204      	movs	r2, #4
 8004530:	701a      	strb	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 8004532:	4b9f      	ldr	r3, [pc, #636]	; (80047b0 <Back_Up_PC_CMV_Mode_Task+0xa48>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
															Apnea_counter_trigger_Flag=1;    //new
 8004538:	4b9e      	ldr	r3, [pc, #632]	; (80047b4 <Back_Up_PC_CMV_Mode_Task+0xa4c>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 800453e:	4b9c      	ldr	r3, [pc, #624]	; (80047b0 <Back_Up_PC_CMV_Mode_Task+0xa48>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
															Alert_error_count=0;             //new
 8004544:	4b9c      	ldr	r3, [pc, #624]	; (80047b8 <Back_Up_PC_CMV_Mode_Task+0xa50>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
															Dac_control_count=0;             //new
 800454a:	4b9c      	ldr	r3, [pc, #624]	; (80047bc <Back_Up_PC_CMV_Mode_Task+0xa54>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
															uwTick=0;                         //new
 8004550:	4b92      	ldr	r3, [pc, #584]	; (800479c <Back_Up_PC_CMV_Mode_Task+0xa34>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
															TempSetpoint = (P1.PIP_PSV_Val );
 8004556:	4b9a      	ldr	r3, [pc, #616]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fb ff7a 	bl	8000454 <__aeabi_ui2d>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4997      	ldr	r1, [pc, #604]	; (80047c4 <Back_Up_PC_CMV_Mode_Task+0xa5c>)
 8004566:	e9c1 2300 	strd	r2, r3, [r1]
															PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800456a:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <Back_Up_PC_CMV_Mode_Task+0xa40>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ff70 	bl	8000454 <__aeabi_ui2d>
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
 8004578:	4b8c      	ldr	r3, [pc, #560]	; (80047ac <Back_Up_PC_CMV_Mode_Task+0xa44>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb ff69 	bl	8000454 <__aeabi_ui2d>
 8004582:	4b91      	ldr	r3, [pc, #580]	; (80047c8 <Back_Up_PC_CMV_Mode_Task+0xa60>)
 8004584:	ed93 7b00 	vldr	d7, [r3]
 8004588:	2300      	movs	r3, #0
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	2301      	movs	r3, #1
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	eeb0 2a47 	vmov.f32	s4, s14
 8004594:	eef0 2a67 	vmov.f32	s5, s15
 8004598:	ec41 0b11 	vmov	d1, r0, r1
 800459c:	ec45 4b10 	vmov	d0, r4, r5
 80045a0:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <Back_Up_PC_CMV_Mode_Task+0xa5c>)
 80045a2:	4a8a      	ldr	r2, [pc, #552]	; (80047cc <Back_Up_PC_CMV_Mode_Task+0xa64>)
 80045a4:	498a      	ldr	r1, [pc, #552]	; (80047d0 <Back_Up_PC_CMV_Mode_Task+0xa68>)
 80045a6:	487e      	ldr	r0, [pc, #504]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 80045a8:	f010 f8fa 	bl	80147a0 <PID>
															PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80045ac:	2101      	movs	r1, #1
 80045ae:	487c      	ldr	r0, [pc, #496]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 80045b0:	f010 fa2c 	bl	8014a0c <PID_SetMode>
															pressure_acheived=1;
 80045b4:	4b87      	ldr	r3, [pc, #540]	; (80047d4 <Back_Up_PC_CMV_Mode_Task+0xa6c>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
															Alert_Status_count=0;
 80045ba:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <Back_Up_PC_CMV_Mode_Task+0xa70>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
															Wait_Dac=1;
 80045c0:	4b86      	ldr	r3, [pc, #536]	; (80047dc <Back_Up_PC_CMV_Mode_Task+0xa74>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
															PID_SetSampleTime(&TPID, Time);
 80045c6:	4b86      	ldr	r3, [pc, #536]	; (80047e0 <Back_Up_PC_CMV_Mode_Task+0xa78>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4874      	ldr	r0, [pc, #464]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 80045ce:	f010 fb99 	bl	8014d04 <PID_SetSampleTime>
															PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80045d2:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <Back_Up_PC_CMV_Mode_Task+0xa7c>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ff3c 	bl	8000454 <__aeabi_ui2d>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <Back_Up_PC_CMV_Mode_Task+0xa80>)
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fb ff35 	bl	8000454 <__aeabi_ui2d>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	ec43 2b11 	vmov	d1, r2, r3
 80045f2:	ec45 4b10 	vmov	d0, r4, r5
 80045f6:	486a      	ldr	r0, [pc, #424]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 80045f8:	f010 fa26 	bl	8014a48 <PID_SetOutputLimits>
															P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 80045fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004600:	461a      	mov	r2, r3
 8004602:	0152      	lsls	r2, r2, #5
 8004604:	1ad2      	subs	r2, r2, r3
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	b29a      	uxth	r2, r3
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 8004610:	849a      	strh	r2, [r3, #36]	; 0x24
															P1._Apnea_counter_trigger_check_time = 3000;
 8004612:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 8004614:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004618:	809a      	strh	r2, [r3, #4]
															Trigger = 1;
 800461a:	4b74      	ldr	r3, [pc, #464]	; (80047ec <Back_Up_PC_CMV_Mode_Task+0xa84>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
															now_update = 2;
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <Back_Up_PC_CMV_Mode_Task+0xa88>)
 8004622:	2202      	movs	r2, #2
 8004624:	601a      	str	r2, [r3, #0]
															B4._DAC_VAL0 = 0;
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <Back_Up_PC_CMV_Mode_Task+0xa8c>)
 8004628:	2200      	movs	r2, #0
 800462a:	809a      	strh	r2, [r3, #4]
															P1.Apnea_Mode=1;
 800462c:	4b64      	ldr	r3, [pc, #400]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
															Parkar_valve_Signal(0);
 8004634:	4b70      	ldr	r3, [pc, #448]	; (80047f8 <Back_Up_PC_CMV_Mode_Task+0xa90>)
 8004636:	2200      	movs	r2, #0
 8004638:	615a      	str	r2, [r3, #20]
															  O2.O2_process = 0;
 800463a:	4b70      	ldr	r3, [pc, #448]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 800463c:	2200      	movs	r2, #0
 800463e:	60da      	str	r2, [r3, #12]
															  O2.Servo=45;
 8004640:	4b6e      	ldr	r3, [pc, #440]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 8004642:	222d      	movs	r2, #45	; 0x2d
 8004644:	605a      	str	r2, [r3, #4]
															  Servo_Angle(O2.Servo);
 8004646:	4b6d      	ldr	r3, [pc, #436]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <Back_Up_PC_CMV_Mode_Task+0xa98>)
 800464c:	635a      	str	r2, [r3, #52]	; 0x34
															_I_TIMER = B2._I_TIMER_HOLD;
 800464e:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <Back_Up_PC_CMV_Mode_Task+0xa9c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6d      	ldr	r2, [pc, #436]	; (8004808 <Back_Up_PC_CMV_Mode_Task+0xaa0>)
 8004654:	6013      	str	r3, [r2, #0]
															vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8004656:	4b6d      	ldr	r3, [pc, #436]	; (800480c <Back_Up_PC_CMV_Mode_Task+0xaa4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f01b f93a 	bl	801f8d4 <vTaskSuspend>
															vTaskResume(Psv_Pid_Handler);
 8004660:	4b6b      	ldr	r3, [pc, #428]	; (8004810 <Back_Up_PC_CMV_Mode_Task+0xaa8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f01b f9f9 	bl	801fa5c <vTaskResume>
															vTaskSuspend(One_Time_Handler);
 800466a:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <Back_Up_PC_CMV_Mode_Task+0xaac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f01b f930 	bl	801f8d4 <vTaskSuspend>
															vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <Back_Up_PC_CMV_Mode_Task+0xab0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f01b f92b 	bl	801f8d4 <vTaskSuspend>
														if (_CurrentMode == cPAP)
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <Back_Up_PC_CMV_Mode_Task+0xa28>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b07      	cmp	r3, #7
 8004684:	f040 8112 	bne.w	80048ac <Back_Up_PC_CMV_Mode_Task+0xb44>
															_Control_Byte &= (uint8_t) (~(0x80));
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <Back_Up_PC_CMV_Mode_Task+0xa2c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <Back_Up_PC_CMV_Mode_Task+0xa2c>)
 8004694:	701a      	strb	r2, [r3, #0]
															A.Alert=1;
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <Back_Up_PC_CMV_Mode_Task+0xa30>)
 8004698:	2201      	movs	r2, #1
 800469a:	709a      	strb	r2, [r3, #2]
															A.Red_Led_Alert=0;
 800469c:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <Back_Up_PC_CMV_Mode_Task+0xa30>)
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
															Led_Alert();
 80046a4:	f7fe f91e 	bl	80028e4 <Led_Alert>
															P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 80046a8:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 80046aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80046ac:	461a      	mov	r2, r3
 80046ae:	0152      	lsls	r2, r2, #5
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 80046bc:	849a      	strh	r2, [r3, #36]	; 0x24
															Trigger = 0;
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <Back_Up_PC_CMV_Mode_Task+0xa84>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
															now_update = 0;
 80046c4:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <Back_Up_PC_CMV_Mode_Task+0xa88>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
															B4._DAC_VAL0 = 0;
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <Back_Up_PC_CMV_Mode_Task+0xa8c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	809a      	strh	r2, [r3, #4]
															P1.Apnea_Mode=1;
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
															uwTick=0;
 80046d8:	4b30      	ldr	r3, [pc, #192]	; (800479c <Back_Up_PC_CMV_Mode_Task+0xa34>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
															TPID.OutputSum=300;
 80046de:	4930      	ldr	r1, [pc, #192]	; (80047a0 <Back_Up_PC_CMV_Mode_Task+0xa38>)
 80046e0:	a329      	add	r3, pc, #164	; (adr r3, 8004788 <Back_Up_PC_CMV_Mode_Task+0xa20>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
															Speed=40;
 80046ea:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <Back_Up_PC_CMV_Mode_Task+0xa3c>)
 80046ec:	2228      	movs	r2, #40	; 0x28
 80046ee:	601a      	str	r2, [r3, #0]
															kp=5;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <Back_Up_PC_CMV_Mode_Task+0xa40>)
 80046f2:	2205      	movs	r2, #5
 80046f4:	701a      	strb	r2, [r3, #0]
															ki=4;
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <Back_Up_PC_CMV_Mode_Task+0xa44>)
 80046f8:	2204      	movs	r2, #4
 80046fa:	701a      	strb	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 80046fc:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <Back_Up_PC_CMV_Mode_Task+0xa48>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
															Apnea_counter_trigger_Flag=1;    //new
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <Back_Up_PC_CMV_Mode_Task+0xa4c>)
 8004704:	2201      	movs	r2, #1
 8004706:	601a      	str	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <Back_Up_PC_CMV_Mode_Task+0xa48>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
															Alert_error_count=0;             //new
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <Back_Up_PC_CMV_Mode_Task+0xa50>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
															Dac_control_count=0;             //new
 8004714:	4b29      	ldr	r3, [pc, #164]	; (80047bc <Back_Up_PC_CMV_Mode_Task+0xa54>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
															uwTick=0;                         //new
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <Back_Up_PC_CMV_Mode_Task+0xa34>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
															pressure_acheived=1;
 8004720:	4b2c      	ldr	r3, [pc, #176]	; (80047d4 <Back_Up_PC_CMV_Mode_Task+0xa6c>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
															Alert_Status_count=0;
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <Back_Up_PC_CMV_Mode_Task+0xa70>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
															Wait_Dac=1;
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <Back_Up_PC_CMV_Mode_Task+0xa74>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]
															Parkar_valve_Signal(0);
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <Back_Up_PC_CMV_Mode_Task+0xa90>)
 8004734:	2200      	movs	r2, #0
 8004736:	615a      	str	r2, [r3, #20]
															  O2.O2_process = 0;
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
															  O2.Servo=45;
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 8004740:	222d      	movs	r2, #45	; 0x2d
 8004742:	605a      	str	r2, [r3, #4]
															  Servo_Angle(O2.Servo);
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <Back_Up_PC_CMV_Mode_Task+0xa94>)
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <Back_Up_PC_CMV_Mode_Task+0xa98>)
 800474a:	635a      	str	r2, [r3, #52]	; 0x34
															P1._Apnea_counter_trigger_check_time = 3000;
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 800474e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004752:	809a      	strh	r2, [r3, #4]
															TempSetpoint = (P1.PEEP_CPAP_Val );
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <Back_Up_PC_CMV_Mode_Task+0xa58>)
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fe7b 	bl	8000454 <__aeabi_ui2d>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4918      	ldr	r1, [pc, #96]	; (80047c4 <Back_Up_PC_CMV_Mode_Task+0xa5c>)
 8004764:	e9c1 2300 	strd	r2, r3, [r1]
															PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <Back_Up_PC_CMV_Mode_Task+0xa40>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb fe71 	bl	8000454 <__aeabi_ui2d>
 8004772:	4604      	mov	r4, r0
 8004774:	460d      	mov	r5, r1
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <Back_Up_PC_CMV_Mode_Task+0xa44>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fb fe6a 	bl	8000454 <__aeabi_ui2d>
 8004780:	e04c      	b.n	800481c <Back_Up_PC_CMV_Mode_Task+0xab4>
 8004782:	bf00      	nop
 8004784:	f3af 8000 	nop.w
 8004788:	00000000 	.word	0x00000000
 800478c:	4072c000 	.word	0x4072c000
 8004790:	20016c04 	.word	0x20016c04
 8004794:	20016e59 	.word	0x20016e59
 8004798:	20016a2c 	.word	0x20016a2c
 800479c:	20017094 	.word	0x20017094
 80047a0:	200169a0 	.word	0x200169a0
 80047a4:	20000144 	.word	0x20000144
 80047a8:	20000136 	.word	0x20000136
 80047ac:	20000137 	.word	0x20000137
 80047b0:	2000031c 	.word	0x2000031c
 80047b4:	2000011c 	.word	0x2000011c
 80047b8:	20000308 	.word	0x20000308
 80047bc:	20000320 	.word	0x20000320
 80047c0:	20016960 	.word	0x20016960
 80047c4:	20016e80 	.word	0x20016e80
 80047c8:	20000138 	.word	0x20000138
 80047cc:	20016a18 	.word	0x20016a18
 80047d0:	20016a98 	.word	0x20016a98
 80047d4:	20000114 	.word	0x20000114
 80047d8:	20000318 	.word	0x20000318
 80047dc:	20000118 	.word	0x20000118
 80047e0:	20000140 	.word	0x20000140
 80047e4:	2000012e 	.word	0x2000012e
 80047e8:	20000130 	.word	0x20000130
 80047ec:	20016e50 	.word	0x20016e50
 80047f0:	20016b28 	.word	0x20016b28
 80047f4:	20000004 	.word	0x20000004
 80047f8:	40007400 	.word	0x40007400
 80047fc:	20000048 	.word	0x20000048
 8004800:	40001800 	.word	0x40001800
 8004804:	20016cd4 	.word	0x20016cd4
 8004808:	20016df0 	.word	0x20016df0
 800480c:	20016d3c 	.word	0x20016d3c
 8004810:	20016a74 	.word	0x20016a74
 8004814:	20016d40 	.word	0x20016d40
 8004818:	20016bcc 	.word	0x20016bcc
 800481c:	4ba2      	ldr	r3, [pc, #648]	; (8004aa8 <Back_Up_PC_CMV_Mode_Task+0xd40>)
 800481e:	ed93 7b00 	vldr	d7, [r3]
 8004822:	2300      	movs	r3, #0
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	2301      	movs	r3, #1
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	eeb0 2a47 	vmov.f32	s4, s14
 800482e:	eef0 2a67 	vmov.f32	s5, s15
 8004832:	ec41 0b11 	vmov	d1, r0, r1
 8004836:	ec45 4b10 	vmov	d0, r4, r5
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <Back_Up_PC_CMV_Mode_Task+0xd44>)
 800483c:	4a9c      	ldr	r2, [pc, #624]	; (8004ab0 <Back_Up_PC_CMV_Mode_Task+0xd48>)
 800483e:	499d      	ldr	r1, [pc, #628]	; (8004ab4 <Back_Up_PC_CMV_Mode_Task+0xd4c>)
 8004840:	489d      	ldr	r0, [pc, #628]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 8004842:	f00f ffad 	bl	80147a0 <PID>
															PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8004846:	2101      	movs	r1, #1
 8004848:	489b      	ldr	r0, [pc, #620]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 800484a:	f010 f8df 	bl	8014a0c <PID_SetMode>
															PID_SetSampleTime(&TPID, Time);
 800484e:	4b9b      	ldr	r3, [pc, #620]	; (8004abc <Back_Up_PC_CMV_Mode_Task+0xd54>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	4898      	ldr	r0, [pc, #608]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 8004856:	f010 fa55 	bl	8014d04 <PID_SetSampleTime>
															PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800485a:	4b99      	ldr	r3, [pc, #612]	; (8004ac0 <Back_Up_PC_CMV_Mode_Task+0xd58>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fdf8 	bl	8000454 <__aeabi_ui2d>
 8004864:	4604      	mov	r4, r0
 8004866:	460d      	mov	r5, r1
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <Back_Up_PC_CMV_Mode_Task+0xd5c>)
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fb fdf1 	bl	8000454 <__aeabi_ui2d>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	ec43 2b11 	vmov	d1, r2, r3
 800487a:	ec45 4b10 	vmov	d0, r4, r5
 800487e:	488e      	ldr	r0, [pc, #568]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 8004880:	f010 f8e2 	bl	8014a48 <PID_SetOutputLimits>
															vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8004884:	4b90      	ldr	r3, [pc, #576]	; (8004ac8 <Back_Up_PC_CMV_Mode_Task+0xd60>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f01b f823 	bl	801f8d4 <vTaskSuspend>
															vTaskResume(Cpap_Handler);
 800488e:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <Back_Up_PC_CMV_Mode_Task+0xd64>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f01b f8e2 	bl	801fa5c <vTaskResume>
															vTaskSuspend(One_Time_Handler);
 8004898:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <Back_Up_PC_CMV_Mode_Task+0xd68>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f01b f819 	bl	801f8d4 <vTaskSuspend>
															vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 80048a2:	4b8c      	ldr	r3, [pc, #560]	; (8004ad4 <Back_Up_PC_CMV_Mode_Task+0xd6c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f01b f814 	bl	801f8d4 <vTaskSuspend>
														if(_CurrentMode==BiPAP)
 80048ac:	4b8a      	ldr	r3, [pc, #552]	; (8004ad8 <Back_Up_PC_CMV_Mode_Task+0xd70>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	f040 80e6 	bne.w	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
															_Control_Byte &= (uint8_t) (~(0x80));
 80048b6:	4b89      	ldr	r3, [pc, #548]	; (8004adc <Back_Up_PC_CMV_Mode_Task+0xd74>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	4b86      	ldr	r3, [pc, #536]	; (8004adc <Back_Up_PC_CMV_Mode_Task+0xd74>)
 80048c2:	701a      	strb	r2, [r3, #0]
															A.Alert=1;
 80048c4:	4b86      	ldr	r3, [pc, #536]	; (8004ae0 <Back_Up_PC_CMV_Mode_Task+0xd78>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	709a      	strb	r2, [r3, #2]
															A.Red_Led_Alert=0;
 80048ca:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <Back_Up_PC_CMV_Mode_Task+0xd78>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
															Led_Alert();
 80048d2:	f7fe f807 	bl	80028e4 <Led_Alert>
															uwTick=0;
 80048d6:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <Back_Up_PC_CMV_Mode_Task+0xd7c>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
															TPID.OutputSum=300;
 80048dc:	4976      	ldr	r1, [pc, #472]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 80048de:	a370      	add	r3, pc, #448	; (adr r3, 8004aa0 <Back_Up_PC_CMV_Mode_Task+0xd38>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
															Speed=40;
 80048e8:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <Back_Up_PC_CMV_Mode_Task+0xd80>)
 80048ea:	2228      	movs	r2, #40	; 0x28
 80048ec:	601a      	str	r2, [r3, #0]
															kp=5;
 80048ee:	4b7f      	ldr	r3, [pc, #508]	; (8004aec <Back_Up_PC_CMV_Mode_Task+0xd84>)
 80048f0:	2205      	movs	r2, #5
 80048f2:	701a      	strb	r2, [r3, #0]
															ki=4;
 80048f4:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <Back_Up_PC_CMV_Mode_Task+0xd88>)
 80048f6:	2204      	movs	r2, #4
 80048f8:	701a      	strb	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 80048fa:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <Back_Up_PC_CMV_Mode_Task+0xd8c>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
															Apnea_counter_trigger_Flag=1;    //new
 8004900:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <Back_Up_PC_CMV_Mode_Task+0xd90>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
															Alert_Data_send_count=0;         //new
 8004906:	4b7b      	ldr	r3, [pc, #492]	; (8004af4 <Back_Up_PC_CMV_Mode_Task+0xd8c>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
															Alert_error_count=0;             //new
 800490c:	4b7b      	ldr	r3, [pc, #492]	; (8004afc <Back_Up_PC_CMV_Mode_Task+0xd94>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
															Dac_control_count=0;             //new
 8004912:	4b7b      	ldr	r3, [pc, #492]	; (8004b00 <Back_Up_PC_CMV_Mode_Task+0xd98>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
															uwTick=0;                         //new
 8004918:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <Back_Up_PC_CMV_Mode_Task+0xd7c>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
															TempSetpoint = (P1.EPAP_Val );
 800491e:	4b79      	ldr	r3, [pc, #484]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 8004920:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004924:	4618      	mov	r0, r3
 8004926:	f7fb fd95 	bl	8000454 <__aeabi_ui2d>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	495f      	ldr	r1, [pc, #380]	; (8004aac <Back_Up_PC_CMV_Mode_Task+0xd44>)
 8004930:	e9c1 2300 	strd	r2, r3, [r1]
															PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004934:	4b6d      	ldr	r3, [pc, #436]	; (8004aec <Back_Up_PC_CMV_Mode_Task+0xd84>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fd8b 	bl	8000454 <__aeabi_ui2d>
 800493e:	4604      	mov	r4, r0
 8004940:	460d      	mov	r5, r1
 8004942:	4b6b      	ldr	r3, [pc, #428]	; (8004af0 <Back_Up_PC_CMV_Mode_Task+0xd88>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fb fd84 	bl	8000454 <__aeabi_ui2d>
 800494c:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <Back_Up_PC_CMV_Mode_Task+0xd40>)
 800494e:	ed93 7b00 	vldr	d7, [r3]
 8004952:	2300      	movs	r3, #0
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	2301      	movs	r3, #1
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	eeb0 2a47 	vmov.f32	s4, s14
 800495e:	eef0 2a67 	vmov.f32	s5, s15
 8004962:	ec41 0b11 	vmov	d1, r0, r1
 8004966:	ec45 4b10 	vmov	d0, r4, r5
 800496a:	4b50      	ldr	r3, [pc, #320]	; (8004aac <Back_Up_PC_CMV_Mode_Task+0xd44>)
 800496c:	4a50      	ldr	r2, [pc, #320]	; (8004ab0 <Back_Up_PC_CMV_Mode_Task+0xd48>)
 800496e:	4951      	ldr	r1, [pc, #324]	; (8004ab4 <Back_Up_PC_CMV_Mode_Task+0xd4c>)
 8004970:	4851      	ldr	r0, [pc, #324]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 8004972:	f00f ff15 	bl	80147a0 <PID>
															PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8004976:	2101      	movs	r1, #1
 8004978:	484f      	ldr	r0, [pc, #316]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 800497a:	f010 f847 	bl	8014a0c <PID_SetMode>
															PID_SetSampleTime(&TPID, Time);
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <Back_Up_PC_CMV_Mode_Task+0xd54>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4619      	mov	r1, r3
 8004984:	484c      	ldr	r0, [pc, #304]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 8004986:	f010 f9bd 	bl	8014d04 <PID_SetSampleTime>
															PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800498a:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <Back_Up_PC_CMV_Mode_Task+0xd58>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fd60 	bl	8000454 <__aeabi_ui2d>
 8004994:	4604      	mov	r4, r0
 8004996:	460d      	mov	r5, r1
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <Back_Up_PC_CMV_Mode_Task+0xd5c>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fd59 	bl	8000454 <__aeabi_ui2d>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	ec43 2b11 	vmov	d1, r2, r3
 80049aa:	ec45 4b10 	vmov	d0, r4, r5
 80049ae:	4842      	ldr	r0, [pc, #264]	; (8004ab8 <Back_Up_PC_CMV_Mode_Task+0xd50>)
 80049b0:	f010 f84a 	bl	8014a48 <PID_SetOutputLimits>
															pressure_acheived=1;
 80049b4:	4b54      	ldr	r3, [pc, #336]	; (8004b08 <Back_Up_PC_CMV_Mode_Task+0xda0>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
															Alert_Status_count=0;
 80049ba:	4b54      	ldr	r3, [pc, #336]	; (8004b0c <Back_Up_PC_CMV_Mode_Task+0xda4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
															Wait_Dac=1;
 80049c0:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <Back_Up_PC_CMV_Mode_Task+0xda8>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
															Parkar_valve_Signal(0);
 80049c6:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <Back_Up_PC_CMV_Mode_Task+0xdac>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
															  O2.O2_process = 0;
 80049cc:	4b52      	ldr	r3, [pc, #328]	; (8004b18 <Back_Up_PC_CMV_Mode_Task+0xdb0>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
															  O2.Servo=45;
 80049d2:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <Back_Up_PC_CMV_Mode_Task+0xdb0>)
 80049d4:	222d      	movs	r2, #45	; 0x2d
 80049d6:	605a      	str	r2, [r3, #4]
															  Servo_Angle(O2.Servo);
 80049d8:	4b4f      	ldr	r3, [pc, #316]	; (8004b18 <Back_Up_PC_CMV_Mode_Task+0xdb0>)
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <Back_Up_PC_CMV_Mode_Task+0xdb4>)
 80049de:	635a      	str	r2, [r3, #52]	; 0x34
															P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 80049e0:	4b48      	ldr	r3, [pc, #288]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 80049e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80049e4:	461a      	mov	r2, r3
 80049e6:	0152      	lsls	r2, r2, #5
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 80049f4:	849a      	strh	r2, [r3, #36]	; 0x24
															P1._Apnea_counter_trigger_check_time = 3000;
 80049f6:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 80049f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80049fc:	809a      	strh	r2, [r3, #4]
															Trigger = 0;
 80049fe:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <Back_Up_PC_CMV_Mode_Task+0xdb8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
															now_update = 0;
 8004a04:	4b47      	ldr	r3, [pc, #284]	; (8004b24 <Back_Up_PC_CMV_Mode_Task+0xdbc>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
															B4._DAC_VAL0 = 0;
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <Back_Up_PC_CMV_Mode_Task+0xdc0>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	809a      	strh	r2, [r3, #4]
															P1.Apnea_Mode=1;
 8004a10:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
															vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8004a18:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <Back_Up_PC_CMV_Mode_Task+0xd60>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f01a ff59 	bl	801f8d4 <vTaskSuspend>
															vTaskResume(BiPap_Handler);
 8004a22:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <Back_Up_PC_CMV_Mode_Task+0xdc4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f01b f818 	bl	801fa5c <vTaskResume>
															vTaskSuspend(One_Time_Handler);
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <Back_Up_PC_CMV_Mode_Task+0xd68>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f01a ff4f 	bl	801f8d4 <vTaskSuspend>
															vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <Back_Up_PC_CMV_Mode_Task+0xd6c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f01a ff4a 	bl	801f8d4 <vTaskSuspend>
											if(P1._TRIG_TYPE==1)
 8004a40:	e01f      	b.n	8004a82 <Back_Up_PC_CMV_Mode_Task+0xd1a>
											  if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <Back_Up_PC_CMV_Mode_Task+0xdc8>)
 8004a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <Back_Up_PC_CMV_Mode_Task+0xcf4>
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <Back_Up_PC_CMV_Mode_Task+0xdc8>)
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f113 0f08 	cmn.w	r3, #8
 8004a52:	db1c      	blt.n	8004a8e <Back_Up_PC_CMV_Mode_Task+0xd26>
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <Back_Up_PC_CMV_Mode_Task+0xdc8>)
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	da18      	bge.n	8004a8e <Back_Up_PC_CMV_Mode_Task+0xd26>
												  P1.simv_trigger_offset=Pressure_sensor._Pressure_Val;
 8004a5c:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <Back_Up_PC_CMV_Mode_Task+0xdcc>)
 8004a5e:	791b      	ldrb	r3, [r3, #4]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a68:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 8004a6a:	edc3 7a05 	vstr	s15, [r3, #20]
												  P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 8004a6e:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <Back_Up_PC_CMV_Mode_Task+0xdc8>)
 8004a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <Back_Up_PC_CMV_Mode_Task+0xd9c>)
 8004a7c:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8004a80:	e005      	b.n	8004a8e <Back_Up_PC_CMV_Mode_Task+0xd26>
											if(P1._TRIG_TYPE==1)
 8004a82:	bf00      	nop
				break;
 8004a84:	e003      	b.n	8004a8e <Back_Up_PC_CMV_Mode_Task+0xd26>
				break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <Back_Up_PC_CMV_Mode_Task+0xd28>
				break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <Back_Up_PC_CMV_Mode_Task+0xd28>
				break;
 8004a8e:	bf00      	nop


		}

		vTaskDelay(2);
 8004a90:	2002      	movs	r0, #2
 8004a92:	f01a feeb 	bl	801f86c <vTaskDelay>
		switch (_CurrentComputationState)
 8004a96:	f7ff b96b 	b.w	8003d70 <Back_Up_PC_CMV_Mode_Task+0x8>
 8004a9a:	bf00      	nop
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	00000000 	.word	0x00000000
 8004aa4:	4072c000 	.word	0x4072c000
 8004aa8:	20000138 	.word	0x20000138
 8004aac:	20016e80 	.word	0x20016e80
 8004ab0:	20016a18 	.word	0x20016a18
 8004ab4:	20016a98 	.word	0x20016a98
 8004ab8:	200169a0 	.word	0x200169a0
 8004abc:	20000140 	.word	0x20000140
 8004ac0:	2000012e 	.word	0x2000012e
 8004ac4:	20000130 	.word	0x20000130
 8004ac8:	20016d3c 	.word	0x20016d3c
 8004acc:	20016bb8 	.word	0x20016bb8
 8004ad0:	20016d40 	.word	0x20016d40
 8004ad4:	20016bcc 	.word	0x20016bcc
 8004ad8:	20016c04 	.word	0x20016c04
 8004adc:	20016e59 	.word	0x20016e59
 8004ae0:	20016a2c 	.word	0x20016a2c
 8004ae4:	20017094 	.word	0x20017094
 8004ae8:	20000144 	.word	0x20000144
 8004aec:	20000136 	.word	0x20000136
 8004af0:	20000137 	.word	0x20000137
 8004af4:	2000031c 	.word	0x2000031c
 8004af8:	2000011c 	.word	0x2000011c
 8004afc:	20000308 	.word	0x20000308
 8004b00:	20000320 	.word	0x20000320
 8004b04:	20016960 	.word	0x20016960
 8004b08:	20000114 	.word	0x20000114
 8004b0c:	20000318 	.word	0x20000318
 8004b10:	20000118 	.word	0x20000118
 8004b14:	40007400 	.word	0x40007400
 8004b18:	20000048 	.word	0x20000048
 8004b1c:	40001800 	.word	0x40001800
 8004b20:	20016e50 	.word	0x20016e50
 8004b24:	20016b28 	.word	0x20016b28
 8004b28:	20000004 	.word	0x20000004
 8004b2c:	20016a24 	.word	0x20016a24
 8004b30:	20016c48 	.word	0x20016c48
 8004b34:	20016cfc 	.word	0x20016cfc

08004b38 <BACKUP_PC_SIMV_Pulse_I_Parameter>:
	 xTaskCreate(One_Time_Task, "one-time-task", 256, NULL, 2, &One_Time_Handler);

}

void BACKUP_PC_SIMV_Pulse_I_Parameter()
{
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
	 P1._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - S5.Lock_delay ;
 8004b3c:	4b4e      	ldr	r3, [pc, #312]	; (8004c78 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x140>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x144>)
 8004b44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	4b4d      	ldr	r3, [pc, #308]	; (8004c80 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x148>)
 8004b4c:	81da      	strh	r2, [r3, #14]
	 P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 8004b4e:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x148>)
 8004b50:	89db      	ldrh	r3, [r3, #14]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fc8e 	bl	8000474 <__aeabi_i2d>
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	4b48      	ldr	r3, [pc, #288]	; (8004c80 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x148>)
 8004b5e:	895b      	ldrh	r3, [r3, #10]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b68:	ee17 0a90 	vmov	r0, s15
 8004b6c:	f7fb fc94 	bl	8000498 <__aeabi_f2d>
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x14c>)
 8004b76:	f7fb fce7 	bl	8000548 <__aeabi_dmul>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x150>)
 8004b88:	f7fb fe08 	bl	800079c <__aeabi_ddiv>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fcd8 	bl	8000548 <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fb ff94 	bl	8000acc <__aeabi_d2uiz>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x148>)
 8004baa:	821a      	strh	r2, [r3, #16]

	   now_check_breath=1;
 8004bac:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x154>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
	   _Control_Byte &= (uint8_t) (~(0x80));
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x158>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	4b34      	ldr	r3, [pc, #208]	; (8004c90 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x158>)
 8004bbe:	701a      	strb	r2, [r3, #0]
	    vol.Volume = 0;
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x15c>)
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]
	    V_max=0;
 8004bc8:	4b33      	ldr	r3, [pc, #204]	; (8004c98 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x160>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd4:	4831      	ldr	r0, [pc, #196]	; (8004c9c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x164>)
 8004bd6:	f012 f865 	bl	8016ca4 <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x168>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x144>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	64da      	str	r2, [r3, #76]	; 0x4c

			B4._DAC_VAL0 = B4.starting_DAC;
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf0:	ee17 3a90 	vmov	r3, s15
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004bf8:	809a      	strh	r2, [r3, #4]
			B4.Last_DAC = B4._DAC_VAL0;
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004bfc:	889a      	ldrh	r2, [r3, #4]
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004c00:	80da      	strh	r2, [r3, #6]
			B3.ok = 1;
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x170>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
			B3.cycle_done = 1;
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x170>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	605a      	str	r2, [r3, #4]
			B4.last_result1 = B4.result1;
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004c14:	60d3      	str	r3, [r2, #12]
			Led_Alert();
 8004c16:	f7fd fe65 	bl	80028e4 <Led_Alert>
			DAC_Value_Correction_BACKUP_PC();
 8004c1a:	f000 f8ab 	bl	8004d74 <DAC_Value_Correction_BACKUP_PC>
			Ending_Dac_value_correction_BACKUP_PC();
 8004c1e:	f000 fb13 	bl	8005248 <Ending_Dac_value_correction_BACKUP_PC>
			S5.P_Max = 0;
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x144>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
			B3.Pip_Acheived_Flag = 0;
 8004c28:	4b1f      	ldr	r3, [pc, #124]	; (8004ca8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x170>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
			S5.now_check = 0;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x144>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	649a      	str	r2, [r3, #72]	; 0x48
			S5.P_Min = 60;
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <BACKUP_PC_SIMV_Pulse_I_Parameter+0x144>)
 8004c36:	223c      	movs	r2, #60	; 0x3c
 8004c38:	605a      	str	r2, [r3, #4]

		B3.cycle_done = 1;
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x170>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	605a      	str	r2, [r3, #4]
		Peep_E_Valve_Lock_delay_BACKUP_PC();
 8004c40:	f000 fe0e 	bl	8005860 <Peep_E_Valve_Lock_delay_BACKUP_PC>
		B4.ten_ms = 0;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	831a      	strh	r2, [r3, #24]
		B4.Acheived_ten_ms = 0;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x16c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	839a      	strh	r2, [r3, #28]
		Alert_I_Time_Parameter();
 8004c50:	f7fd fc96 	bl	8002580 <Alert_I_Time_Parameter>
		_I_TIMER = B2._I_TIMER_HOLD;
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x140>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <BACKUP_PC_SIMV_Pulse_I_Parameter+0x174>)
 8004c5a:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x178>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x17c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
		vTaskDelay(B2._I_TIMER_HOLD);
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <BACKUP_PC_SIMV_Pulse_I_Parameter+0x140>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f01a fdfd 	bl	801f86c <vTaskDelay>
}
 8004c72:	bf00      	nop
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20016cd4 	.word	0x20016cd4
 8004c7c:	20016df4 	.word	0x20016df4
 8004c80:	20016960 	.word	0x20016960
 8004c84:	40240000 	.word	0x40240000
 8004c88:	40590000 	.word	0x40590000
 8004c8c:	20000feb 	.word	0x20000feb
 8004c90:	20016e59 	.word	0x20016e59
 8004c94:	20016d44 	.word	0x20016d44
 8004c98:	20016d60 	.word	0x20016d60
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	20016af4 	.word	0x20016af4
 8004ca4:	20000004 	.word	0x20000004
 8004ca8:	20016ecc 	.word	0x20016ecc
 8004cac:	20016df0 	.word	0x20016df0
 8004cb0:	20016adc 	.word	0x20016adc
 8004cb4:	20016cc8 	.word	0x20016cc8

08004cb8 <BACKUP_PC_SIMV_Pulse_E_Parameter>:



void BACKUP_PC_SIMV_Pulse_E_Parameter()
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	_Control_Byte |= (uint8_t) 0x80;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x48>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x48>)
 8004cc8:	701a      	strb	r2, [r3, #0]
	_E_TIMER = B2._E_TIMER_HOLD;
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x4c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]
	_E_TIMER_ACHEIVED = 0;
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <BACKUP_PC_SIMV_Pulse_E_Parameter+0x54>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	801a      	strh	r2, [r3, #0]
	S5.lock = 1;
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x58>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
	Alert_E_Time_Parameter();
 8004cde:	f7fd fc9b 	bl	8002618 <Alert_E_Time_Parameter>
	 adjust_servo();								//for O2
 8004ce2:	f005 fe01 	bl	800a8e8 <adjust_servo>
	_CurrentWaveFormState = Generate_I_Wave;
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x5c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x60>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
	vTaskDelay(B2._E_TIMER_HOLD);
 8004cf2:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x4c>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f01a fdb8 	bl	801f86c <vTaskDelay>

}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20016e59 	.word	0x20016e59
 8004d04:	20016cd4 	.word	0x20016cd4
 8004d08:	20016d74 	.word	0x20016d74
 8004d0c:	20016eb4 	.word	0x20016eb4
 8004d10:	20016df4 	.word	0x20016df4
 8004d14:	20016adc 	.word	0x20016adc
 8004d18:	20016cc8 	.word	0x20016cc8

08004d1c <PID_Back_Up_PC_CMV_Mode_Task>:


void PID_Back_Up_PC_CMV_Mode_Task(void *argument)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

	while(1)
	{
		B4.ten_ms++;
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <PID_Back_Up_PC_CMV_Mode_Task+0x48>)
 8004d26:	8b1b      	ldrh	r3, [r3, #24]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <PID_Back_Up_PC_CMV_Mode_Task+0x48>)
 8004d2e:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 10)
 8004d30:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <PID_Back_Up_PC_CMV_Mode_Task+0x4c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b0a      	cmp	r3, #10
 8004d36:	d10f      	bne.n	8004d58 <PID_Back_Up_PC_CMV_Mode_Task+0x3c>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <PID_Back_Up_PC_CMV_Mode_Task+0x50>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <PID_Back_Up_PC_CMV_Mode_Task+0x3c>
				{
					if(O2._FIO2_Val==100)
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <PID_Back_Up_PC_CMV_Mode_Task+0x54>)
 8004d42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d104      	bne.n	8004d54 <PID_Back_Up_PC_CMV_Mode_Task+0x38>
					{
						B4._DAC_VAL0=400;
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <PID_Back_Up_PC_CMV_Mode_Task+0x48>)
 8004d4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004d50:	809a      	strh	r2, [r3, #4]
 8004d52:	e001      	b.n	8004d58 <PID_Back_Up_PC_CMV_Mode_Task+0x3c>
					}
					else
					{
						pip_value_correction_BACKUP_PC();
 8004d54:	f000 f846 	bl	8004de4 <pip_value_correction_BACKUP_PC>
					}
				}
			 }
		vTaskDelay(B4.PID_task_delay);
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <PID_Back_Up_PC_CMV_Mode_Task+0x48>)
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f01a fd85 	bl	801f86c <vTaskDelay>
		B4.ten_ms++;
 8004d62:	e7df      	b.n	8004d24 <PID_Back_Up_PC_CMV_Mode_Task+0x8>
 8004d64:	20000004 	.word	0x20000004
 8004d68:	20016ae0 	.word	0x20016ae0
 8004d6c:	20016cc8 	.word	0x20016cc8
 8004d70:	20000048 	.word	0x20000048

08004d74 <DAC_Value_Correction_BACKUP_PC>:

}


void DAC_Value_Correction_BACKUP_PC()
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0



		 if(B4.Acheived_ms < (B2.ramp_time_percentage -40))
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <DAC_Value_Correction_BACKUP_PC+0x64>)
 8004d7a:	8b5b      	ldrh	r3, [r3, #26]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <DAC_Value_Correction_BACKUP_PC+0x68>)
 8004d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d8a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8004de0 <DAC_Value_Correction_BACKUP_PC+0x6c>
 8004d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d502      	bpl.n	8004da2 <DAC_Value_Correction_BACKUP_PC+0x2e>
	     {
			 Pip_Acheived_Early_BACKUP_PC();
 8004d9c:	f000 fb28 	bl	80053f0 <Pip_Acheived_Early_BACKUP_PC>
 8004da0:	e016      	b.n	8004dd0 <DAC_Value_Correction_BACKUP_PC+0x5c>

	     }


	       else if(B4.Acheived_ms > (B2.ramp_time_percentage +40))
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <DAC_Value_Correction_BACKUP_PC+0x64>)
 8004da4:	8b5b      	ldrh	r3, [r3, #26]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <DAC_Value_Correction_BACKUP_PC+0x68>)
 8004db0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004db4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004de0 <DAC_Value_Correction_BACKUP_PC+0x6c>
 8004db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	dd02      	ble.n	8004dcc <DAC_Value_Correction_BACKUP_PC+0x58>
	       {
	    	   Pip_Acheived_Slowly_BACKUP_PC();
 8004dc6:	f000 fc4f 	bl	8005668 <Pip_Acheived_Slowly_BACKUP_PC>
 8004dca:	e001      	b.n	8004dd0 <DAC_Value_Correction_BACKUP_PC+0x5c>
	       }

	       else
	       {
	    	   Pip_Acheived_Normally_BACKUP_PC();
 8004dcc:	f000 fd0c 	bl	80057e8 <Pip_Acheived_Normally_BACKUP_PC>

	       }

		     Pip_Not_Acheived_BACKUP_PC();
 8004dd0:	f000 fd18 	bl	8005804 <Pip_Not_Acheived_BACKUP_PC>

}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000004 	.word	0x20000004
 8004ddc:	20016cd4 	.word	0x20016cd4
 8004de0:	42200000 	.word	0x42200000

08004de4 <pip_value_correction_BACKUP_PC>:

void pip_value_correction_BACKUP_PC()
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (B1._PIP_Val ))
 8004de8:	4b38      	ldr	r3, [pc, #224]	; (8004ecc <pip_value_correction_BACKUP_PC+0xe8>)
 8004dea:	791a      	ldrb	r2, [r3, #4]
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <pip_value_correction_BACKUP_PC+0xec>)
 8004dee:	789b      	ldrb	r3, [r3, #2]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d324      	bcc.n	8004e3e <pip_value_correction_BACKUP_PC+0x5a>
	{
		B3.cycle_done = 0;
 8004df4:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e00:	4835      	ldr	r0, [pc, #212]	; (8004ed8 <pip_value_correction_BACKUP_PC+0xf4>)
 8004e02:	f011 ff4f 	bl	8016ca4 <HAL_GPIO_WritePin>
		if(B3.ok==1)
 8004e06:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d117      	bne.n	8004e3e <pip_value_correction_BACKUP_PC+0x5a>
		{
			B4.Acheived_ten_ms = B4.ten_ms;
 8004e0e:	4b33      	ldr	r3, [pc, #204]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e10:	8b1a      	ldrh	r2, [r3, #24]
 8004e12:	4b32      	ldr	r3, [pc, #200]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e14:	839a      	strh	r2, [r3, #28]
			B4.Acheived_ms=(B4.Acheived_ten_ms*B4.PID_task_delay);
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e18:	8b9a      	ldrh	r2, [r3, #28]
 8004e1a:	4b30      	ldr	r3, [pc, #192]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	fb12 f303 	smulbb	r3, r2, r3
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e28:	835a      	strh	r2, [r3, #26]
			B3.ok=0;
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
			B3.Pip_Acheived_Flag=1;
 8004e30:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	609a      	str	r2, [r3, #8]
			B4._DAC_VAL0 = B4.Last_DAC;
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e38:	88da      	ldrh	r2, [r3, #6]
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e3c:	809a      	strh	r2, [r3, #4]
		}
	}
	if (B3.cycle_done == 1)
 8004e3e:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d140      	bne.n	8004ec8 <pip_value_correction_BACKUP_PC+0xe4>
	{
		if (B4.Last_DAC >= B4.Ending_Dac)
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e48:	88db      	ldrh	r3, [r3, #6]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e60:	db0d      	blt.n	8004e7e <pip_value_correction_BACKUP_PC+0x9a>
		{
			B4.Last_DAC = B4.Ending_Dac;
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6c:	ee17 3a90 	vmov	r3, s15
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e74:	80da      	strh	r2, [r3, #6]
			B3.cycle_done = 0;
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <pip_value_correction_BACKUP_PC+0xf0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
			B4.Last_DAC = B4._DAC_VAL0;
			B4._DAC_VAL0=B4.Last_DAC + (B4.incrementing_Dac_value_10ms );
		}
	}

}
 8004e7c:	e024      	b.n	8004ec8 <pip_value_correction_BACKUP_PC+0xe4>
		else if (B4.Last_DAC < B4.Ending_Dac)
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e80:	88db      	ldrh	r3, [r3, #6]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e8c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e98:	d400      	bmi.n	8004e9c <pip_value_correction_BACKUP_PC+0xb8>
}
 8004e9a:	e015      	b.n	8004ec8 <pip_value_correction_BACKUP_PC+0xe4>
			B4.Last_DAC = B4._DAC_VAL0;
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004e9e:	889a      	ldrh	r2, [r3, #4]
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004ea2:	80da      	strh	r2, [r3, #6]
			B4._DAC_VAL0=B4.Last_DAC + (B4.incrementing_Dac_value_10ms );
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004ea6:	88db      	ldrh	r3, [r3, #6]
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004eb2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebe:	ee17 3a90 	vmov	r3, s15
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <pip_value_correction_BACKUP_PC+0xf8>)
 8004ec6:	809a      	strh	r2, [r3, #4]
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20016cfc 	.word	0x20016cfc
 8004ed0:	20016e68 	.word	0x20016e68
 8004ed4:	20016ecc 	.word	0x20016ecc
 8004ed8:	40020400 	.word	0x40020400
 8004edc:	20000004 	.word	0x20000004

08004ee0 <BACKUP_PC_CMV_PARAMETERS>:




void BACKUP_PC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	//xSemaphoreTake(binarysem,portMAX_DELAY);
			B1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	791a      	ldrb	r2, [r3, #4]
 8004eec:	4baa      	ldr	r3, [pc, #680]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004eee:	709a      	strb	r2, [r3, #2]
			B1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	795a      	ldrb	r2, [r3, #5]
 8004ef4:	4ba8      	ldr	r3, [pc, #672]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004ef6:	70da      	strb	r2, [r3, #3]
			B1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7a5b      	ldrb	r3, [r3, #9]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f06:	461a      	mov	r2, r3
 8004f08:	4ba3      	ldr	r3, [pc, #652]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f0a:	605a      	str	r2, [r3, #4]
			B1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7a1b      	ldrb	r3, [r3, #8]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	4ba0      	ldr	r3, [pc, #640]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f18:	609a      	str	r2, [r3, #8]
			B1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7a1b      	ldrb	r3, [r3, #8]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4a9d      	ldr	r2, [pc, #628]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f24:	60d3      	str	r3, [r2, #12]
			B1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7adb      	ldrb	r3, [r3, #11]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	4b99      	ldr	r3, [pc, #612]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f32:	821a      	strh	r2, [r3, #16]
			B1.RR=RX_PARAM_CMD_PACKET->_RR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7a5a      	ldrb	r2, [r3, #9]
 8004f38:	4b97      	ldr	r3, [pc, #604]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f3a:	749a      	strb	r2, [r3, #18]
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7a9a      	ldrb	r2, [r3, #10]
 8004f40:	4b96      	ldr	r3, [pc, #600]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 8004f42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


			B2._I_TIMER_HOLD = (B1.I_Time * (B1.CycleTime / (B1.I_Time +B1.E_Time)));
 8004f46:	4b94      	ldr	r3, [pc, #592]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4a93      	ldr	r2, [pc, #588]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f4c:	6851      	ldr	r1, [r2, #4]
 8004f4e:	4a92      	ldr	r2, [pc, #584]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f50:	6890      	ldr	r0, [r2, #8]
 8004f52:	4a91      	ldr	r2, [pc, #580]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f54:	68d2      	ldr	r2, [r2, #12]
 8004f56:	4402      	add	r2, r0
 8004f58:	fbb1 f2f2 	udiv	r2, r1, r2
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
 8004f60:	4a8f      	ldr	r2, [pc, #572]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004f62:	6013      	str	r3, [r2, #0]
			B2._E_TIMER_HOLD = (B1.E_Time * (B1.CycleTime / (B1.I_Time + B1.E_Time)));
 8004f64:	4b8c      	ldr	r3, [pc, #560]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a8b      	ldr	r2, [pc, #556]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f6a:	6851      	ldr	r1, [r2, #4]
 8004f6c:	4a8a      	ldr	r2, [pc, #552]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f6e:	6890      	ldr	r0, [r2, #8]
 8004f70:	4a89      	ldr	r2, [pc, #548]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f72:	68d2      	ldr	r2, [r2, #12]
 8004f74:	4402      	add	r2, r0
 8004f76:	fbb1 f2f2 	udiv	r2, r1, r2
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	4a88      	ldr	r2, [pc, #544]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004f80:	6053      	str	r3, [r2, #4]
			B2.ramp_time=(B1.RT_Value*10);
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004f84:	8a1b      	ldrh	r3, [r3, #16]
 8004f86:	461a      	mov	r2, r3
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b83      	ldr	r3, [pc, #524]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004f92:	811a      	strh	r2, [r3, #8]
			B2.ramp_time_percentage = ((float)B2.ramp_time/100.00)*(B2._I_TIMER_HOLD) ;
 8004f94:	4b82      	ldr	r3, [pc, #520]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004f96:	891b      	ldrh	r3, [r3, #8]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	ee17 0a90 	vmov	r0, s15
 8004fa4:	f7fb fa78 	bl	8000498 <__aeabi_f2d>
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	4b7d      	ldr	r3, [pc, #500]	; (80051a4 <BACKUP_PC_CMV_PARAMETERS+0x2c4>)
 8004fae:	f7fb fbf5 	bl	800079c <__aeabi_ddiv>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	461d      	mov	r5, r3
 8004fba:	4b79      	ldr	r3, [pc, #484]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fa48 	bl	8000454 <__aeabi_ui2d>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	f7fb fabc 	bl	8000548 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fd98 	bl	8000b0c <__aeabi_d2f>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4a70      	ldr	r2, [pc, #448]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8004fe0:	60d3      	str	r3, [r2, #12]
			B4.Ending_Dac=17.1129 * (B1._PIP_Val) + 587.7390+((1/70)*200);
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 8004fe4:	789b      	ldrb	r3, [r3, #2]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fa44 	bl	8000474 <__aeabi_i2d>
 8004fec:	a364      	add	r3, pc, #400	; (adr r3, 8005180 <BACKUP_PC_CMV_PARAMETERS+0x2a0>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f7fb faa9 	bl	8000548 <__aeabi_dmul>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	a362      	add	r3, pc, #392	; (adr r3, 8005188 <BACKUP_PC_CMV_PARAMETERS+0x2a8>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb f8ea 	bl	80001dc <__adddf3>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f7fb f8e0 	bl	80001dc <__adddf3>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f7fb fd72 	bl	8000b0c <__aeabi_d2f>
 8005028:	4603      	mov	r3, r0
 800502a:	4a5f      	ldr	r2, [pc, #380]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 800502c:	6293      	str	r3, [r2, #40]	; 0x28
			B4.incrementing_Dac_value_10ms=70;
 800502e:	4b5e      	ldr	r3, [pc, #376]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 8005030:	4a5e      	ldr	r2, [pc, #376]	; (80051ac <BACKUP_PC_CMV_PARAMETERS+0x2cc>)
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
			B4.Acheived_ms=(B2.ramp_time_percentage*2);
 8005034:	4b5a      	ldr	r3, [pc, #360]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 8005036:	edd3 7a03 	vldr	s15, [r3, #12]
 800503a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800503e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005042:	ee17 3a90 	vmov	r3, s15
 8005046:	b29a      	uxth	r2, r3
 8005048:	4b57      	ldr	r3, [pc, #348]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 800504a:	835a      	strh	r2, [r3, #26]

			P1._CALC_TRIG_VAL = ((float)E_TIME_TOLERANCE/100.00)*(B2._E_TIMER_HOLD) ;
 800504c:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <BACKUP_PC_CMV_PARAMETERS+0x2c0>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb f9ff 	bl	8000454 <__aeabi_ui2d>
 8005056:	a34e      	add	r3, pc, #312	; (adr r3, 8005190 <BACKUP_PC_CMV_PARAMETERS+0x2b0>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb fa74 	bl	8000548 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	f7fb fd30 	bl	8000acc <__aeabi_d2uiz>
 800506c:	4603      	mov	r3, r0
 800506e:	b29a      	uxth	r2, r3
 8005070:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <BACKUP_PC_CMV_PARAMETERS+0x2d0>)
 8005072:	819a      	strh	r2, [r3, #12]

			B3.Pip_Acheived_Flag=0;
 8005074:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <BACKUP_PC_CMV_PARAMETERS+0x2d4>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
			B4.nack=1;
 800507a:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 800507c:	2201      	movs	r2, #1
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
			B4.PID_task_delay=10;
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 8005082:	220a      	movs	r2, #10
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
			B4.result1_error=0;
 8005086:	4b48      	ldr	r3, [pc, #288]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 8005088:	2200      	movs	r2, #0
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
			B4.last_result1=0;
 800508c:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	60da      	str	r2, [r3, #12]
			B4.PID_task_delay_lock=0;
 8005094:	4b44      	ldr	r3, [pc, #272]	; (80051a8 <BACKUP_PC_CMV_PARAMETERS+0x2c8>)
 8005096:	2200      	movs	r2, #0
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=B1._PEEP_Val/2;
 800509a:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050aa:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <BACKUP_PC_CMV_PARAMETERS+0x2d8>)
 80050ac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			A.PEEP_VAL=B1._PEEP_Val;
 80050b0:	4b39      	ldr	r3, [pc, #228]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 80050b2:	78da      	ldrb	r2, [r3, #3]
 80050b4:	4b41      	ldr	r3, [pc, #260]	; (80051bc <BACKUP_PC_CMV_PARAMETERS+0x2dc>)
 80050b6:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 80050b8:	f7fd fb12 	bl	80026e0 <Alert_Receiving_Parameter>
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7a9a      	ldrb	r2, [r3, #10]
 80050c0:	4b36      	ldr	r3, [pc, #216]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 80050c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._PIP_Val=B1._PIP_Val;
 80050c6:	4b34      	ldr	r3, [pc, #208]	; (8005198 <BACKUP_PC_CMV_PARAMETERS+0x2b8>)
 80050c8:	789a      	ldrb	r2, [r3, #2]
 80050ca:	4b34      	ldr	r3, [pc, #208]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			O2._Pressure_Base=1;
 80050d0:	4b32      	ldr	r3, [pc, #200]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=0;
 80050d6:	4b31      	ldr	r3, [pc, #196]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 80050dc:	f005 fce0 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=1;
 80050e0:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <BACKUP_PC_CMV_PARAMETERS+0x2d0>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			S5.Lock_delay=300;
 80050e8:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <BACKUP_PC_CMV_PARAMETERS+0x2d8>)
 80050ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ee:	879a      	strh	r2, [r3, #60]	; 0x3c
			Trigger_Count=0;
 80050f0:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <BACKUP_PC_CMV_PARAMETERS+0x2e0>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]




			vTaskSuspend(Vc_mode_Handler);
 80050f6:	4b33      	ldr	r3, [pc, #204]	; (80051c4 <BACKUP_PC_CMV_PARAMETERS+0x2e4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f01a fbea 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <BACKUP_PC_CMV_PARAMETERS+0x2e8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f01a fbe5 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(pc_mode_Handler);
 800510a:	4b30      	ldr	r3, [pc, #192]	; (80051cc <BACKUP_PC_CMV_PARAMETERS+0x2ec>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f01a fbe0 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8005114:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <BACKUP_PC_CMV_PARAMETERS+0x2f0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f01a fbdb 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_simv_mode_Handler);
 800511e:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <BACKUP_PC_CMV_PARAMETERS+0x2f4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f01a fbd6 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(Vc_simv_Pid_Handler);
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <BACKUP_PC_CMV_PARAMETERS+0x2f8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f01a fbd1 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Pc_simv_Mode_Handler);
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <BACKUP_PC_CMV_PARAMETERS+0x2fc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f01a fbcc 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 800513c:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <BACKUP_PC_CMV_PARAMETERS+0x300>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f01a fbc7 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <BACKUP_PC_CMV_PARAMETERS+0x304>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f01a fbc2 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <BACKUP_PC_CMV_PARAMETERS+0x308>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f01a fbbd 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Suction_Handler);
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <BACKUP_PC_CMV_PARAMETERS+0x30c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f01a fbb8 	bl	801f8d4 <vTaskSuspend>

		                if(O2._FIO2_Val>21)
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <BACKUP_PC_CMV_PARAMETERS+0x2bc>)
 8005166:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800516a:	2b15      	cmp	r3, #21
 800516c:	d942      	bls.n	80051f4 <BACKUP_PC_CMV_PARAMETERS+0x314>
		    			{
		    				vTaskResume(Oxygen_Handler);
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <BACKUP_PC_CMV_PARAMETERS+0x310>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f01a fc72 	bl	801fa5c <vTaskResume>
 8005178:	e04c      	b.n	8005214 <BACKUP_PC_CMV_PARAMETERS+0x334>
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w
 8005180:	03afb7e9 	.word	0x03afb7e9
 8005184:	40311ce7 	.word	0x40311ce7
 8005188:	78d4fdf4 	.word	0x78d4fdf4
 800518c:	40825de9 	.word	0x40825de9
 8005190:	33333333 	.word	0x33333333
 8005194:	3fd33333 	.word	0x3fd33333
 8005198:	20016e68 	.word	0x20016e68
 800519c:	20000048 	.word	0x20000048
 80051a0:	20016cd4 	.word	0x20016cd4
 80051a4:	40590000 	.word	0x40590000
 80051a8:	20000004 	.word	0x20000004
 80051ac:	428c0000 	.word	0x428c0000
 80051b0:	20016960 	.word	0x20016960
 80051b4:	20016ecc 	.word	0x20016ecc
 80051b8:	20016df4 	.word	0x20016df4
 80051bc:	20016a2c 	.word	0x20016a2c
 80051c0:	200168b4 	.word	0x200168b4
 80051c4:	20016d78 	.word	0x20016d78
 80051c8:	2001695c 	.word	0x2001695c
 80051cc:	20016a84 	.word	0x20016a84
 80051d0:	20016a28 	.word	0x20016a28
 80051d4:	20016c44 	.word	0x20016c44
 80051d8:	20016ad0 	.word	0x20016ad0
 80051dc:	20016e60 	.word	0x20016e60
 80051e0:	20016e8c 	.word	0x20016e8c
 80051e4:	20016d7c 	.word	0x20016d7c
 80051e8:	20016a7c 	.word	0x20016a7c
 80051ec:	20016e5c 	.word	0x20016e5c
 80051f0:	20016958 	.word	0x20016958
		    			}
		    			else if(O2._FIO2_Val<=21)
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <BACKUP_PC_CMV_PARAMETERS+0x354>)
 80051f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80051fa:	2b15      	cmp	r3, #21
 80051fc:	d80a      	bhi.n	8005214 <BACKUP_PC_CMV_PARAMETERS+0x334>
		    			{
		    				O2.O2_DAC=0;
 80051fe:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <BACKUP_PC_CMV_PARAMETERS+0x354>)
 8005200:	2200      	movs	r2, #0
 8005202:	811a      	strh	r2, [r3, #8]
		    				Parkar_valve_Signal(0);
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <BACKUP_PC_CMV_PARAMETERS+0x358>)
 8005206:	2200      	movs	r2, #0
 8005208:	615a      	str	r2, [r3, #20]
		    				vTaskSuspend(Oxygen_Handler);
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <BACKUP_PC_CMV_PARAMETERS+0x35c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f01a fb60 	bl	801f8d4 <vTaskSuspend>
		    			}


		    Blower_Signal(0);
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <BACKUP_PC_CMV_PARAMETERS+0x358>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
		    ExpValve_OPEN();
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <BACKUP_PC_CMV_PARAMETERS+0x360>)
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	4a08      	ldr	r2, [pc, #32]	; (8005240 <BACKUP_PC_CMV_PARAMETERS+0x360>)
 8005220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005224:	6153      	str	r3, [r2, #20]
			_CurrentBackupMode=PCCMV_BACKUP;
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <BACKUP_PC_CMV_PARAMETERS+0x364>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
			//xSemaphoreGive(binarysem);

}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bdb0      	pop	{r4, r5, r7, pc}
 8005234:	20000048 	.word	0x20000048
 8005238:	40007400 	.word	0x40007400
 800523c:	20016958 	.word	0x20016958
 8005240:	40020400 	.word	0x40020400
 8005244:	2000012c 	.word	0x2000012c

08005248 <Ending_Dac_value_correction_BACKUP_PC>:



void Ending_Dac_value_correction_BACKUP_PC()
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0

	if(B1.RR>=30 || B2.ramp_time>80 || (B1.E_Time>4))
 800524c:	4b5f      	ldr	r3, [pc, #380]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800524e:	7c9b      	ldrb	r3, [r3, #18]
 8005250:	2b1d      	cmp	r3, #29
 8005252:	d807      	bhi.n	8005264 <Ending_Dac_value_correction_BACKUP_PC+0x1c>
 8005254:	4b5e      	ldr	r3, [pc, #376]	; (80053d0 <Ending_Dac_value_correction_BACKUP_PC+0x188>)
 8005256:	891b      	ldrh	r3, [r3, #8]
 8005258:	2b50      	cmp	r3, #80	; 0x50
 800525a:	d803      	bhi.n	8005264 <Ending_Dac_value_correction_BACKUP_PC+0x1c>
 800525c:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b04      	cmp	r3, #4
 8005262:	d961      	bls.n	8005328 <Ending_Dac_value_correction_BACKUP_PC+0xe0>
    {
		    if(S5.P_Max>(B1._PIP_Val))
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800526a:	7892      	ldrb	r2, [r2, #2]
 800526c:	4293      	cmp	r3, r2
 800526e:	dd28      	ble.n	80052c2 <Ending_Dac_value_correction_BACKUP_PC+0x7a>
			{
		    	B4.pmax_error1++;
 8005270:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	3301      	adds	r3, #1
 8005276:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005278:	6253      	str	r3, [r2, #36]	; 0x24
		    	B4.pmax_error2=0;
 800527a:	4b57      	ldr	r3, [pc, #348]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
		    	if(B4.pmax_error1>2)
 8005280:	4b55      	ldr	r3, [pc, #340]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b02      	cmp	r3, #2
 8005286:	f340 809a 	ble.w	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
		    	{
		    	B4.Ending_Dac=B4.Ending_Dac-1;
 800528a:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800528c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005298:	4b4f      	ldr	r3, [pc, #316]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800529a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				B4.pmax_error1=0;
 800529e:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
					if(B4.Ending_Dac<=500)
 80052a4:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052aa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80053dc <Ending_Dac_value_correction_BACKUP_PC+0x194>
 80052ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	d900      	bls.n	80052ba <Ending_Dac_value_correction_BACKUP_PC+0x72>
		    if(S5.P_Max>(B1._PIP_Val))
 80052b8:	e081      	b.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
						B4.Ending_Dac=500;
 80052ba:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052bc:	4a48      	ldr	r2, [pc, #288]	; (80053e0 <Ending_Dac_value_correction_BACKUP_PC+0x198>)
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 80052c0:	e07d      	b.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
		    	}
			}
			else if(S5.P_Max<(B1._PIP_Val))
 80052c2:	4b44      	ldr	r3, [pc, #272]	; (80053d4 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a41      	ldr	r2, [pc, #260]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 80052c8:	7892      	ldrb	r2, [r2, #2]
 80052ca:	4293      	cmp	r3, r2
 80052cc:	da27      	bge.n	800531e <Ending_Dac_value_correction_BACKUP_PC+0xd6>
			{
				B4.pmax_error2++;
 80052ce:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a40      	ldr	r2, [pc, #256]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052d6:	6213      	str	r3, [r2, #32]
				B4.pmax_error1=0;
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052da:	2200      	movs	r2, #0
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24
				if(B4.pmax_error2>2)
 80052de:	4b3e      	ldr	r3, [pc, #248]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	dd6b      	ble.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
				{
				B4.Ending_Dac=B4.Ending_Dac+1;
 80052e6:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				B4.pmax_error2=0;
 80052fa:	4b37      	ldr	r3, [pc, #220]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	621a      	str	r2, [r3, #32]
				if(B4.Ending_Dac>=4095)
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005302:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005306:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80053e4 <Ending_Dac_value_correction_BACKUP_PC+0x19c>
 800530a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005312:	da00      	bge.n	8005316 <Ending_Dac_value_correction_BACKUP_PC+0xce>
		    if(S5.P_Max>(B1._PIP_Val))
 8005314:	e053      	b.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
					 B4.Ending_Dac=4095;
 8005316:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005318:	4a33      	ldr	r2, [pc, #204]	; (80053e8 <Ending_Dac_value_correction_BACKUP_PC+0x1a0>)
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 800531c:	e04f      	b.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
				}
			}
			else
			{
				B4.Ending_Dac=B4.Ending_Dac;
 800531e:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	4a2d      	ldr	r2, [pc, #180]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005324:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 8005326:	e04a      	b.n	80053be <Ending_Dac_value_correction_BACKUP_PC+0x176>
			}
    }

 else if(B1.RR<30 || B2.ramp_time<=80)
 8005328:	4b28      	ldr	r3, [pc, #160]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800532a:	7c9b      	ldrb	r3, [r3, #18]
 800532c:	2b1d      	cmp	r3, #29
 800532e:	d903      	bls.n	8005338 <Ending_Dac_value_correction_BACKUP_PC+0xf0>
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <Ending_Dac_value_correction_BACKUP_PC+0x188>)
 8005332:	891b      	ldrh	r3, [r3, #8]
 8005334:	2b50      	cmp	r3, #80	; 0x50
 8005336:	d843      	bhi.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
 {
	if(S5._Pip_Avg_val_int>B1._PIP_Val)
 8005338:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800533e:	7892      	ldrb	r2, [r2, #2]
 8005340:	4293      	cmp	r3, r2
 8005342:	dd18      	ble.n	8005376 <Ending_Dac_value_correction_BACKUP_PC+0x12e>
	{
		B4.Ending_Dac=B4.Ending_Dac-5;
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005346:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800534a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800534e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005352:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005354:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(B4.Ending_Dac<=500)
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800535a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800535e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80053dc <Ending_Dac_value_correction_BACKUP_PC+0x194>
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d900      	bls.n	800536e <Ending_Dac_value_correction_BACKUP_PC+0x126>
	{
		B4.Ending_Dac=B4.Ending_Dac;

	}
 }
}
 800536c:	e028      	b.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
			B4.Ending_Dac=500;
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <Ending_Dac_value_correction_BACKUP_PC+0x198>)
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005374:	e024      	b.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
	else if(S5._Pip_Avg_val_int<B1._PIP_Val)
 8005376:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a14      	ldr	r2, [pc, #80]	; (80053cc <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800537c:	7892      	ldrb	r2, [r2, #2]
 800537e:	4293      	cmp	r3, r2
 8005380:	da18      	bge.n	80053b4 <Ending_Dac_value_correction_BACKUP_PC+0x16c>
		B4.Ending_Dac=B4.Ending_Dac+5;
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005384:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005388:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800538c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005392:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(B4.Ending_Dac>=4095)
 8005396:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8005398:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800539c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80053e4 <Ending_Dac_value_correction_BACKUP_PC+0x19c>
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	da00      	bge.n	80053ac <Ending_Dac_value_correction_BACKUP_PC+0x164>
}
 80053aa:	e009      	b.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
			B4.Ending_Dac=4095;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <Ending_Dac_value_correction_BACKUP_PC+0x1a0>)
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053b2:	e005      	b.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
		B4.Ending_Dac=B4.Ending_Dac;
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80053ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80053bc:	e000      	b.n	80053c0 <Ending_Dac_value_correction_BACKUP_PC+0x178>
		    if(S5.P_Max>(B1._PIP_Val))
 80053be:	bf00      	nop
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20016e68 	.word	0x20016e68
 80053d0:	20016cd4 	.word	0x20016cd4
 80053d4:	20016df4 	.word	0x20016df4
 80053d8:	20000004 	.word	0x20000004
 80053dc:	43fa0000 	.word	0x43fa0000
 80053e0:	43fa0000 	.word	0x43fa0000
 80053e4:	457ff000 	.word	0x457ff000
 80053e8:	457ff000 	.word	0x457ff000
 80053ec:	00000000 	.word	0x00000000

080053f0 <Pip_Acheived_Early_BACKUP_PC>:


void Pip_Acheived_Early_BACKUP_PC()
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0

		     if(B3.Pip_Acheived_Flag==0)
 80053f4:	4b90      	ldr	r3, [pc, #576]	; (8005638 <Pip_Acheived_Early_BACKUP_PC+0x248>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8115 	beq.w	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>

			 }
			 else
			 {

			    B4.result1=(B4.Acheived_ms/B2.ramp_time_percentage)*100;
 80053fe:	4b8f      	ldr	r3, [pc, #572]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005400:	8b5b      	ldrh	r3, [r3, #26]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800540a:	4b8d      	ldr	r3, [pc, #564]	; (8005640 <Pip_Acheived_Early_BACKUP_PC+0x250>)
 800540c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005414:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005644 <Pip_Acheived_Early_BACKUP_PC+0x254>
 8005418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541c:	4b87      	ldr	r3, [pc, #540]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800541e:	edc3 7a02 	vstr	s15, [r3, #8]
			    if(B4.result1<=70)
 8005422:	4b86      	ldr	r3, [pc, #536]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005424:	edd3 7a02 	vldr	s15, [r3, #8]
 8005428:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8005648 <Pip_Acheived_Early_BACKUP_PC+0x258>
 800542c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005434:	d81a      	bhi.n	800546c <Pip_Acheived_Early_BACKUP_PC+0x7c>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-5;
 8005436:	4b81      	ldr	r3, [pc, #516]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005438:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800543c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005444:	4b7d      	ldr	r3, [pc, #500]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005446:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 800544a:	4b7c      	ldr	r3, [pc, #496]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800544c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005450:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800564c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 8005454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	d86c      	bhi.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 800545e:	4b77      	ldr	r3, [pc, #476]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005460:	4a7b      	ldr	r2, [pc, #492]	; (8005650 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 8005464:	4b75      	ldr	r3, [pc, #468]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
 800546a:	e065      	b.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	}
			    }

			    else if(B4.result1<=80 && B4.result1>70)
 800546c:	4b73      	ldr	r3, [pc, #460]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800546e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005472:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8005654 <Pip_Acheived_Early_BACKUP_PC+0x264>
 8005476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	d824      	bhi.n	80054ca <Pip_Acheived_Early_BACKUP_PC+0xda>
 8005480:	4b6e      	ldr	r3, [pc, #440]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005482:	edd3 7a02 	vldr	s15, [r3, #8]
 8005486:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8005648 <Pip_Acheived_Early_BACKUP_PC+0x258>
 800548a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	dd1a      	ble.n	80054ca <Pip_Acheived_Early_BACKUP_PC+0xda>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-(0.5);
 8005494:	4b69      	ldr	r3, [pc, #420]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005496:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800549a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800549e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054a2:	4b66      	ldr	r3, [pc, #408]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 80054a8:	4b64      	ldr	r3, [pc, #400]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800564c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 80054b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ba:	d83d      	bhi.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 80054bc:	4b5f      	ldr	r3, [pc, #380]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054be:	4a64      	ldr	r2, [pc, #400]	; (8005650 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 80054c2:	4b5e      	ldr	r3, [pc, #376]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
			    	if(B4.incrementing_Dac_value_10ms<=50)
 80054c8:	e036      	b.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	}
			    }
			    else if(B4.result1<=90 && B4.result1>80)
 80054ca:	4b5c      	ldr	r3, [pc, #368]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80054d0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8005658 <Pip_Acheived_Early_BACKUP_PC+0x268>
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d82c      	bhi.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
 80054de:	4b57      	ldr	r3, [pc, #348]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80054e4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005654 <Pip_Acheived_Early_BACKUP_PC+0x264>
 80054e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	dd22      	ble.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-(0.1);
 80054f2:	4b52      	ldr	r3, [pc, #328]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fa ffce 	bl	8000498 <__aeabi_f2d>
 80054fc:	a34c      	add	r3, pc, #304	; (adr r3, 8005630 <Pip_Acheived_Early_BACKUP_PC+0x240>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fe69 	bl	80001d8 <__aeabi_dsub>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	f7fb fafd 	bl	8000b0c <__aeabi_d2f>
 8005512:	4603      	mov	r3, r0
 8005514:	4a49      	ldr	r2, [pc, #292]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005516:	62d3      	str	r3, [r2, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 8005518:	4b48      	ldr	r3, [pc, #288]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800551a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800551e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800564c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 8005522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552a:	d805      	bhi.n	8005538 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 800552c:	4b43      	ldr	r3, [pc, #268]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800552e:	4a48      	ldr	r2, [pc, #288]	; (8005650 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 8005532:	4b42      	ldr	r3, [pc, #264]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
			    	}
			    }


			    if(B4.nack==0)
 8005538:	4b40      	ldr	r3, [pc, #256]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d173      	bne.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    {

			    	if(S5.P_Max<B1._PIP_Val)
 8005540:	4b46      	ldr	r3, [pc, #280]	; (800565c <Pip_Acheived_Early_BACKUP_PC+0x26c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a46      	ldr	r2, [pc, #280]	; (8005660 <Pip_Acheived_Early_BACKUP_PC+0x270>)
 8005546:	7892      	ldrb	r2, [r2, #2]
 8005548:	4293      	cmp	r3, r2
 800554a:	da13      	bge.n	8005574 <Pip_Acheived_Early_BACKUP_PC+0x184>
			    	{
			    		 B4.result1_error++;
 800554c:	4b3b      	ldr	r3, [pc, #236]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	3301      	adds	r3, #1
 8005552:	4a3a      	ldr	r2, [pc, #232]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005554:	63d3      	str	r3, [r2, #60]	; 0x3c
			    		 if(B4.result1_error>=5)
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2b04      	cmp	r3, #4
 800555c:	dd64      	ble.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		 {
			    			B4.PID_task_delay=B4.PID_task_delay;
 800555e:	4b37      	ldr	r3, [pc, #220]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	4a36      	ldr	r2, [pc, #216]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005564:	6353      	str	r3, [r2, #52]	; 0x34
			    			B4.result1_error=6;
 8005566:	4b35      	ldr	r3, [pc, #212]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005568:	2206      	movs	r2, #6
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c
			    		    B4.PID_task_delay_lock=1;
 800556c:	4b33      	ldr	r3, [pc, #204]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800556e:	2201      	movs	r2, #1
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
			    	}

			    }
			 }

}
 8005572:	e059      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    	else if(B4.result1>B4.last_result1)
 8005574:	4b31      	ldr	r3, [pc, #196]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005576:	ed93 7a02 	vldr	s14, [r3, #8]
 800557a:	4b30      	ldr	r3, [pc, #192]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800557c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005588:	dc00      	bgt.n	800558c <Pip_Acheived_Early_BACKUP_PC+0x19c>
}
 800558a:	e04d      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		if(B4.PID_task_delay_lock==0)
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	2b00      	cmp	r3, #0
 8005592:	d149      	bne.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  if(B4.result1<60)
 8005594:	4b29      	ldr	r3, [pc, #164]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005596:	edd3 7a02 	vldr	s15, [r3, #8]
 800559a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005664 <Pip_Acheived_Early_BACKUP_PC+0x274>
 800559e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	d505      	bpl.n	80055b4 <Pip_Acheived_Early_BACKUP_PC+0x1c4>
			    			  B4.PID_task_delay=B4.PID_task_delay+10;
 80055a8:	4b24      	ldr	r3, [pc, #144]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	330a      	adds	r3, #10
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80055b2:	e039      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  else if(B4.result1<70 && B4.result1>=60)
 80055b4:	4b21      	ldr	r3, [pc, #132]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80055ba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005648 <Pip_Acheived_Early_BACKUP_PC+0x258>
 80055be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	d50f      	bpl.n	80055e8 <Pip_Acheived_Early_BACKUP_PC+0x1f8>
 80055c8:	4b1c      	ldr	r3, [pc, #112]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80055ce:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005664 <Pip_Acheived_Early_BACKUP_PC+0x274>
 80055d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055da:	db05      	blt.n	80055e8 <Pip_Acheived_Early_BACKUP_PC+0x1f8>
			    			  B4.PID_task_delay=B4.PID_task_delay+6;
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	3306      	adds	r3, #6
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055e4:	6353      	str	r3, [r2, #52]	; 0x34
 80055e6:	e01f      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  else if(B4.result1<=80 && B4.result1>=70)
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80055ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005654 <Pip_Acheived_Early_BACKUP_PC+0x264>
 80055f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fa:	d80f      	bhi.n	800561c <Pip_Acheived_Early_BACKUP_PC+0x22c>
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80055fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005602:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005648 <Pip_Acheived_Early_BACKUP_PC+0x258>
 8005606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	db05      	blt.n	800561c <Pip_Acheived_Early_BACKUP_PC+0x22c>
			    			  B4.PID_task_delay=B4.PID_task_delay+4;
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	3304      	adds	r3, #4
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005618:	6353      	str	r3, [r2, #52]	; 0x34
 800561a:	e005      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    			  B4.PID_task_delay=B4.PID_task_delay+1;
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	3301      	adds	r3, #1
 8005622:	4a06      	ldr	r2, [pc, #24]	; (800563c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8005624:	6353      	str	r3, [r2, #52]	; 0x34
}
 8005626:	e7ff      	b.n	8005628 <Pip_Acheived_Early_BACKUP_PC+0x238>
 8005628:	bf00      	nop
 800562a:	bd80      	pop	{r7, pc}
 800562c:	f3af 8000 	nop.w
 8005630:	9999999a 	.word	0x9999999a
 8005634:	3fb99999 	.word	0x3fb99999
 8005638:	20016ecc 	.word	0x20016ecc
 800563c:	20000004 	.word	0x20000004
 8005640:	20016cd4 	.word	0x20016cd4
 8005644:	42c80000 	.word	0x42c80000
 8005648:	428c0000 	.word	0x428c0000
 800564c:	42480000 	.word	0x42480000
 8005650:	42480000 	.word	0x42480000
 8005654:	42a00000 	.word	0x42a00000
 8005658:	42b40000 	.word	0x42b40000
 800565c:	20016df4 	.word	0x20016df4
 8005660:	20016e68 	.word	0x20016e68
 8005664:	42700000 	.word	0x42700000

08005668 <Pip_Acheived_Slowly_BACKUP_PC>:



void Pip_Acheived_Slowly_BACKUP_PC()
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
	               B4.result2=(B4.Acheived_ms/B2.ramp_time_percentage)*100;
 800566c:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800566e:	8b5b      	ldrh	r3, [r3, #26]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005678:	4b54      	ldr	r3, [pc, #336]	; (80057cc <Pip_Acheived_Slowly_BACKUP_PC+0x164>)
 800567a:	ed93 7a03 	vldr	s14, [r3, #12]
 800567e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005682:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80057d0 <Pip_Acheived_Slowly_BACKUP_PC+0x168>
 8005686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800568a:	4b4f      	ldr	r3, [pc, #316]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800568c:	edc3 7a04 	vstr	s15, [r3, #16]
		    	   B4.last_result2=B4.result2;
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005696:	6153      	str	r3, [r2, #20]

		    	   if(B4.result2 >= 130)
 8005698:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800569a:	edd3 7a04 	vldr	s15, [r3, #16]
 800569e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80057d4 <Pip_Acheived_Slowly_BACKUP_PC+0x16c>
 80056a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	db1b      	blt.n	80056e4 <Pip_Acheived_Slowly_BACKUP_PC+0x7c>
		    	   {
		    		    B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+5;
 80056ac:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80056b2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80056b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ba:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   	    if(B4.incrementing_Dac_value_10ms>=350)
 80056c0:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80056c6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80057d8 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 80056ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d2:	da00      	bge.n	80056d6 <Pip_Acheived_Slowly_BACKUP_PC+0x6e>
		    	   			   B4.nack=0;
		    	   		}
		    	   	}


}
 80056d4:	e070      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	    	 B4.incrementing_Dac_value_10ms=350;
 80056d6:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056d8:	4a40      	ldr	r2, [pc, #256]	; (80057dc <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   	    	 B4.nack=0;
 80056dc:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056e2:	e069      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   else if(B4.result2 > 120 && B4.result2 <130)
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80056ea:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80057e0 <Pip_Acheived_Slowly_BACKUP_PC+0x178>
 80056ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f6:	dd24      	ble.n	8005742 <Pip_Acheived_Slowly_BACKUP_PC+0xda>
 80056f8:	4b33      	ldr	r3, [pc, #204]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80056fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80056fe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80057d4 <Pip_Acheived_Slowly_BACKUP_PC+0x16c>
 8005702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	d51a      	bpl.n	8005742 <Pip_Acheived_Slowly_BACKUP_PC+0xda>
		    		    B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+(0.5);
 800570c:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800570e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005712:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800571a:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800571c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8005720:	4b29      	ldr	r3, [pc, #164]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005722:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005726:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80057d8 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 800572a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800572e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005732:	db41      	blt.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   			  B4.incrementing_Dac_value_10ms=350;
 8005734:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005736:	4a29      	ldr	r2, [pc, #164]	; (80057dc <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			  B4.nack=0;
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8005740:	e03a      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	else if(B4.result2<=120 && B4.result2>=110)
 8005742:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005744:	edd3 7a04 	vldr	s15, [r3, #16]
 8005748:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80057e0 <Pip_Acheived_Slowly_BACKUP_PC+0x178>
 800574c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	d900      	bls.n	8005758 <Pip_Acheived_Slowly_BACKUP_PC+0xf0>
}
 8005756:	e02f      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	else if(B4.result2<=120 && B4.result2>=110)
 8005758:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 800575a:	edd3 7a04 	vldr	s15, [r3, #16]
 800575e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80057e4 <Pip_Acheived_Slowly_BACKUP_PC+0x17c>
 8005762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576a:	da00      	bge.n	800576e <Pip_Acheived_Slowly_BACKUP_PC+0x106>
}
 800576c:	e024      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   		B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+(0.1);
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	4618      	mov	r0, r3
 8005774:	f7fa fe90 	bl	8000498 <__aeabi_f2d>
 8005778:	a311      	add	r3, pc, #68	; (adr r3, 80057c0 <Pip_Acheived_Slowly_BACKUP_PC+0x158>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fd2d 	bl	80001dc <__adddf3>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	f7fb f9bf 	bl	8000b0c <__aeabi_d2f>
 800578e:	4603      	mov	r3, r0
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005792:	62d3      	str	r3, [r2, #44]	; 0x2c
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8005796:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800579a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80057d8 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 800579e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	da00      	bge.n	80057aa <Pip_Acheived_Slowly_BACKUP_PC+0x142>
}
 80057a8:	e006      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   			   B4.incrementing_Dac_value_10ms=350;
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80057ac:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			   B4.nack=0;
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057b6:	e7ff      	b.n	80057b8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	f3af 8000 	nop.w
 80057c0:	9999999a 	.word	0x9999999a
 80057c4:	3fb99999 	.word	0x3fb99999
 80057c8:	20000004 	.word	0x20000004
 80057cc:	20016cd4 	.word	0x20016cd4
 80057d0:	42c80000 	.word	0x42c80000
 80057d4:	43020000 	.word	0x43020000
 80057d8:	43af0000 	.word	0x43af0000
 80057dc:	43af0000 	.word	0x43af0000
 80057e0:	42f00000 	.word	0x42f00000
 80057e4:	42dc0000 	.word	0x42dc0000

080057e8 <Pip_Acheived_Normally_BACKUP_PC>:
void Pip_Acheived_Normally_BACKUP_PC()
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
 	   B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms;
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <Pip_Acheived_Normally_BACKUP_PC+0x18>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a03      	ldr	r2, [pc, #12]	; (8005800 <Pip_Acheived_Normally_BACKUP_PC+0x18>)
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000004 	.word	0x20000004

08005804 <Pip_Not_Acheived_BACKUP_PC>:


void Pip_Not_Acheived_BACKUP_PC()
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
		   if(B3.Pip_Acheived_Flag==0)
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <Pip_Not_Acheived_BACKUP_PC+0x4c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11a      	bne.n	8005846 <Pip_Not_Acheived_BACKUP_PC+0x42>
		   {
			   B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+1;
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8005812:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800581a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8005820:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			   if(B4.incrementing_Dac_value_10ms>=350)
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8005826:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800582a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005858 <Pip_Not_Acheived_BACKUP_PC+0x54>
 800582e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	da00      	bge.n	800583a <Pip_Not_Acheived_BACKUP_PC+0x36>
			   {
				   B4.incrementing_Dac_value_10ms=350;
				   B4.nack=0;
			   }
		   }
}
 8005838:	e005      	b.n	8005846 <Pip_Not_Acheived_BACKUP_PC+0x42>
				   B4.incrementing_Dac_value_10ms=350;
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 800583c:	4a07      	ldr	r2, [pc, #28]	; (800585c <Pip_Not_Acheived_BACKUP_PC+0x58>)
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c
				   B4.nack=0;
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20016ecc 	.word	0x20016ecc
 8005854:	20000004 	.word	0x20000004
 8005858:	43af0000 	.word	0x43af0000
 800585c:	43af0000 	.word	0x43af0000

08005860 <Peep_E_Valve_Lock_delay_BACKUP_PC>:




void Peep_E_Valve_Lock_delay_BACKUP_PC()
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
	if (B1.RR < 30)
 8005864:	4ba1      	ldr	r3, [pc, #644]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 8005866:	7c9b      	ldrb	r3, [r3, #18]
 8005868:	2b1d      	cmp	r3, #29
 800586a:	f200 822f 	bhi.w	8005ccc <Peep_E_Valve_Lock_delay_BACKUP_PC+0x46c>
	{
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 800586e:	4ba0      	ldr	r3, [pc, #640]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005870:	edd3 6a02 	vldr	s13, [r3, #8]
 8005874:	4b9e      	ldr	r3, [pc, #632]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005876:	ed93 7a03 	vldr	s14, [r3, #12]
 800587a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587e:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005880:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8005884:	4b9a      	ldr	r3, [pc, #616]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005886:	edd3 7a04 	vldr	s15, [r3, #16]
 800588a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800588e:	ee17 2a90 	vmov	r2, s15
 8005892:	4b97      	ldr	r3, [pc, #604]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8005896:	4b96      	ldr	r3, [pc, #600]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 800589e:	4b94      	ldr	r3, [pc, #592]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 80058a6:	4b92      	ldr	r3, [pc, #584]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80058ac:	4b90      	ldr	r3, [pc, #576]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	4b8e      	ldr	r3, [pc, #568]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 80058bc:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80058c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c6:	ee17 2a90 	vmov	r2, s15
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058cc:	629a      	str	r2, [r3, #40]	; 0x28

		if (B1.RR >= 30 || B2._E_TIMER_HOLD < 500)
 80058ce:	4b87      	ldr	r3, [pc, #540]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 80058d0:	7c9b      	ldrb	r3, [r3, #18]
 80058d2:	2b1d      	cmp	r3, #29
 80058d4:	d804      	bhi.n	80058e0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x80>
 80058d6:	4b87      	ldr	r3, [pc, #540]	; (8005af4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x294>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80058de:	d203      	bcs.n	80058e8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x88>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 80058e0:	4b83      	ldr	r3, [pc, #524]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	4a82      	ldr	r2, [pc, #520]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058e6:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 80058e8:	4b81      	ldr	r3, [pc, #516]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40


		if (S5._Peep_Avg_val_int > (B1._PEEP_Val +8) )
 80058ee:	4b80      	ldr	r3, [pc, #512]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f2:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 80058f4:	78db      	ldrb	r3, [r3, #3]
 80058f6:	3308      	adds	r3, #8
 80058f8:	429a      	cmp	r2, r3
 80058fa:	dd33      	ble.n	8005964 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x104>
		{

			S5.error_count++;
 80058fc:	4b7c      	ldr	r3, [pc, #496]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	3301      	adds	r3, #1
 8005902:	4a7b      	ldr	r2, [pc, #492]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005904:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 8005906:	4b7a      	ldr	r3, [pc, #488]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	dd1b      	ble.n	8005946 <Peep_E_Valve_Lock_delay_BACKUP_PC+0xe6>
			{

				S5.Lock_delay = S5.Lock_delay + 100;
 800590e:	4b78      	ldr	r3, [pc, #480]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005910:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005912:	3364      	adds	r3, #100	; 0x64
 8005914:	b29a      	uxth	r2, r3
 8005916:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005918:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800591a:	4b75      	ldr	r3, [pc, #468]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8005920:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005922:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005924:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005928:	d90d      	bls.n	8005946 <Peep_E_Valve_Lock_delay_BACKUP_PC+0xe6>
				{
					S5.Lock_delay = 700;
 800592a:	4b71      	ldr	r3, [pc, #452]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 800592c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005930:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 8005932:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005934:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005938:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800593c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005940:	4b6b      	ldr	r3, [pc, #428]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005942:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 8005946:	4b6a      	ldr	r3, [pc, #424]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005948:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800594c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005958:	f200 81ab 	bhi.w	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
			{
				S5._Set_Peep = 3;
 800595c:	4b64      	ldr	r3, [pc, #400]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 800595e:	4a66      	ldr	r2, [pc, #408]	; (8005af8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x298>)
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
 8005962:	e1a6      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
			}
		}



		else if( (S5._Peep_Avg_val_int > (B1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (B1._PEEP_Val+8)) )
 8005964:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005968:	4b60      	ldr	r3, [pc, #384]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 800596a:	78db      	ldrb	r3, [r3, #3]
 800596c:	3302      	adds	r3, #2
 800596e:	429a      	cmp	r2, r3
 8005970:	dd3a      	ble.n	80059e8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x188>
 8005972:	4b5f      	ldr	r3, [pc, #380]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005976:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	3308      	adds	r3, #8
 800597c:	429a      	cmp	r2, r3
 800597e:	dc33      	bgt.n	80059e8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x188>
		{

			S5.error_count++;
 8005980:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	3301      	adds	r3, #1
 8005986:	4a5a      	ldr	r2, [pc, #360]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005988:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800598a:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd1b      	ble.n	80059ca <Peep_E_Valve_Lock_delay_BACKUP_PC+0x16a>
			{
				S5.Lock_delay = S5.Lock_delay + 40;
 8005992:	4b57      	ldr	r3, [pc, #348]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005994:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005996:	3328      	adds	r3, #40	; 0x28
 8005998:	b29a      	uxth	r2, r3
 800599a:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 800599c:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800599e:	4b54      	ldr	r3, [pc, #336]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 80059a4:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80059a8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80059ac:	d90d      	bls.n	80059ca <Peep_E_Valve_Lock_delay_BACKUP_PC+0x16a>
				{
					S5.Lock_delay = 700;
 80059ae:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059b0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80059b4:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80059c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059c4:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059c6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 80059ca:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80059d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	f200 8169 	bhi.w	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
			{
				S5._Set_Peep = 3;
 80059e0:	4b43      	ldr	r3, [pc, #268]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059e2:	4a45      	ldr	r2, [pc, #276]	; (8005af8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x298>)
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 80059e6:	e164      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
			}
		}


				else if( (S5._Peep_Avg_val_int > (B1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (B1._PEEP_Val+2)) )
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 80059ee:	78d2      	ldrb	r2, [r2, #3]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	dd3a      	ble.n	8005a6a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x20a>
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 80059f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f8:	4b3c      	ldr	r3, [pc, #240]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 80059fa:	78db      	ldrb	r3, [r3, #3]
 80059fc:	3302      	adds	r3, #2
 80059fe:	429a      	cmp	r2, r3
 8005a00:	dc33      	bgt.n	8005a6a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x20a>
				{

					S5.error_count++;
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a39      	ldr	r2, [pc, #228]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a0a:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 8005a0c:	4b38      	ldr	r3, [pc, #224]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dd1b      	ble.n	8005a4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x1ec>
					{

						S5.Lock_delay = S5.Lock_delay + 10;
 8005a14:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005a18:	330a      	adds	r3, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8005a20:	4b33      	ldr	r3, [pc, #204]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay > 700)
 8005a26:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005a2a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005a2e:	d90d      	bls.n	8005a4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x1ec>
						{
							S5.Lock_delay = 700;
 8005a30:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a32:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005a36:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep - 0.5;
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a3a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a46:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a48:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep <= 3)
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a4e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	f200 8128 	bhi.w	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					{
						S5._Set_Peep = 3;
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a64:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x298>)
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8005a68:	e123      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					}
				}


				else if ((S5._Peep_Avg_val_int == 0 ) )
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d144      	bne.n	8005afc <Peep_E_Valve_Lock_delay_BACKUP_PC+0x29c>
				{


					S5.error_count2++;
 8005a72:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a7a:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dd1e      	ble.n	8005ac2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x262>
					{
						S5._Set_Peep = S5._Set_Peep + 1;
 8005a84:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a94:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						S5.Lock_delay = S5.Lock_delay - 10;
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005a9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005a9c:	3b0a      	subs	r3, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005aac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <Peep_E_Valve_Lock_delay_BACKUP_PC+0x25c>
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005ab4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005ab6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005aba:	d902      	bls.n	8005ac2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x262>
						{
							S5.Lock_delay = 1;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	879a      	strh	r2, [r3, #60]	; 0x3c

						}
					}
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005ac4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <Peep_E_Valve_Lock_delay_BACKUP_PC+0x28c>)
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	330a      	adds	r3, #10
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	f340 80e8 	ble.w	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					{
						S5._Set_Peep = S5._Set_Peep;
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	4a02      	ldr	r2, [pc, #8]	; (8005af0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x290>)
 8005ae8:	6393      	str	r3, [r2, #56]	; 0x38
 8005aea:	e0e2      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
 8005aec:	20016e68 	.word	0x20016e68
 8005af0:	20016df4 	.word	0x20016df4
 8005af4:	20016cd4 	.word	0x20016cd4
 8005af8:	40400000 	.word	0x40400000
					}
				}



				else if ((S5._Peep_Avg_val_int < (B1._PEEP_Val -8)))
 8005afc:	4b71      	ldr	r3, [pc, #452]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b00:	4b71      	ldr	r3, [pc, #452]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005b02:	78db      	ldrb	r3, [r3, #3]
 8005b04:	3b08      	subs	r3, #8
 8005b06:	429a      	cmp	r2, r3
 8005b08:	da3c      	bge.n	8005b84 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x324>
				{


					S5.error_count2++;
 8005b0a:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a6c      	ldr	r2, [pc, #432]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b12:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 8005b14:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	dd1e      	ble.n	8005b5a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x2fa>
					{
						S5.Lock_delay = S5.Lock_delay - 50;
 8005b1c:	4b69      	ldr	r3, [pc, #420]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005b20:	3b32      	subs	r3, #50	; 0x32
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	4b67      	ldr	r3, [pc, #412]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b26:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005b28:	4b66      	ldr	r3, [pc, #408]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005b2e:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x2e0>
 8005b36:	4b63      	ldr	r3, [pc, #396]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005b3a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005b3e:	d90c      	bls.n	8005b5a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x2fa>
						{
							S5.Lock_delay = 1;
 8005b40:	4b60      	ldr	r3, [pc, #384]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 8005b46:	4b5f      	ldr	r3, [pc, #380]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b48:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005b4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b54:	4b5b      	ldr	r3, [pc, #364]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b56:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005b5a:	4b5a      	ldr	r3, [pc, #360]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b5c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005b62:	78db      	ldrb	r3, [r3, #3]
 8005b64:	330a      	adds	r3, #10
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	f340 809c 	ble.w	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					{
						S5._Set_Peep = S5._Set_Peep;
 8005b7a:	4b52      	ldr	r3, [pc, #328]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	4a51      	ldr	r2, [pc, #324]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b80:	6393      	str	r3, [r2, #56]	; 0x38
 8005b82:	e096      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					}
				}



				else if ((S5._Peep_Avg_val_int >= (B1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (B1._PEEP_Val-2)))
 8005b84:	4b4f      	ldr	r3, [pc, #316]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b88:	4b4f      	ldr	r3, [pc, #316]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	3b08      	subs	r3, #8
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	db42      	blt.n	8005c18 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x3b8>
 8005b92:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b96:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	da3b      	bge.n	8005c18 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x3b8>
				{


					S5.error_count2++;
 8005ba0:	4b48      	ldr	r3, [pc, #288]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a47      	ldr	r2, [pc, #284]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005ba8:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 8005baa:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd1e      	ble.n	8005bf0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x390>
					{
						S5.Lock_delay = S5.Lock_delay - 30;
 8005bb2:	4b44      	ldr	r3, [pc, #272]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005bb6:	3b1e      	subs	r3, #30
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005bbe:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bc6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x376>
 8005bcc:	4b3d      	ldr	r3, [pc, #244]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005bd0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005bd4:	d90c      	bls.n	8005bf0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x390>
						{
							S5.Lock_delay = 1;
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 8005bdc:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bde:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005be2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bea:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bec:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005bf0:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005bf2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005bf6:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	330a      	adds	r3, #10
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	dd51      	ble.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					{
						S5._Set_Peep = S5._Set_Peep;
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c14:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005c16:	e04c      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					}
				}


				else if ((S5._Peep_Avg_val_int >= (B1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (B1._PEEP_Val)))
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	3b02      	subs	r3, #2
 8005c22:	429a      	cmp	r2, r3
 8005c24:	db41      	blt.n	8005caa <Peep_E_Valve_Lock_delay_BACKUP_PC+0x44a>
 8005c26:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005c2c:	78d2      	ldrb	r2, [r2, #3]
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	da3b      	bge.n	8005caa <Peep_E_Valve_Lock_delay_BACKUP_PC+0x44a>
				{


					S5.error_count2++;
 8005c32:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	3301      	adds	r3, #1
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c3a:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dd1e      	ble.n	8005c82 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x422>
					{

						S5.Lock_delay = S5.Lock_delay - 10;
 8005c44:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005c48:	3b0a      	subs	r3, #10
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005c56:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x408>
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c60:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005c62:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005c66:	d90c      	bls.n	8005c82 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x422>
						{
							S5._Set_Peep = S5._Set_Peep + 0.5;
 8005c68:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005c6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c78:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	879a      	strh	r2, [r3, #60]	; 0x3c
						}
					}
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005c84:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x468>)
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	330a      	adds	r3, #10
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	dd08      	ble.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>
					{
						S5._Set_Peep = S5._Set_Peep;
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005ca6:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005ca8:	e003      	b.n	8005cb2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x452>



				else
				{
					S5._Set_Peep = S5._Set_Peep;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005cb0:	6393      	str	r3, [r2, #56]	; 0x38
				}

		S5._Peep_Avg_count = 0;
 8005cb2:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 8005cba:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x464>)
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	615a      	str	r2, [r3, #20]
				}
		S5._Peep_Avg_count = 0;
		S5._Peep_Avg = 0;

	}
}
 8005cc2:	e22e      	b.n	8006122 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8c2>
 8005cc4:	20016df4 	.word	0x20016df4
 8005cc8:	20016e68 	.word	0x20016e68
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8005ccc:	4b9f      	ldr	r3, [pc, #636]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cce:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cd2:	4b9e      	ldr	r3, [pc, #632]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8005cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cdc:	4b9b      	ldr	r3, [pc, #620]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cde:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8005ce2:	4b9a      	ldr	r3, [pc, #616]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ce4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cec:	ee17 2a90 	vmov	r2, s15
 8005cf0:	4b96      	ldr	r3, [pc, #600]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8005cf4:	4b95      	ldr	r3, [pc, #596]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8005cfc:	4b93      	ldr	r3, [pc, #588]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8005d04:	4b91      	ldr	r3, [pc, #580]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d06:	edd3 6a05 	vldr	s13, [r3, #20]
 8005d0a:	4b90      	ldr	r3, [pc, #576]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d14:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8005d1a:	4b8c      	ldr	r3, [pc, #560]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d24:	ee17 2a90 	vmov	r2, s15
 8005d28:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
		if (B1.RR >= 30 || B2._E_TIMER_HOLD < 700)
 8005d2c:	4b88      	ldr	r3, [pc, #544]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005d2e:	7c9b      	ldrb	r3, [r3, #18]
 8005d30:	2b1d      	cmp	r3, #29
 8005d32:	d804      	bhi.n	8005d3e <Peep_E_Valve_Lock_delay_BACKUP_PC+0x4de>
 8005d34:	4b87      	ldr	r3, [pc, #540]	; (8005f54 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f4>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005d3c:	d203      	bcs.n	8005d46 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x4e6>
			S5._Peep_Avg_val_int = S5.peep_max;
 8005d3e:	4b83      	ldr	r3, [pc, #524]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a82      	ldr	r2, [pc, #520]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d44:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 8005d46:	4b81      	ldr	r3, [pc, #516]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (B1._PEEP_Val +8) )
 8005d4c:	4b7f      	ldr	r3, [pc, #508]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d50:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005d52:	78db      	ldrb	r3, [r3, #3]
 8005d54:	3308      	adds	r3, #8
 8005d56:	429a      	cmp	r2, r3
 8005d58:	dd33      	ble.n	8005dc2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x562>
			S5.error_count++;
 8005d5a:	4b7c      	ldr	r3, [pc, #496]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a7a      	ldr	r2, [pc, #488]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d62:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 8005d64:	4b79      	ldr	r3, [pc, #484]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	dd1b      	ble.n	8005da4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x544>
				S5.Lock_delay = S5.Lock_delay + 100;
 8005d6c:	4b77      	ldr	r3, [pc, #476]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d6e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005d70:	3364      	adds	r3, #100	; 0x64
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4b75      	ldr	r3, [pc, #468]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d76:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 8005d78:	4b74      	ldr	r3, [pc, #464]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8005d7e:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005d82:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005d86:	d90d      	bls.n	8005da4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x544>
					S5.Lock_delay = 700;
 8005d88:	4b70      	ldr	r3, [pc, #448]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d8a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 8005d90:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005d92:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005d96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d9e:	4b6b      	ldr	r3, [pc, #428]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005da0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 8005da4:	4b69      	ldr	r3, [pc, #420]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005da6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005daa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	f200 81ac 	bhi.w	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
				S5._Set_Peep = 3;
 8005dba:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dbc:	4a66      	ldr	r2, [pc, #408]	; (8005f58 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f8>)
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc0:	e1a7      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
			else if( (S5._Peep_Avg_val_int > (B1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (B1._PEEP_Val+8)) )
 8005dc2:	4b62      	ldr	r3, [pc, #392]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	3302      	adds	r3, #2
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	dd3a      	ble.n	8005e46 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x5e6>
 8005dd0:	4b5e      	ldr	r3, [pc, #376]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd4:	4b5e      	ldr	r3, [pc, #376]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	dc33      	bgt.n	8005e46 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x5e6>
				S5.error_count++;
 8005dde:	4b5b      	ldr	r3, [pc, #364]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a59      	ldr	r2, [pc, #356]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005de6:	6313      	str	r3, [r2, #48]	; 0x30
				if (S5.error_count > 2)
 8005de8:	4b58      	ldr	r3, [pc, #352]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	dd1b      	ble.n	8005e28 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x5c8>
					S5.Lock_delay = S5.Lock_delay + 40;
 8005df0:	4b56      	ldr	r3, [pc, #344]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005df2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005df4:	3328      	adds	r3, #40	; 0x28
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	4b54      	ldr	r3, [pc, #336]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5.error_count = 0;
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
					if (S5.Lock_delay > 700)
 8005e02:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005e06:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005e0a:	d90d      	bls.n	8005e28 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x5c8>
						S5.Lock_delay = 700;
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e0e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005e12:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5._Set_Peep = S5._Set_Peep - 0.5;
 8005e14:	4b4d      	ldr	r3, [pc, #308]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005e1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e22:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e24:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				if (S5._Set_Peep <= 3)
 8005e28:	4b48      	ldr	r3, [pc, #288]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e2a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005e2e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	f200 816a 	bhi.w	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
					S5._Set_Peep = 3;
 8005e3e:	4b43      	ldr	r3, [pc, #268]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e40:	4a45      	ldr	r2, [pc, #276]	; (8005f58 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f8>)
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
				if (S5._Set_Peep <= 3)
 8005e44:	e165      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
				else if( (S5._Peep_Avg_val_int > (B1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (B1._PEEP_Val+2)) )
 8005e46:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	4a41      	ldr	r2, [pc, #260]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005e4c:	78d2      	ldrb	r2, [r2, #3]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	dd3a      	ble.n	8005ec8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x668>
 8005e52:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005e58:	78db      	ldrb	r3, [r3, #3]
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dc33      	bgt.n	8005ec8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x668>
					S5.error_count++;
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a39      	ldr	r2, [pc, #228]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e68:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 2)
 8005e6a:	4b38      	ldr	r3, [pc, #224]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	dd1b      	ble.n	8005eaa <Peep_E_Valve_Lock_delay_BACKUP_PC+0x64a>
						S5.Lock_delay = S5.Lock_delay + 10;
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005e76:	330a      	adds	r3, #10
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8005e7e:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay > 700)
 8005e84:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005e88:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005e8c:	d90d      	bls.n	8005eaa <Peep_E_Valve_Lock_delay_BACKUP_PC+0x64a>
							S5.Lock_delay = 700;
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e90:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005e94:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep - 0.5;
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005e98:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005e9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ea4:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ea6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8005eaa:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005eac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005eb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	f200 8129 	bhi.w	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
						S5._Set_Peep = 3;
 8005ec0:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ec2:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f8>)
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8005ec6:	e124      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
				else if ((S5._Peep_Avg_val_int == 0 ) )
 8005ec8:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d145      	bne.n	8005f5c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6fc>
					S5.error_count2++;
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ed8:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 8005eda:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	dd1e      	ble.n	8005f20 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6c0>
						S5._Set_Peep = S5._Set_Peep + 1;
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ee4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ef0:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ef2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						S5.Lock_delay = S5.Lock_delay - 10;
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005ef8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005efa:	3b0a      	subs	r3, #10
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f00:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005f08:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ba>
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f14:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005f18:	d902      	bls.n	8005f20 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6c0>
							S5.Lock_delay = 1;
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f22:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6f0>)
 8005f28:	78db      	ldrb	r3, [r3, #3]
 8005f2a:	330a      	adds	r3, #10
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	f340 80e9 	ble.w	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
						S5._Set_Peep = S5._Set_Peep;
 8005f40:	4b02      	ldr	r3, [pc, #8]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	4a01      	ldr	r2, [pc, #4]	; (8005f4c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x6ec>)
 8005f46:	6393      	str	r3, [r2, #56]	; 0x38
 8005f48:	e0e3      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
 8005f4a:	bf00      	nop
 8005f4c:	20016df4 	.word	0x20016df4
 8005f50:	20016e68 	.word	0x20016e68
 8005f54:	20016cd4 	.word	0x20016cd4
 8005f58:	40400000 	.word	0x40400000
				else if ((S5._Peep_Avg_val_int < (B1._PEEP_Val -8)))
 8005f5c:	4b73      	ldr	r3, [pc, #460]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f60:	4b73      	ldr	r3, [pc, #460]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	3b08      	subs	r3, #8
 8005f66:	429a      	cmp	r2, r3
 8005f68:	da3c      	bge.n	8005fe4 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x784>
					S5.error_count2++;
 8005f6a:	4b70      	ldr	r3, [pc, #448]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a6e      	ldr	r2, [pc, #440]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f72:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 8005f74:	4b6d      	ldr	r3, [pc, #436]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	dd1e      	ble.n	8005fba <Peep_E_Valve_Lock_delay_BACKUP_PC+0x75a>
						S5.Lock_delay = S5.Lock_delay - 50;
 8005f7c:	4b6b      	ldr	r3, [pc, #428]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f80:	3b32      	subs	r3, #50	; 0x32
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	4b69      	ldr	r3, [pc, #420]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f86:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8005f88:	4b68      	ldr	r3, [pc, #416]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8005f8e:	4b67      	ldr	r3, [pc, #412]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x740>
 8005f96:	4b65      	ldr	r3, [pc, #404]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005f98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f9a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005f9e:	d90c      	bls.n	8005fba <Peep_E_Valve_Lock_delay_BACKUP_PC+0x75a>
							S5.Lock_delay = 1;
 8005fa0:	4b62      	ldr	r3, [pc, #392]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 8005fa6:	4b61      	ldr	r3, [pc, #388]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fa8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005fac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005fb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fb4:	4b5d      	ldr	r3, [pc, #372]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fb6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8005fba:	4b5c      	ldr	r3, [pc, #368]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fbc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005fc0:	4b5b      	ldr	r3, [pc, #364]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 8005fc2:	78db      	ldrb	r3, [r3, #3]
 8005fc4:	330a      	adds	r3, #10
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	f340 809c 	ble.w	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
						S5._Set_Peep = S5._Set_Peep;
 8005fda:	4b54      	ldr	r3, [pc, #336]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4a53      	ldr	r2, [pc, #332]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fe0:	6393      	str	r3, [r2, #56]	; 0x38
 8005fe2:	e096      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
				else if ((S5._Peep_Avg_val_int >= (B1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (B1._PEEP_Val-2)))
 8005fe4:	4b51      	ldr	r3, [pc, #324]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe8:	4b51      	ldr	r3, [pc, #324]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 8005fea:	78db      	ldrb	r3, [r3, #3]
 8005fec:	3b08      	subs	r3, #8
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	db42      	blt.n	8006078 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x818>
 8005ff2:	4b4e      	ldr	r3, [pc, #312]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8005ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff6:	4b4e      	ldr	r3, [pc, #312]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 8005ff8:	78db      	ldrb	r3, [r3, #3]
 8005ffa:	3b02      	subs	r3, #2
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	da3b      	bge.n	8006078 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x818>
					S5.error_count2++;
 8006000:	4b4a      	ldr	r3, [pc, #296]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	3301      	adds	r3, #1
 8006006:	4a49      	ldr	r2, [pc, #292]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006008:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 800600a:	4b48      	ldr	r3, [pc, #288]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	2b02      	cmp	r3, #2
 8006010:	dd1e      	ble.n	8006050 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x7f0>
						S5.Lock_delay = S5.Lock_delay - 30;
 8006012:	4b46      	ldr	r3, [pc, #280]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006014:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006016:	3b1e      	subs	r3, #30
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b44      	ldr	r3, [pc, #272]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800601c:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800601e:	4b43      	ldr	r3, [pc, #268]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006020:	2200      	movs	r2, #0
 8006022:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8006024:	4b41      	ldr	r3, [pc, #260]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006026:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x7d6>
 800602c:	4b3f      	ldr	r3, [pc, #252]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800602e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006030:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006034:	d90c      	bls.n	8006050 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x7f0>
							S5.Lock_delay = 1;
 8006036:	4b3d      	ldr	r3, [pc, #244]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006038:	2201      	movs	r2, #1
 800603a:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800603e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800604c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006052:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	330a      	adds	r3, #10
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	dd51      	ble.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
						S5._Set_Peep = S5._Set_Peep;
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	4a2e      	ldr	r2, [pc, #184]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006074:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8006076:	e04c      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
				else if ((S5._Peep_Avg_val_int >= (B1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (B1._PEEP_Val)))
 8006078:	4b2c      	ldr	r3, [pc, #176]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800607a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607c:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	3b02      	subs	r3, #2
 8006082:	429a      	cmp	r2, r3
 8006084:	db41      	blt.n	800610a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8aa>
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	4a29      	ldr	r2, [pc, #164]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 800608c:	78d2      	ldrb	r2, [r2, #3]
 800608e:	4293      	cmp	r3, r2
 8006090:	da3b      	bge.n	800610a <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8aa>
					S5.error_count2++;
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	3301      	adds	r3, #1
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800609a:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 800609c:	4b23      	ldr	r3, [pc, #140]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	dd1e      	ble.n	80060e2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x882>
						S5.Lock_delay = S5.Lock_delay - 10;
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80060a8:	3b0a      	subs	r3, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060ae:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x868>
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80060c2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80060c6:	d90c      	bls.n	80060e2 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x882>
							S5._Set_Peep = S5._Set_Peep + 0.5;
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060d6:	4b15      	ldr	r3, [pc, #84]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060d8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060de:	2201      	movs	r2, #1
 80060e0:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 80060e4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8d0>)
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	330a      	adds	r3, #10
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fe:	dd08      	ble.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
						S5._Set_Peep = S5._Set_Peep;
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	4a09      	ldr	r2, [pc, #36]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006106:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > B1._PEEP_Val + 10)
 8006108:	e003      	b.n	8006112 <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8b2>
					S5._Set_Peep = S5._Set_Peep;
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006110:	6393      	str	r3, [r2, #56]	; 0x38
		S5._Peep_Avg_count = 0;
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 800611a:	4b04      	ldr	r3, [pc, #16]	; (800612c <Peep_E_Valve_Lock_delay_BACKUP_PC+0x8cc>)
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	615a      	str	r2, [r3, #20]
}
 8006122:	bf00      	nop
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20016df4 	.word	0x20016df4
 8006130:	20016e68 	.word	0x20016e68
 8006134:	00000000 	.word	0x00000000

08006138 <Back_Up_VC_CMV_Mode_Task>:
extern int Alert_Data_send_count;


extern uint8_t now_check_breath;
void Back_Up_VC_CMV_Mode_Task(void *argument)
{
 8006138:	b5b0      	push	{r4, r5, r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af02      	add	r7, sp, #8
 800613e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 8006140:	4b4c      	ldr	r3, [pc, #304]	; (8006274 <Back_Up_VC_CMV_Mode_Task+0x13c>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b02      	cmp	r3, #2
 8006146:	f000 8688 	beq.w	8006e5a <Back_Up_VC_CMV_Mode_Task+0xd22>
 800614a:	2b02      	cmp	r3, #2
 800614c:	f300 8687 	bgt.w	8006e5e <Back_Up_VC_CMV_Mode_Task+0xd26>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <Back_Up_VC_CMV_Mode_Task+0x24>
 8006154:	2b01      	cmp	r3, #1
 8006156:	d013      	beq.n	8006180 <Back_Up_VC_CMV_Mode_Task+0x48>

				break;
				case NoComputeState:
				break;
				default:
				break;
 8006158:	f000 be81 	b.w	8006e5e <Back_Up_VC_CMV_Mode_Task+0xd26>
				ExpValve_CLOSE();
 800615c:	4b46      	ldr	r3, [pc, #280]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	4a45      	ldr	r2, [pc, #276]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 8006162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006166:	6153      	str	r3, [r2, #20]
				Blower_Signal( D4._DAC_VAL0);
 8006168:	4b44      	ldr	r3, [pc, #272]	; (800627c <Back_Up_VC_CMV_Mode_Task+0x144>)
 800616a:	891a      	ldrh	r2, [r3, #8]
 800616c:	4b44      	ldr	r3, [pc, #272]	; (8006280 <Back_Up_VC_CMV_Mode_Task+0x148>)
 800616e:	609a      	str	r2, [r3, #8]
				S5.peep_process_done=0;
 8006170:	4b44      	ldr	r3, [pc, #272]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 8006172:	2200      	movs	r2, #0
 8006174:	64da      	str	r2, [r3, #76]	; 0x4c
				S5.lock=1;
 8006176:	4b43      	ldr	r3, [pc, #268]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 8006178:	2201      	movs	r2, #1
 800617a:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 800617c:	f000 be72 	b.w	8006e64 <Back_Up_VC_CMV_Mode_Task+0xd2c>
				 D4._DAC_VAL0=0;
 8006180:	4b3e      	ldr	r3, [pc, #248]	; (800627c <Back_Up_VC_CMV_Mode_Task+0x144>)
 8006182:	2200      	movs	r2, #0
 8006184:	811a      	strh	r2, [r3, #8]
				 Blower_Signal( D4._DAC_VAL0);
 8006186:	4b3d      	ldr	r3, [pc, #244]	; (800627c <Back_Up_VC_CMV_Mode_Task+0x144>)
 8006188:	891a      	ldrh	r2, [r3, #8]
 800618a:	4b3d      	ldr	r3, [pc, #244]	; (8006280 <Back_Up_VC_CMV_Mode_Task+0x148>)
 800618c:	609a      	str	r2, [r3, #8]
				 if(S5.peep_process_done==1)
 800618e:	4b3d      	ldr	r3, [pc, #244]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d116      	bne.n	80061c4 <Back_Up_VC_CMV_Mode_Task+0x8c>
					if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8006196:	4b3c      	ldr	r3, [pc, #240]	; (8006288 <Back_Up_VC_CMV_Mode_Task+0x150>)
 8006198:	791b      	ldrb	r3, [r3, #4]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061a2:	4b38      	ldr	r3, [pc, #224]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80061a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	d504      	bpl.n	80061bc <Back_Up_VC_CMV_Mode_Task+0x84>
						Blower_Signal( D4._DAC_VAL0);
 80061b2:	4b32      	ldr	r3, [pc, #200]	; (800627c <Back_Up_VC_CMV_Mode_Task+0x144>)
 80061b4:	891a      	ldrh	r2, [r3, #8]
 80061b6:	4b32      	ldr	r3, [pc, #200]	; (8006280 <Back_Up_VC_CMV_Mode_Task+0x148>)
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	e003      	b.n	80061c4 <Back_Up_VC_CMV_Mode_Task+0x8c>
						Blower_Signal( D4._DAC_VAL0);
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <Back_Up_VC_CMV_Mode_Task+0x144>)
 80061be:	891a      	ldrh	r2, [r3, #8]
 80061c0:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <Back_Up_VC_CMV_Mode_Task+0x148>)
 80061c2:	609a      	str	r2, [r3, #8]
				  if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 80061c4:	4b30      	ldr	r3, [pc, #192]	; (8006288 <Back_Up_VC_CMV_Mode_Task+0x150>)
 80061c6:	791b      	ldrb	r3, [r3, #4]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80061d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061de:	d815      	bhi.n	800620c <Back_Up_VC_CMV_Mode_Task+0xd4>
						if(S5.lock==1)
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d107      	bne.n	80061f8 <Back_Up_VC_CMV_Mode_Task+0xc0>
							S5.lock=0;
 80061e8:	4b26      	ldr	r3, [pc, #152]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
							vTaskDelay(S5.Lock_delay);
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80061f2:	4618      	mov	r0, r3
 80061f4:	f019 fb3a 	bl	801f86c <vTaskDelay>
						S5.peep_process_done=1;
 80061f8:	4b22      	ldr	r3, [pc, #136]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	64da      	str	r2, [r3, #76]	; 0x4c
						ExpValve_CLOSE();
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 8006204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006208:	6153      	str	r3, [r2, #20]
 800620a:	e009      	b.n	8006220 <Back_Up_VC_CMV_Mode_Task+0xe8>
				  else if(S5.peep_process_done==0)
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <Back_Up_VC_CMV_Mode_Task+0x14c>)
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <Back_Up_VC_CMV_Mode_Task+0xe8>
						ExpValve_OPEN();
 8006214:	4b18      	ldr	r3, [pc, #96]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <Back_Up_VC_CMV_Mode_Task+0x140>)
 800621a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800621e:	6153      	str	r3, [r2, #20]
					if(_E_TIMER <= (P1._TRIG_WINDOW) &&  _E_TIMER != 0)
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <Back_Up_VC_CMV_Mode_Task+0x154>)
 8006222:	8a1b      	ldrh	r3, [r3, #16]
 8006224:	461a      	mov	r2, r3
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <Back_Up_VC_CMV_Mode_Task+0x158>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	f0c0 85f3 	bcc.w	8006e16 <Back_Up_VC_CMV_Mode_Task+0xcde>
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <Back_Up_VC_CMV_Mode_Task+0x158>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 85ee 	beq.w	8006e16 <Back_Up_VC_CMV_Mode_Task+0xcde>
							if(P1._TRIG_TYPE==1)
 800623a:	4b14      	ldr	r3, [pc, #80]	; (800628c <Back_Up_VC_CMV_Mode_Task+0x154>)
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	2b01      	cmp	r3, #1
 8006240:	f040 82d7 	bne.w	80067f2 <Back_Up_VC_CMV_Mode_Task+0x6ba>
								if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8006244:	4b10      	ldr	r3, [pc, #64]	; (8006288 <Back_Up_VC_CMV_Mode_Task+0x150>)
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <Back_Up_VC_CMV_Mode_Task+0x154>)
 8006252:	edd3 6a05 	vldr	s13, [r3, #20]
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <Back_Up_VC_CMV_Mode_Task+0x154>)
 8006258:	891b      	ldrh	r3, [r3, #8]
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006262:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800626a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626e:	d411      	bmi.n	8006294 <Back_Up_VC_CMV_Mode_Task+0x15c>
							if(P1._TRIG_TYPE==1)
 8006270:	f000 bdf1 	b.w	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
 8006274:	20016cc8 	.word	0x20016cc8
 8006278:	40020400 	.word	0x40020400
 800627c:	20016d50 	.word	0x20016d50
 8006280:	40007400 	.word	0x40007400
 8006284:	20016df4 	.word	0x20016df4
 8006288:	20016cfc 	.word	0x20016cfc
 800628c:	20016960 	.word	0x20016960
 8006290:	20016d74 	.word	0x20016d74
									if(_CurrentMode==PSV)
 8006294:	4bac      	ldr	r3, [pc, #688]	; (8006548 <Back_Up_VC_CMV_Mode_Task+0x410>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b06      	cmp	r3, #6
 800629a:	f040 80c8 	bne.w	800642e <Back_Up_VC_CMV_Mode_Task+0x2f6>
										_Control_Byte &= (uint8_t) (~(0x80));
 800629e:	4bab      	ldr	r3, [pc, #684]	; (800654c <Back_Up_VC_CMV_Mode_Task+0x414>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4ba8      	ldr	r3, [pc, #672]	; (800654c <Back_Up_VC_CMV_Mode_Task+0x414>)
 80062aa:	701a      	strb	r2, [r3, #0]
										A.Alert=1;
 80062ac:	4ba8      	ldr	r3, [pc, #672]	; (8006550 <Back_Up_VC_CMV_Mode_Task+0x418>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	709a      	strb	r2, [r3, #2]
										A.Red_Led_Alert=0;
 80062b2:	4ba7      	ldr	r3, [pc, #668]	; (8006550 <Back_Up_VC_CMV_Mode_Task+0x418>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										Led_Alert();
 80062ba:	f7fc fb13 	bl	80028e4 <Led_Alert>
										uwTick=0;
 80062be:	4ba5      	ldr	r3, [pc, #660]	; (8006554 <Back_Up_VC_CMV_Mode_Task+0x41c>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 80062c4:	49a4      	ldr	r1, [pc, #656]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 80062c6:	a39e      	add	r3, pc, #632	; (adr r3, 8006540 <Back_Up_VC_CMV_Mode_Task+0x408>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 80062d0:	4ba2      	ldr	r3, [pc, #648]	; (800655c <Back_Up_VC_CMV_Mode_Task+0x424>)
 80062d2:	2228      	movs	r2, #40	; 0x28
 80062d4:	601a      	str	r2, [r3, #0]
										kp=5;
 80062d6:	4ba2      	ldr	r3, [pc, #648]	; (8006560 <Back_Up_VC_CMV_Mode_Task+0x428>)
 80062d8:	2205      	movs	r2, #5
 80062da:	701a      	strb	r2, [r3, #0]
										ki=4;
 80062dc:	4ba1      	ldr	r3, [pc, #644]	; (8006564 <Back_Up_VC_CMV_Mode_Task+0x42c>)
 80062de:	2204      	movs	r2, #4
 80062e0:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80062e2:	4ba1      	ldr	r3, [pc, #644]	; (8006568 <Back_Up_VC_CMV_Mode_Task+0x430>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 80062e8:	4ba0      	ldr	r3, [pc, #640]	; (800656c <Back_Up_VC_CMV_Mode_Task+0x434>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80062ee:	4b9e      	ldr	r3, [pc, #632]	; (8006568 <Back_Up_VC_CMV_Mode_Task+0x430>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 80062f4:	4b9e      	ldr	r3, [pc, #632]	; (8006570 <Back_Up_VC_CMV_Mode_Task+0x438>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 80062fa:	4b9e      	ldr	r3, [pc, #632]	; (8006574 <Back_Up_VC_CMV_Mode_Task+0x43c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
										uwTick=0;                         //new
 8006300:	4b94      	ldr	r3, [pc, #592]	; (8006554 <Back_Up_VC_CMV_Mode_Task+0x41c>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
										TempSetpoint = (P1.PIP_PSV_Val );
 8006306:	4b9c      	ldr	r3, [pc, #624]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fa f8a2 	bl	8000454 <__aeabi_ui2d>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4999      	ldr	r1, [pc, #612]	; (800657c <Back_Up_VC_CMV_Mode_Task+0x444>)
 8006316:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800631a:	4b91      	ldr	r3, [pc, #580]	; (8006560 <Back_Up_VC_CMV_Mode_Task+0x428>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa f898 	bl	8000454 <__aeabi_ui2d>
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	4b8e      	ldr	r3, [pc, #568]	; (8006564 <Back_Up_VC_CMV_Mode_Task+0x42c>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f7fa f891 	bl	8000454 <__aeabi_ui2d>
 8006332:	4b93      	ldr	r3, [pc, #588]	; (8006580 <Back_Up_VC_CMV_Mode_Task+0x448>)
 8006334:	ed93 7b00 	vldr	d7, [r3]
 8006338:	2300      	movs	r3, #0
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	2301      	movs	r3, #1
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	eeb0 2a47 	vmov.f32	s4, s14
 8006344:	eef0 2a67 	vmov.f32	s5, s15
 8006348:	ec41 0b11 	vmov	d1, r0, r1
 800634c:	ec45 4b10 	vmov	d0, r4, r5
 8006350:	4b8a      	ldr	r3, [pc, #552]	; (800657c <Back_Up_VC_CMV_Mode_Task+0x444>)
 8006352:	4a8c      	ldr	r2, [pc, #560]	; (8006584 <Back_Up_VC_CMV_Mode_Task+0x44c>)
 8006354:	498c      	ldr	r1, [pc, #560]	; (8006588 <Back_Up_VC_CMV_Mode_Task+0x450>)
 8006356:	4880      	ldr	r0, [pc, #512]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 8006358:	f00e fa22 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800635c:	2101      	movs	r1, #1
 800635e:	487e      	ldr	r0, [pc, #504]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 8006360:	f00e fb54 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 8006364:	4b89      	ldr	r3, [pc, #548]	; (800658c <Back_Up_VC_CMV_Mode_Task+0x454>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	487b      	ldr	r0, [pc, #492]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 800636c:	f00e fcca 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8006370:	4b87      	ldr	r3, [pc, #540]	; (8006590 <Back_Up_VC_CMV_Mode_Task+0x458>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa f86d 	bl	8000454 <__aeabi_ui2d>
 800637a:	4604      	mov	r4, r0
 800637c:	460d      	mov	r5, r1
 800637e:	4b85      	ldr	r3, [pc, #532]	; (8006594 <Back_Up_VC_CMV_Mode_Task+0x45c>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa f866 	bl	8000454 <__aeabi_ui2d>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	ec43 2b11 	vmov	d1, r2, r3
 8006390:	ec45 4b10 	vmov	d0, r4, r5
 8006394:	4870      	ldr	r0, [pc, #448]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 8006396:	f00e fb57 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 800639a:	4b7f      	ldr	r3, [pc, #508]	; (8006598 <Back_Up_VC_CMV_Mode_Task+0x460>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 80063a0:	4b7e      	ldr	r3, [pc, #504]	; (800659c <Back_Up_VC_CMV_Mode_Task+0x464>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 80063a6:	4b7e      	ldr	r3, [pc, #504]	; (80065a0 <Back_Up_VC_CMV_Mode_Task+0x468>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
										P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 80063ac:	4b72      	ldr	r3, [pc, #456]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 80063ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80063b0:	461a      	mov	r2, r3
 80063b2:	0152      	lsls	r2, r2, #5
 80063b4:	1ad2      	subs	r2, r2, r3
 80063b6:	0092      	lsls	r2, r2, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	b29a      	uxth	r2, r3
 80063be:	4b6e      	ldr	r3, [pc, #440]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 80063c0:	849a      	strh	r2, [r3, #36]	; 0x24
										P1._Apnea_counter_trigger_check_time=3000;
 80063c2:	4b6d      	ldr	r3, [pc, #436]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 80063c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80063c8:	809a      	strh	r2, [r3, #4]
										Trigger=1;
 80063ca:	4b76      	ldr	r3, [pc, #472]	; (80065a4 <Back_Up_VC_CMV_Mode_Task+0x46c>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
										now_update=2;
 80063d0:	4b75      	ldr	r3, [pc, #468]	; (80065a8 <Back_Up_VC_CMV_Mode_Task+0x470>)
 80063d2:	2202      	movs	r2, #2
 80063d4:	601a      	str	r2, [r3, #0]
										D4._DAC_VAL0=0;
 80063d6:	4b75      	ldr	r3, [pc, #468]	; (80065ac <Back_Up_VC_CMV_Mode_Task+0x474>)
 80063d8:	2200      	movs	r2, #0
 80063da:	811a      	strh	r2, [r3, #8]
										P1.Apnea_Mode=1;
 80063dc:	4b66      	ldr	r3, [pc, #408]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										_I_TIMER = D2._I_TIMER_HOLD;
 80063e4:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <Back_Up_VC_CMV_Mode_Task+0x478>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a72      	ldr	r2, [pc, #456]	; (80065b4 <Back_Up_VC_CMV_Mode_Task+0x47c>)
 80063ea:	6013      	str	r3, [r2, #0]
										Parkar_valve_Signal(0);
 80063ec:	4b72      	ldr	r3, [pc, #456]	; (80065b8 <Back_Up_VC_CMV_Mode_Task+0x480>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	615a      	str	r2, [r3, #20]
									  O2.O2_process = 0;
 80063f2:	4b72      	ldr	r3, [pc, #456]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	60da      	str	r2, [r3, #12]
									  O2.Servo=45;
 80063f8:	4b70      	ldr	r3, [pc, #448]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 80063fa:	222d      	movs	r2, #45	; 0x2d
 80063fc:	605a      	str	r2, [r3, #4]
									  Servo_Angle(O2.Servo);
 80063fe:	4b6f      	ldr	r3, [pc, #444]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <Back_Up_VC_CMV_Mode_Task+0x488>)
 8006404:	635a      	str	r2, [r3, #52]	; 0x34
										vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8006406:	4b6f      	ldr	r3, [pc, #444]	; (80065c4 <Back_Up_VC_CMV_Mode_Task+0x48c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f019 fa62 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(Psv_Pid_Handler);
 8006410:	4b6d      	ldr	r3, [pc, #436]	; (80065c8 <Back_Up_VC_CMV_Mode_Task+0x490>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f019 fb21 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 800641a:	4b6c      	ldr	r3, [pc, #432]	; (80065cc <Back_Up_VC_CMV_Mode_Task+0x494>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f019 fa58 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8006424:	4b6a      	ldr	r3, [pc, #424]	; (80065d0 <Back_Up_VC_CMV_Mode_Task+0x498>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f019 fa53 	bl	801f8d4 <vTaskSuspend>
									if(_CurrentMode==cPAP)
 800642e:	4b46      	ldr	r3, [pc, #280]	; (8006548 <Back_Up_VC_CMV_Mode_Task+0x410>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b07      	cmp	r3, #7
 8006434:	f040 8112 	bne.w	800665c <Back_Up_VC_CMV_Mode_Task+0x524>
										_Control_Byte &= (uint8_t) (~(0x80));
 8006438:	4b44      	ldr	r3, [pc, #272]	; (800654c <Back_Up_VC_CMV_Mode_Task+0x414>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006440:	b2da      	uxtb	r2, r3
 8006442:	4b42      	ldr	r3, [pc, #264]	; (800654c <Back_Up_VC_CMV_Mode_Task+0x414>)
 8006444:	701a      	strb	r2, [r3, #0]
										A.Alert=1;
 8006446:	4b42      	ldr	r3, [pc, #264]	; (8006550 <Back_Up_VC_CMV_Mode_Task+0x418>)
 8006448:	2201      	movs	r2, #1
 800644a:	709a      	strb	r2, [r3, #2]
										A.Red_Led_Alert=0;
 800644c:	4b40      	ldr	r3, [pc, #256]	; (8006550 <Back_Up_VC_CMV_Mode_Task+0x418>)
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										Led_Alert();
 8006454:	f7fc fa46 	bl	80028e4 <Led_Alert>
										P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8006458:	4b47      	ldr	r3, [pc, #284]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 800645a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800645c:	461a      	mov	r2, r3
 800645e:	0152      	lsls	r2, r2, #5
 8006460:	1ad2      	subs	r2, r2, r3
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	4413      	add	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	b29a      	uxth	r2, r3
 800646a:	4b43      	ldr	r3, [pc, #268]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 800646c:	849a      	strh	r2, [r3, #36]	; 0x24
										Trigger=0;
 800646e:	4b4d      	ldr	r3, [pc, #308]	; (80065a4 <Back_Up_VC_CMV_Mode_Task+0x46c>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
										now_update=0;
 8006474:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <Back_Up_VC_CMV_Mode_Task+0x470>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
										D4._DAC_VAL0=0;
 800647a:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <Back_Up_VC_CMV_Mode_Task+0x474>)
 800647c:	2200      	movs	r2, #0
 800647e:	811a      	strh	r2, [r3, #8]
										P1.Apnea_Mode=1;
 8006480:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										P1._Apnea_counter_trigger_check_time = 3000;
 8006488:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 800648a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800648e:	809a      	strh	r2, [r3, #4]
										uwTick=0;
 8006490:	4b30      	ldr	r3, [pc, #192]	; (8006554 <Back_Up_VC_CMV_Mode_Task+0x41c>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 8006496:	4930      	ldr	r1, [pc, #192]	; (8006558 <Back_Up_VC_CMV_Mode_Task+0x420>)
 8006498:	a329      	add	r3, pc, #164	; (adr r3, 8006540 <Back_Up_VC_CMV_Mode_Task+0x408>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 80064a2:	4b2e      	ldr	r3, [pc, #184]	; (800655c <Back_Up_VC_CMV_Mode_Task+0x424>)
 80064a4:	2228      	movs	r2, #40	; 0x28
 80064a6:	601a      	str	r2, [r3, #0]
										kp=5;
 80064a8:	4b2d      	ldr	r3, [pc, #180]	; (8006560 <Back_Up_VC_CMV_Mode_Task+0x428>)
 80064aa:	2205      	movs	r2, #5
 80064ac:	701a      	strb	r2, [r3, #0]
										ki=4;
 80064ae:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <Back_Up_VC_CMV_Mode_Task+0x42c>)
 80064b0:	2204      	movs	r2, #4
 80064b2:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80064b4:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <Back_Up_VC_CMV_Mode_Task+0x430>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 80064ba:	4b2c      	ldr	r3, [pc, #176]	; (800656c <Back_Up_VC_CMV_Mode_Task+0x434>)
 80064bc:	2201      	movs	r2, #1
 80064be:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80064c0:	4b29      	ldr	r3, [pc, #164]	; (8006568 <Back_Up_VC_CMV_Mode_Task+0x430>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 80064c6:	4b2a      	ldr	r3, [pc, #168]	; (8006570 <Back_Up_VC_CMV_Mode_Task+0x438>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 80064cc:	4b29      	ldr	r3, [pc, #164]	; (8006574 <Back_Up_VC_CMV_Mode_Task+0x43c>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
										uwTick=0;                         //new
 80064d2:	4b20      	ldr	r3, [pc, #128]	; (8006554 <Back_Up_VC_CMV_Mode_Task+0x41c>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
										Parkar_valve_Signal(0);
 80064d8:	4b37      	ldr	r3, [pc, #220]	; (80065b8 <Back_Up_VC_CMV_Mode_Task+0x480>)
 80064da:	2200      	movs	r2, #0
 80064dc:	615a      	str	r2, [r3, #20]
									  O2.O2_process = 0;
 80064de:	4b37      	ldr	r3, [pc, #220]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	60da      	str	r2, [r3, #12]
									  O2.Servo=45;
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 80064e6:	222d      	movs	r2, #45	; 0x2d
 80064e8:	605a      	str	r2, [r3, #4]
									  Servo_Angle(O2.Servo);
 80064ea:	4b34      	ldr	r3, [pc, #208]	; (80065bc <Back_Up_VC_CMV_Mode_Task+0x484>)
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <Back_Up_VC_CMV_Mode_Task+0x488>)
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34
										TempSetpoint = (P1.PEEP_CPAP_Val );
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <Back_Up_VC_CMV_Mode_Task+0x440>)
 80064f4:	78db      	ldrb	r3, [r3, #3]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7f9 ffac 	bl	8000454 <__aeabi_ui2d>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	491e      	ldr	r1, [pc, #120]	; (800657c <Back_Up_VC_CMV_Mode_Task+0x444>)
 8006502:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8006506:	4b16      	ldr	r3, [pc, #88]	; (8006560 <Back_Up_VC_CMV_Mode_Task+0x428>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7f9 ffa2 	bl	8000454 <__aeabi_ui2d>
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <Back_Up_VC_CMV_Mode_Task+0x42c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7f9 ff9b 	bl	8000454 <__aeabi_ui2d>
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <Back_Up_VC_CMV_Mode_Task+0x448>)
 8006520:	ed93 7b00 	vldr	d7, [r3]
 8006524:	2300      	movs	r3, #0
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	2301      	movs	r3, #1
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	eeb0 2a47 	vmov.f32	s4, s14
 8006530:	eef0 2a67 	vmov.f32	s5, s15
 8006534:	ec41 0b11 	vmov	d1, r0, r1
 8006538:	e04c      	b.n	80065d4 <Back_Up_VC_CMV_Mode_Task+0x49c>
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	00000000 	.word	0x00000000
 8006544:	4072c000 	.word	0x4072c000
 8006548:	20016c04 	.word	0x20016c04
 800654c:	20016e59 	.word	0x20016e59
 8006550:	20016a2c 	.word	0x20016a2c
 8006554:	20017094 	.word	0x20017094
 8006558:	200169a0 	.word	0x200169a0
 800655c:	20000144 	.word	0x20000144
 8006560:	20000136 	.word	0x20000136
 8006564:	20000137 	.word	0x20000137
 8006568:	2000031c 	.word	0x2000031c
 800656c:	2000011c 	.word	0x2000011c
 8006570:	20000308 	.word	0x20000308
 8006574:	20000320 	.word	0x20000320
 8006578:	20016960 	.word	0x20016960
 800657c:	20016e80 	.word	0x20016e80
 8006580:	20000138 	.word	0x20000138
 8006584:	20016a18 	.word	0x20016a18
 8006588:	20016a98 	.word	0x20016a98
 800658c:	20000140 	.word	0x20000140
 8006590:	2000012e 	.word	0x2000012e
 8006594:	20000130 	.word	0x20000130
 8006598:	20000114 	.word	0x20000114
 800659c:	20000318 	.word	0x20000318
 80065a0:	20000118 	.word	0x20000118
 80065a4:	20016e50 	.word	0x20016e50
 80065a8:	20016b28 	.word	0x20016b28
 80065ac:	20016d50 	.word	0x20016d50
 80065b0:	20016cc0 	.word	0x20016cc0
 80065b4:	20016df0 	.word	0x20016df0
 80065b8:	40007400 	.word	0x40007400
 80065bc:	20000048 	.word	0x20000048
 80065c0:	40001800 	.word	0x40001800
 80065c4:	20016a7c 	.word	0x20016a7c
 80065c8:	20016a74 	.word	0x20016a74
 80065cc:	20016d40 	.word	0x20016d40
 80065d0:	20016d7c 	.word	0x20016d7c
 80065d4:	ec45 4b10 	vmov	d0, r4, r5
 80065d8:	4b93      	ldr	r3, [pc, #588]	; (8006828 <Back_Up_VC_CMV_Mode_Task+0x6f0>)
 80065da:	4a94      	ldr	r2, [pc, #592]	; (800682c <Back_Up_VC_CMV_Mode_Task+0x6f4>)
 80065dc:	4994      	ldr	r1, [pc, #592]	; (8006830 <Back_Up_VC_CMV_Mode_Task+0x6f8>)
 80065de:	4895      	ldr	r0, [pc, #596]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 80065e0:	f00e f8de 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80065e4:	2101      	movs	r1, #1
 80065e6:	4893      	ldr	r0, [pc, #588]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 80065e8:	f00e fa10 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 80065ec:	4b92      	ldr	r3, [pc, #584]	; (8006838 <Back_Up_VC_CMV_Mode_Task+0x700>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	4890      	ldr	r0, [pc, #576]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 80065f4:	f00e fb86 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80065f8:	4b90      	ldr	r3, [pc, #576]	; (800683c <Back_Up_VC_CMV_Mode_Task+0x704>)
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7f9 ff29 	bl	8000454 <__aeabi_ui2d>
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	4b8e      	ldr	r3, [pc, #568]	; (8006840 <Back_Up_VC_CMV_Mode_Task+0x708>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7f9 ff22 	bl	8000454 <__aeabi_ui2d>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	ec43 2b11 	vmov	d1, r2, r3
 8006618:	ec45 4b10 	vmov	d0, r4, r5
 800661c:	4885      	ldr	r0, [pc, #532]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 800661e:	f00e fa13 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 8006622:	4b88      	ldr	r3, [pc, #544]	; (8006844 <Back_Up_VC_CMV_Mode_Task+0x70c>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 8006628:	4b87      	ldr	r3, [pc, #540]	; (8006848 <Back_Up_VC_CMV_Mode_Task+0x710>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 800662e:	4b87      	ldr	r3, [pc, #540]	; (800684c <Back_Up_VC_CMV_Mode_Task+0x714>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]
										vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8006634:	4b86      	ldr	r3, [pc, #536]	; (8006850 <Back_Up_VC_CMV_Mode_Task+0x718>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f019 f94b 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(Cpap_Handler);
 800663e:	4b85      	ldr	r3, [pc, #532]	; (8006854 <Back_Up_VC_CMV_Mode_Task+0x71c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f019 fa0a 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 8006648:	4b83      	ldr	r3, [pc, #524]	; (8006858 <Back_Up_VC_CMV_Mode_Task+0x720>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f019 f941 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8006652:	4b82      	ldr	r3, [pc, #520]	; (800685c <Back_Up_VC_CMV_Mode_Task+0x724>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f019 f93c 	bl	801f8d4 <vTaskSuspend>
								    if(_CurrentMode==BiPAP)
 800665c:	4b80      	ldr	r3, [pc, #512]	; (8006860 <Back_Up_VC_CMV_Mode_Task+0x728>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	f040 83f8 	bne.w	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
								    	_Control_Byte &= (uint8_t) (~(0x80));
 8006666:	4b7f      	ldr	r3, [pc, #508]	; (8006864 <Back_Up_VC_CMV_Mode_Task+0x72c>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	b2da      	uxtb	r2, r3
 8006670:	4b7c      	ldr	r3, [pc, #496]	; (8006864 <Back_Up_VC_CMV_Mode_Task+0x72c>)
 8006672:	701a      	strb	r2, [r3, #0]
								    	A.Alert=1;
 8006674:	4b7c      	ldr	r3, [pc, #496]	; (8006868 <Back_Up_VC_CMV_Mode_Task+0x730>)
 8006676:	2201      	movs	r2, #1
 8006678:	709a      	strb	r2, [r3, #2]
								    	A.Red_Led_Alert=0;
 800667a:	4b7b      	ldr	r3, [pc, #492]	; (8006868 <Back_Up_VC_CMV_Mode_Task+0x730>)
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
								    	Led_Alert();
 8006682:	f7fc f92f 	bl	80028e4 <Led_Alert>
								    	uwTick=0;
 8006686:	4b79      	ldr	r3, [pc, #484]	; (800686c <Back_Up_VC_CMV_Mode_Task+0x734>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 800668c:	4969      	ldr	r1, [pc, #420]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 800668e:	a364      	add	r3, pc, #400	; (adr r3, 8006820 <Back_Up_VC_CMV_Mode_Task+0x6e8>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 8006698:	4b75      	ldr	r3, [pc, #468]	; (8006870 <Back_Up_VC_CMV_Mode_Task+0x738>)
 800669a:	2228      	movs	r2, #40	; 0x28
 800669c:	601a      	str	r2, [r3, #0]
										kp=5;
 800669e:	4b75      	ldr	r3, [pc, #468]	; (8006874 <Back_Up_VC_CMV_Mode_Task+0x73c>)
 80066a0:	2205      	movs	r2, #5
 80066a2:	701a      	strb	r2, [r3, #0]
										ki=4;
 80066a4:	4b74      	ldr	r3, [pc, #464]	; (8006878 <Back_Up_VC_CMV_Mode_Task+0x740>)
 80066a6:	2204      	movs	r2, #4
 80066a8:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80066aa:	4b74      	ldr	r3, [pc, #464]	; (800687c <Back_Up_VC_CMV_Mode_Task+0x744>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 80066b0:	4b73      	ldr	r3, [pc, #460]	; (8006880 <Back_Up_VC_CMV_Mode_Task+0x748>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 80066b6:	4b71      	ldr	r3, [pc, #452]	; (800687c <Back_Up_VC_CMV_Mode_Task+0x744>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 80066bc:	4b71      	ldr	r3, [pc, #452]	; (8006884 <Back_Up_VC_CMV_Mode_Task+0x74c>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 80066c2:	4b71      	ldr	r3, [pc, #452]	; (8006888 <Back_Up_VC_CMV_Mode_Task+0x750>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
										uwTick=0;                         //new
 80066c8:	4b68      	ldr	r3, [pc, #416]	; (800686c <Back_Up_VC_CMV_Mode_Task+0x734>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
										TempSetpoint = (P1.EPAP_Val );
 80066ce:	4b6f      	ldr	r3, [pc, #444]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 80066d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 febd 	bl	8000454 <__aeabi_ui2d>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4952      	ldr	r1, [pc, #328]	; (8006828 <Back_Up_VC_CMV_Mode_Task+0x6f0>)
 80066e0:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80066e4:	4b63      	ldr	r3, [pc, #396]	; (8006874 <Back_Up_VC_CMV_Mode_Task+0x73c>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7f9 feb3 	bl	8000454 <__aeabi_ui2d>
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	4b61      	ldr	r3, [pc, #388]	; (8006878 <Back_Up_VC_CMV_Mode_Task+0x740>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7f9 feac 	bl	8000454 <__aeabi_ui2d>
 80066fc:	4b64      	ldr	r3, [pc, #400]	; (8006890 <Back_Up_VC_CMV_Mode_Task+0x758>)
 80066fe:	ed93 7b00 	vldr	d7, [r3]
 8006702:	2300      	movs	r3, #0
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	2301      	movs	r3, #1
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	eeb0 2a47 	vmov.f32	s4, s14
 800670e:	eef0 2a67 	vmov.f32	s5, s15
 8006712:	ec41 0b11 	vmov	d1, r0, r1
 8006716:	ec45 4b10 	vmov	d0, r4, r5
 800671a:	4b43      	ldr	r3, [pc, #268]	; (8006828 <Back_Up_VC_CMV_Mode_Task+0x6f0>)
 800671c:	4a43      	ldr	r2, [pc, #268]	; (800682c <Back_Up_VC_CMV_Mode_Task+0x6f4>)
 800671e:	4944      	ldr	r1, [pc, #272]	; (8006830 <Back_Up_VC_CMV_Mode_Task+0x6f8>)
 8006720:	4844      	ldr	r0, [pc, #272]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 8006722:	f00e f83d 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8006726:	2101      	movs	r1, #1
 8006728:	4842      	ldr	r0, [pc, #264]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 800672a:	f00e f96f 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <Back_Up_VC_CMV_Mode_Task+0x700>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	483f      	ldr	r0, [pc, #252]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 8006736:	f00e fae5 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800673a:	4b40      	ldr	r3, [pc, #256]	; (800683c <Back_Up_VC_CMV_Mode_Task+0x704>)
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7f9 fe88 	bl	8000454 <__aeabi_ui2d>
 8006744:	4604      	mov	r4, r0
 8006746:	460d      	mov	r5, r1
 8006748:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <Back_Up_VC_CMV_Mode_Task+0x708>)
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f7f9 fe81 	bl	8000454 <__aeabi_ui2d>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	ec43 2b11 	vmov	d1, r2, r3
 800675a:	ec45 4b10 	vmov	d0, r4, r5
 800675e:	4835      	ldr	r0, [pc, #212]	; (8006834 <Back_Up_VC_CMV_Mode_Task+0x6fc>)
 8006760:	f00e f972 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 8006764:	4b37      	ldr	r3, [pc, #220]	; (8006844 <Back_Up_VC_CMV_Mode_Task+0x70c>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 800676a:	4b37      	ldr	r3, [pc, #220]	; (8006848 <Back_Up_VC_CMV_Mode_Task+0x710>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 8006770:	4b36      	ldr	r3, [pc, #216]	; (800684c <Back_Up_VC_CMV_Mode_Task+0x714>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
										Parkar_valve_Signal(0);
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <Back_Up_VC_CMV_Mode_Task+0x75c>)
 8006778:	2200      	movs	r2, #0
 800677a:	615a      	str	r2, [r3, #20]
										  O2.O2_process = 0;
 800677c:	4b46      	ldr	r3, [pc, #280]	; (8006898 <Back_Up_VC_CMV_Mode_Task+0x760>)
 800677e:	2200      	movs	r2, #0
 8006780:	60da      	str	r2, [r3, #12]
										  O2.Servo=45;
 8006782:	4b45      	ldr	r3, [pc, #276]	; (8006898 <Back_Up_VC_CMV_Mode_Task+0x760>)
 8006784:	222d      	movs	r2, #45	; 0x2d
 8006786:	605a      	str	r2, [r3, #4]
										  Servo_Angle(O2.Servo);
 8006788:	4b43      	ldr	r3, [pc, #268]	; (8006898 <Back_Up_VC_CMV_Mode_Task+0x760>)
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b43      	ldr	r3, [pc, #268]	; (800689c <Back_Up_VC_CMV_Mode_Task+0x764>)
 800678e:	635a      	str	r2, [r3, #52]	; 0x34
										P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 8006790:	4b3e      	ldr	r3, [pc, #248]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 8006792:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006794:	461a      	mov	r2, r3
 8006796:	0152      	lsls	r2, r2, #5
 8006798:	1ad2      	subs	r2, r2, r3
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	4413      	add	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	4b3a      	ldr	r3, [pc, #232]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 80067a4:	849a      	strh	r2, [r3, #36]	; 0x24
										P1._Apnea_counter_trigger_check_time = 3000;
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 80067a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80067ac:	809a      	strh	r2, [r3, #4]
										Trigger = 0;
 80067ae:	4b3c      	ldr	r3, [pc, #240]	; (80068a0 <Back_Up_VC_CMV_Mode_Task+0x768>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
										now_update = 0;
 80067b4:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <Back_Up_VC_CMV_Mode_Task+0x76c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
										B4._DAC_VAL0 = 0;
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <Back_Up_VC_CMV_Mode_Task+0x770>)
 80067bc:	2200      	movs	r2, #0
 80067be:	809a      	strh	r2, [r3, #4]
										P1.Apnea_Mode=1;
 80067c0:	4b32      	ldr	r3, [pc, #200]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 80067c8:	4b38      	ldr	r3, [pc, #224]	; (80068ac <Back_Up_VC_CMV_Mode_Task+0x774>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f019 f881 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(BiPap_Handler);
 80067d2:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <Back_Up_VC_CMV_Mode_Task+0x778>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f019 f940 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <Back_Up_VC_CMV_Mode_Task+0x720>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f019 f877 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 80067e6:	4b1d      	ldr	r3, [pc, #116]	; (800685c <Back_Up_VC_CMV_Mode_Task+0x724>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f019 f872 	bl	801f8d4 <vTaskSuspend>
							if(P1._TRIG_TYPE==1)
 80067f0:	e331      	b.n	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
								if((Flow_Sensor_cal._Flow_Val>(P1.simv_trigger_offset2+P1._TRIG_LMT)))
 80067f2:	4b30      	ldr	r3, [pc, #192]	; (80068b4 <Back_Up_VC_CMV_Mode_Task+0x77c>)
 80067f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067fe:	4b23      	ldr	r3, [pc, #140]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 8006800:	edd3 6a06 	vldr	s13, [r3, #24]
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <Back_Up_VC_CMV_Mode_Task+0x754>)
 8006806:	891b      	ldrh	r3, [r3, #8]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681c:	dc4c      	bgt.n	80068b8 <Back_Up_VC_CMV_Mode_Task+0x780>
							if(P1._TRIG_TYPE==1)
 800681e:	e31a      	b.n	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
 8006820:	00000000 	.word	0x00000000
 8006824:	4072c000 	.word	0x4072c000
 8006828:	20016e80 	.word	0x20016e80
 800682c:	20016a18 	.word	0x20016a18
 8006830:	20016a98 	.word	0x20016a98
 8006834:	200169a0 	.word	0x200169a0
 8006838:	20000140 	.word	0x20000140
 800683c:	2000012e 	.word	0x2000012e
 8006840:	20000130 	.word	0x20000130
 8006844:	20000114 	.word	0x20000114
 8006848:	20000318 	.word	0x20000318
 800684c:	20000118 	.word	0x20000118
 8006850:	20016a7c 	.word	0x20016a7c
 8006854:	20016bb8 	.word	0x20016bb8
 8006858:	20016d40 	.word	0x20016d40
 800685c:	20016d7c 	.word	0x20016d7c
 8006860:	20016c04 	.word	0x20016c04
 8006864:	20016e59 	.word	0x20016e59
 8006868:	20016a2c 	.word	0x20016a2c
 800686c:	20017094 	.word	0x20017094
 8006870:	20000144 	.word	0x20000144
 8006874:	20000136 	.word	0x20000136
 8006878:	20000137 	.word	0x20000137
 800687c:	2000031c 	.word	0x2000031c
 8006880:	2000011c 	.word	0x2000011c
 8006884:	20000308 	.word	0x20000308
 8006888:	20000320 	.word	0x20000320
 800688c:	20016960 	.word	0x20016960
 8006890:	20000138 	.word	0x20000138
 8006894:	40007400 	.word	0x40007400
 8006898:	20000048 	.word	0x20000048
 800689c:	40001800 	.word	0x40001800
 80068a0:	20016e50 	.word	0x20016e50
 80068a4:	20016b28 	.word	0x20016b28
 80068a8:	20000004 	.word	0x20000004
 80068ac:	20016d3c 	.word	0x20016d3c
 80068b0:	20016a24 	.word	0x20016a24
 80068b4:	20016c48 	.word	0x20016c48
									if (_CurrentMode == PSV)
 80068b8:	4bad      	ldr	r3, [pc, #692]	; (8006b70 <Back_Up_VC_CMV_Mode_Task+0xa38>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b06      	cmp	r3, #6
 80068be:	f040 80c8 	bne.w	8006a52 <Back_Up_VC_CMV_Mode_Task+0x91a>
										_Control_Byte &= (uint8_t) (~(0x80));
 80068c2:	4bac      	ldr	r3, [pc, #688]	; (8006b74 <Back_Up_VC_CMV_Mode_Task+0xa3c>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	4ba9      	ldr	r3, [pc, #676]	; (8006b74 <Back_Up_VC_CMV_Mode_Task+0xa3c>)
 80068ce:	701a      	strb	r2, [r3, #0]
										A.Alert=1;
 80068d0:	4ba9      	ldr	r3, [pc, #676]	; (8006b78 <Back_Up_VC_CMV_Mode_Task+0xa40>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	709a      	strb	r2, [r3, #2]
										A.Red_Led_Alert=0;
 80068d6:	4ba8      	ldr	r3, [pc, #672]	; (8006b78 <Back_Up_VC_CMV_Mode_Task+0xa40>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										Led_Alert();
 80068de:	f7fc f801 	bl	80028e4 <Led_Alert>
										uwTick=0;
 80068e2:	4ba6      	ldr	r3, [pc, #664]	; (8006b7c <Back_Up_VC_CMV_Mode_Task+0xa44>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 80068e8:	49a5      	ldr	r1, [pc, #660]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 80068ea:	a39f      	add	r3, pc, #636	; (adr r3, 8006b68 <Back_Up_VC_CMV_Mode_Task+0xa30>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 80068f4:	4ba3      	ldr	r3, [pc, #652]	; (8006b84 <Back_Up_VC_CMV_Mode_Task+0xa4c>)
 80068f6:	2228      	movs	r2, #40	; 0x28
 80068f8:	601a      	str	r2, [r3, #0]
										kp=5;
 80068fa:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <Back_Up_VC_CMV_Mode_Task+0xa50>)
 80068fc:	2205      	movs	r2, #5
 80068fe:	701a      	strb	r2, [r3, #0]
										ki=4;
 8006900:	4ba2      	ldr	r3, [pc, #648]	; (8006b8c <Back_Up_VC_CMV_Mode_Task+0xa54>)
 8006902:	2204      	movs	r2, #4
 8006904:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006906:	4ba2      	ldr	r3, [pc, #648]	; (8006b90 <Back_Up_VC_CMV_Mode_Task+0xa58>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 800690c:	4ba1      	ldr	r3, [pc, #644]	; (8006b94 <Back_Up_VC_CMV_Mode_Task+0xa5c>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006912:	4b9f      	ldr	r3, [pc, #636]	; (8006b90 <Back_Up_VC_CMV_Mode_Task+0xa58>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 8006918:	4b9f      	ldr	r3, [pc, #636]	; (8006b98 <Back_Up_VC_CMV_Mode_Task+0xa60>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 800691e:	4b9f      	ldr	r3, [pc, #636]	; (8006b9c <Back_Up_VC_CMV_Mode_Task+0xa64>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
										uwTick=0;                         //new
 8006924:	4b95      	ldr	r3, [pc, #596]	; (8006b7c <Back_Up_VC_CMV_Mode_Task+0xa44>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
										TempSetpoint = (P1.PIP_PSV_Val );
 800692a:	4b9d      	ldr	r3, [pc, #628]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7f9 fd90 	bl	8000454 <__aeabi_ui2d>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	499a      	ldr	r1, [pc, #616]	; (8006ba4 <Back_Up_VC_CMV_Mode_Task+0xa6c>)
 800693a:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800693e:	4b92      	ldr	r3, [pc, #584]	; (8006b88 <Back_Up_VC_CMV_Mode_Task+0xa50>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7f9 fd86 	bl	8000454 <__aeabi_ui2d>
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <Back_Up_VC_CMV_Mode_Task+0xa54>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7f9 fd7f 	bl	8000454 <__aeabi_ui2d>
 8006956:	4b94      	ldr	r3, [pc, #592]	; (8006ba8 <Back_Up_VC_CMV_Mode_Task+0xa70>)
 8006958:	ed93 7b00 	vldr	d7, [r3]
 800695c:	2300      	movs	r3, #0
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	2301      	movs	r3, #1
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	eeb0 2a47 	vmov.f32	s4, s14
 8006968:	eef0 2a67 	vmov.f32	s5, s15
 800696c:	ec41 0b11 	vmov	d1, r0, r1
 8006970:	ec45 4b10 	vmov	d0, r4, r5
 8006974:	4b8b      	ldr	r3, [pc, #556]	; (8006ba4 <Back_Up_VC_CMV_Mode_Task+0xa6c>)
 8006976:	4a8d      	ldr	r2, [pc, #564]	; (8006bac <Back_Up_VC_CMV_Mode_Task+0xa74>)
 8006978:	498d      	ldr	r1, [pc, #564]	; (8006bb0 <Back_Up_VC_CMV_Mode_Task+0xa78>)
 800697a:	4881      	ldr	r0, [pc, #516]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 800697c:	f00d ff10 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8006980:	2101      	movs	r1, #1
 8006982:	487f      	ldr	r0, [pc, #508]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 8006984:	f00e f842 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 8006988:	4b8a      	ldr	r3, [pc, #552]	; (8006bb4 <Back_Up_VC_CMV_Mode_Task+0xa7c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4619      	mov	r1, r3
 800698e:	487c      	ldr	r0, [pc, #496]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 8006990:	f00e f9b8 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8006994:	4b88      	ldr	r3, [pc, #544]	; (8006bb8 <Back_Up_VC_CMV_Mode_Task+0xa80>)
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7f9 fd5b 	bl	8000454 <__aeabi_ui2d>
 800699e:	4604      	mov	r4, r0
 80069a0:	460d      	mov	r5, r1
 80069a2:	4b86      	ldr	r3, [pc, #536]	; (8006bbc <Back_Up_VC_CMV_Mode_Task+0xa84>)
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7f9 fd54 	bl	8000454 <__aeabi_ui2d>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	ec43 2b11 	vmov	d1, r2, r3
 80069b4:	ec45 4b10 	vmov	d0, r4, r5
 80069b8:	4871      	ldr	r0, [pc, #452]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 80069ba:	f00e f845 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 80069be:	4b80      	ldr	r3, [pc, #512]	; (8006bc0 <Back_Up_VC_CMV_Mode_Task+0xa88>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 80069c4:	4b7f      	ldr	r3, [pc, #508]	; (8006bc4 <Back_Up_VC_CMV_Mode_Task+0xa8c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 80069ca:	4b7f      	ldr	r3, [pc, #508]	; (8006bc8 <Back_Up_VC_CMV_Mode_Task+0xa90>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
										P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 80069d0:	4b73      	ldr	r3, [pc, #460]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 80069d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80069d4:	461a      	mov	r2, r3
 80069d6:	0152      	lsls	r2, r2, #5
 80069d8:	1ad2      	subs	r2, r2, r3
 80069da:	0092      	lsls	r2, r2, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	4b6f      	ldr	r3, [pc, #444]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 80069e4:	849a      	strh	r2, [r3, #36]	; 0x24
										P1._Apnea_counter_trigger_check_time = 3000;
 80069e6:	4b6e      	ldr	r3, [pc, #440]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 80069e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80069ec:	809a      	strh	r2, [r3, #4]
										Trigger = 1;
 80069ee:	4b77      	ldr	r3, [pc, #476]	; (8006bcc <Back_Up_VC_CMV_Mode_Task+0xa94>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
										now_update = 2;
 80069f4:	4b76      	ldr	r3, [pc, #472]	; (8006bd0 <Back_Up_VC_CMV_Mode_Task+0xa98>)
 80069f6:	2202      	movs	r2, #2
 80069f8:	601a      	str	r2, [r3, #0]
										D4._DAC_VAL0 = 0;
 80069fa:	4b76      	ldr	r3, [pc, #472]	; (8006bd4 <Back_Up_VC_CMV_Mode_Task+0xa9c>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	811a      	strh	r2, [r3, #8]
										P1.Apnea_Mode=1;
 8006a00:	4b67      	ldr	r3, [pc, #412]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										_I_TIMER = D2._I_TIMER_HOLD;
 8006a08:	4b73      	ldr	r3, [pc, #460]	; (8006bd8 <Back_Up_VC_CMV_Mode_Task+0xaa0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a73      	ldr	r2, [pc, #460]	; (8006bdc <Back_Up_VC_CMV_Mode_Task+0xaa4>)
 8006a0e:	6013      	str	r3, [r2, #0]
										Parkar_valve_Signal(0);
 8006a10:	4b73      	ldr	r3, [pc, #460]	; (8006be0 <Back_Up_VC_CMV_Mode_Task+0xaa8>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	615a      	str	r2, [r3, #20]
										  O2.O2_process = 0;
 8006a16:	4b73      	ldr	r3, [pc, #460]	; (8006be4 <Back_Up_VC_CMV_Mode_Task+0xaac>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	60da      	str	r2, [r3, #12]
										  O2.Servo=45;
 8006a1c:	4b71      	ldr	r3, [pc, #452]	; (8006be4 <Back_Up_VC_CMV_Mode_Task+0xaac>)
 8006a1e:	222d      	movs	r2, #45	; 0x2d
 8006a20:	605a      	str	r2, [r3, #4]
										  Servo_Angle(O2.Servo);
 8006a22:	4b70      	ldr	r3, [pc, #448]	; (8006be4 <Back_Up_VC_CMV_Mode_Task+0xaac>)
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b70      	ldr	r3, [pc, #448]	; (8006be8 <Back_Up_VC_CMV_Mode_Task+0xab0>)
 8006a28:	635a      	str	r2, [r3, #52]	; 0x34
										vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8006a2a:	4b70      	ldr	r3, [pc, #448]	; (8006bec <Back_Up_VC_CMV_Mode_Task+0xab4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f018 ff50 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(Psv_Pid_Handler);
 8006a34:	4b6e      	ldr	r3, [pc, #440]	; (8006bf0 <Back_Up_VC_CMV_Mode_Task+0xab8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f019 f80f 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 8006a3e:	4b6d      	ldr	r3, [pc, #436]	; (8006bf4 <Back_Up_VC_CMV_Mode_Task+0xabc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f018 ff46 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8006a48:	4b6b      	ldr	r3, [pc, #428]	; (8006bf8 <Back_Up_VC_CMV_Mode_Task+0xac0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f018 ff41 	bl	801f8d4 <vTaskSuspend>
									if (_CurrentMode == cPAP)
 8006a52:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <Back_Up_VC_CMV_Mode_Task+0xa38>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	f040 8112 	bne.w	8006c80 <Back_Up_VC_CMV_Mode_Task+0xb48>
										_Control_Byte &= (uint8_t) (~(0x80));
 8006a5c:	4b45      	ldr	r3, [pc, #276]	; (8006b74 <Back_Up_VC_CMV_Mode_Task+0xa3c>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b43      	ldr	r3, [pc, #268]	; (8006b74 <Back_Up_VC_CMV_Mode_Task+0xa3c>)
 8006a68:	701a      	strb	r2, [r3, #0]
										A.Alert=1;
 8006a6a:	4b43      	ldr	r3, [pc, #268]	; (8006b78 <Back_Up_VC_CMV_Mode_Task+0xa40>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	709a      	strb	r2, [r3, #2]
										A.Red_Led_Alert=0;
 8006a70:	4b41      	ldr	r3, [pc, #260]	; (8006b78 <Back_Up_VC_CMV_Mode_Task+0xa40>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										Led_Alert();
 8006a78:	f7fb ff34 	bl	80028e4 <Led_Alert>
										P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 8006a7c:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006a7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006a80:	461a      	mov	r2, r3
 8006a82:	0152      	lsls	r2, r2, #5
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	0092      	lsls	r2, r2, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	4b44      	ldr	r3, [pc, #272]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006a90:	849a      	strh	r2, [r3, #36]	; 0x24
										Trigger = 0;
 8006a92:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <Back_Up_VC_CMV_Mode_Task+0xa94>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
										now_update = 0;
 8006a98:	4b4d      	ldr	r3, [pc, #308]	; (8006bd0 <Back_Up_VC_CMV_Mode_Task+0xa98>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
										D4._DAC_VAL0 = 0;
 8006a9e:	4b4d      	ldr	r3, [pc, #308]	; (8006bd4 <Back_Up_VC_CMV_Mode_Task+0xa9c>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	811a      	strh	r2, [r3, #8]
										P1.Apnea_Mode=1;
 8006aa4:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										P1._Apnea_counter_trigger_check_time = 3000;
 8006aac:	4b3c      	ldr	r3, [pc, #240]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006aae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006ab2:	809a      	strh	r2, [r3, #4]
										uwTick=0;
 8006ab4:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <Back_Up_VC_CMV_Mode_Task+0xa44>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 8006aba:	4931      	ldr	r1, [pc, #196]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 8006abc:	a32a      	add	r3, pc, #168	; (adr r3, 8006b68 <Back_Up_VC_CMV_Mode_Task+0xa30>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 8006ac6:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <Back_Up_VC_CMV_Mode_Task+0xa4c>)
 8006ac8:	2228      	movs	r2, #40	; 0x28
 8006aca:	601a      	str	r2, [r3, #0]
										kp=5;
 8006acc:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <Back_Up_VC_CMV_Mode_Task+0xa50>)
 8006ace:	2205      	movs	r2, #5
 8006ad0:	701a      	strb	r2, [r3, #0]
										ki=4;
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <Back_Up_VC_CMV_Mode_Task+0xa54>)
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <Back_Up_VC_CMV_Mode_Task+0xa58>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 8006ade:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <Back_Up_VC_CMV_Mode_Task+0xa5c>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <Back_Up_VC_CMV_Mode_Task+0xa58>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 8006aea:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <Back_Up_VC_CMV_Mode_Task+0xa60>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 8006af0:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <Back_Up_VC_CMV_Mode_Task+0xa64>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
										uwTick=0;                        //new
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <Back_Up_VC_CMV_Mode_Task+0xa44>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
										TempSetpoint = (P1.PEEP_CPAP_Val );
 8006afc:	4b28      	ldr	r3, [pc, #160]	; (8006ba0 <Back_Up_VC_CMV_Mode_Task+0xa68>)
 8006afe:	78db      	ldrb	r3, [r3, #3]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7f9 fca7 	bl	8000454 <__aeabi_ui2d>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4926      	ldr	r1, [pc, #152]	; (8006ba4 <Back_Up_VC_CMV_Mode_Task+0xa6c>)
 8006b0c:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8006b10:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <Back_Up_VC_CMV_Mode_Task+0xa50>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7f9 fc9d 	bl	8000454 <__aeabi_ui2d>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <Back_Up_VC_CMV_Mode_Task+0xa54>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7f9 fc96 	bl	8000454 <__aeabi_ui2d>
 8006b28:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <Back_Up_VC_CMV_Mode_Task+0xa70>)
 8006b2a:	ed93 7b00 	vldr	d7, [r3]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	2301      	movs	r3, #1
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	eeb0 2a47 	vmov.f32	s4, s14
 8006b3a:	eef0 2a67 	vmov.f32	s5, s15
 8006b3e:	ec41 0b11 	vmov	d1, r0, r1
 8006b42:	ec45 4b10 	vmov	d0, r4, r5
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <Back_Up_VC_CMV_Mode_Task+0xa6c>)
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <Back_Up_VC_CMV_Mode_Task+0xa74>)
 8006b4a:	4919      	ldr	r1, [pc, #100]	; (8006bb0 <Back_Up_VC_CMV_Mode_Task+0xa78>)
 8006b4c:	480c      	ldr	r0, [pc, #48]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 8006b4e:	f00d fe27 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8006b52:	2101      	movs	r1, #1
 8006b54:	480a      	ldr	r0, [pc, #40]	; (8006b80 <Back_Up_VC_CMV_Mode_Task+0xa48>)
 8006b56:	f00d ff59 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 8006b5a:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <Back_Up_VC_CMV_Mode_Task+0xa7c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	e04c      	b.n	8006bfc <Back_Up_VC_CMV_Mode_Task+0xac4>
 8006b62:	bf00      	nop
 8006b64:	f3af 8000 	nop.w
 8006b68:	00000000 	.word	0x00000000
 8006b6c:	4072c000 	.word	0x4072c000
 8006b70:	20016c04 	.word	0x20016c04
 8006b74:	20016e59 	.word	0x20016e59
 8006b78:	20016a2c 	.word	0x20016a2c
 8006b7c:	20017094 	.word	0x20017094
 8006b80:	200169a0 	.word	0x200169a0
 8006b84:	20000144 	.word	0x20000144
 8006b88:	20000136 	.word	0x20000136
 8006b8c:	20000137 	.word	0x20000137
 8006b90:	2000031c 	.word	0x2000031c
 8006b94:	2000011c 	.word	0x2000011c
 8006b98:	20000308 	.word	0x20000308
 8006b9c:	20000320 	.word	0x20000320
 8006ba0:	20016960 	.word	0x20016960
 8006ba4:	20016e80 	.word	0x20016e80
 8006ba8:	20000138 	.word	0x20000138
 8006bac:	20016a18 	.word	0x20016a18
 8006bb0:	20016a98 	.word	0x20016a98
 8006bb4:	20000140 	.word	0x20000140
 8006bb8:	2000012e 	.word	0x2000012e
 8006bbc:	20000130 	.word	0x20000130
 8006bc0:	20000114 	.word	0x20000114
 8006bc4:	20000318 	.word	0x20000318
 8006bc8:	20000118 	.word	0x20000118
 8006bcc:	20016e50 	.word	0x20016e50
 8006bd0:	20016b28 	.word	0x20016b28
 8006bd4:	20016d50 	.word	0x20016d50
 8006bd8:	20016cc0 	.word	0x20016cc0
 8006bdc:	20016df0 	.word	0x20016df0
 8006be0:	40007400 	.word	0x40007400
 8006be4:	20000048 	.word	0x20000048
 8006be8:	40001800 	.word	0x40001800
 8006bec:	20016a7c 	.word	0x20016a7c
 8006bf0:	20016a74 	.word	0x20016a74
 8006bf4:	20016d40 	.word	0x20016d40
 8006bf8:	20016d7c 	.word	0x20016d7c
 8006bfc:	489e      	ldr	r0, [pc, #632]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006bfe:	f00e f881 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8006c02:	4b9e      	ldr	r3, [pc, #632]	; (8006e7c <Back_Up_VC_CMV_Mode_Task+0xd44>)
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7f9 fc24 	bl	8000454 <__aeabi_ui2d>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460d      	mov	r5, r1
 8006c10:	4b9b      	ldr	r3, [pc, #620]	; (8006e80 <Back_Up_VC_CMV_Mode_Task+0xd48>)
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7f9 fc1d 	bl	8000454 <__aeabi_ui2d>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	ec43 2b11 	vmov	d1, r2, r3
 8006c22:	ec45 4b10 	vmov	d0, r4, r5
 8006c26:	4894      	ldr	r0, [pc, #592]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006c28:	f00d ff0e 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 8006c2c:	4b95      	ldr	r3, [pc, #596]	; (8006e84 <Back_Up_VC_CMV_Mode_Task+0xd4c>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 8006c32:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <Back_Up_VC_CMV_Mode_Task+0xd50>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 8006c38:	4b94      	ldr	r3, [pc, #592]	; (8006e8c <Back_Up_VC_CMV_Mode_Task+0xd54>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
										Parkar_valve_Signal(0);
 8006c3e:	4b94      	ldr	r3, [pc, #592]	; (8006e90 <Back_Up_VC_CMV_Mode_Task+0xd58>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	615a      	str	r2, [r3, #20]
										  O2.O2_process = 0;
 8006c44:	4b93      	ldr	r3, [pc, #588]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	60da      	str	r2, [r3, #12]
										  O2.Servo=45;
 8006c4a:	4b92      	ldr	r3, [pc, #584]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006c4c:	222d      	movs	r2, #45	; 0x2d
 8006c4e:	605a      	str	r2, [r3, #4]
										  Servo_Angle(O2.Servo);
 8006c50:	4b90      	ldr	r3, [pc, #576]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4b90      	ldr	r3, [pc, #576]	; (8006e98 <Back_Up_VC_CMV_Mode_Task+0xd60>)
 8006c56:	635a      	str	r2, [r3, #52]	; 0x34
										vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8006c58:	4b90      	ldr	r3, [pc, #576]	; (8006e9c <Back_Up_VC_CMV_Mode_Task+0xd64>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f018 fe39 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(Cpap_Handler);
 8006c62:	4b8f      	ldr	r3, [pc, #572]	; (8006ea0 <Back_Up_VC_CMV_Mode_Task+0xd68>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f018 fef8 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 8006c6c:	4b8d      	ldr	r3, [pc, #564]	; (8006ea4 <Back_Up_VC_CMV_Mode_Task+0xd6c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f018 fe2f 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8006c76:	4b8c      	ldr	r3, [pc, #560]	; (8006ea8 <Back_Up_VC_CMV_Mode_Task+0xd70>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f018 fe2a 	bl	801f8d4 <vTaskSuspend>
									if(_CurrentMode==BiPAP)
 8006c80:	4b8a      	ldr	r3, [pc, #552]	; (8006eac <Back_Up_VC_CMV_Mode_Task+0xd74>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	f040 80e6 	bne.w	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
										_Control_Byte &= (uint8_t) (~(0x80));
 8006c8a:	4b89      	ldr	r3, [pc, #548]	; (8006eb0 <Back_Up_VC_CMV_Mode_Task+0xd78>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	4b86      	ldr	r3, [pc, #536]	; (8006eb0 <Back_Up_VC_CMV_Mode_Task+0xd78>)
 8006c96:	701a      	strb	r2, [r3, #0]
										A.Alert=1;
 8006c98:	4b86      	ldr	r3, [pc, #536]	; (8006eb4 <Back_Up_VC_CMV_Mode_Task+0xd7c>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	709a      	strb	r2, [r3, #2]
										A.Red_Led_Alert=0;
 8006c9e:	4b85      	ldr	r3, [pc, #532]	; (8006eb4 <Back_Up_VC_CMV_Mode_Task+0xd7c>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										Led_Alert();
 8006ca6:	f7fb fe1d 	bl	80028e4 <Led_Alert>
										uwTick=0;
 8006caa:	4b83      	ldr	r3, [pc, #524]	; (8006eb8 <Back_Up_VC_CMV_Mode_Task+0xd80>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 8006cb0:	4971      	ldr	r1, [pc, #452]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006cb2:	a36f      	add	r3, pc, #444	; (adr r3, 8006e70 <Back_Up_VC_CMV_Mode_Task+0xd38>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
										Speed=40;
 8006cbc:	4b7f      	ldr	r3, [pc, #508]	; (8006ebc <Back_Up_VC_CMV_Mode_Task+0xd84>)
 8006cbe:	2228      	movs	r2, #40	; 0x28
 8006cc0:	601a      	str	r2, [r3, #0]
										kp=5;
 8006cc2:	4b7f      	ldr	r3, [pc, #508]	; (8006ec0 <Back_Up_VC_CMV_Mode_Task+0xd88>)
 8006cc4:	2205      	movs	r2, #5
 8006cc6:	701a      	strb	r2, [r3, #0]
										ki=4;
 8006cc8:	4b7e      	ldr	r3, [pc, #504]	; (8006ec4 <Back_Up_VC_CMV_Mode_Task+0xd8c>)
 8006cca:	2204      	movs	r2, #4
 8006ccc:	701a      	strb	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006cce:	4b7e      	ldr	r3, [pc, #504]	; (8006ec8 <Back_Up_VC_CMV_Mode_Task+0xd90>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
										Apnea_counter_trigger_Flag=1;    //new
 8006cd4:	4b7d      	ldr	r3, [pc, #500]	; (8006ecc <Back_Up_VC_CMV_Mode_Task+0xd94>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
										Alert_Data_send_count=0;         //new
 8006cda:	4b7b      	ldr	r3, [pc, #492]	; (8006ec8 <Back_Up_VC_CMV_Mode_Task+0xd90>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
										Alert_error_count=0;             //new
 8006ce0:	4b7b      	ldr	r3, [pc, #492]	; (8006ed0 <Back_Up_VC_CMV_Mode_Task+0xd98>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
										Dac_control_count=0;             //new
 8006ce6:	4b7b      	ldr	r3, [pc, #492]	; (8006ed4 <Back_Up_VC_CMV_Mode_Task+0xd9c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
										uwTick=0;                         //new
 8006cec:	4b72      	ldr	r3, [pc, #456]	; (8006eb8 <Back_Up_VC_CMV_Mode_Task+0xd80>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
										TempSetpoint = (P1.EPAP_Val );
 8006cf2:	4b79      	ldr	r3, [pc, #484]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006cf4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fbab 	bl	8000454 <__aeabi_ui2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4976      	ldr	r1, [pc, #472]	; (8006edc <Back_Up_VC_CMV_Mode_Task+0xda4>)
 8006d04:	e9c1 2300 	strd	r2, r3, [r1]
										PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8006d08:	4b6d      	ldr	r3, [pc, #436]	; (8006ec0 <Back_Up_VC_CMV_Mode_Task+0xd88>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7f9 fba1 	bl	8000454 <__aeabi_ui2d>
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	4b6b      	ldr	r3, [pc, #428]	; (8006ec4 <Back_Up_VC_CMV_Mode_Task+0xd8c>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fb9a 	bl	8000454 <__aeabi_ui2d>
 8006d20:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <Back_Up_VC_CMV_Mode_Task+0xda8>)
 8006d22:	ed93 7b00 	vldr	d7, [r3]
 8006d26:	2300      	movs	r3, #0
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	eeb0 2a47 	vmov.f32	s4, s14
 8006d32:	eef0 2a67 	vmov.f32	s5, s15
 8006d36:	ec41 0b11 	vmov	d1, r0, r1
 8006d3a:	ec45 4b10 	vmov	d0, r4, r5
 8006d3e:	4b67      	ldr	r3, [pc, #412]	; (8006edc <Back_Up_VC_CMV_Mode_Task+0xda4>)
 8006d40:	4a68      	ldr	r2, [pc, #416]	; (8006ee4 <Back_Up_VC_CMV_Mode_Task+0xdac>)
 8006d42:	4969      	ldr	r1, [pc, #420]	; (8006ee8 <Back_Up_VC_CMV_Mode_Task+0xdb0>)
 8006d44:	484c      	ldr	r0, [pc, #304]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006d46:	f00d fd2b 	bl	80147a0 <PID>
										PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	484a      	ldr	r0, [pc, #296]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006d4e:	f00d fe5d 	bl	8014a0c <PID_SetMode>
										PID_SetSampleTime(&TPID, Time);
 8006d52:	4b66      	ldr	r3, [pc, #408]	; (8006eec <Back_Up_VC_CMV_Mode_Task+0xdb4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4619      	mov	r1, r3
 8006d58:	4847      	ldr	r0, [pc, #284]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006d5a:	f00d ffd3 	bl	8014d04 <PID_SetSampleTime>
										PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8006d5e:	4b47      	ldr	r3, [pc, #284]	; (8006e7c <Back_Up_VC_CMV_Mode_Task+0xd44>)
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7f9 fb76 	bl	8000454 <__aeabi_ui2d>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	4b44      	ldr	r3, [pc, #272]	; (8006e80 <Back_Up_VC_CMV_Mode_Task+0xd48>)
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7f9 fb6f 	bl	8000454 <__aeabi_ui2d>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	ec43 2b11 	vmov	d1, r2, r3
 8006d7e:	ec45 4b10 	vmov	d0, r4, r5
 8006d82:	483d      	ldr	r0, [pc, #244]	; (8006e78 <Back_Up_VC_CMV_Mode_Task+0xd40>)
 8006d84:	f00d fe60 	bl	8014a48 <PID_SetOutputLimits>
										pressure_acheived=1;
 8006d88:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <Back_Up_VC_CMV_Mode_Task+0xd4c>)
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
										Alert_Status_count=0;
 8006d8e:	4b3e      	ldr	r3, [pc, #248]	; (8006e88 <Back_Up_VC_CMV_Mode_Task+0xd50>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
										Wait_Dac=1;
 8006d94:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <Back_Up_VC_CMV_Mode_Task+0xd54>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
										P1._APNEA_COUNTER = (1000 * P1._APNEA_TIME);
 8006d9a:	4b4f      	ldr	r3, [pc, #316]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006d9c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006d9e:	461a      	mov	r2, r3
 8006da0:	0152      	lsls	r2, r2, #5
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	0092      	lsls	r2, r2, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	4b4a      	ldr	r3, [pc, #296]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006dae:	849a      	strh	r2, [r3, #36]	; 0x24
										P1._Apnea_counter_trigger_check_time = 3000;
 8006db0:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006db2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006db6:	809a      	strh	r2, [r3, #4]
										Trigger = 0;
 8006db8:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <Back_Up_VC_CMV_Mode_Task+0xdb8>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
										now_update = 0;
 8006dbe:	4b4d      	ldr	r3, [pc, #308]	; (8006ef4 <Back_Up_VC_CMV_Mode_Task+0xdbc>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
										B4._DAC_VAL0 = 0;
 8006dc4:	4b4c      	ldr	r3, [pc, #304]	; (8006ef8 <Back_Up_VC_CMV_Mode_Task+0xdc0>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	809a      	strh	r2, [r3, #4]
										P1.Apnea_Mode=1;
 8006dca:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
										Parkar_valve_Signal(0);
 8006dd2:	4b2f      	ldr	r3, [pc, #188]	; (8006e90 <Back_Up_VC_CMV_Mode_Task+0xd58>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	615a      	str	r2, [r3, #20]
										  O2.O2_process = 0;
 8006dd8:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	60da      	str	r2, [r3, #12]
										  O2.Servo=45;
 8006dde:	4b2d      	ldr	r3, [pc, #180]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006de0:	222d      	movs	r2, #45	; 0x2d
 8006de2:	605a      	str	r2, [r3, #4]
										  Servo_Angle(O2.Servo);
 8006de4:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <Back_Up_VC_CMV_Mode_Task+0xd5c>)
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <Back_Up_VC_CMV_Mode_Task+0xd60>)
 8006dea:	635a      	str	r2, [r3, #52]	; 0x34
										vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <Back_Up_VC_CMV_Mode_Task+0xd64>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f018 fd6f 	bl	801f8d4 <vTaskSuspend>
										vTaskResume(BiPap_Handler);
 8006df6:	4b41      	ldr	r3, [pc, #260]	; (8006efc <Back_Up_VC_CMV_Mode_Task+0xdc4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f018 fe2e 	bl	801fa5c <vTaskResume>
										vTaskSuspend(One_Time_Handler);
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <Back_Up_VC_CMV_Mode_Task+0xd6c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f018 fd65 	bl	801f8d4 <vTaskSuspend>
										vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8006e0a:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <Back_Up_VC_CMV_Mode_Task+0xd70>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f018 fd60 	bl	801f8d4 <vTaskSuspend>
							if(P1._TRIG_TYPE==1)
 8006e14:	e01f      	b.n	8006e56 <Back_Up_VC_CMV_Mode_Task+0xd1e>
									if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8006e16:	4b3a      	ldr	r3, [pc, #232]	; (8006f00 <Back_Up_VC_CMV_Mode_Task+0xdc8>)
 8006e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <Back_Up_VC_CMV_Mode_Task+0xcf8>
 8006e1e:	4b38      	ldr	r3, [pc, #224]	; (8006f00 <Back_Up_VC_CMV_Mode_Task+0xdc8>)
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	f113 0f08 	cmn.w	r3, #8
 8006e26:	db1c      	blt.n	8006e62 <Back_Up_VC_CMV_Mode_Task+0xd2a>
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <Back_Up_VC_CMV_Mode_Task+0xdc8>)
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da18      	bge.n	8006e62 <Back_Up_VC_CMV_Mode_Task+0xd2a>
										P1.simv_trigger_offset=Pressure_sensor._Pressure_Val;
 8006e30:	4b34      	ldr	r3, [pc, #208]	; (8006f04 <Back_Up_VC_CMV_Mode_Task+0xdcc>)
 8006e32:	791b      	ldrb	r3, [r3, #4]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3c:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006e3e:	edc3 7a05 	vstr	s15, [r3, #20]
										P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 8006e42:	4b2f      	ldr	r3, [pc, #188]	; (8006f00 <Back_Up_VC_CMV_Mode_Task+0xdc8>)
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e4e:	4b22      	ldr	r3, [pc, #136]	; (8006ed8 <Back_Up_VC_CMV_Mode_Task+0xda0>)
 8006e50:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8006e54:	e005      	b.n	8006e62 <Back_Up_VC_CMV_Mode_Task+0xd2a>
							if(P1._TRIG_TYPE==1)
 8006e56:	bf00      	nop
				break;
 8006e58:	e003      	b.n	8006e62 <Back_Up_VC_CMV_Mode_Task+0xd2a>
				break;
 8006e5a:	bf00      	nop
 8006e5c:	e002      	b.n	8006e64 <Back_Up_VC_CMV_Mode_Task+0xd2c>
				break;
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <Back_Up_VC_CMV_Mode_Task+0xd2c>
				break;
 8006e62:	bf00      	nop


		}

		vTaskDelay(2);
 8006e64:	2002      	movs	r0, #2
 8006e66:	f018 fd01 	bl	801f86c <vTaskDelay>
		switch (_CurrentComputationState)
 8006e6a:	f7ff b969 	b.w	8006140 <Back_Up_VC_CMV_Mode_Task+0x8>
 8006e6e:	bf00      	nop
 8006e70:	00000000 	.word	0x00000000
 8006e74:	4072c000 	.word	0x4072c000
 8006e78:	200169a0 	.word	0x200169a0
 8006e7c:	2000012e 	.word	0x2000012e
 8006e80:	20000130 	.word	0x20000130
 8006e84:	20000114 	.word	0x20000114
 8006e88:	20000318 	.word	0x20000318
 8006e8c:	20000118 	.word	0x20000118
 8006e90:	40007400 	.word	0x40007400
 8006e94:	20000048 	.word	0x20000048
 8006e98:	40001800 	.word	0x40001800
 8006e9c:	20016a7c 	.word	0x20016a7c
 8006ea0:	20016bb8 	.word	0x20016bb8
 8006ea4:	20016d40 	.word	0x20016d40
 8006ea8:	20016d7c 	.word	0x20016d7c
 8006eac:	20016c04 	.word	0x20016c04
 8006eb0:	20016e59 	.word	0x20016e59
 8006eb4:	20016a2c 	.word	0x20016a2c
 8006eb8:	20017094 	.word	0x20017094
 8006ebc:	20000144 	.word	0x20000144
 8006ec0:	20000136 	.word	0x20000136
 8006ec4:	20000137 	.word	0x20000137
 8006ec8:	2000031c 	.word	0x2000031c
 8006ecc:	2000011c 	.word	0x2000011c
 8006ed0:	20000308 	.word	0x20000308
 8006ed4:	20000320 	.word	0x20000320
 8006ed8:	20016960 	.word	0x20016960
 8006edc:	20016e80 	.word	0x20016e80
 8006ee0:	20000138 	.word	0x20000138
 8006ee4:	20016a18 	.word	0x20016a18
 8006ee8:	20016a98 	.word	0x20016a98
 8006eec:	20000140 	.word	0x20000140
 8006ef0:	20016e50 	.word	0x20016e50
 8006ef4:	20016b28 	.word	0x20016b28
 8006ef8:	20000004 	.word	0x20000004
 8006efc:	20016a24 	.word	0x20016a24
 8006f00:	20016c48 	.word	0x20016c48
 8006f04:	20016cfc 	.word	0x20016cfc

08006f08 <PID_Back_Up_VC_CMV_Mode_Task>:
}



void PID_Back_Up_VC_CMV_Mode_Task(void *argument)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(S1._Mode_Val == 11 )
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <PID_Back_Up_VC_CMV_Mode_Task+0x70>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b0b      	cmp	r3, #11
 8006f16:	d128      	bne.n	8006f6a <PID_Back_Up_VC_CMV_Mode_Task+0x62>
		{
			if(_CurrentComputationState==Compute_I_Wave)
 8006f18:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <PID_Back_Up_VC_CMV_Mode_Task+0x74>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <PID_Back_Up_VC_CMV_Mode_Task+0x32>
			{
				if(O2._FIO2_Val==100)
 8006f20:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <PID_Back_Up_VC_CMV_Mode_Task+0x78>)
 8006f22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006f26:	2b64      	cmp	r3, #100	; 0x64
 8006f28:	d104      	bne.n	8006f34 <PID_Back_Up_VC_CMV_Mode_Task+0x2c>
				{
					D4._DAC_VAL0=400;
 8006f2a:	4b16      	ldr	r3, [pc, #88]	; (8006f84 <PID_Back_Up_VC_CMV_Mode_Task+0x7c>)
 8006f2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f30:	811a      	strh	r2, [r3, #8]
 8006f32:	e01a      	b.n	8006f6a <PID_Back_Up_VC_CMV_Mode_Task+0x62>
				}
				else
				{
					volume_task_BACKUP_SIMV();
 8006f34:	f000 f82e 	bl	8006f94 <volume_task_BACKUP_SIMV>
 8006f38:	e017      	b.n	8006f6a <PID_Back_Up_VC_CMV_Mode_Task+0x62>
				}

			}
			else if(_CurrentComputationState==Compute_E_Wave)
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <PID_Back_Up_VC_CMV_Mode_Task+0x74>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d113      	bne.n	8006f6a <PID_Back_Up_VC_CMV_Mode_Task+0x62>
			{
				if(Ach_vol==1)
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <PID_Back_Up_VC_CMV_Mode_Task+0x80>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10c      	bne.n	8006f64 <PID_Back_Up_VC_CMV_Mode_Task+0x5c>
				{
					Acheived_Volume=vol.Volume;
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <PID_Back_Up_VC_CMV_Mode_Task+0x84>)
 8006f4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f54:	ee17 3a90 	vmov	r3, s15
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <PID_Back_Up_VC_CMV_Mode_Task+0x88>)
 8006f5c:	801a      	strh	r2, [r3, #0]
					Ach_vol=0;
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <PID_Back_Up_VC_CMV_Mode_Task+0x80>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
				}
				D4._DAC_VAL0=0;
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <PID_Back_Up_VC_CMV_Mode_Task+0x7c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	811a      	strh	r2, [r3, #8]
			}
		}
			vTaskDelay(D4.PID_task_delay);
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <PID_Back_Up_VC_CMV_Mode_Task+0x7c>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f018 fc7c 	bl	801f86c <vTaskDelay>
		if(S1._Mode_Val == 11 )
 8006f74:	e7cc      	b.n	8006f10 <PID_Back_Up_VC_CMV_Mode_Task+0x8>
 8006f76:	bf00      	nop
 8006f78:	20016ae0 	.word	0x20016ae0
 8006f7c:	20016cc8 	.word	0x20016cc8
 8006f80:	20000048 	.word	0x20000048
 8006f84:	20016d50 	.word	0x20016d50
 8006f88:	20016ed8 	.word	0x20016ed8
 8006f8c:	20016d44 	.word	0x20016d44
 8006f90:	20016ad8 	.word	0x20016ad8

08006f94 <volume_task_BACKUP_SIMV>:




void volume_task_BACKUP_SIMV()
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0

	        	if(_CurrentComputationState==Compute_I_Wave)
 8006f98:	4b34      	ldr	r3, [pc, #208]	; (800706c <volume_task_BACKUP_SIMV+0xd8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d162      	bne.n	8007066 <volume_task_BACKUP_SIMV+0xd2>
				{

					if(vol.Volume<(D1._VT_Val-check_dev))
 8006fa0:	4b33      	ldr	r3, [pc, #204]	; (8007070 <volume_task_BACKUP_SIMV+0xdc>)
 8006fa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8006fa6:	4b33      	ldr	r3, [pc, #204]	; (8007074 <volume_task_BACKUP_SIMV+0xe0>)
 8006fa8:	8a9b      	ldrh	r3, [r3, #20]
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b32      	ldr	r3, [pc, #200]	; (8007078 <volume_task_BACKUP_SIMV+0xe4>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc2:	d540      	bpl.n	8007046 <volume_task_BACKUP_SIMV+0xb2>
					{


					 if(D3.volume_reached==0)
 8006fc4:	4b2d      	ldr	r3, [pc, #180]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d14c      	bne.n	8007066 <volume_task_BACKUP_SIMV+0xd2>
					 {
						//if(D3.constant_dac_done==0)
				        //{
								D4._DAC_VAL0=D4.temp_dac+3;
 8006fcc:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fce:	889b      	ldrh	r3, [r3, #4]
 8006fd0:	3303      	adds	r3, #3
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	4b2a      	ldr	r3, [pc, #168]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fd6:	811a      	strh	r2, [r3, #8]
								D4.temp_dac=D4._DAC_VAL0;
 8006fd8:	4b29      	ldr	r3, [pc, #164]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fda:	891a      	ldrh	r2, [r3, #8]
 8006fdc:	4b28      	ldr	r3, [pc, #160]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fde:	809a      	strh	r2, [r3, #4]
							    if(D4._DAC_VAL0>4094)
 8006fe0:	4b27      	ldr	r3, [pc, #156]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fe2:	891b      	ldrh	r3, [r3, #8]
 8006fe4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d903      	bls.n	8006ff4 <volume_task_BACKUP_SIMV+0x60>
							    {
							    	D4._DAC_VAL0=4094;
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8006fee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006ff2:	811a      	strh	r2, [r3, #8]
							    }
				        //}

						  if(Flow_Sensor_cal._Flow_Val>=D1._Flow_Rate)
 8006ff4:	4b23      	ldr	r3, [pc, #140]	; (8007084 <volume_task_BACKUP_SIMV+0xf0>)
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <volume_task_BACKUP_SIMV+0xe0>)
 8006ffa:	8a12      	ldrh	r2, [r2, #16]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	db13      	blt.n	8007028 <volume_task_BACKUP_SIMV+0x94>
						  {

							      D3.max_flow_acheived=1;
 8007000:	4b1e      	ldr	r3, [pc, #120]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
								  D3.Reached_flow_val=Flow_Sensor_cal._Flow_Val;
 8007006:	4b1f      	ldr	r3, [pc, #124]	; (8007084 <volume_task_BACKUP_SIMV+0xf0>)
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	4a1c      	ldr	r2, [pc, #112]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 800700c:	6093      	str	r3, [r2, #8]
								  D3.constant_dac_done=0;
 800700e:	4b1b      	ldr	r3, [pc, #108]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 8007010:	2200      	movs	r2, #0
 8007012:	605a      	str	r2, [r3, #4]
								  if(Flow_Sensor_cal._Flow_Val>D4.F_max)
 8007014:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <volume_task_BACKUP_SIMV+0xf0>)
 8007016:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	dd03      	ble.n	8007028 <volume_task_BACKUP_SIMV+0x94>
								  {
									  D4.F_max=Flow_Sensor_cal._Flow_Val;
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <volume_task_BACKUP_SIMV+0xf0>)
 8007022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8007026:	6013      	str	r3, [r2, #0]




						  }
						  if(Flow_Sensor_cal._Flow_Val<D1._Flow_Rate)
 8007028:	4b16      	ldr	r3, [pc, #88]	; (8007084 <volume_task_BACKUP_SIMV+0xf0>)
 800702a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702c:	4a11      	ldr	r2, [pc, #68]	; (8007074 <volume_task_BACKUP_SIMV+0xe0>)
 800702e:	8a12      	ldrh	r2, [r2, #16]
 8007030:	4293      	cmp	r3, r2
 8007032:	da18      	bge.n	8007066 <volume_task_BACKUP_SIMV+0xd2>
						  {

							    if(D3.constant_dac_done==1)
 8007034:	4b11      	ldr	r3, [pc, #68]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d114      	bne.n	8007066 <volume_task_BACKUP_SIMV+0xd2>
							    {
							    	D4._DAC_VAL0=D4.temp_dac;
 800703c:	4b10      	ldr	r3, [pc, #64]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 800703e:	889a      	ldrh	r2, [r3, #4]
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8007042:	811a      	strh	r2, [r3, #8]

					}

				}

}
 8007044:	e00f      	b.n	8007066 <volume_task_BACKUP_SIMV+0xd2>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8007046:	2200      	movs	r2, #0
 8007048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800704c:	480e      	ldr	r0, [pc, #56]	; (8007088 <volume_task_BACKUP_SIMV+0xf4>)
 800704e:	f00f fe29 	bl	8016ca4 <HAL_GPIO_WritePin>
						D3.volume_reached=1;
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <volume_task_BACKUP_SIMV+0xe8>)
 8007054:	2201      	movs	r2, #1
 8007056:	615a      	str	r2, [r3, #20]
						D4._DAC_VAL0=0;
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 800705a:	2200      	movs	r2, #0
 800705c:	811a      	strh	r2, [r3, #8]
						D4.temp_dac=D4.temp_dac_new;
 800705e:	4b08      	ldr	r3, [pc, #32]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8007060:	88da      	ldrh	r2, [r3, #6]
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <volume_task_BACKUP_SIMV+0xec>)
 8007064:	809a      	strh	r2, [r3, #4]
}
 8007066:	bf00      	nop
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20016cc8 	.word	0x20016cc8
 8007070:	20016d44 	.word	0x20016d44
 8007074:	20016e90 	.word	0x20016e90
 8007078:	20016bd4 	.word	0x20016bd4
 800707c:	2001689c 	.word	0x2001689c
 8007080:	20016d50 	.word	0x20016d50
 8007084:	20016c48 	.word	0x20016c48
 8007088:	40020400 	.word	0x40020400

0800708c <BACKUP_VC_SIMV_Pulse_I_Parameter>:


void BACKUP_VC_SIMV_Pulse_I_Parameter()
{
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	af00      	add	r7, sp, #0
	P1._TOLERANCE_EWAVE = D2._E_TIMER_HOLD - S5.Lock_delay  ;
 8007090:	4b89      	ldr	r3, [pc, #548]	; (80072b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x22c>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	b29a      	uxth	r2, r3
 8007096:	4b89      	ldr	r3, [pc, #548]	; (80072bc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x230>)
 8007098:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	b29a      	uxth	r2, r3
 800709e:	4b88      	ldr	r3, [pc, #544]	; (80072c0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x234>)
 80070a0:	81da      	strh	r2, [r3, #14]
	P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 80070a2:	4b87      	ldr	r3, [pc, #540]	; (80072c0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x234>)
 80070a4:	89db      	ldrh	r3, [r3, #14]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7f9 f9e4 	bl	8000474 <__aeabi_i2d>
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	4b83      	ldr	r3, [pc, #524]	; (80072c0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x234>)
 80070b2:	895b      	ldrh	r3, [r3, #10]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070bc:	ee17 0a90 	vmov	r0, s15
 80070c0:	f7f9 f9ea 	bl	8000498 <__aeabi_f2d>
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	4b7e      	ldr	r3, [pc, #504]	; (80072c4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x238>)
 80070ca:	f7f9 fa3d 	bl	8000548 <__aeabi_dmul>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4610      	mov	r0, r2
 80070d4:	4619      	mov	r1, r3
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x23c>)
 80070dc:	f7f9 fb5e 	bl	800079c <__aeabi_ddiv>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 fa2e 	bl	8000548 <__aeabi_dmul>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7f9 fcea 	bl	8000acc <__aeabi_d2uiz>
 80070f8:	4603      	mov	r3, r0
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	4b70      	ldr	r3, [pc, #448]	; (80072c0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x234>)
 80070fe:	821a      	strh	r2, [r3, #16]

	now_check_breath=1;
 8007100:	4b72      	ldr	r3, [pc, #456]	; (80072cc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x240>)
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
	_Control_Byte &= (uint8_t) (~(0x80));
 8007106:	4b72      	ldr	r3, [pc, #456]	; (80072d0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x244>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710e:	b2da      	uxtb	r2, r3
 8007110:	4b6f      	ldr	r3, [pc, #444]	; (80072d0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x244>)
 8007112:	701a      	strb	r2, [r3, #0]
	vol.Volume = 0;
 8007114:	4b6f      	ldr	r3, [pc, #444]	; (80072d4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x248>)
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	605a      	str	r2, [r3, #4]
    V_max=0;
 800711c:	4b6e      	ldr	r3, [pc, #440]	; (80072d8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x24c>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8007122:	2201      	movs	r2, #1
 8007124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007128:	486c      	ldr	r0, [pc, #432]	; (80072dc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x250>)
 800712a:	f00f fdbb 	bl	8016ca4 <HAL_GPIO_WritePin>
	_I_TIMER_ACHEIVED = 0;
 800712e:	4b6c      	ldr	r3, [pc, #432]	; (80072e0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x254>)
 8007130:	2200      	movs	r2, #0
 8007132:	801a      	strh	r2, [r3, #0]
	Led_Alert();
 8007134:	f7fb fbd6 	bl	80028e4 <Led_Alert>
	               if (D4.F_max > (D1._Flow_Rate +10))
 8007138:	4b6a      	ldr	r3, [pc, #424]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b6a      	ldr	r3, [pc, #424]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 800713e:	8a1b      	ldrh	r3, [r3, #16]
 8007140:	330a      	adds	r3, #10
 8007142:	429a      	cmp	r2, r3
 8007144:	dd46      	ble.n	80071d4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x148>
					{
						if (D4.F_max > (D1._Flow_Rate + 20))
 8007146:	4b67      	ldr	r3, [pc, #412]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b67      	ldr	r3, [pc, #412]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 800714c:	8a1b      	ldrh	r3, [r3, #16]
 800714e:	3314      	adds	r3, #20
 8007150:	429a      	cmp	r2, r3
 8007152:	dd06      	ble.n	8007162 <BACKUP_VC_SIMV_Pulse_I_Parameter+0xd6>
						{
							D4.temp_dac = D4.temp_dac_new - 20;
 8007154:	4b63      	ldr	r3, [pc, #396]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007156:	88db      	ldrh	r3, [r3, #6]
 8007158:	3b14      	subs	r3, #20
 800715a:	b29a      	uxth	r2, r3
 800715c:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800715e:	809a      	strh	r2, [r3, #4]
 8007160:	e02a      	b.n	80071b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x12c>
						}
						else if ((D4.F_max <= (D1._Flow_Rate + 20))&& (D4.F_max >= (D1._Flow_Rate + 10)))
 8007162:	4b60      	ldr	r3, [pc, #384]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b60      	ldr	r3, [pc, #384]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 8007168:	8a1b      	ldrh	r3, [r3, #16]
 800716a:	3314      	adds	r3, #20
 800716c:	429a      	cmp	r2, r3
 800716e:	dc0e      	bgt.n	800718e <BACKUP_VC_SIMV_Pulse_I_Parameter+0x102>
 8007170:	4b5d      	ldr	r3, [pc, #372]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 8007172:	8a1b      	ldrh	r3, [r3, #16]
 8007174:	f103 0209 	add.w	r2, r3, #9
 8007178:	4b5a      	ldr	r3, [pc, #360]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	da06      	bge.n	800718e <BACKUP_VC_SIMV_Pulse_I_Parameter+0x102>
						{
							D4.temp_dac = D4.temp_dac_new - 5;
 8007180:	4b58      	ldr	r3, [pc, #352]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007182:	88db      	ldrh	r3, [r3, #6]
 8007184:	3b05      	subs	r3, #5
 8007186:	b29a      	uxth	r2, r3
 8007188:	4b56      	ldr	r3, [pc, #344]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800718a:	809a      	strh	r2, [r3, #4]
 800718c:	e014      	b.n	80071b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x12c>
						}
						else if ((D4.F_max < (D1._Flow_Rate + 10)) && (D4.F_max >= (D1._Flow_Rate + 5)))
 800718e:	4b56      	ldr	r3, [pc, #344]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 8007190:	8a1b      	ldrh	r3, [r3, #16]
 8007192:	f103 0209 	add.w	r2, r3, #9
 8007196:	4b53      	ldr	r3, [pc, #332]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	db0c      	blt.n	80071b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x12c>
 800719e:	4b52      	ldr	r3, [pc, #328]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 80071a0:	8a1b      	ldrh	r3, [r3, #16]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	4b4f      	ldr	r3, [pc, #316]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	da05      	bge.n	80071b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x12c>
						{
							D4.temp_dac = D4.temp_dac_new - 1;
 80071ac:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	4b4b      	ldr	r3, [pc, #300]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071b6:	809a      	strh	r2, [r3, #4]
						}

						D4.temp_dac_new = D4.temp_dac;
 80071b8:	4b4a      	ldr	r3, [pc, #296]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071ba:	889a      	ldrh	r2, [r3, #4]
 80071bc:	4b49      	ldr	r3, [pc, #292]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071be:	80da      	strh	r2, [r3, #6]
						if (D4.temp_dac_new < 500)
 80071c0:	4b48      	ldr	r3, [pc, #288]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071c8:	d22c      	bcs.n	8007224 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x198>
						{
							D4.temp_dac_new = 500;
 80071ca:	4b46      	ldr	r3, [pc, #280]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80071d0:	80da      	strh	r2, [r3, #6]
 80071d2:	e027      	b.n	8007224 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x198>
						}
					}
					else if (D4.F_max < (D1._Flow_Rate- 5))
 80071d4:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b43      	ldr	r3, [pc, #268]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 80071da:	8a1b      	ldrh	r3, [r3, #16]
 80071dc:	3b05      	subs	r3, #5
 80071de:	429a      	cmp	r2, r3
 80071e0:	da18      	bge.n	8007214 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x188>
					{
						if (D3.max_flow_acheived == 0)
 80071e2:	4b42      	ldr	r3, [pc, #264]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d11c      	bne.n	8007224 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x198>
						{
							D4.temp_dac = D4.temp_dac_new + 30;
 80071ea:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	331e      	adds	r3, #30
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	4b3c      	ldr	r3, [pc, #240]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071f4:	809a      	strh	r2, [r3, #4]
							D4.temp_dac_new = D4.temp_dac;
 80071f6:	4b3b      	ldr	r3, [pc, #236]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071f8:	889a      	ldrh	r2, [r3, #4]
 80071fa:	4b3a      	ldr	r3, [pc, #232]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 80071fc:	80da      	strh	r2, [r3, #6]

								if (D4.temp_dac_new > 3500)
 80071fe:	4b39      	ldr	r3, [pc, #228]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007200:	88db      	ldrh	r3, [r3, #6]
 8007202:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007206:	4293      	cmp	r3, r2
 8007208:	d90c      	bls.n	8007224 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x198>
								{
									D4.temp_dac_new = 3500;
 800720a:	4b36      	ldr	r3, [pc, #216]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800720c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007210:	80da      	strh	r2, [r3, #6]
 8007212:	e007      	b.n	8007224 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x198>
						}

					}
					else
					{
						D4.temp_dac = D4.temp_dac_new;
 8007214:	4b33      	ldr	r3, [pc, #204]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007216:	88da      	ldrh	r2, [r3, #6]
 8007218:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800721a:	809a      	strh	r2, [r3, #4]
						D4.temp_dac_new = D4.temp_dac;
 800721c:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 800721e:	889a      	ldrh	r2, [r3, #4]
 8007220:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007222:	80da      	strh	r2, [r3, #6]
					}


	               D3.max_flow_acheived = 0;
 8007224:	4b31      	ldr	r3, [pc, #196]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
	               D3.constant_dac_done = 1;
 800722a:	4b30      	ldr	r3, [pc, #192]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 800722c:	2201      	movs	r2, #1
 800722e:	605a      	str	r2, [r3, #4]
	               D3.Reached_flow_val = 0;
 8007230:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 8007232:	2200      	movs	r2, #0
 8007234:	609a      	str	r2, [r3, #8]
	               D4.F_max = 0;
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x258>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
	               D3.sensordata_done = 1;
 800723c:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 800723e:	2201      	movs	r2, #1
 8007240:	60da      	str	r2, [r3, #12]
	               D3.Volume_acheived = 1;
 8007242:	4b2a      	ldr	r3, [pc, #168]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 8007244:	2201      	movs	r2, #1
 8007246:	611a      	str	r2, [r3, #16]
	               D3.volume_reached = 0;
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <BACKUP_VC_SIMV_Pulse_I_Parameter+0x260>)
 800724a:	2200      	movs	r2, #0
 800724c:	615a      	str	r2, [r3, #20]


	               Peep_E_Valve_Lock_delay_BACKUP_VC();
 800724e:	f000 f88b 	bl	8007368 <Peep_E_Valve_Lock_delay_BACKUP_VC>

	               Ach_vol=1;
 8007252:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x264>)
 8007254:	2201      	movs	r2, #1
 8007256:	601a      	str	r2, [r3, #0]
	               if(Acheived_Volume>(D1._VT_Val+20))
 8007258:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x268>)
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	4b22      	ldr	r3, [pc, #136]	; (80072e8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x25c>)
 8007260:	8a9b      	ldrh	r3, [r3, #20]
 8007262:	3314      	adds	r3, #20
 8007264:	429a      	cmp	r2, r3
 8007266:	dd11      	ble.n	800728c <BACKUP_VC_SIMV_Pulse_I_Parameter+0x200>
	               {
						check_count++;
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x26c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x26c>)
 8007270:	6013      	str	r3, [r2, #0]
						if (check_count >= 3)
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x26c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b02      	cmp	r3, #2
 8007278:	dd08      	ble.n	800728c <BACKUP_VC_SIMV_Pulse_I_Parameter+0x200>
						{
							check_dev = check_dev + 5;
 800727a:	4b20      	ldr	r3, [pc, #128]	; (80072fc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x270>)
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	3305      	adds	r3, #5
 8007280:	b29a      	uxth	r2, r3
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x270>)
 8007284:	801a      	strh	r2, [r3, #0]
							check_count = 0;
 8007286:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x26c>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
						}
	               	}
	               S5.P_Max = 0;
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <BACKUP_VC_SIMV_Pulse_I_Parameter+0x230>)
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	  Alert_I_Time_Parameter();
 8007292:	f7fb f975 	bl	8002580 <Alert_I_Time_Parameter>
	 _I_TIMER = D2._I_TIMER_HOLD;
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x22c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a19      	ldr	r2, [pc, #100]	; (8007300 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x274>)
 800729c:	6013      	str	r3, [r2, #0]
	_CurrentWaveFormState = Generate_E_Wave;
 800729e:	4b19      	ldr	r3, [pc, #100]	; (8007304 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x278>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_I_Wave ;
 80072a4:	4b18      	ldr	r3, [pc, #96]	; (8007308 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x27c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
	vTaskDelay(D2._I_TIMER_HOLD);
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <BACKUP_VC_SIMV_Pulse_I_Parameter+0x22c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f018 fadc 	bl	801f86c <vTaskDelay>

}
 80072b4:	bf00      	nop
 80072b6:	bdb0      	pop	{r4, r5, r7, pc}
 80072b8:	20016cc0 	.word	0x20016cc0
 80072bc:	20016df4 	.word	0x20016df4
 80072c0:	20016960 	.word	0x20016960
 80072c4:	40240000 	.word	0x40240000
 80072c8:	40590000 	.word	0x40590000
 80072cc:	20000feb 	.word	0x20000feb
 80072d0:	20016e59 	.word	0x20016e59
 80072d4:	20016d44 	.word	0x20016d44
 80072d8:	20016d60 	.word	0x20016d60
 80072dc:	40020400 	.word	0x40020400
 80072e0:	20016af4 	.word	0x20016af4
 80072e4:	20016d50 	.word	0x20016d50
 80072e8:	20016e90 	.word	0x20016e90
 80072ec:	2001689c 	.word	0x2001689c
 80072f0:	20016ed8 	.word	0x20016ed8
 80072f4:	20016ad8 	.word	0x20016ad8
 80072f8:	20016ec8 	.word	0x20016ec8
 80072fc:	20016bd4 	.word	0x20016bd4
 8007300:	20016df0 	.word	0x20016df0
 8007304:	20016adc 	.word	0x20016adc
 8007308:	20016cc8 	.word	0x20016cc8

0800730c <BACKUP_VC_SIMV_Pulse_E_Parameter>:


void BACKUP_VC_SIMV_Pulse_E_Parameter()
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
	_Control_Byte |= (uint8_t) 0x80;
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x44>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007318:	b2da      	uxtb	r2, r3
 800731a:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x44>)
 800731c:	701a      	strb	r2, [r3, #0]
	_E_TIMER_ACHEIVED = 0;
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x48>)
 8007320:	2200      	movs	r2, #0
 8007322:	801a      	strh	r2, [r3, #0]
	_E_TIMER = D2._E_TIMER_HOLD;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x4c>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a0c      	ldr	r2, [pc, #48]	; (800735c <BACKUP_VC_SIMV_Pulse_E_Parameter+0x50>)
 800732a:	6013      	str	r3, [r2, #0]
	Alert_E_Time_Parameter();
 800732c:	f7fb f974 	bl	8002618 <Alert_E_Time_Parameter>
	adjust_servo();								//for O2
 8007330:	f003 fada 	bl	800a8e8 <adjust_servo>
	_CurrentWaveFormState = Generate_I_Wave;
 8007334:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x54>)
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 800733a:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x58>)
 800733c:	2201      	movs	r2, #1
 800733e:	701a      	strb	r2, [r3, #0]
	vTaskDelay(D2._E_TIMER_HOLD);
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <BACKUP_VC_SIMV_Pulse_E_Parameter+0x4c>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	f018 fa91 	bl	801f86c <vTaskDelay>
}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20016e59 	.word	0x20016e59
 8007354:	20016eb4 	.word	0x20016eb4
 8007358:	20016cc0 	.word	0x20016cc0
 800735c:	20016d74 	.word	0x20016d74
 8007360:	20016adc 	.word	0x20016adc
 8007364:	20016cc8 	.word	0x20016cc8

08007368 <Peep_E_Valve_Lock_delay_BACKUP_VC>:



void Peep_E_Valve_Lock_delay_BACKUP_VC()
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
	if (D1.RR <30 )
 800736c:	4b9c      	ldr	r3, [pc, #624]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 800736e:	7c9b      	ldrb	r3, [r3, #18]
 8007370:	2b1d      	cmp	r3, #29
 8007372:	f200 81d1 	bhi.w	8007718 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x3b0>
	{
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8007376:	4b9b      	ldr	r3, [pc, #620]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007378:	edd3 6a02 	vldr	s13, [r3, #8]
 800737c:	4b99      	ldr	r3, [pc, #612]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800737e:	ed93 7a03 	vldr	s14, [r3, #12]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	4b97      	ldr	r3, [pc, #604]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007388:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800738c:	4b95      	ldr	r3, [pc, #596]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800738e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	4b92      	ldr	r3, [pc, #584]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 800739e:	4b91      	ldr	r3, [pc, #580]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 80073a6:	4b8f      	ldr	r3, [pc, #572]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 80073ae:	4b8d      	ldr	r3, [pc, #564]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073b0:	edd3 6a05 	vldr	s13, [r3, #20]
 80073b4:	4b8b      	ldr	r3, [pc, #556]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80073ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073be:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 80073c4:	4b87      	ldr	r3, [pc, #540]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80073ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ce:	ee17 2a90 	vmov	r2, s15
 80073d2:	4b84      	ldr	r3, [pc, #528]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28

		if (D1.RR >= 30 || D2._E_TIMER_HOLD < 700)
 80073d6:	4b82      	ldr	r3, [pc, #520]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 80073d8:	7c9b      	ldrb	r3, [r3, #18]
 80073da:	2b1d      	cmp	r3, #29
 80073dc:	d804      	bhi.n	80073e8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x80>
 80073de:	4b82      	ldr	r3, [pc, #520]	; (80075e8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x280>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80073e6:	d203      	bcs.n	80073f0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x88>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 80073e8:	4b7e      	ldr	r3, [pc, #504]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	4a7d      	ldr	r2, [pc, #500]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073ee:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 80073f0:	4b7c      	ldr	r3, [pc, #496]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	641a      	str	r2, [r3, #64]	; 0x40


		                if (S5._Peep_Avg_val_int >= (D1._PEEP_Val +6) )
 80073f6:	4b7a      	ldr	r3, [pc, #488]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	1d5a      	adds	r2, r3, #5
 80073fc:	4b79      	ldr	r3, [pc, #484]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	429a      	cmp	r2, r3
 8007402:	da29      	bge.n	8007458 <Peep_E_Valve_Lock_delay_BACKUP_VC+0xf0>
						{

							S5.error_count++;
 8007404:	4b77      	ldr	r3, [pc, #476]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	3301      	adds	r3, #1
 800740a:	4a76      	ldr	r2, [pc, #472]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800740c:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 800740e:	4b75      	ldr	r3, [pc, #468]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd11      	ble.n	800743a <Peep_E_Valve_Lock_delay_BACKUP_VC+0xd2>
							{
								S5.Lock_delay = S5.Lock_delay + 150;
 8007416:	4b73      	ldr	r3, [pc, #460]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007418:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800741a:	3396      	adds	r3, #150	; 0x96
 800741c:	b29a      	uxth	r2, r3
 800741e:	4b71      	ldr	r3, [pc, #452]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007420:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 8007422:	4b70      	ldr	r3, [pc, #448]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007424:	2200      	movs	r2, #0
 8007426:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 8007428:	4b6e      	ldr	r3, [pc, #440]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800742a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800742c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007430:	d903      	bls.n	800743a <Peep_E_Valve_Lock_delay_BACKUP_VC+0xd2>
									S5.Lock_delay = 700;
 8007432:	4b6c      	ldr	r3, [pc, #432]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007434:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007438:	879a      	strh	r2, [r3, #60]	; 0x3c
							}
							if (S5._Set_Peep <= 3)
 800743a:	4b6a      	ldr	r3, [pc, #424]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800743c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007440:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	f200 815b 	bhi.w	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = 3;
 8007450:	4b64      	ldr	r3, [pc, #400]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007452:	4a66      	ldr	r2, [pc, #408]	; (80075ec <Peep_E_Valve_Lock_delay_BACKUP_VC+0x284>)
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
 8007456:	e156      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							}
						}



						else if( (S5._Peep_Avg_val_int > (D1._PEEP_Val+3))  && (S5._Peep_Avg_val_int < (D1._PEEP_Val+6)) )
 8007458:	4b62      	ldr	r3, [pc, #392]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800745a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745c:	4b60      	ldr	r3, [pc, #384]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	3303      	adds	r3, #3
 8007462:	429a      	cmp	r2, r3
 8007464:	dd30      	ble.n	80074c8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x160>
 8007466:	4b5e      	ldr	r3, [pc, #376]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	1d5a      	adds	r2, r3, #5
 800746c:	4b5d      	ldr	r3, [pc, #372]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	429a      	cmp	r2, r3
 8007472:	db29      	blt.n	80074c8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x160>
						{

							S5.error_count++;
 8007474:	4b5b      	ldr	r3, [pc, #364]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	3301      	adds	r3, #1
 800747a:	4a5a      	ldr	r2, [pc, #360]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800747c:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 800747e:	4b59      	ldr	r3, [pc, #356]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd11      	ble.n	80074aa <Peep_E_Valve_Lock_delay_BACKUP_VC+0x142>
							{
								S5.Lock_delay = S5.Lock_delay + 50;
 8007486:	4b57      	ldr	r3, [pc, #348]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007488:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800748a:	3332      	adds	r3, #50	; 0x32
 800748c:	b29a      	uxth	r2, r3
 800748e:	4b55      	ldr	r3, [pc, #340]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007490:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 8007492:	4b54      	ldr	r3, [pc, #336]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007494:	2200      	movs	r2, #0
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 8007498:	4b52      	ldr	r3, [pc, #328]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800749a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800749c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80074a0:	d903      	bls.n	80074aa <Peep_E_Valve_Lock_delay_BACKUP_VC+0x142>
									S5.Lock_delay = 700;
 80074a2:	4b50      	ldr	r3, [pc, #320]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074a4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80074a8:	879a      	strh	r2, [r3, #60]	; 0x3c
							}
							if (S5._Set_Peep <= 3)
 80074aa:	4b4e      	ldr	r3, [pc, #312]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80074b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80074b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	f200 8123 	bhi.w	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = 3;
 80074c0:	4b48      	ldr	r3, [pc, #288]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074c2:	4a4a      	ldr	r2, [pc, #296]	; (80075ec <Peep_E_Valve_Lock_delay_BACKUP_VC+0x284>)
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
							if (S5._Set_Peep <= 3)
 80074c6:	e11e      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							}
						}


						else if( (S5._Peep_Avg_val_int > (D1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (D1._PEEP_Val+3)) )
 80074c8:	4b46      	ldr	r3, [pc, #280]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	4a44      	ldr	r2, [pc, #272]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 80074ce:	7852      	ldrb	r2, [r2, #1]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	dd3a      	ble.n	800754a <Peep_E_Valve_Lock_delay_BACKUP_VC+0x1e2>
 80074d4:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d8:	4b41      	ldr	r3, [pc, #260]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	3303      	adds	r3, #3
 80074de:	429a      	cmp	r2, r3
 80074e0:	dc33      	bgt.n	800754a <Peep_E_Valve_Lock_delay_BACKUP_VC+0x1e2>
						{
							S5._Set_Peep = S5._Set_Peep - 1;
 80074e2:	4b40      	ldr	r3, [pc, #256]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80074e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074f0:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074f2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.error_count++;
 80074f6:	4b3b      	ldr	r3, [pc, #236]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	3301      	adds	r3, #1
 80074fc:	4a39      	ldr	r2, [pc, #228]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80074fe:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 8007500:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	2b00      	cmp	r3, #0
 8007506:	dd11      	ble.n	800752c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x1c4>
							{
								S5.Lock_delay = S5.Lock_delay + 10;
 8007508:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800750a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800750c:	330a      	adds	r3, #10
 800750e:	b29a      	uxth	r2, r3
 8007510:	4b34      	ldr	r3, [pc, #208]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007512:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 8007514:	4b33      	ldr	r3, [pc, #204]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 800751a:	4b32      	ldr	r3, [pc, #200]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800751c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800751e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007522:	d903      	bls.n	800752c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x1c4>
									S5.Lock_delay = 700;
 8007524:	4b2f      	ldr	r3, [pc, #188]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007526:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800752a:	879a      	strh	r2, [r3, #60]	; 0x3c
							}
							if (S5._Set_Peep <= 3)
 800752c:	4b2d      	ldr	r3, [pc, #180]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800752e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007532:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	f200 80e2 	bhi.w	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = 3;
 8007542:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007544:	4a29      	ldr	r2, [pc, #164]	; (80075ec <Peep_E_Valve_Lock_delay_BACKUP_VC+0x284>)
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
							if (S5._Set_Peep <= 3)
 8007548:	e0dd      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							}
						}
						else if ( (S5._Peep_Avg_val_int >= (D1._PEEP_Val -4 ))  && (S5._Peep_Avg_val_int < (D1._PEEP_Val)) )
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800754c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	3b04      	subs	r3, #4
 8007554:	429a      	cmp	r2, r3
 8007556:	db4b      	blt.n	80075f0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x288>
 8007558:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	4a20      	ldr	r2, [pc, #128]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 800755e:	7852      	ldrb	r2, [r2, #1]
 8007560:	4293      	cmp	r3, r2
 8007562:	da45      	bge.n	80075f0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x288>
						{


							S5.error_count2++;
 8007564:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007568:	3301      	adds	r3, #1
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800756c:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 3)
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	2b03      	cmp	r3, #3
 8007574:	dd1e      	ble.n	80075b4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x24c>
							{
								S5.Lock_delay = S5.Lock_delay - 10;
 8007576:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007578:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800757a:	3b0a      	subs	r3, #10
 800757c:	b29a      	uxth	r2, r3
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007580:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 8007582:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007584:	2200      	movs	r2, #0
 8007586:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8007588:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800758a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d904      	bls.n	800759a <Peep_E_Valve_Lock_delay_BACKUP_VC+0x232>
 8007590:	4b14      	ldr	r3, [pc, #80]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 8007592:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007594:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007598:	d90c      	bls.n	80075b4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x24c>
								{
									S5.Lock_delay = 1;
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 800759c:	2201      	movs	r2, #1
 800759e:	879a      	strh	r2, [r3, #60]	; 0x3c
									S5._Set_Peep = S5._Set_Peep + 1;
 80075a0:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80075a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80075a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80075b0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
								}
							}
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80075b6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x278>)
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	330a      	adds	r3, #10
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	f340 8099 	ble.w	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = S5._Set_Peep;
 80075d4:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	4a02      	ldr	r2, [pc, #8]	; (80075e4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x27c>)
 80075da:	6393      	str	r3, [r2, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 80075dc:	e093      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
 80075de:	bf00      	nop
 80075e0:	20016e90 	.word	0x20016e90
 80075e4:	20016df4 	.word	0x20016df4
 80075e8:	20016cc0 	.word	0x20016cc0
 80075ec:	40400000 	.word	0x40400000
							}
						}
						else  if ( (S5._Peep_Avg_val_int < (D1._PEEP_Val -4 ))  && (S5._Peep_Avg_val_int != 0) )
 80075f0:	4b9e      	ldr	r3, [pc, #632]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80075f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f4:	4b9e      	ldr	r3, [pc, #632]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	429a      	cmp	r2, r3
 80075fc:	da3f      	bge.n	800767e <Peep_E_Valve_Lock_delay_BACKUP_VC+0x316>
 80075fe:	4b9b      	ldr	r3, [pc, #620]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d03b      	beq.n	800767e <Peep_E_Valve_Lock_delay_BACKUP_VC+0x316>
						{


							S5.error_count2++;
 8007606:	4b99      	ldr	r3, [pc, #612]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	3301      	adds	r3, #1
 800760c:	4a97      	ldr	r2, [pc, #604]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800760e:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 3)
 8007610:	4b96      	ldr	r3, [pc, #600]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	2b03      	cmp	r3, #3
 8007616:	dd1e      	ble.n	8007656 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x2ee>
							{
								S5.Lock_delay = S5.Lock_delay - 10;
 8007618:	4b94      	ldr	r3, [pc, #592]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800761a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800761c:	3b0a      	subs	r3, #10
 800761e:	b29a      	uxth	r2, r3
 8007620:	4b92      	ldr	r3, [pc, #584]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007622:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 8007624:	4b91      	ldr	r3, [pc, #580]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007626:	2200      	movs	r2, #0
 8007628:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 800762a:	4b90      	ldr	r3, [pc, #576]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800762c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d904      	bls.n	800763c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x2d4>
 8007632:	4b8e      	ldr	r3, [pc, #568]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007634:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007636:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800763a:	d90c      	bls.n	8007656 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x2ee>
								{
									S5.Lock_delay = 1;
 800763c:	4b8b      	ldr	r3, [pc, #556]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800763e:	2201      	movs	r2, #1
 8007640:	879a      	strh	r2, [r3, #60]	; 0x3c
									S5._Set_Peep = S5._Set_Peep + 1;
 8007642:	4b8a      	ldr	r3, [pc, #552]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007644:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007650:	4b86      	ldr	r3, [pc, #536]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007652:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
								}
							}
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 8007656:	4b85      	ldr	r3, [pc, #532]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007658:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800765c:	4b84      	ldr	r3, [pc, #528]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	330a      	adds	r3, #10
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	dd48      	ble.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = S5._Set_Peep;
 8007674:	4b7d      	ldr	r3, [pc, #500]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	4a7c      	ldr	r2, [pc, #496]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800767a:	6393      	str	r3, [r2, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 800767c:	e043      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
						}




						else if ((S5._Peep_Avg_val_int == 0))
 800767e:	4b7b      	ldr	r3, [pc, #492]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d13b      	bne.n	80076fe <Peep_E_Valve_Lock_delay_BACKUP_VC+0x396>
						{


							S5.error_count2++;
 8007686:	4b79      	ldr	r3, [pc, #484]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	3301      	adds	r3, #1
 800768c:	4a77      	ldr	r2, [pc, #476]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800768e:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 2)
 8007690:	4b76      	ldr	r3, [pc, #472]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007694:	2b02      	cmp	r3, #2
 8007696:	dd1e      	ble.n	80076d6 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x36e>
							{
								S5._Set_Peep = S5._Set_Peep + 5;
 8007698:	4b74      	ldr	r3, [pc, #464]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800769a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800769e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80076a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076a6:	4b71      	ldr	r3, [pc, #452]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
								S5.Lock_delay = S5.Lock_delay - 30;
 80076ac:	4b6f      	ldr	r3, [pc, #444]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076b0:	3b1e      	subs	r3, #30
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	4b6d      	ldr	r3, [pc, #436]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076b6:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 80076b8:	4b6c      	ldr	r3, [pc, #432]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 80076be:	4b6b      	ldr	r3, [pc, #428]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x368>
 80076c6:	4b69      	ldr	r3, [pc, #420]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076ca:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80076ce:	d902      	bls.n	80076d6 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x36e>
									S5.Lock_delay = 1;
 80076d0:	4b66      	ldr	r3, [pc, #408]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	879a      	strh	r2, [r3, #60]	; 0x3c
							}
							if (S5._Set_Peep > D1._PEEP_Val + 5)
 80076d6:	4b65      	ldr	r3, [pc, #404]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076d8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80076dc:	4b64      	ldr	r3, [pc, #400]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	3305      	adds	r3, #5
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	dd08      	ble.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
							{
								S5._Set_Peep = S5._Set_Peep;
 80076f4:	4b5d      	ldr	r3, [pc, #372]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	4a5c      	ldr	r2, [pc, #368]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80076fa:	6393      	str	r3, [r2, #56]	; 0x38
 80076fc:	e003      	b.n	8007706 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x39e>
						}


						else
						{
							S5._Set_Peep = S5._Set_Peep;
 80076fe:	4b5b      	ldr	r3, [pc, #364]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	4a5a      	ldr	r2, [pc, #360]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007704:	6393      	str	r3, [r2, #56]	; 0x38
						}
						S5._Peep_Avg_count = 0;
 8007706:	4b59      	ldr	r3, [pc, #356]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	621a      	str	r2, [r3, #32]
						S5._Peep_Avg = 0;
 800770e:	4b57      	ldr	r3, [pc, #348]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	615a      	str	r2, [r3, #20]
							S5._Set_Peep = S5._Set_Peep;
						}
						S5._Peep_Avg_count = 0;
						S5._Peep_Avg = 0;
	}
}
 8007716:	e1cf      	b.n	8007ab8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x750>
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8007718:	4b54      	ldr	r3, [pc, #336]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800771a:	edd3 6a02 	vldr	s13, [r3, #8]
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007720:	ed93 7a03 	vldr	s14, [r3, #12]
 8007724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007728:	4b50      	ldr	r3, [pc, #320]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800772a:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800772e:	4b4f      	ldr	r3, [pc, #316]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007730:	edd3 7a04 	vldr	s15, [r3, #16]
 8007734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007738:	ee17 2a90 	vmov	r2, s15
 800773c:	4b4b      	ldr	r3, [pc, #300]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8007740:	4b4a      	ldr	r3, [pc, #296]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8007748:	4b48      	ldr	r3, [pc, #288]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	609a      	str	r2, [r3, #8]
		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8007750:	4b46      	ldr	r3, [pc, #280]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007752:	edd3 6a05 	vldr	s13, [r3, #20]
 8007756:	4b45      	ldr	r3, [pc, #276]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007758:	ed93 7a08 	vldr	s14, [r3, #32]
 800775c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007762:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8007766:	4b41      	ldr	r3, [pc, #260]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007768:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800776c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007770:	ee17 2a90 	vmov	r2, s15
 8007774:	4b3d      	ldr	r3, [pc, #244]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
		if (D1.RR >= 30 || D2._E_TIMER_HOLD < 700)
 8007778:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 800777a:	7c9b      	ldrb	r3, [r3, #18]
 800777c:	2b1d      	cmp	r3, #29
 800777e:	d804      	bhi.n	800778a <Peep_E_Valve_Lock_delay_BACKUP_VC+0x422>
 8007780:	4b3c      	ldr	r3, [pc, #240]	; (8007874 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x50c>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007788:	d203      	bcs.n	8007792 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x42a>
			S5._Peep_Avg_val_int = S5.peep_max;
 800778a:	4b38      	ldr	r3, [pc, #224]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	4a37      	ldr	r2, [pc, #220]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007790:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
		                if (S5._Peep_Avg_val_int > (D1._PEEP_Val +5) )
 8007798:	4b34      	ldr	r3, [pc, #208]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800779a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800779c:	4b34      	ldr	r3, [pc, #208]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	3305      	adds	r3, #5
 80077a2:	429a      	cmp	r2, r3
 80077a4:	dd29      	ble.n	80077fa <Peep_E_Valve_Lock_delay_BACKUP_VC+0x492>
							S5.error_count++;
 80077a6:	4b31      	ldr	r3, [pc, #196]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	3301      	adds	r3, #1
 80077ac:	4a2f      	ldr	r2, [pc, #188]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077ae:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 80077b0:	4b2e      	ldr	r3, [pc, #184]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd11      	ble.n	80077dc <Peep_E_Valve_Lock_delay_BACKUP_VC+0x474>
								S5.Lock_delay = S5.Lock_delay + 30;
 80077b8:	4b2c      	ldr	r3, [pc, #176]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80077bc:	331e      	adds	r3, #30
 80077be:	b29a      	uxth	r2, r3
 80077c0:	4b2a      	ldr	r3, [pc, #168]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077c2:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 80077c4:	4b29      	ldr	r3, [pc, #164]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 80077ca:	4b28      	ldr	r3, [pc, #160]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80077ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80077d2:	d903      	bls.n	80077dc <Peep_E_Valve_Lock_delay_BACKUP_VC+0x474>
									S5.Lock_delay = 700;
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077d6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80077da:	879a      	strh	r2, [r3, #60]	; 0x3c
							if (S5._Set_Peep <= 3)
 80077dc:	4b23      	ldr	r3, [pc, #140]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80077e2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80077e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ee:	f200 815b 	bhi.w	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = 3;
 80077f2:	4b1e      	ldr	r3, [pc, #120]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077f4:	4a20      	ldr	r2, [pc, #128]	; (8007878 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x510>)
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
 80077f8:	e156      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
						else if( (S5._Peep_Avg_val_int > (D1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (D1._PEEP_Val+5)) )
 80077fa:	4b1c      	ldr	r3, [pc, #112]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 80077fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077fe:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	3302      	adds	r3, #2
 8007804:	429a      	cmp	r2, r3
 8007806:	dd39      	ble.n	800787c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x514>
 8007808:	4b18      	ldr	r3, [pc, #96]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800780a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780c:	4b18      	ldr	r3, [pc, #96]	; (8007870 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x508>)
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	3305      	adds	r3, #5
 8007812:	429a      	cmp	r2, r3
 8007814:	dc32      	bgt.n	800787c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x514>
							S5.error_count++;
 8007816:	4b15      	ldr	r3, [pc, #84]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	3301      	adds	r3, #1
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800781e:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 8007820:	4b12      	ldr	r3, [pc, #72]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd11      	ble.n	800784c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x4e4>
								S5.Lock_delay = S5.Lock_delay + 20;
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800782a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800782c:	3314      	adds	r3, #20
 800782e:	b29a      	uxth	r2, r3
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007832:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 8007834:	4b0d      	ldr	r3, [pc, #52]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007836:	2200      	movs	r2, #0
 8007838:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800783c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800783e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007842:	d903      	bls.n	800784c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x4e4>
									S5.Lock_delay = 700;
 8007844:	4b09      	ldr	r3, [pc, #36]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007846:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800784a:	879a      	strh	r2, [r3, #60]	; 0x3c
							if (S5._Set_Peep <= 3)
 800784c:	4b07      	ldr	r3, [pc, #28]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 800784e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007852:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	f200 8123 	bhi.w	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = 3;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <Peep_E_Valve_Lock_delay_BACKUP_VC+0x504>)
 8007864:	4a04      	ldr	r2, [pc, #16]	; (8007878 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x510>)
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
							if (S5._Set_Peep <= 3)
 8007868:	e11e      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
 800786a:	bf00      	nop
 800786c:	20016df4 	.word	0x20016df4
 8007870:	20016e90 	.word	0x20016e90
 8007874:	20016cc0 	.word	0x20016cc0
 8007878:	40400000 	.word	0x40400000
						else if( (S5._Peep_Avg_val_int > (D1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (D1._PEEP_Val+2)) )
 800787c:	4b91      	ldr	r3, [pc, #580]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	4a91      	ldr	r2, [pc, #580]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007882:	7852      	ldrb	r2, [r2, #1]
 8007884:	4293      	cmp	r3, r2
 8007886:	dd3a      	ble.n	80078fe <Peep_E_Valve_Lock_delay_BACKUP_VC+0x596>
 8007888:	4b8e      	ldr	r3, [pc, #568]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800788a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800788c:	4b8e      	ldr	r3, [pc, #568]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	3302      	adds	r3, #2
 8007892:	429a      	cmp	r2, r3
 8007894:	dc33      	bgt.n	80078fe <Peep_E_Valve_Lock_delay_BACKUP_VC+0x596>
							S5._Set_Peep = S5._Set_Peep - 0.5f;
 8007896:	4b8b      	ldr	r3, [pc, #556]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007898:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800789c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078a4:	4b87      	ldr	r3, [pc, #540]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.error_count++;
 80078aa:	4b86      	ldr	r3, [pc, #536]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	3301      	adds	r3, #1
 80078b0:	4a84      	ldr	r2, [pc, #528]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078b2:	6313      	str	r3, [r2, #48]	; 0x30
							if (S5.error_count > 0)
 80078b4:	4b83      	ldr	r3, [pc, #524]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dd11      	ble.n	80078e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x578>
								S5.Lock_delay = S5.Lock_delay + 10;
 80078bc:	4b81      	ldr	r3, [pc, #516]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80078c0:	330a      	adds	r3, #10
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	4b7f      	ldr	r3, [pc, #508]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078c6:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count = 0;
 80078c8:	4b7e      	ldr	r3, [pc, #504]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
								if (S5.Lock_delay > 700)
 80078ce:	4b7d      	ldr	r3, [pc, #500]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80078d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80078d6:	d903      	bls.n	80078e0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x578>
									S5.Lock_delay = 700;
 80078d8:	4b7a      	ldr	r3, [pc, #488]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078da:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80078de:	879a      	strh	r2, [r3, #60]	; 0x3c
							if (S5._Set_Peep <= 3)
 80078e0:	4b78      	ldr	r3, [pc, #480]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078e2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80078e6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80078ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	f200 80d9 	bhi.w	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = 3;
 80078f6:	4b73      	ldr	r3, [pc, #460]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80078f8:	4a74      	ldr	r2, [pc, #464]	; (8007acc <Peep_E_Valve_Lock_delay_BACKUP_VC+0x764>)
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
							if (S5._Set_Peep <= 3)
 80078fc:	e0d4      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
						else if ( (S5._Peep_Avg_val_int >= (D1._PEEP_Val -4 ))  && (S5._Peep_Avg_val_int < (D1._PEEP_Val)) )
 80078fe:	4b71      	ldr	r3, [pc, #452]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007902:	4b71      	ldr	r3, [pc, #452]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	3b04      	subs	r3, #4
 8007908:	429a      	cmp	r2, r3
 800790a:	db42      	blt.n	8007992 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x62a>
 800790c:	4b6d      	ldr	r3, [pc, #436]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	4a6d      	ldr	r2, [pc, #436]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007912:	7852      	ldrb	r2, [r2, #1]
 8007914:	4293      	cmp	r3, r2
 8007916:	da3c      	bge.n	8007992 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x62a>
							S5.error_count2++;
 8007918:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	3301      	adds	r3, #1
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007920:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 3)
 8007922:	4b68      	ldr	r3, [pc, #416]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	2b03      	cmp	r3, #3
 8007928:	dd1e      	ble.n	8007968 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x600>
								S5.Lock_delay = S5.Lock_delay - 10;
 800792a:	4b66      	ldr	r3, [pc, #408]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800792c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800792e:	3b0a      	subs	r3, #10
 8007930:	b29a      	uxth	r2, r3
 8007932:	4b64      	ldr	r3, [pc, #400]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007934:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 8007936:	4b63      	ldr	r3, [pc, #396]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007938:	2200      	movs	r2, #0
 800793a:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 800793c:	4b61      	ldr	r3, [pc, #388]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800793e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d904      	bls.n	800794e <Peep_E_Valve_Lock_delay_BACKUP_VC+0x5e6>
 8007944:	4b5f      	ldr	r3, [pc, #380]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007946:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007948:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800794c:	d90c      	bls.n	8007968 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x600>
									S5.Lock_delay = 1;
 800794e:	4b5d      	ldr	r3, [pc, #372]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007950:	2201      	movs	r2, #1
 8007952:	879a      	strh	r2, [r3, #60]	; 0x3c
									S5._Set_Peep = S5._Set_Peep + 1;
 8007954:	4b5b      	ldr	r3, [pc, #364]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007956:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800795a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007962:	4b58      	ldr	r3, [pc, #352]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007964:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 8007968:	4b56      	ldr	r3, [pc, #344]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800796a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800796e:	4b56      	ldr	r3, [pc, #344]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	330a      	adds	r3, #10
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800797c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	f340 8090 	ble.w	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = S5._Set_Peep ;
 8007988:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	4a4d      	ldr	r2, [pc, #308]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 800798e:	6393      	str	r3, [r2, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 8007990:	e08a      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
						else if ( (S5._Peep_Avg_val_int < (D1._PEEP_Val -4 ))  && (S5._Peep_Avg_val_int != 0) )
 8007992:	4b4c      	ldr	r3, [pc, #304]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007996:	4b4c      	ldr	r3, [pc, #304]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	3b04      	subs	r3, #4
 800799c:	429a      	cmp	r2, r3
 800799e:	da3f      	bge.n	8007a20 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x6b8>
 80079a0:	4b48      	ldr	r3, [pc, #288]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d03b      	beq.n	8007a20 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x6b8>
							S5.error_count2++;
 80079a8:	4b46      	ldr	r3, [pc, #280]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	3301      	adds	r3, #1
 80079ae:	4a45      	ldr	r2, [pc, #276]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079b0:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 3)
 80079b2:	4b44      	ldr	r3, [pc, #272]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	dd1e      	ble.n	80079f8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x690>
								S5.Lock_delay = S5.Lock_delay - 10;
 80079ba:	4b42      	ldr	r3, [pc, #264]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079be:	3b0a      	subs	r3, #10
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079c4:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 80079c6:	4b3f      	ldr	r3, [pc, #252]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 80079cc:	4b3d      	ldr	r3, [pc, #244]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d904      	bls.n	80079de <Peep_E_Valve_Lock_delay_BACKUP_VC+0x676>
 80079d4:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079d8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80079dc:	d90c      	bls.n	80079f8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x690>
									S5.Lock_delay = 1;
 80079de:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	879a      	strh	r2, [r3, #60]	; 0x3c
									S5._Set_Peep = S5._Set_Peep + 1;
 80079e4:	4b37      	ldr	r3, [pc, #220]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079e6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80079ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f2:	4b34      	ldr	r3, [pc, #208]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079f4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 80079f8:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 80079fa:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	330a      	adds	r3, #10
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a14:	dd48      	ble.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = S5._Set_Peep ;
 8007a16:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a1c:	6393      	str	r3, [r2, #56]	; 0x38
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 8007a1e:	e043      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
						else if ((S5._Peep_Avg_val_int == 0))
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d13b      	bne.n	8007aa0 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x738>
							S5.error_count2++;
 8007a28:	4b26      	ldr	r3, [pc, #152]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a25      	ldr	r2, [pc, #148]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a30:	6353      	str	r3, [r2, #52]	; 0x34
							if (S5.error_count2 > 3)
 8007a32:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	dd1e      	ble.n	8007a78 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x710>
								S5._Set_Peep = S5._Set_Peep + 5;
 8007a3a:	4b22      	ldr	r3, [pc, #136]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a3c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007a40:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a4a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
								S5.Lock_delay = S5.Lock_delay - 30;
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007a52:	3b1e      	subs	r3, #30
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a58:	879a      	strh	r2, [r3, #60]	; 0x3c
								S5.error_count2 = 0;
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34
								if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a62:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x70a>
 8007a68:	4b16      	ldr	r3, [pc, #88]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007a6c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007a70:	d902      	bls.n	8007a78 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x710>
									S5.Lock_delay = 1;
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	879a      	strh	r2, [r3, #60]	; 0x3c
							if (S5._Set_Peep > D1._PEEP_Val + 10)
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a7a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x760>)
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	330a      	adds	r3, #10
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a94:	dd08      	ble.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
								S5._Set_Peep = S5._Set_Peep;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	4a0a      	ldr	r2, [pc, #40]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8007a9e:	e003      	b.n	8007aa8 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x740>
							S5._Set_Peep = S5._Set_Peep;
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	4a07      	ldr	r2, [pc, #28]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007aa6:	6393      	str	r3, [r2, #56]	; 0x38
						S5._Peep_Avg_count = 0;
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	621a      	str	r2, [r3, #32]
						S5._Peep_Avg = 0;
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <Peep_E_Valve_Lock_delay_BACKUP_VC+0x75c>)
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	615a      	str	r2, [r3, #20]
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20016df4 	.word	0x20016df4
 8007ac8:	20016e90 	.word	0x20016e90
 8007acc:	40400000 	.word	0x40400000

08007ad0 <BACKUP_VC_CMV_PARAMETERS>:



void BACKUP_VC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]


			D1._VT_Val = RX_PARAM_CMD_PACKET->_VTI;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	88db      	ldrh	r3, [r3, #6]
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	4b8c      	ldr	r3, [pc, #560]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007ae0:	829a      	strh	r2, [r3, #20]
			D1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	795a      	ldrb	r2, [r3, #5]
 8007ae6:	4b8a      	ldr	r3, [pc, #552]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007ae8:	705a      	strb	r2, [r3, #1]
			D1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7a5b      	ldrb	r3, [r3, #9]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007af8:	461a      	mov	r2, r3
 8007afa:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007afc:	605a      	str	r2, [r3, #4]
			D1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7a1b      	ldrb	r3, [r3, #8]
 8007b02:	091b      	lsrs	r3, r3, #4
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	461a      	mov	r2, r3
 8007b08:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b0a:	609a      	str	r2, [r3, #8]
			D1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7a1b      	ldrb	r3, [r3, #8]
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	4a7e      	ldr	r2, [pc, #504]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b16:	60d3      	str	r3, [r2, #12]
			D1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7b1b      	ldrb	r3, [r3, #12]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	4b7c      	ldr	r3, [pc, #496]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b20:	821a      	strh	r2, [r3, #16]
			D1.RR=RX_PARAM_CMD_PACKET->_RR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7a5a      	ldrb	r2, [r3, #9]
 8007b26:	4b7a      	ldr	r3, [pc, #488]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b28:	749a      	strb	r2, [r3, #18]
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7a9a      	ldrb	r2, [r3, #10]
 8007b2e:	4b79      	ldr	r3, [pc, #484]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


			D2._I_TIMER_HOLD = (D1.I_Time * (D1.CycleTime / (D1.I_Time +D1.E_Time)));
 8007b34:	4b76      	ldr	r3, [pc, #472]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4a75      	ldr	r2, [pc, #468]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b3a:	6851      	ldr	r1, [r2, #4]
 8007b3c:	4a74      	ldr	r2, [pc, #464]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b3e:	6890      	ldr	r0, [r2, #8]
 8007b40:	4a73      	ldr	r2, [pc, #460]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b42:	68d2      	ldr	r2, [r2, #12]
 8007b44:	4402      	add	r2, r0
 8007b46:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	4a72      	ldr	r2, [pc, #456]	; (8007d18 <BACKUP_VC_CMV_PARAMETERS+0x248>)
 8007b50:	6013      	str	r3, [r2, #0]
			D2._E_TIMER_HOLD = (D1.E_Time * (D1.CycleTime / (D1.I_Time + D1.E_Time)));
 8007b52:	4b6f      	ldr	r3, [pc, #444]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	4a6e      	ldr	r2, [pc, #440]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b58:	6851      	ldr	r1, [r2, #4]
 8007b5a:	4a6d      	ldr	r2, [pc, #436]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b5c:	6890      	ldr	r0, [r2, #8]
 8007b5e:	4a6c      	ldr	r2, [pc, #432]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007b60:	68d2      	ldr	r2, [r2, #12]
 8007b62:	4402      	add	r2, r0
 8007b64:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	4a6a      	ldr	r2, [pc, #424]	; (8007d18 <BACKUP_VC_CMV_PARAMETERS+0x248>)
 8007b6e:	6053      	str	r3, [r2, #4]
			D4.PID_task_delay=10;
 8007b70:	4b6a      	ldr	r3, [pc, #424]	; (8007d1c <BACKUP_VC_CMV_PARAMETERS+0x24c>)
 8007b72:	220a      	movs	r2, #10
 8007b74:	60da      	str	r2, [r3, #12]


			P1._CALC_TRIG_VAL = ((float)E_TIME_TOLERANCE/100.00)*(D2._E_TIMER_HOLD) ;
 8007b76:	4b68      	ldr	r3, [pc, #416]	; (8007d18 <BACKUP_VC_CMV_PARAMETERS+0x248>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7f8 fc6a 	bl	8000454 <__aeabi_ui2d>
 8007b80:	a361      	add	r3, pc, #388	; (adr r3, 8007d08 <BACKUP_VC_CMV_PARAMETERS+0x238>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fcdf 	bl	8000548 <__aeabi_dmul>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	f7f8 ff9b 	bl	8000acc <__aeabi_d2uiz>
 8007b96:	4603      	mov	r3, r0
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	4b61      	ldr	r3, [pc, #388]	; (8007d20 <BACKUP_VC_CMV_PARAMETERS+0x250>)
 8007b9c:	819a      	strh	r2, [r3, #12]


			S5.Lock_delay=10;
 8007b9e:	4b61      	ldr	r3, [pc, #388]	; (8007d24 <BACKUP_VC_CMV_PARAMETERS+0x254>)
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
			S5._Set_Peep=D1._PEEP_Val;
 8007ba4:	4b5a      	ldr	r3, [pc, #360]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb0:	4b5c      	ldr	r3, [pc, #368]	; (8007d24 <BACKUP_VC_CMV_PARAMETERS+0x254>)
 8007bb2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			check_dev=0;
 8007bb6:	4b5c      	ldr	r3, [pc, #368]	; (8007d28 <BACKUP_VC_CMV_PARAMETERS+0x258>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	801a      	strh	r2, [r3, #0]


			if(D1._Flow_Rate>=60)
 8007bbc:	4b54      	ldr	r3, [pc, #336]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007bbe:	8a1b      	ldrh	r3, [r3, #16]
 8007bc0:	2b3b      	cmp	r3, #59	; 0x3b
 8007bc2:	d904      	bls.n	8007bce <BACKUP_VC_CMV_PARAMETERS+0xfe>
				D4.temp_dac_new = 900;
 8007bc4:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <BACKUP_VC_CMV_PARAMETERS+0x24c>)
 8007bc6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007bca:	80da      	strh	r2, [r3, #6]
 8007bcc:	e018      	b.n	8007c00 <BACKUP_VC_CMV_PARAMETERS+0x130>
			else if(D1._Flow_Rate<60 && D1._Flow_Rate>=40 )
 8007bce:	4b50      	ldr	r3, [pc, #320]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007bd0:	8a1b      	ldrh	r3, [r3, #16]
 8007bd2:	2b3b      	cmp	r3, #59	; 0x3b
 8007bd4:	d808      	bhi.n	8007be8 <BACKUP_VC_CMV_PARAMETERS+0x118>
 8007bd6:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007bd8:	8a1b      	ldrh	r3, [r3, #16]
 8007bda:	2b27      	cmp	r3, #39	; 0x27
 8007bdc:	d904      	bls.n	8007be8 <BACKUP_VC_CMV_PARAMETERS+0x118>
				D4.temp_dac_new = 800;
 8007bde:	4b4f      	ldr	r3, [pc, #316]	; (8007d1c <BACKUP_VC_CMV_PARAMETERS+0x24c>)
 8007be0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007be4:	80da      	strh	r2, [r3, #6]
 8007be6:	e00b      	b.n	8007c00 <BACKUP_VC_CMV_PARAMETERS+0x130>
			else if(D1._Flow_Rate<40 && D1._Flow_Rate>10 )
 8007be8:	4b49      	ldr	r3, [pc, #292]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007bea:	8a1b      	ldrh	r3, [r3, #16]
 8007bec:	2b27      	cmp	r3, #39	; 0x27
 8007bee:	d807      	bhi.n	8007c00 <BACKUP_VC_CMV_PARAMETERS+0x130>
 8007bf0:	4b47      	ldr	r3, [pc, #284]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007bf2:	8a1b      	ldrh	r3, [r3, #16]
 8007bf4:	2b0a      	cmp	r3, #10
 8007bf6:	d903      	bls.n	8007c00 <BACKUP_VC_CMV_PARAMETERS+0x130>
				D4.temp_dac_new = 700;
 8007bf8:	4b48      	ldr	r3, [pc, #288]	; (8007d1c <BACKUP_VC_CMV_PARAMETERS+0x24c>)
 8007bfa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007bfe:	80da      	strh	r2, [r3, #6]



			A.PEEP_VAL=D1._PEEP_Val;
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007c02:	785a      	ldrb	r2, [r3, #1]
 8007c04:	4b49      	ldr	r3, [pc, #292]	; (8007d2c <BACKUP_VC_CMV_PARAMETERS+0x25c>)
 8007c06:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 8007c08:	f7fa fd6a 	bl	80026e0 <Alert_Receiving_Parameter>
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7a9a      	ldrb	r2, [r3, #10]
 8007c10:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._VT_Val=D1._VT_Val;
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <BACKUP_VC_CMV_PARAMETERS+0x240>)
 8007c18:	8a9a      	ldrh	r2, [r3, #20]
 8007c1a:	4b3e      	ldr	r3, [pc, #248]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007c1c:	86da      	strh	r2, [r3, #54]	; 0x36
			O2._Pressure_Base=0;
 8007c1e:	4b3d      	ldr	r3, [pc, #244]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=1;
 8007c24:	4b3b      	ldr	r3, [pc, #236]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 8007c2a:	f002 ff39 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=1;
 8007c2e:	4b3c      	ldr	r3, [pc, #240]	; (8007d20 <BACKUP_VC_CMV_PARAMETERS+0x250>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			S5.Lock_delay=200;
 8007c36:	4b3b      	ldr	r3, [pc, #236]	; (8007d24 <BACKUP_VC_CMV_PARAMETERS+0x254>)
 8007c38:	22c8      	movs	r2, #200	; 0xc8
 8007c3a:	879a      	strh	r2, [r3, #60]	; 0x3c

			Trigger_Count=0;
 8007c3c:	4b3c      	ldr	r3, [pc, #240]	; (8007d30 <BACKUP_VC_CMV_PARAMETERS+0x260>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]




			vTaskSuspend(Vc_mode_Handler);
 8007c42:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <BACKUP_VC_CMV_PARAMETERS+0x264>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f017 fe44 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	; (8007d38 <BACKUP_VC_CMV_PARAMETERS+0x268>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f017 fe3f 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(pc_mode_Handler);
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <BACKUP_VC_CMV_PARAMETERS+0x26c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f017 fe3a 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8007c60:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <BACKUP_VC_CMV_PARAMETERS+0x270>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f017 fe35 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_simv_mode_Handler);
 8007c6a:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <BACKUP_VC_CMV_PARAMETERS+0x274>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f017 fe30 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_simv_Pid_Handler);
 8007c74:	4b34      	ldr	r3, [pc, #208]	; (8007d48 <BACKUP_VC_CMV_PARAMETERS+0x278>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f017 fe2b 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Pc_simv_Mode_Handler);
 8007c7e:	4b33      	ldr	r3, [pc, #204]	; (8007d4c <BACKUP_VC_CMV_PARAMETERS+0x27c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f017 fe26 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8007c88:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <BACKUP_VC_CMV_PARAMETERS+0x280>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f017 fe21 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8007c92:	4b30      	ldr	r3, [pc, #192]	; (8007d54 <BACKUP_VC_CMV_PARAMETERS+0x284>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f017 fe1c 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8007c9c:	4b2e      	ldr	r3, [pc, #184]	; (8007d58 <BACKUP_VC_CMV_PARAMETERS+0x288>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f017 fe17 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Suction_Handler);
 8007ca6:	4b2d      	ldr	r3, [pc, #180]	; (8007d5c <BACKUP_VC_CMV_PARAMETERS+0x28c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f017 fe12 	bl	801f8d4 <vTaskSuspend>

			            if(O2._FIO2_Val>21)
 8007cb0:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007cb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007cb6:	2b15      	cmp	r3, #21
 8007cb8:	d905      	bls.n	8007cc6 <BACKUP_VC_CMV_PARAMETERS+0x1f6>
						{
							vTaskResume(Oxygen_Handler);
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <BACKUP_VC_CMV_PARAMETERS+0x290>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f017 fecc 	bl	801fa5c <vTaskResume>
 8007cc4:	e00f      	b.n	8007ce6 <BACKUP_VC_CMV_PARAMETERS+0x216>
						}
						else if(O2._FIO2_Val<=21)
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007cc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007ccc:	2b15      	cmp	r3, #21
 8007cce:	d80a      	bhi.n	8007ce6 <BACKUP_VC_CMV_PARAMETERS+0x216>
						{
							O2.O2_DAC=0;
 8007cd0:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <BACKUP_VC_CMV_PARAMETERS+0x244>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	811a      	strh	r2, [r3, #8]
							Parkar_valve_Signal(0);
 8007cd6:	4b23      	ldr	r3, [pc, #140]	; (8007d64 <BACKUP_VC_CMV_PARAMETERS+0x294>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	615a      	str	r2, [r3, #20]
							vTaskSuspend(Oxygen_Handler);
 8007cdc:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <BACKUP_VC_CMV_PARAMETERS+0x290>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f017 fdf7 	bl	801f8d4 <vTaskSuspend>
						}
			Blower_Signal(0);
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <BACKUP_VC_CMV_PARAMETERS+0x294>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 8007cec:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <BACKUP_VC_CMV_PARAMETERS+0x298>)
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <BACKUP_VC_CMV_PARAMETERS+0x298>)
 8007cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cf6:	6153      	str	r3, [r2, #20]
			_CurrentBackupMode = VCCMV_BACKUP;
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <BACKUP_VC_CMV_PARAMETERS+0x29c>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	701a      	strb	r2, [r3, #0]

}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	33333333 	.word	0x33333333
 8007d0c:	3fd33333 	.word	0x3fd33333
 8007d10:	20016e90 	.word	0x20016e90
 8007d14:	20000048 	.word	0x20000048
 8007d18:	20016cc0 	.word	0x20016cc0
 8007d1c:	20016d50 	.word	0x20016d50
 8007d20:	20016960 	.word	0x20016960
 8007d24:	20016df4 	.word	0x20016df4
 8007d28:	20016bd4 	.word	0x20016bd4
 8007d2c:	20016a2c 	.word	0x20016a2c
 8007d30:	200168b4 	.word	0x200168b4
 8007d34:	20016d78 	.word	0x20016d78
 8007d38:	2001695c 	.word	0x2001695c
 8007d3c:	20016a84 	.word	0x20016a84
 8007d40:	20016a28 	.word	0x20016a28
 8007d44:	20016c44 	.word	0x20016c44
 8007d48:	20016ad0 	.word	0x20016ad0
 8007d4c:	20016e60 	.word	0x20016e60
 8007d50:	20016e8c 	.word	0x20016e8c
 8007d54:	20016bcc 	.word	0x20016bcc
 8007d58:	20016d3c 	.word	0x20016d3c
 8007d5c:	20016e5c 	.word	0x20016e5c
 8007d60:	20016958 	.word	0x20016958
 8007d64:	40007400 	.word	0x40007400
 8007d68:	40020400 	.word	0x40020400
 8007d6c:	2000012c 	.word	0x2000012c

08007d70 <CALIBRATION_COMMAND_HANDLER>:




void CALIBRATION_COMMAND_HANDLER(REQUEST_CALIBRATION_PACKET_tst *RX_CALIBRATION_RANGE_PACKET)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

	C.BLOWER= (RX_CALIBRATION_RANGE_PACKET->_BLOWER);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	78da      	ldrb	r2, [r3, #3]
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007d7e:	701a      	strb	r2, [r3, #0]
	C.PRESSURE_SENSOR= (RX_CALIBRATION_RANGE_PACKET->_PRESSURE_SENSOR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	791a      	ldrb	r2, [r3, #4]
 8007d84:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007d86:	705a      	strb	r2, [r3, #1]
	C.FLOW_SENSOR_7002= (RX_CALIBRATION_RANGE_PACKET->_FLOW_SENSOR_7002);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	795a      	ldrb	r2, [r3, #5]
 8007d8c:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007d8e:	709a      	strb	r2, [r3, #2]
	C.LEAK_VALVE_TEST= (RX_CALIBRATION_RANGE_PACKET->_LEAK_VALVE_TEST);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	799a      	ldrb	r2, [r3, #6]
 8007d94:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007d96:	70da      	strb	r2, [r3, #3]
	C.O2_CHECK= (RX_CALIBRATION_RANGE_PACKET->_O2_CHECK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	79da      	ldrb	r2, [r3, #7]
 8007d9c:	4b12      	ldr	r3, [pc, #72]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007d9e:	711a      	strb	r2, [r3, #4]
	C.ALARAM_TEST= (RX_CALIBRATION_RANGE_PACKET->_ALARAM_TEST);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	7a1a      	ldrb	r2, [r3, #8]
 8007da4:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007da6:	715a      	strb	r2, [r3, #5]
	C.BATTERY_TEST= (RX_CALIBRATION_RANGE_PACKET->_BATTERY_TEST);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7a5a      	ldrb	r2, [r3, #9]
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <CALIBRATION_COMMAND_HANDLER+0x78>)
 8007dae:	719a      	strb	r2, [r3, #6]

	_RESPOND_CALIBRATION_PACKET._REPORT0=0;
 8007db0:	4b0e      	ldr	r3, [pc, #56]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	70da      	strb	r2, [r3, #3]
	_RESPOND_CALIBRATION_PACKET._PRESSURE=0;
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	711a      	strb	r2, [r3, #4]
	_RESPOND_CALIBRATION_PACKET._FLOW=0;
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	715a      	strb	r2, [r3, #5]
	_RESPOND_CALIBRATION_PACKET._O2FLOW=0;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	71da      	strb	r2, [r3, #7]
	_RESPOND_CALIBRATION_PACKET._LEAK=0;
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	719a      	strb	r2, [r3, #6]
	_RESPOND_CALIBRATION_PACKET._BATTERY=0;
 8007dce:	4b07      	ldr	r3, [pc, #28]	; (8007dec <CALIBRATION_COMMAND_HANDLER+0x7c>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	725a      	strb	r2, [r3, #9]

	vTaskResume(Calibration_Handler);
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <CALIBRATION_COMMAND_HANDLER+0x80>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f017 fe3f 	bl	801fa5c <vTaskResume>

}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20016bd8 	.word	0x20016bd8
 8007dec:	200168b8 	.word	0x200168b8
 8007df0:	20016cd0 	.word	0x20016cd0

08007df4 <chksum8_cal>:



uint8_t chksum8_cal(const unsigned char *buff, size_t len)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e00a      	b.n	8007e1a <chksum8_cal+0x26>
        sum += *(buff++);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f1      	bne.n	8007e04 <chksum8_cal+0x10>
    return (uint8_t)sum;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	b2db      	uxtb	r3, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <SEND_REPORT_PACKET>:


void SEND_REPORT_PACKET()
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0

	_RESPOND_CALIBRATION_PACKET._header = 0x5053;
 8007e34:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007e44:	705a      	strb	r2, [r3, #1]
	_RESPOND_CALIBRATION_PACKET._length = 0x08;
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e48:	2208      	movs	r2, #8
 8007e4a:	709a      	strb	r2, [r3, #2]
	_RESPOND_CALIBRATION_PACKET._CRC8   = chksum8_cal((unsigned char*)&_RESPOND_CALIBRATION_PACKET._REPORT0,_RESPOND_CALIBRATION_PACKET._length);
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	4619      	mov	r1, r3
 8007e52:	480c      	ldr	r0, [pc, #48]	; (8007e84 <SEND_REPORT_PACKET+0x54>)
 8007e54:	f7ff ffce 	bl	8007df4 <chksum8_cal>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e5e:	72da      	strb	r2, [r3, #11]
#if UART==6
		  	HAL_UART_Transmit(&huart6,(uint8_t*)&_RESPOND_CALIBRATION_PACKET,sizeof(_RESPOND_CALIBRATION_PACKET),300);
 8007e60:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007e64:	220c      	movs	r2, #12
 8007e66:	4906      	ldr	r1, [pc, #24]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e68:	4807      	ldr	r0, [pc, #28]	; (8007e88 <SEND_REPORT_PACKET+0x58>)
 8007e6a:	f012 fd3b 	bl	801a8e4 <HAL_UART_Transmit>
#endif
#if UART==5
		  	HAL_UART_Transmit(&huart5,(uint8_t*)&_RESPOND_CALIBRATION_PACKET,sizeof(_RESPOND_CALIBRATION_PACKET),300);
#endif
		  	CDC_Transmit_FS((uint8_t*)&_RESPOND_CALIBRATION_PACKET,sizeof(_RESPOND_CALIBRATION_PACKET));
 8007e6e:	210c      	movs	r1, #12
 8007e70:	4803      	ldr	r0, [pc, #12]	; (8007e80 <SEND_REPORT_PACKET+0x50>)
 8007e72:	f019 fbf3 	bl	802165c <CDC_Transmit_FS>
		  	C.Uart_Calib=0;
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <SEND_REPORT_PACKET+0x5c>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	71da      	strb	r2, [r3, #7]

}
 8007e7c:	bf00      	nop
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200168b8 	.word	0x200168b8
 8007e84:	200168bb 	.word	0x200168bb
 8007e88:	20016dac 	.word	0x20016dac
 8007e8c:	20016bd8 	.word	0x20016bd8

08007e90 <CALIBRATION_Task>:


void CALIBRATION_Task(void *argument)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

	while(1)
	{

		if(C.BLOWER==1)
 8007e98:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d102      	bne.n	8007ea6 <CALIBRATION_Task+0x16>
		{
			CALIBRATION_Blower();
 8007ea0:	f000 f830 	bl	8007f04 <CALIBRATION_Blower>
 8007ea4:	e028      	b.n	8007ef8 <CALIBRATION_Task+0x68>

		}
		else if(C.PRESSURE_SENSOR==1)
 8007ea6:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d102      	bne.n	8007eb4 <CALIBRATION_Task+0x24>
		{
			CALIBRATION_Pressure_Sensor();
 8007eae:	f000 f89d 	bl	8007fec <CALIBRATION_Pressure_Sensor>
 8007eb2:	e021      	b.n	8007ef8 <CALIBRATION_Task+0x68>
		}
		else if(C.FLOW_SENSOR_7002==1)
 8007eb4:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d102      	bne.n	8007ec2 <CALIBRATION_Task+0x32>
		{
			CALIBRATION_Proximal_Flow_Sensor();
 8007ebc:	f000 f90a 	bl	80080d4 <CALIBRATION_Proximal_Flow_Sensor>
 8007ec0:	e01a      	b.n	8007ef8 <CALIBRATION_Task+0x68>

		}
		else if(C.LEAK_VALVE_TEST==1)
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d102      	bne.n	8007ed0 <CALIBRATION_Task+0x40>
		{
			CALIBRATION_Exp_valve();
 8007eca:	f000 f979 	bl	80081c0 <CALIBRATION_Exp_valve>
 8007ece:	e013      	b.n	8007ef8 <CALIBRATION_Task+0x68>
		}
		else if(C.O2_CHECK==1)
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d102      	bne.n	8007ede <CALIBRATION_Task+0x4e>
		{
			CALIBRATION_Oxygen();
 8007ed8:	f000 fa42 	bl	8008360 <CALIBRATION_Oxygen>
 8007edc:	e00c      	b.n	8007ef8 <CALIBRATION_Task+0x68>
		}
		else if(C.ALARAM_TEST==1)
 8007ede:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007ee0:	795b      	ldrb	r3, [r3, #5]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d102      	bne.n	8007eec <CALIBRATION_Task+0x5c>
		{
			CALIBRATION_Led();
 8007ee6:	f000 fad3 	bl	8008490 <CALIBRATION_Led>
 8007eea:	e005      	b.n	8007ef8 <CALIBRATION_Task+0x68>
		}
		else if(C.BATTERY_TEST==1)
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <CALIBRATION_Task+0x70>)
 8007eee:	799b      	ldrb	r3, [r3, #6]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <CALIBRATION_Task+0x68>
		{
			CALIBRATION_Battery();
 8007ef4:	f000 fb66 	bl	80085c4 <CALIBRATION_Battery>
		}
		vTaskDelay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f017 fcb7 	bl	801f86c <vTaskDelay>
		if(C.BLOWER==1)
 8007efe:	e7cb      	b.n	8007e98 <CALIBRATION_Task+0x8>
 8007f00:	20016bd8 	.word	0x20016bd8

08007f04 <CALIBRATION_Blower>:
}



void CALIBRATION_Blower(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0

	if(Pressure_sensor._Pressure_Val<60)
 8007f08:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <CALIBRATION_Blower+0xcc>)
 8007f0a:	791b      	ldrb	r3, [r3, #4]
 8007f0c:	2b3b      	cmp	r3, #59	; 0x3b
 8007f0e:	d815      	bhi.n	8007f3c <CALIBRATION_Blower+0x38>
	{
		C.error_count++;
 8007f10:	4b30      	ldr	r3, [pc, #192]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	3301      	adds	r3, #1
 8007f16:	4a2f      	ldr	r2, [pc, #188]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f18:	6093      	str	r3, [r2, #8]
		Blower_ON();
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <CALIBRATION_Blower+0xd4>)
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	4a2e      	ldr	r2, [pc, #184]	; (8007fd8 <CALIBRATION_Blower+0xd4>)
 8007f20:	f043 0320 	orr.w	r3, r3, #32
 8007f24:	6153      	str	r3, [r2, #20]
		ExpValve_CLOSE();
 8007f26:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f30:	6153      	str	r3, [r2, #20]
		Blower_Signal(1800);
 8007f32:	4b2b      	ldr	r3, [pc, #172]	; (8007fe0 <CALIBRATION_Blower+0xdc>)
 8007f34:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	e020      	b.n	8007f7e <CALIBRATION_Blower+0x7a>
	}
	else
	{
		Blower_Signal(0);
 8007f3c:	4b28      	ldr	r3, [pc, #160]	; (8007fe0 <CALIBRATION_Blower+0xdc>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 8007f42:	4b26      	ldr	r3, [pc, #152]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f4c:	6153      	str	r3, [r2, #20]
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x01 ;
 8007f4e:	4b25      	ldr	r3, [pc, #148]	; (8007fe4 <CALIBRATION_Blower+0xe0>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._PRESSURE =Pressure_sensor._Pressure_Val ;
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <CALIBRATION_Blower+0xcc>)
 8007f56:	791a      	ldrb	r2, [r3, #4]
 8007f58:	4b22      	ldr	r3, [pc, #136]	; (8007fe4 <CALIBRATION_Blower+0xe0>)
 8007f5a:	711a      	strb	r2, [r3, #4]
		C.Uart_Calib=1;
 8007f5c:	4b1d      	ldr	r3, [pc, #116]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 8007f62:	2014      	movs	r0, #20
 8007f64:	f017 fc82 	bl	801f86c <vTaskDelay>
		C.error_count=0;
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
		C.BLOWER=0;
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Calibration_Handler);
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <CALIBRATION_Blower+0xe4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f017 fcab 	bl	801f8d4 <vTaskSuspend>
	 }
	 if(C.error_count>4000)
 8007f7e:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8007f86:	dd20      	ble.n	8007fca <CALIBRATION_Blower+0xc6>
	{
		Blower_Signal(0);
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <CALIBRATION_Blower+0xdc>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4a12      	ldr	r2, [pc, #72]	; (8007fdc <CALIBRATION_Blower+0xd8>)
 8007f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f98:	6153      	str	r3, [r2, #20]
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00 ;
 8007f9a:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <CALIBRATION_Blower+0xe0>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._PRESSURE =Pressure_sensor._Pressure_Val ;
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <CALIBRATION_Blower+0xcc>)
 8007fa2:	791a      	ldrb	r2, [r3, #4]
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <CALIBRATION_Blower+0xe0>)
 8007fa6:	711a      	strb	r2, [r3, #4]
		C.Uart_Calib=1;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 8007fae:	2014      	movs	r0, #20
 8007fb0:	f017 fc5c 	bl	801f86c <vTaskDelay>
		C.error_count=0;
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
		C.BLOWER=0;
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <CALIBRATION_Blower+0xd0>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Calibration_Handler);
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <CALIBRATION_Blower+0xe4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f017 fc85 	bl	801f8d4 <vTaskSuspend>
	 }
}
 8007fca:	bf00      	nop
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20016cfc 	.word	0x20016cfc
 8007fd4:	20016bd8 	.word	0x20016bd8
 8007fd8:	40021000 	.word	0x40021000
 8007fdc:	40020400 	.word	0x40020400
 8007fe0:	40007400 	.word	0x40007400
 8007fe4:	200168b8 	.word	0x200168b8
 8007fe8:	20016cd0 	.word	0x20016cd0

08007fec <CALIBRATION_Pressure_Sensor>:

void CALIBRATION_Pressure_Sensor(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0

	 if(Pressure_sensor._Pressure_Val<60)
 8007ff0:	4b31      	ldr	r3, [pc, #196]	; (80080b8 <CALIBRATION_Pressure_Sensor+0xcc>)
 8007ff2:	791b      	ldrb	r3, [r3, #4]
 8007ff4:	2b3b      	cmp	r3, #59	; 0x3b
 8007ff6:	d815      	bhi.n	8008024 <CALIBRATION_Pressure_Sensor+0x38>
	 {
		C.error_count++;
 8007ff8:	4b30      	ldr	r3, [pc, #192]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a2f      	ldr	r2, [pc, #188]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008000:	6093      	str	r3, [r2, #8]
		Blower_ON();
 8008002:	4b2f      	ldr	r3, [pc, #188]	; (80080c0 <CALIBRATION_Pressure_Sensor+0xd4>)
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	4a2e      	ldr	r2, [pc, #184]	; (80080c0 <CALIBRATION_Pressure_Sensor+0xd4>)
 8008008:	f043 0320 	orr.w	r3, r3, #32
 800800c:	6153      	str	r3, [r2, #20]
		ExpValve_CLOSE();
 800800e:	4b2d      	ldr	r3, [pc, #180]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4a2c      	ldr	r2, [pc, #176]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 8008014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008018:	6153      	str	r3, [r2, #20]
		Blower_Signal(1800);
 800801a:	4b2b      	ldr	r3, [pc, #172]	; (80080c8 <CALIBRATION_Pressure_Sensor+0xdc>)
 800801c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8008020:	609a      	str	r2, [r3, #8]
 8008022:	e020      	b.n	8008066 <CALIBRATION_Pressure_Sensor+0x7a>
	 }
	 else
	 {
		Blower_Signal(0);
 8008024:	4b28      	ldr	r3, [pc, #160]	; (80080c8 <CALIBRATION_Pressure_Sensor+0xdc>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	4a25      	ldr	r2, [pc, #148]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 8008030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008034:	6153      	str	r3, [r2, #20]
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x02 ;
 8008036:	4b25      	ldr	r3, [pc, #148]	; (80080cc <CALIBRATION_Pressure_Sensor+0xe0>)
 8008038:	2202      	movs	r2, #2
 800803a:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._PRESSURE =Pressure_sensor._Pressure_Val ;
 800803c:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <CALIBRATION_Pressure_Sensor+0xcc>)
 800803e:	791a      	ldrb	r2, [r3, #4]
 8008040:	4b22      	ldr	r3, [pc, #136]	; (80080cc <CALIBRATION_Pressure_Sensor+0xe0>)
 8008042:	711a      	strb	r2, [r3, #4]
		C.Uart_Calib=1;
 8008044:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008046:	2201      	movs	r2, #1
 8008048:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 800804a:	2014      	movs	r0, #20
 800804c:	f017 fc0e 	bl	801f86c <vTaskDelay>
		C.error_count=0;
 8008050:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
		C.PRESSURE_SENSOR=0;
 8008056:	4b19      	ldr	r3, [pc, #100]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008058:	2200      	movs	r2, #0
 800805a:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(Calibration_Handler);
 800805c:	4b1c      	ldr	r3, [pc, #112]	; (80080d0 <CALIBRATION_Pressure_Sensor+0xe4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f017 fc37 	bl	801f8d4 <vTaskSuspend>
	 }
	 if(C.error_count>4000)
 8008066:	4b15      	ldr	r3, [pc, #84]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800806e:	dd20      	ble.n	80080b2 <CALIBRATION_Pressure_Sensor+0xc6>
	 {
		Blower_Signal(0);
 8008070:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <CALIBRATION_Pressure_Sensor+0xdc>)
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 8008076:	4b13      	ldr	r3, [pc, #76]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4a12      	ldr	r2, [pc, #72]	; (80080c4 <CALIBRATION_Pressure_Sensor+0xd8>)
 800807c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008080:	6153      	str	r3, [r2, #20]
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00 ;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <CALIBRATION_Pressure_Sensor+0xe0>)
 8008084:	2200      	movs	r2, #0
 8008086:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._PRESSURE =Pressure_sensor._Pressure_Val ;
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <CALIBRATION_Pressure_Sensor+0xcc>)
 800808a:	791a      	ldrb	r2, [r3, #4]
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <CALIBRATION_Pressure_Sensor+0xe0>)
 800808e:	711a      	strb	r2, [r3, #4]
		C.Uart_Calib=1;
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 8008092:	2201      	movs	r2, #1
 8008094:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 8008096:	2014      	movs	r0, #20
 8008098:	f017 fbe8 	bl	801f86c <vTaskDelay>
		C.error_count=0;
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 800809e:	2200      	movs	r2, #0
 80080a0:	609a      	str	r2, [r3, #8]
		C.PRESSURE_SENSOR=0;
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <CALIBRATION_Pressure_Sensor+0xd0>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(Calibration_Handler);
 80080a8:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <CALIBRATION_Pressure_Sensor+0xe4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f017 fc11 	bl	801f8d4 <vTaskSuspend>
	 }
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20016cfc 	.word	0x20016cfc
 80080bc:	20016bd8 	.word	0x20016bd8
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40020400 	.word	0x40020400
 80080c8:	40007400 	.word	0x40007400
 80080cc:	200168b8 	.word	0x200168b8
 80080d0:	20016cd0 	.word	0x20016cd0

080080d4 <CALIBRATION_Proximal_Flow_Sensor>:


void CALIBRATION_Proximal_Flow_Sensor()
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0

	  if (Flow_Sensor_cal._Flow_Val < 50  )
 80080d8:	4b32      	ldr	r3, [pc, #200]	; (80081a4 <CALIBRATION_Proximal_Flow_Sensor+0xd0>)
 80080da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080dc:	2b31      	cmp	r3, #49	; 0x31
 80080de:	dc15      	bgt.n	800810c <CALIBRATION_Proximal_Flow_Sensor+0x38>
	  {
	      C.error_count++;
 80080e0:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	3301      	adds	r3, #1
 80080e6:	4a30      	ldr	r2, [pc, #192]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 80080e8:	6093      	str	r3, [r2, #8]
		  Blower_ON();
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <CALIBRATION_Proximal_Flow_Sensor+0xd8>)
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <CALIBRATION_Proximal_Flow_Sensor+0xd8>)
 80080f0:	f043 0320 	orr.w	r3, r3, #32
 80080f4:	6153      	str	r3, [r2, #20]
		  ExpValve_CLOSE();
 80080f6:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 80080fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008100:	6153      	str	r3, [r2, #20]
		  Blower_Signal(1300);
 8008102:	4b2c      	ldr	r3, [pc, #176]	; (80081b4 <CALIBRATION_Proximal_Flow_Sensor+0xe0>)
 8008104:	f240 5214 	movw	r2, #1300	; 0x514
 8008108:	609a      	str	r2, [r3, #8]
 800810a:	e021      	b.n	8008150 <CALIBRATION_Proximal_Flow_Sensor+0x7c>
	  }
	  else
	  {
		   Blower_Signal(0);
 800810c:	4b29      	ldr	r3, [pc, #164]	; (80081b4 <CALIBRATION_Proximal_Flow_Sensor+0xe0>)
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
		   ExpValve_OPEN();
 8008112:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	4a26      	ldr	r2, [pc, #152]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 8008118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800811c:	6153      	str	r3, [r2, #20]
		   _RESPOND_CALIBRATION_PACKET._REPORT0 = 0x04;
 800811e:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <CALIBRATION_Proximal_Flow_Sensor+0xe4>)
 8008120:	2204      	movs	r2, #4
 8008122:	70da      	strb	r2, [r3, #3]
		   _RESPOND_CALIBRATION_PACKET._FLOW = Flow_Sensor_cal._Flow_Val;
 8008124:	4b1f      	ldr	r3, [pc, #124]	; (80081a4 <CALIBRATION_Proximal_Flow_Sensor+0xd0>)
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <CALIBRATION_Proximal_Flow_Sensor+0xe4>)
 800812c:	715a      	strb	r2, [r3, #5]
		   C.Uart_Calib = 1;
 800812e:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 8008130:	2201      	movs	r2, #1
 8008132:	71da      	strb	r2, [r3, #7]
		   vTaskDelay(20);
 8008134:	2014      	movs	r0, #20
 8008136:	f017 fb99 	bl	801f86c <vTaskDelay>
		   C.error_count=0;
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 800813c:	2200      	movs	r2, #0
 800813e:	609a      	str	r2, [r3, #8]
		   C.FLOW_SENSOR_7002=0;
 8008140:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 8008142:	2200      	movs	r2, #0
 8008144:	709a      	strb	r2, [r3, #2]
		   vTaskSuspend(Calibration_Handler);
 8008146:	4b1d      	ldr	r3, [pc, #116]	; (80081bc <CALIBRATION_Proximal_Flow_Sensor+0xe8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f017 fbc2 	bl	801f8d4 <vTaskSuspend>
	   }
	   if (C.error_count > 4000)
 8008150:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008158:	dd21      	ble.n	800819e <CALIBRATION_Proximal_Flow_Sensor+0xca>
	   {
			Blower_Signal(0);
 800815a:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <CALIBRATION_Proximal_Flow_Sensor+0xe0>)
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 8008160:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <CALIBRATION_Proximal_Flow_Sensor+0xdc>)
 8008166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800816a:	6153      	str	r3, [r2, #20]
			_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00;
 800816c:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <CALIBRATION_Proximal_Flow_Sensor+0xe4>)
 800816e:	2200      	movs	r2, #0
 8008170:	70da      	strb	r2, [r3, #3]
			_RESPOND_CALIBRATION_PACKET._FLOW = Flow_Sensor_cal._Flow_Val;
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <CALIBRATION_Proximal_Flow_Sensor+0xd0>)
 8008174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <CALIBRATION_Proximal_Flow_Sensor+0xe4>)
 800817a:	715a      	strb	r2, [r3, #5]
			C.Uart_Calib = 1;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 800817e:	2201      	movs	r2, #1
 8008180:	71da      	strb	r2, [r3, #7]
			vTaskDelay(20);
 8008182:	2014      	movs	r0, #20
 8008184:	f017 fb72 	bl	801f86c <vTaskDelay>
			C.error_count = 0;
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
			C.FLOW_SENSOR_7002=0;
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <CALIBRATION_Proximal_Flow_Sensor+0xd4>)
 8008190:	2200      	movs	r2, #0
 8008192:	709a      	strb	r2, [r3, #2]
			vTaskSuspend(Calibration_Handler);
 8008194:	4b09      	ldr	r3, [pc, #36]	; (80081bc <CALIBRATION_Proximal_Flow_Sensor+0xe8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f017 fb9b 	bl	801f8d4 <vTaskSuspend>
		}

}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20016c48 	.word	0x20016c48
 80081a8:	20016bd8 	.word	0x20016bd8
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40020400 	.word	0x40020400
 80081b4:	40007400 	.word	0x40007400
 80081b8:	200168b8 	.word	0x200168b8
 80081bc:	20016cd0 	.word	0x20016cd0

080081c0 <CALIBRATION_Exp_valve>:



void CALIBRATION_Exp_valve()
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0


	Blower_ON();
 80081c6:	4b5e      	ldr	r3, [pc, #376]	; (8008340 <CALIBRATION_Exp_valve+0x180>)
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	4a5d      	ldr	r2, [pc, #372]	; (8008340 <CALIBRATION_Exp_valve+0x180>)
 80081cc:	f043 0320 	orr.w	r3, r3, #32
 80081d0:	6153      	str	r3, [r2, #20]
	ExpValve_CLOSE();
 80081d2:	4b5c      	ldr	r3, [pc, #368]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	4a5b      	ldr	r2, [pc, #364]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 80081d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081dc:	6153      	str	r3, [r2, #20]
	Blower_Signal(800);
 80081de:	4b5a      	ldr	r3, [pc, #360]	; (8008348 <CALIBRATION_Exp_valve+0x188>)
 80081e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80081e4:	609a      	str	r2, [r3, #8]
	vTaskDelay(1000);
 80081e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081ea:	f017 fb3f 	bl	801f86c <vTaskDelay>
	Blower_Signal(0);
 80081ee:	4b56      	ldr	r3, [pc, #344]	; (8008348 <CALIBRATION_Exp_valve+0x188>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	609a      	str	r2, [r3, #8]
	vTaskDelay(1000);
 80081f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081f8:	f017 fb38 	bl	801f86c <vTaskDelay>
	C.temp_Pressure_Val1=Pressure_sensor._Pressure_Val;
 80081fc:	4b53      	ldr	r3, [pc, #332]	; (800834c <CALIBRATION_Exp_valve+0x18c>)
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	ee07 3a90 	vmov	s15, r3
 8008204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008208:	4b51      	ldr	r3, [pc, #324]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 800820a:	edc3 7a03 	vstr	s15, [r3, #12]
	ExpValve_OPEN();
 800820e:	4b4d      	ldr	r3, [pc, #308]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	4a4c      	ldr	r2, [pc, #304]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008218:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 800821a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800821e:	f017 fb25 	bl	801f86c <vTaskDelay>
	ExpValve_CLOSE();
 8008222:	4b48      	ldr	r3, [pc, #288]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	4a47      	ldr	r2, [pc, #284]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800822c:	6153      	str	r3, [r2, #20]
	Blower_Signal(800);
 800822e:	4b46      	ldr	r3, [pc, #280]	; (8008348 <CALIBRATION_Exp_valve+0x188>)
 8008230:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008234:	609a      	str	r2, [r3, #8]
	vTaskDelay(1000);
 8008236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800823a:	f017 fb17 	bl	801f86c <vTaskDelay>
	Blower_Signal(0);
 800823e:	4b42      	ldr	r3, [pc, #264]	; (8008348 <CALIBRATION_Exp_valve+0x188>)
 8008240:	2200      	movs	r2, #0
 8008242:	609a      	str	r2, [r3, #8]
	vTaskDelay(1000);
 8008244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008248:	f017 fb10 	bl	801f86c <vTaskDelay>
	C.temp_Pressure_Val2=Pressure_sensor._Pressure_Val;
 800824c:	4b3f      	ldr	r3, [pc, #252]	; (800834c <CALIBRATION_Exp_valve+0x18c>)
 800824e:	791b      	ldrb	r3, [r3, #4]
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008258:	4b3d      	ldr	r3, [pc, #244]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 800825a:	edc3 7a04 	vstr	s15, [r3, #16]
	vTaskDelay(1000);
 800825e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008262:	f017 fb03 	bl	801f86c <vTaskDelay>
	C.temp_Pressure_Val2=Pressure_sensor._Pressure_Val;
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <CALIBRATION_Exp_valve+0x18c>)
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	4b37      	ldr	r3, [pc, #220]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 8008274:	edc3 7a04 	vstr	s15, [r3, #16]
	ExpValve_OPEN();
 8008278:	4b32      	ldr	r3, [pc, #200]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	4a31      	ldr	r2, [pc, #196]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 800827e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008282:	6153      	str	r3, [r2, #20]

	C.total_temp_Pressure_Val=C.temp_Pressure_Val1-C.temp_Pressure_Val2;
 8008284:	4b32      	ldr	r3, [pc, #200]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 8008286:	ed93 7a03 	vldr	s14, [r3, #12]
 800828a:	4b31      	ldr	r3, [pc, #196]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 800828c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008294:	4b2e      	ldr	r3, [pc, #184]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 8008296:	edc3 7a05 	vstr	s15, [r3, #20]
	if(C.total_temp_Pressure_Val<=5)
 800829a:	4b2d      	ldr	r3, [pc, #180]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 800829c:	edd3 7a05 	vldr	s15, [r3, #20]
 80082a0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80082a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ac:	d822      	bhi.n	80082f4 <CALIBRATION_Exp_valve+0x134>
	{
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x08 ;
 80082ae:	4b29      	ldr	r3, [pc, #164]	; (8008354 <CALIBRATION_Exp_valve+0x194>)
 80082b0:	2208      	movs	r2, #8
 80082b2:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._LEAK = C.total_temp_Pressure_Val ;
 80082b4:	4b26      	ldr	r3, [pc, #152]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 80082b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80082ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082be:	edc7 7a01 	vstr	s15, [r7, #4]
 80082c2:	793b      	ldrb	r3, [r7, #4]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4b23      	ldr	r3, [pc, #140]	; (8008354 <CALIBRATION_Exp_valve+0x194>)
 80082c8:	719a      	strb	r2, [r3, #6]
		C.Uart_Calib=1;
 80082ca:	4b21      	ldr	r3, [pc, #132]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 80082d0:	2014      	movs	r0, #20
 80082d2:	f017 facb 	bl	801f86c <vTaskDelay>
		C.LEAK_VALVE_TEST=0;
 80082d6:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 80082d8:	2200      	movs	r2, #0
 80082da:	70da      	strb	r2, [r3, #3]
		ExpValve_OPEN();
 80082dc:	4b19      	ldr	r3, [pc, #100]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	4a18      	ldr	r2, [pc, #96]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 80082e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e6:	6153      	str	r3, [r2, #20]
		vTaskSuspend(Calibration_Handler);
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <CALIBRATION_Exp_valve+0x198>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f017 faf1 	bl	801f8d4 <vTaskSuspend>
		C.LEAK_VALVE_TEST=0;
		ExpValve_OPEN();
		vTaskSuspend(Calibration_Handler);
	}

}
 80082f2:	e021      	b.n	8008338 <CALIBRATION_Exp_valve+0x178>
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00 ;
 80082f4:	4b17      	ldr	r3, [pc, #92]	; (8008354 <CALIBRATION_Exp_valve+0x194>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._LEAK = C.total_temp_Pressure_Val ;
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 80082fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8008300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008304:	edc7 7a01 	vstr	s15, [r7, #4]
 8008308:	793b      	ldrb	r3, [r7, #4]
 800830a:	b2da      	uxtb	r2, r3
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <CALIBRATION_Exp_valve+0x194>)
 800830e:	719a      	strb	r2, [r3, #6]
		C.Uart_Calib=1;
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 8008312:	2201      	movs	r2, #1
 8008314:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 8008316:	2014      	movs	r0, #20
 8008318:	f017 faa8 	bl	801f86c <vTaskDelay>
		C.LEAK_VALVE_TEST=0;
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <CALIBRATION_Exp_valve+0x190>)
 800831e:	2200      	movs	r2, #0
 8008320:	70da      	strb	r2, [r3, #3]
		ExpValve_OPEN();
 8008322:	4b08      	ldr	r3, [pc, #32]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	4a07      	ldr	r2, [pc, #28]	; (8008344 <CALIBRATION_Exp_valve+0x184>)
 8008328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800832c:	6153      	str	r3, [r2, #20]
		vTaskSuspend(Calibration_Handler);
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <CALIBRATION_Exp_valve+0x198>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f017 face 	bl	801f8d4 <vTaskSuspend>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	40021000 	.word	0x40021000
 8008344:	40020400 	.word	0x40020400
 8008348:	40007400 	.word	0x40007400
 800834c:	20016cfc 	.word	0x20016cfc
 8008350:	20016bd8 	.word	0x20016bd8
 8008354:	200168b8 	.word	0x200168b8
 8008358:	20016cd0 	.word	0x20016cd0
 800835c:	00000000 	.word	0x00000000

08008360 <CALIBRATION_Oxygen>:


void CALIBRATION_Oxygen()
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0

	           if(O2.O2_percentage>=20)
 8008366:	4b42      	ldr	r3, [pc, #264]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008368:	7c1b      	ldrb	r3, [r3, #16]
 800836a:	2b13      	cmp	r3, #19
 800836c:	d915      	bls.n	800839a <CALIBRATION_Oxygen+0x3a>
			   {

				     _RESPOND_CALIBRATION_PACKET._REPORT0 = 0x10 ;
 800836e:	4b41      	ldr	r3, [pc, #260]	; (8008474 <CALIBRATION_Oxygen+0x114>)
 8008370:	2210      	movs	r2, #16
 8008372:	70da      	strb	r2, [r3, #3]
				     _RESPOND_CALIBRATION_PACKET._O2FLOW = O2.O2_percentage ;
 8008374:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008376:	7c1a      	ldrb	r2, [r3, #16]
 8008378:	4b3e      	ldr	r3, [pc, #248]	; (8008474 <CALIBRATION_Oxygen+0x114>)
 800837a:	71da      	strb	r2, [r3, #7]
				      C.Uart_Calib=1;
 800837c:	4b3e      	ldr	r3, [pc, #248]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 800837e:	2201      	movs	r2, #1
 8008380:	71da      	strb	r2, [r3, #7]
				      vTaskDelay(20);
 8008382:	2014      	movs	r0, #20
 8008384:	f017 fa72 	bl	801f86c <vTaskDelay>
				      C.O2_CHECK=0;
 8008388:	4b3b      	ldr	r3, [pc, #236]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 800838a:	2200      	movs	r2, #0
 800838c:	711a      	strb	r2, [r3, #4]

				      vTaskSuspend(Calibration_Handler);
 800838e:	4b3b      	ldr	r3, [pc, #236]	; (800847c <CALIBRATION_Oxygen+0x11c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f017 fa9e 	bl	801f8d4 <vTaskSuspend>
				    	     C.O2_CHECK=0;
				    	     vTaskSuspend(Calibration_Handler);
				    	}

				  }
}
 8008398:	e060      	b.n	800845c <CALIBRATION_Oxygen+0xfc>
					  O2._AVG_CirusO2Sensor = (AdcData[4] * 3300) / 4095;
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <CALIBRATION_Oxygen+0x120>)
 800839c:	891b      	ldrh	r3, [r3, #8]
 800839e:	461a      	mov	r2, r3
 80083a0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80083a4:	fb03 f302 	mul.w	r3, r3, r2
 80083a8:	4a36      	ldr	r2, [pc, #216]	; (8008484 <CALIBRATION_Oxygen+0x124>)
 80083aa:	fb82 1203 	smull	r1, r2, r2, r3
 80083ae:	441a      	add	r2, r3
 80083b0:	12d2      	asrs	r2, r2, #11
 80083b2:	17db      	asrs	r3, r3, #31
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083be:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 80083c0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
					  O2.O2_percentage_float=((float)O2._AVG_CirusO2Sensor /9.2);
 80083c4:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7f8 f865 	bl	8000498 <__aeabi_f2d>
 80083ce:	a326      	add	r3, pc, #152	; (adr r3, 8008468 <CALIBRATION_Oxygen+0x108>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 f9e2 	bl	800079c <__aeabi_ddiv>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f7f8 fb94 	bl	8000b0c <__aeabi_d2f>
 80083e4:	4603      	mov	r3, r0
 80083e6:	4a22      	ldr	r2, [pc, #136]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 80083e8:	6213      	str	r3, [r2, #32]
					  if(O2.O2_percentage_float>100)
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 80083ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80083f0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008488 <CALIBRATION_Oxygen+0x128>
 80083f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fc:	dd02      	ble.n	8008404 <CALIBRATION_Oxygen+0xa4>
					  	      O2.O2_percentage_float=100;
 80083fe:	4b1c      	ldr	r3, [pc, #112]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008400:	4a22      	ldr	r2, [pc, #136]	; (800848c <CALIBRATION_Oxygen+0x12c>)
 8008402:	621a      	str	r2, [r3, #32]
					  O2.O2_percentage=(int)O2.O2_percentage_float;
 8008404:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008406:	edd3 7a08 	vldr	s15, [r3, #32]
 800840a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800840e:	edc7 7a01 	vstr	s15, [r7, #4]
 8008412:	793a      	ldrb	r2, [r7, #4]
 8008414:	4b16      	ldr	r3, [pc, #88]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008416:	741a      	strb	r2, [r3, #16]
				      C.error_count++;
 8008418:	4b17      	ldr	r3, [pc, #92]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	3301      	adds	r3, #1
 800841e:	4a16      	ldr	r2, [pc, #88]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 8008420:	6093      	str	r3, [r2, #8]
				      if(C.error_count>8000)
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800842a:	dd17      	ble.n	800845c <CALIBRATION_Oxygen+0xfc>
				    	     _RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00 ;
 800842c:	4b11      	ldr	r3, [pc, #68]	; (8008474 <CALIBRATION_Oxygen+0x114>)
 800842e:	2200      	movs	r2, #0
 8008430:	70da      	strb	r2, [r3, #3]
				    	     _RESPOND_CALIBRATION_PACKET._O2FLOW = O2.O2_percentage ;
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <CALIBRATION_Oxygen+0x110>)
 8008434:	7c1a      	ldrb	r2, [r3, #16]
 8008436:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <CALIBRATION_Oxygen+0x114>)
 8008438:	71da      	strb	r2, [r3, #7]
				    	     C.Uart_Calib=1;
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 800843c:	2201      	movs	r2, #1
 800843e:	71da      	strb	r2, [r3, #7]
				    	     vTaskDelay(20);
 8008440:	2014      	movs	r0, #20
 8008442:	f017 fa13 	bl	801f86c <vTaskDelay>
				    	     C.error_count=0;
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 8008448:	2200      	movs	r2, #0
 800844a:	609a      	str	r2, [r3, #8]
				    	     C.O2_CHECK=0;
 800844c:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <CALIBRATION_Oxygen+0x118>)
 800844e:	2200      	movs	r2, #0
 8008450:	711a      	strb	r2, [r3, #4]
				    	     vTaskSuspend(Calibration_Handler);
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <CALIBRATION_Oxygen+0x11c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f017 fa3c 	bl	801f8d4 <vTaskSuspend>
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	f3af 8000 	nop.w
 8008468:	66666666 	.word	0x66666666
 800846c:	40226666 	.word	0x40226666
 8008470:	20000048 	.word	0x20000048
 8008474:	200168b8 	.word	0x200168b8
 8008478:	20016bd8 	.word	0x20016bd8
 800847c:	20016cd0 	.word	0x20016cd0
 8008480:	20016bbc 	.word	0x20016bbc
 8008484:	80080081 	.word	0x80080081
 8008488:	42c80000 	.word	0x42c80000
 800848c:	42c80000 	.word	0x42c80000

08008490 <CALIBRATION_Led>:



void CALIBRATION_Led()
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0

	O2.O2_percentage=21;
 8008494:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <CALIBRATION_Led+0x120>)
 8008496:	2215      	movs	r2, #21
 8008498:	741a      	strb	r2, [r3, #16]
		Red_Led_ON();
 800849a:	4b46      	ldr	r3, [pc, #280]	; (80085b4 <CALIBRATION_Led+0x124>)
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4a45      	ldr	r2, [pc, #276]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084a0:	f043 0310 	orr.w	r3, r3, #16
 80084a4:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 80084a6:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	4a42      	ldr	r2, [pc, #264]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084ac:	f023 0308 	bic.w	r3, r3, #8
 80084b0:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 80084b2:	4b40      	ldr	r3, [pc, #256]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	4a3f      	ldr	r2, [pc, #252]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084b8:	f023 0320 	bic.w	r3, r3, #32
 80084bc:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 80084be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80084c2:	f017 f9d3 	bl	801f86c <vTaskDelay>
	    Red_Led_OFF();
 80084c6:	4b3b      	ldr	r3, [pc, #236]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4a3a      	ldr	r2, [pc, #232]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084cc:	f023 0310 	bic.w	r3, r3, #16
 80084d0:	6153      	str	r3, [r2, #20]
		Blue_Led_ON();
 80084d2:	4b38      	ldr	r3, [pc, #224]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	4a37      	ldr	r2, [pc, #220]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 80084de:	4b35      	ldr	r3, [pc, #212]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4a34      	ldr	r2, [pc, #208]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084e4:	f023 0320 	bic.w	r3, r3, #32
 80084e8:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 80084ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80084ee:	f017 f9bd 	bl	801f86c <vTaskDelay>
	    Red_Led_OFF();
 80084f2:	4b30      	ldr	r3, [pc, #192]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	4a2f      	ldr	r2, [pc, #188]	; (80085b4 <CALIBRATION_Led+0x124>)
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	6153      	str	r3, [r2, #20]
	 	Blue_Led_OFF();
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	4a2c      	ldr	r2, [pc, #176]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008504:	f023 0308 	bic.w	r3, r3, #8
 8008508:	6153      	str	r3, [r2, #20]
	 	Green_Led_ON();
 800850a:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <CALIBRATION_Led+0x124>)
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008510:	f043 0320 	orr.w	r3, r3, #32
 8008514:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 8008516:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800851a:	f017 f9a7 	bl	801f86c <vTaskDelay>
	    Buzzer1_ON();
 800851e:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008528:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 800852a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800852e:	f017 f99d 	bl	801f86c <vTaskDelay>
	    Buzzer1_ON();
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853c:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 800853e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008542:	f017 f993 	bl	801f86c <vTaskDelay>
	    Red_Led_OFF();
 8008546:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	4a1a      	ldr	r2, [pc, #104]	; (80085b4 <CALIBRATION_Led+0x124>)
 800854c:	f023 0310 	bic.w	r3, r3, #16
 8008550:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8008552:	4b18      	ldr	r3, [pc, #96]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008558:	f023 0308 	bic.w	r3, r3, #8
 800855c:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 800855e:	4b15      	ldr	r3, [pc, #84]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	4a14      	ldr	r2, [pc, #80]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008564:	f023 0320 	bic.w	r3, r3, #32
 8008568:	6153      	str	r3, [r2, #20]
		Buzzer1_OFF();
 800856a:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <CALIBRATION_Led+0x124>)
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008574:	6153      	str	r3, [r2, #20]
		Buzzer2_OFF();
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <CALIBRATION_Led+0x124>)
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	4a0e      	ldr	r2, [pc, #56]	; (80085b4 <CALIBRATION_Led+0x124>)
 800857c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008580:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 8008582:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008586:	f017 f971 	bl	801f86c <vTaskDelay>

	    _RESPOND_CALIBRATION_PACKET._REPORT0 = 0x20 ;
 800858a:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <CALIBRATION_Led+0x128>)
 800858c:	2220      	movs	r2, #32
 800858e:	70da      	strb	r2, [r3, #3]
	    C.Uart_Calib=1;
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <CALIBRATION_Led+0x12c>)
 8008592:	2201      	movs	r2, #1
 8008594:	71da      	strb	r2, [r3, #7]
	    vTaskDelay(20);
 8008596:	2014      	movs	r0, #20
 8008598:	f017 f968 	bl	801f86c <vTaskDelay>
	    C.ALARAM_TEST=0;
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <CALIBRATION_Led+0x12c>)
 800859e:	2200      	movs	r2, #0
 80085a0:	715a      	strb	r2, [r3, #5]
	    vTaskSuspend(Calibration_Handler);
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <CALIBRATION_Led+0x130>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f017 f994 	bl	801f8d4 <vTaskSuspend>

}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20000048 	.word	0x20000048
 80085b4:	40020c00 	.word	0x40020c00
 80085b8:	200168b8 	.word	0x200168b8
 80085bc:	20016bd8 	.word	0x20016bd8
 80085c0:	20016cd0 	.word	0x20016cd0

080085c4 <CALIBRATION_Battery>:



void CALIBRATION_Battery(void *argument)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]

	if(battery>50)
 80085cc:	4b21      	ldr	r3, [pc, #132]	; (8008654 <CALIBRATION_Battery+0x90>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b32      	cmp	r3, #50	; 0x32
 80085d2:	d915      	bls.n	8008600 <CALIBRATION_Battery+0x3c>
	{
		_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x40;
 80085d4:	4b20      	ldr	r3, [pc, #128]	; (8008658 <CALIBRATION_Battery+0x94>)
 80085d6:	2240      	movs	r2, #64	; 0x40
 80085d8:	70da      	strb	r2, [r3, #3]
		_RESPOND_CALIBRATION_PACKET._BATTERY = battery;
 80085da:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <CALIBRATION_Battery+0x90>)
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <CALIBRATION_Battery+0x94>)
 80085e0:	725a      	strb	r2, [r3, #9]
		C.Uart_Calib=1;
 80085e2:	4b1e      	ldr	r3, [pc, #120]	; (800865c <CALIBRATION_Battery+0x98>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	71da      	strb	r2, [r3, #7]
		vTaskDelay(20);
 80085e8:	2014      	movs	r0, #20
 80085ea:	f017 f93f 	bl	801f86c <vTaskDelay>
		C.BATTERY_TEST=0;
 80085ee:	4b1b      	ldr	r3, [pc, #108]	; (800865c <CALIBRATION_Battery+0x98>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	719a      	strb	r2, [r3, #6]
		vTaskSuspend(Calibration_Handler);
 80085f4:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <CALIBRATION_Battery+0x9c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f017 f96b 	bl	801f8d4 <vTaskSuspend>
		}

	}


}
 80085fe:	e024      	b.n	800864a <CALIBRATION_Battery+0x86>
		cal_Battery();
 8008600:	f000 f830 	bl	8008664 <cal_Battery>
		C.error_count++;
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <CALIBRATION_Battery+0x98>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	3301      	adds	r3, #1
 800860a:	4a14      	ldr	r2, [pc, #80]	; (800865c <CALIBRATION_Battery+0x98>)
 800860c:	6093      	str	r3, [r2, #8]
		if(C.error_count>5000)
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <CALIBRATION_Battery+0x98>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f241 3288 	movw	r2, #5000	; 0x1388
 8008616:	4293      	cmp	r3, r2
 8008618:	dd17      	ble.n	800864a <CALIBRATION_Battery+0x86>
			C.error_count=0;
 800861a:	4b10      	ldr	r3, [pc, #64]	; (800865c <CALIBRATION_Battery+0x98>)
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
			_RESPOND_CALIBRATION_PACKET._REPORT0 = 0x00 ;
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <CALIBRATION_Battery+0x94>)
 8008622:	2200      	movs	r2, #0
 8008624:	70da      	strb	r2, [r3, #3]
			_RESPOND_CALIBRATION_PACKET._BATTERY = battery;
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <CALIBRATION_Battery+0x90>)
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <CALIBRATION_Battery+0x94>)
 800862c:	725a      	strb	r2, [r3, #9]
			C.Uart_Calib=1;
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <CALIBRATION_Battery+0x98>)
 8008630:	2201      	movs	r2, #1
 8008632:	71da      	strb	r2, [r3, #7]
			vTaskDelay(20);
 8008634:	2014      	movs	r0, #20
 8008636:	f017 f919 	bl	801f86c <vTaskDelay>
			C.BATTERY_TEST=0;
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <CALIBRATION_Battery+0x98>)
 800863c:	2200      	movs	r2, #0
 800863e:	719a      	strb	r2, [r3, #6]
			vTaskSuspend(Calibration_Handler);
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <CALIBRATION_Battery+0x9c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f017 f945 	bl	801f8d4 <vTaskSuspend>
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20016e58 	.word	0x20016e58
 8008658:	200168b8 	.word	0x200168b8
 800865c:	20016bd8 	.word	0x20016bd8
 8008660:	20016cd0 	.word	0x20016cd0

08008664 <cal_Battery>:


void cal_Battery()
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0

        battery_raw_value=(AdcData[3]);
 8008668:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <cal_Battery+0x7c>)
 800866a:	88da      	ldrh	r2, [r3, #6]
 800866c:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <cal_Battery+0x80>)
 800866e:	801a      	strh	r2, [r3, #0]
		battery1=((battery_raw_value-2250)*100)/1500;
 8008670:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <cal_Battery+0x80>)
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	f6a3 03ca 	subw	r3, r3, #2250	; 0x8ca
 8008678:	4a1b      	ldr	r2, [pc, #108]	; (80086e8 <cal_Battery+0x84>)
 800867a:	fb82 1203 	smull	r1, r2, r2, r3
 800867e:	441a      	add	r2, r3
 8008680:	10d2      	asrs	r2, r2, #3
 8008682:	17db      	asrs	r3, r3, #31
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800868e:	4b17      	ldr	r3, [pc, #92]	; (80086ec <cal_Battery+0x88>)
 8008690:	edc3 7a00 	vstr	s15, [r3]
		if(battery1>100)
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <cal_Battery+0x88>)
 8008696:	edd3 7a00 	vldr	s15, [r3]
 800869a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80086f0 <cal_Battery+0x8c>
 800869e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a6:	dd02      	ble.n	80086ae <cal_Battery+0x4a>
			battery1=100;
 80086a8:	4b10      	ldr	r3, [pc, #64]	; (80086ec <cal_Battery+0x88>)
 80086aa:	4a12      	ldr	r2, [pc, #72]	; (80086f4 <cal_Battery+0x90>)
 80086ac:	601a      	str	r2, [r3, #0]

		Bat_Avg+=battery1;
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <cal_Battery+0x94>)
 80086b0:	ed93 7a00 	vldr	s14, [r3]
 80086b4:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <cal_Battery+0x88>)
 80086b6:	edd3 7a00 	vldr	s15, [r3]
 80086ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086be:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <cal_Battery+0x94>)
 80086c0:	edc3 7a00 	vstr	s15, [r3]
		Bat_Avg_count++;
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <cal_Battery+0x98>)
 80086c6:	edd3 7a00 	vldr	s15, [r3]
 80086ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <cal_Battery+0x98>)
 80086d4:	edc3 7a00 	vstr	s15, [r3]

		Battery_Information();
 80086d8:	f7f9 fa84 	bl	8001be4 <Battery_Information>

}
 80086dc:	bf00      	nop
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20016bbc 	.word	0x20016bbc
 80086e4:	20016ada 	.word	0x20016ada
 80086e8:	88888889 	.word	0x88888889
 80086ec:	20016aa0 	.word	0x20016aa0
 80086f0:	42c80000 	.word	0x42c80000
 80086f4:	42c80000 	.word	0x42c80000
 80086f8:	20016e54 	.word	0x20016e54
 80086fc:	20016a70 	.word	0x20016a70

08008700 <CPAP_Mode_Task>:

extern int pressure_high_error_count;      //new
extern int pressure_high_error_count2;      //new

void CPAP_Mode_Task (void *argument)
{
 8008700:	b5b0      	push	{r4, r5, r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]

	while(1)
	{

		  if(Initial_open_valve==1)
 8008708:	4b5b      	ldr	r3, [pc, #364]	; (8008878 <CPAP_Mode_Task+0x178>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b01      	cmp	r3, #1
 800870e:	f040 8105 	bne.w	800891c <CPAP_Mode_Task+0x21c>
		  {
			          if(one_time_only == 1)
 8008712:	4b5a      	ldr	r3, [pc, #360]	; (800887c <CPAP_Mode_Task+0x17c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	f040 80f0 	bne.w	80088fc <CPAP_Mode_Task+0x1fc>
			  		  {
			        	  Alert_error_count=0;
 800871c:	4b58      	ldr	r3, [pc, #352]	; (8008880 <CPAP_Mode_Task+0x180>)
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
						 Alert_Status_count=0;
 8008722:	4b58      	ldr	r3, [pc, #352]	; (8008884 <CPAP_Mode_Task+0x184>)
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]


						 Wait_Dac=1;
 8008728:	4b57      	ldr	r3, [pc, #348]	; (8008888 <CPAP_Mode_Task+0x188>)
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]
						 Apnea_counter_trigger_Flag=1;
 800872e:	4b57      	ldr	r3, [pc, #348]	; (800888c <CPAP_Mode_Task+0x18c>)
 8008730:	2201      	movs	r2, #1
 8008732:	601a      	str	r2, [r3, #0]
						 now_update=0;
 8008734:	4b56      	ldr	r3, [pc, #344]	; (8008890 <CPAP_Mode_Task+0x190>)
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
						 Blower_Signal(0);
 800873a:	4b56      	ldr	r3, [pc, #344]	; (8008894 <CPAP_Mode_Task+0x194>)
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]


						 Alert_Data_send_count=0;
 8008740:	4b55      	ldr	r3, [pc, #340]	; (8008898 <CPAP_Mode_Task+0x198>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
						 Alert_error_count=0;
 8008746:	4b4e      	ldr	r3, [pc, #312]	; (8008880 <CPAP_Mode_Task+0x180>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
						 Dac_control_count=0;
 800874c:	4b53      	ldr	r3, [pc, #332]	; (800889c <CPAP_Mode_Task+0x19c>)
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
						 uwTick=0;
 8008752:	4b53      	ldr	r3, [pc, #332]	; (80088a0 <CPAP_Mode_Task+0x1a0>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]

						 Dac1=300;
 8008758:	4b52      	ldr	r3, [pc, #328]	; (80088a4 <CPAP_Mode_Task+0x1a4>)
 800875a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800875e:	801a      	strh	r2, [r3, #0]
						 Dac2=2000;
 8008760:	4b51      	ldr	r3, [pc, #324]	; (80088a8 <CPAP_Mode_Task+0x1a8>)
 8008762:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008766:	801a      	strh	r2, [r3, #0]
						 kp=5;
 8008768:	4b50      	ldr	r3, [pc, #320]	; (80088ac <CPAP_Mode_Task+0x1ac>)
 800876a:	2205      	movs	r2, #5
 800876c:	701a      	strb	r2, [r3, #0]
						 ki=4;
 800876e:	4b50      	ldr	r3, [pc, #320]	; (80088b0 <CPAP_Mode_Task+0x1b0>)
 8008770:	2204      	movs	r2, #4
 8008772:	701a      	strb	r2, [r3, #0]
						 kd=1;
 8008774:	494f      	ldr	r1, [pc, #316]	; (80088b4 <CPAP_Mode_Task+0x1b4>)
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	4b4f      	ldr	r3, [pc, #316]	; (80088b8 <CPAP_Mode_Task+0x1b8>)
 800877c:	e9c1 2300 	strd	r2, r3, [r1]
						 Time=10;
 8008780:	4b4e      	ldr	r3, [pc, #312]	; (80088bc <CPAP_Mode_Task+0x1bc>)
 8008782:	220a      	movs	r2, #10
 8008784:	601a      	str	r2, [r3, #0]
						 Speed=30;
 8008786:	4b4e      	ldr	r3, [pc, #312]	; (80088c0 <CPAP_Mode_Task+0x1c0>)
 8008788:	221e      	movs	r2, #30
 800878a:	601a      	str	r2, [r3, #0]

						 P1._Apnea_counter_trigger_check_time = 2000;
 800878c:	4b4d      	ldr	r3, [pc, #308]	; (80088c4 <CPAP_Mode_Task+0x1c4>)
 800878e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008792:	809a      	strh	r2, [r3, #4]
						 TempSetpoint = (P1.PEEP_CPAP_Val);
 8008794:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <CPAP_Mode_Task+0x1c4>)
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	4618      	mov	r0, r3
 800879a:	f7f7 fe5b 	bl	8000454 <__aeabi_ui2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4949      	ldr	r1, [pc, #292]	; (80088c8 <CPAP_Mode_Task+0x1c8>)
 80087a4:	e9c1 2300 	strd	r2, r3, [r1]
						 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80087a8:	4b40      	ldr	r3, [pc, #256]	; (80088ac <CPAP_Mode_Task+0x1ac>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f7 fe51 	bl	8000454 <__aeabi_ui2d>
 80087b2:	4604      	mov	r4, r0
 80087b4:	460d      	mov	r5, r1
 80087b6:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <CPAP_Mode_Task+0x1b0>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f7 fe4a 	bl	8000454 <__aeabi_ui2d>
 80087c0:	4b3c      	ldr	r3, [pc, #240]	; (80088b4 <CPAP_Mode_Task+0x1b4>)
 80087c2:	ed93 7b00 	vldr	d7, [r3]
 80087c6:	2300      	movs	r3, #0
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	2301      	movs	r3, #1
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	eeb0 2a47 	vmov.f32	s4, s14
 80087d2:	eef0 2a67 	vmov.f32	s5, s15
 80087d6:	ec41 0b11 	vmov	d1, r0, r1
 80087da:	ec45 4b10 	vmov	d0, r4, r5
 80087de:	4b3a      	ldr	r3, [pc, #232]	; (80088c8 <CPAP_Mode_Task+0x1c8>)
 80087e0:	4a3a      	ldr	r2, [pc, #232]	; (80088cc <CPAP_Mode_Task+0x1cc>)
 80087e2:	493b      	ldr	r1, [pc, #236]	; (80088d0 <CPAP_Mode_Task+0x1d0>)
 80087e4:	483b      	ldr	r0, [pc, #236]	; (80088d4 <CPAP_Mode_Task+0x1d4>)
 80087e6:	f00b ffdb 	bl	80147a0 <PID>
						 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80087ea:	2101      	movs	r1, #1
 80087ec:	4839      	ldr	r0, [pc, #228]	; (80088d4 <CPAP_Mode_Task+0x1d4>)
 80087ee:	f00c f90d 	bl	8014a0c <PID_SetMode>
						 PID_SetSampleTime(&TPID, Time);
 80087f2:	4b32      	ldr	r3, [pc, #200]	; (80088bc <CPAP_Mode_Task+0x1bc>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4836      	ldr	r0, [pc, #216]	; (80088d4 <CPAP_Mode_Task+0x1d4>)
 80087fa:	f00c fa83 	bl	8014d04 <PID_SetSampleTime>
						 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80087fe:	4b29      	ldr	r3, [pc, #164]	; (80088a4 <CPAP_Mode_Task+0x1a4>)
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f7f7 fe26 	bl	8000454 <__aeabi_ui2d>
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	4b26      	ldr	r3, [pc, #152]	; (80088a8 <CPAP_Mode_Task+0x1a8>)
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f7f7 fe1f 	bl	8000454 <__aeabi_ui2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	ec43 2b11 	vmov	d1, r2, r3
 800881e:	ec45 4b10 	vmov	d0, r4, r5
 8008822:	482c      	ldr	r0, [pc, #176]	; (80088d4 <CPAP_Mode_Task+0x1d4>)
 8008824:	f00c f910 	bl	8014a48 <PID_SetOutputLimits>

						 pressure_acheived=1;
 8008828:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <CPAP_Mode_Task+0x1d8>)
 800882a:	2201      	movs	r2, #1
 800882c:	601a      	str	r2, [r3, #0]
						 Trigger_Count=0;
 800882e:	4b2b      	ldr	r3, [pc, #172]	; (80088dc <CPAP_Mode_Task+0x1dc>)
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]



						 _60_Seconds=60000;
 8008834:	4b2a      	ldr	r3, [pc, #168]	; (80088e0 <CPAP_Mode_Task+0x1e0>)
 8008836:	f64e 2260 	movw	r2, #60000	; 0xea60
 800883a:	801a      	strh	r2, [r3, #0]
						 now_check_breath=0;
 800883c:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <CPAP_Mode_Task+0x1e4>)
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
						 Breath=0;
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <CPAP_Mode_Task+0x1e8>)
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]

						 Parkar_valve_Signal(0);
 8008848:	4b12      	ldr	r3, [pc, #72]	; (8008894 <CPAP_Mode_Task+0x194>)
 800884a:	2200      	movs	r2, #0
 800884c:	615a      	str	r2, [r3, #20]
						  O2.O2_process = 0;
 800884e:	4b27      	ldr	r3, [pc, #156]	; (80088ec <CPAP_Mode_Task+0x1ec>)
 8008850:	2200      	movs	r2, #0
 8008852:	60da      	str	r2, [r3, #12]
						  O2.Servo=45;
 8008854:	4b25      	ldr	r3, [pc, #148]	; (80088ec <CPAP_Mode_Task+0x1ec>)
 8008856:	222d      	movs	r2, #45	; 0x2d
 8008858:	605a      	str	r2, [r3, #4]
						  Servo_Angle(O2.Servo);
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <CPAP_Mode_Task+0x1ec>)
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <CPAP_Mode_Task+0x1f0>)
 8008860:	635a      	str	r2, [r3, #52]	; 0x34

						  pressure_high_error_count=0;        //new
 8008862:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <CPAP_Mode_Task+0x1f4>)
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
						  pressure_high_error_count2=0;       //new
 8008868:	4b23      	ldr	r3, [pc, #140]	; (80088f8 <CPAP_Mode_Task+0x1f8>)
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]

			  			 one_time_only=0;
 800886e:	4b03      	ldr	r3, [pc, #12]	; (800887c <CPAP_Mode_Task+0x17c>)
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e052      	b.n	800891c <CPAP_Mode_Task+0x21c>
 8008876:	bf00      	nop
 8008878:	20000044 	.word	0x20000044
 800887c:	20000128 	.word	0x20000128
 8008880:	20000308 	.word	0x20000308
 8008884:	20000318 	.word	0x20000318
 8008888:	20000118 	.word	0x20000118
 800888c:	2000011c 	.word	0x2000011c
 8008890:	20016b28 	.word	0x20016b28
 8008894:	40007400 	.word	0x40007400
 8008898:	2000031c 	.word	0x2000031c
 800889c:	20000320 	.word	0x20000320
 80088a0:	20017094 	.word	0x20017094
 80088a4:	2000012e 	.word	0x2000012e
 80088a8:	20000130 	.word	0x20000130
 80088ac:	20000136 	.word	0x20000136
 80088b0:	20000137 	.word	0x20000137
 80088b4:	20000138 	.word	0x20000138
 80088b8:	3ff00000 	.word	0x3ff00000
 80088bc:	20000140 	.word	0x20000140
 80088c0:	20000144 	.word	0x20000144
 80088c4:	20016960 	.word	0x20016960
 80088c8:	20016e80 	.word	0x20016e80
 80088cc:	20016a18 	.word	0x20016a18
 80088d0:	20016a98 	.word	0x20016a98
 80088d4:	200169a0 	.word	0x200169a0
 80088d8:	20000114 	.word	0x20000114
 80088dc:	200168b4 	.word	0x200168b4
 80088e0:	20000fe8 	.word	0x20000fe8
 80088e4:	20000feb 	.word	0x20000feb
 80088e8:	20000fea 	.word	0x20000fea
 80088ec:	20000048 	.word	0x20000048
 80088f0:	40001800 	.word	0x40001800
 80088f4:	2000032c 	.word	0x2000032c
 80088f8:	20000330 	.word	0x20000330


			  	      else
			  	      {

			  				  Initial_open_valve=0;
 80088fc:	4ba4      	ldr	r3, [pc, #656]	; (8008b90 <CPAP_Mode_Task+0x490>)
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
			  				  ExpValve_OPEN();
 8008902:	4ba4      	ldr	r3, [pc, #656]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	4aa3      	ldr	r2, [pc, #652]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800890c:	6153      	str	r3, [r2, #20]
			  				  vTaskDelay(700);
 800890e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8008912:	f016 ffab 	bl	801f86c <vTaskDelay>
			  				  now_update=0;
 8008916:	4ba0      	ldr	r3, [pc, #640]	; (8008b98 <CPAP_Mode_Task+0x498>)
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]


		  }


		   if(Trigger==1)
 800891c:	4b9f      	ldr	r3, [pc, #636]	; (8008b9c <CPAP_Mode_Task+0x49c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	f040 80a5 	bne.w	8008a70 <CPAP_Mode_Task+0x370>
		   {

			    if(Pressure_sensor._Pressure_Val<=(P1.PEEP_CPAP_Val-5))
 8008926:	4b9e      	ldr	r3, [pc, #632]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008928:	78db      	ldrb	r3, [r3, #3]
 800892a:	3b04      	subs	r3, #4
 800892c:	4a9d      	ldr	r2, [pc, #628]	; (8008ba4 <CPAP_Mode_Task+0x4a4>)
 800892e:	7912      	ldrb	r2, [r2, #4]
 8008930:	4293      	cmp	r3, r2
 8008932:	f340 8085 	ble.w	8008a40 <CPAP_Mode_Task+0x340>
			   	{
			    	Blower_Signal(0);
 8008936:	4b9c      	ldr	r3, [pc, #624]	; (8008ba8 <CPAP_Mode_Task+0x4a8>)
 8008938:	2200      	movs	r2, #0
 800893a:	609a      	str	r2, [r3, #8]
			    	ExpValve_CLOSE();
 800893c:	4b95      	ldr	r3, [pc, #596]	; (8008b94 <CPAP_Mode_Task+0x494>)
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	4a94      	ldr	r2, [pc, #592]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008946:	6153      	str	r3, [r2, #20]
			    	vTaskDelay(1000);
 8008948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800894c:	f016 ff8e 	bl	801f86c <vTaskDelay>
			    	Trigger=0;
 8008950:	4b92      	ldr	r3, [pc, #584]	; (8008b9c <CPAP_Mode_Task+0x49c>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]

			    	pressure_acheived=1;
 8008956:	4b95      	ldr	r3, [pc, #596]	; (8008bac <CPAP_Mode_Task+0x4ac>)
 8008958:	2201      	movs	r2, #1
 800895a:	601a      	str	r2, [r3, #0]
			        Wait_Dac=1;
 800895c:	4b94      	ldr	r3, [pc, #592]	; (8008bb0 <CPAP_Mode_Task+0x4b0>)
 800895e:	2201      	movs	r2, #1
 8008960:	601a      	str	r2, [r3, #0]
			        Apnea_counter_trigger_Flag=1;
 8008962:	4b94      	ldr	r3, [pc, #592]	; (8008bb4 <CPAP_Mode_Task+0x4b4>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]

			    	uwTick=0;
 8008968:	4b93      	ldr	r3, [pc, #588]	; (8008bb8 <CPAP_Mode_Task+0x4b8>)
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
					TPID.OutputSum=300;
 800896e:	4993      	ldr	r1, [pc, #588]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008970:	a385      	add	r3, pc, #532	; (adr r3, 8008b88 <CPAP_Mode_Task+0x488>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					Speed=30;
 800897a:	4b91      	ldr	r3, [pc, #580]	; (8008bc0 <CPAP_Mode_Task+0x4c0>)
 800897c:	221e      	movs	r2, #30
 800897e:	601a      	str	r2, [r3, #0]

					kp=5;
 8008980:	4b90      	ldr	r3, [pc, #576]	; (8008bc4 <CPAP_Mode_Task+0x4c4>)
 8008982:	2205      	movs	r2, #5
 8008984:	701a      	strb	r2, [r3, #0]
					ki=4;
 8008986:	4b90      	ldr	r3, [pc, #576]	; (8008bc8 <CPAP_Mode_Task+0x4c8>)
 8008988:	2204      	movs	r2, #4
 800898a:	701a      	strb	r2, [r3, #0]


			    	TempSetpoint = (P1.PEEP_CPAP_Val);
 800898c:	4b84      	ldr	r3, [pc, #528]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 800898e:	78db      	ldrb	r3, [r3, #3]
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fd5f 	bl	8000454 <__aeabi_ui2d>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	498c      	ldr	r1, [pc, #560]	; (8008bcc <CPAP_Mode_Task+0x4cc>)
 800899c:	e9c1 2300 	strd	r2, r3, [r1]
					 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80089a0:	4b88      	ldr	r3, [pc, #544]	; (8008bc4 <CPAP_Mode_Task+0x4c4>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f7 fd55 	bl	8000454 <__aeabi_ui2d>
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	4b86      	ldr	r3, [pc, #536]	; (8008bc8 <CPAP_Mode_Task+0x4c8>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f7 fd4e 	bl	8000454 <__aeabi_ui2d>
 80089b8:	4b85      	ldr	r3, [pc, #532]	; (8008bd0 <CPAP_Mode_Task+0x4d0>)
 80089ba:	ed93 7b00 	vldr	d7, [r3]
 80089be:	2300      	movs	r3, #0
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	2301      	movs	r3, #1
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	eeb0 2a47 	vmov.f32	s4, s14
 80089ca:	eef0 2a67 	vmov.f32	s5, s15
 80089ce:	ec41 0b11 	vmov	d1, r0, r1
 80089d2:	ec45 4b10 	vmov	d0, r4, r5
 80089d6:	4b7d      	ldr	r3, [pc, #500]	; (8008bcc <CPAP_Mode_Task+0x4cc>)
 80089d8:	4a7e      	ldr	r2, [pc, #504]	; (8008bd4 <CPAP_Mode_Task+0x4d4>)
 80089da:	497f      	ldr	r1, [pc, #508]	; (8008bd8 <CPAP_Mode_Task+0x4d8>)
 80089dc:	4877      	ldr	r0, [pc, #476]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 80089de:	f00b fedf 	bl	80147a0 <PID>
					 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80089e2:	2101      	movs	r1, #1
 80089e4:	4875      	ldr	r0, [pc, #468]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 80089e6:	f00c f811 	bl	8014a0c <PID_SetMode>
					 PID_SetSampleTime(&TPID, Time);
 80089ea:	4b7c      	ldr	r3, [pc, #496]	; (8008bdc <CPAP_Mode_Task+0x4dc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	4872      	ldr	r0, [pc, #456]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 80089f2:	f00c f987 	bl	8014d04 <PID_SetSampleTime>
					 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80089f6:	4b7a      	ldr	r3, [pc, #488]	; (8008be0 <CPAP_Mode_Task+0x4e0>)
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f7 fd2a 	bl	8000454 <__aeabi_ui2d>
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	4b77      	ldr	r3, [pc, #476]	; (8008be4 <CPAP_Mode_Task+0x4e4>)
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fd23 	bl	8000454 <__aeabi_ui2d>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	ec43 2b11 	vmov	d1, r2, r3
 8008a16:	ec45 4b10 	vmov	d0, r4, r5
 8008a1a:	4868      	ldr	r0, [pc, #416]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008a1c:	f00c f814 	bl	8014a48 <PID_SetOutputLimits>

			    	P1._Apnea_counter_trigger_check_time=1000;
 8008a20:	4b5f      	ldr	r3, [pc, #380]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a26:	809a      	strh	r2, [r3, #4]
			    	P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8008a28:	4b5d      	ldr	r3, [pc, #372]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	0152      	lsls	r2, r2, #5
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a3c:	849a      	strh	r2, [r3, #36]	; 0x24
 8008a3e:	e017      	b.n	8008a70 <CPAP_Mode_Task+0x370>
			   	}
			    else if(Pressure_sensor._Pressure_Val>(P1.PEEP_CPAP_Val+5))
 8008a40:	4b58      	ldr	r3, [pc, #352]	; (8008ba4 <CPAP_Mode_Task+0x4a4>)
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b56      	ldr	r3, [pc, #344]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a48:	78db      	ldrb	r3, [r3, #3]
 8008a4a:	3305      	adds	r3, #5
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	dd0f      	ble.n	8008a70 <CPAP_Mode_Task+0x370>
			    {
			    	Blower_Signal(0);
 8008a50:	4b55      	ldr	r3, [pc, #340]	; (8008ba8 <CPAP_Mode_Task+0x4a8>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	609a      	str	r2, [r3, #8]
			    	pressure_acheived=1;
 8008a56:	4b55      	ldr	r3, [pc, #340]	; (8008bac <CPAP_Mode_Task+0x4ac>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
			    	ExpValve_OPEN();
 8008a5c:	4b4d      	ldr	r3, [pc, #308]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	4a4c      	ldr	r2, [pc, #304]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a66:	6153      	str	r3, [r2, #20]
			    	vTaskDelay(2000);
 8008a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008a6c:	f016 fefe 	bl	801f86c <vTaskDelay>



		    /*****************************   air release    *****************************************/

				if(Trigger==3)
 8008a70:	4b4a      	ldr	r3, [pc, #296]	; (8008b9c <CPAP_Mode_Task+0x49c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	f040 80b7 	bne.w	8008be8 <CPAP_Mode_Task+0x4e8>
				{

					if(Pressure_sensor._Pressure_Val<=(P1.PEEP_CPAP_Val-4))
 8008a7a:	4b49      	ldr	r3, [pc, #292]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a7c:	78db      	ldrb	r3, [r3, #3]
 8008a7e:	3b03      	subs	r3, #3
 8008a80:	4a48      	ldr	r2, [pc, #288]	; (8008ba4 <CPAP_Mode_Task+0x4a4>)
 8008a82:	7912      	ldrb	r2, [r2, #4]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	dd69      	ble.n	8008b5c <CPAP_Mode_Task+0x45c>
					{
						ExpValve_CLOSE();
 8008a88:	4b42      	ldr	r3, [pc, #264]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	4a41      	ldr	r2, [pc, #260]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a92:	6153      	str	r3, [r2, #20]
						P1._Apnea_counter_trigger_check_time=2000;
 8008a94:	4b42      	ldr	r3, [pc, #264]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008a96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008a9a:	809a      	strh	r2, [r3, #4]

						uwTick=0;
 8008a9c:	4b46      	ldr	r3, [pc, #280]	; (8008bb8 <CPAP_Mode_Task+0x4b8>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
						TPID.OutputSum=300;
 8008aa2:	4946      	ldr	r1, [pc, #280]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008aa4:	a338      	add	r3, pc, #224	; (adr r3, 8008b88 <CPAP_Mode_Task+0x488>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
						Speed=30;
 8008aae:	4b44      	ldr	r3, [pc, #272]	; (8008bc0 <CPAP_Mode_Task+0x4c0>)
 8008ab0:	221e      	movs	r2, #30
 8008ab2:	601a      	str	r2, [r3, #0]

						kp=5;
 8008ab4:	4b43      	ldr	r3, [pc, #268]	; (8008bc4 <CPAP_Mode_Task+0x4c4>)
 8008ab6:	2205      	movs	r2, #5
 8008ab8:	701a      	strb	r2, [r3, #0]
						ki=4;
 8008aba:	4b43      	ldr	r3, [pc, #268]	; (8008bc8 <CPAP_Mode_Task+0x4c8>)
 8008abc:	2204      	movs	r2, #4
 8008abe:	701a      	strb	r2, [r3, #0]

						TempSetpoint = (P1.PEEP_CPAP_Val );
 8008ac0:	4b37      	ldr	r3, [pc, #220]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008ac2:	78db      	ldrb	r3, [r3, #3]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f7 fcc5 	bl	8000454 <__aeabi_ui2d>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	493f      	ldr	r1, [pc, #252]	; (8008bcc <CPAP_Mode_Task+0x4cc>)
 8008ad0:	e9c1 2300 	strd	r2, r3, [r1]
						PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8008ad4:	4b3b      	ldr	r3, [pc, #236]	; (8008bc4 <CPAP_Mode_Task+0x4c4>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7f7 fcbb 	bl	8000454 <__aeabi_ui2d>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4b39      	ldr	r3, [pc, #228]	; (8008bc8 <CPAP_Mode_Task+0x4c8>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f7 fcb4 	bl	8000454 <__aeabi_ui2d>
 8008aec:	4b38      	ldr	r3, [pc, #224]	; (8008bd0 <CPAP_Mode_Task+0x4d0>)
 8008aee:	ed93 7b00 	vldr	d7, [r3]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	2301      	movs	r3, #1
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	eeb0 2a47 	vmov.f32	s4, s14
 8008afe:	eef0 2a67 	vmov.f32	s5, s15
 8008b02:	ec41 0b11 	vmov	d1, r0, r1
 8008b06:	ec45 4b10 	vmov	d0, r4, r5
 8008b0a:	4b30      	ldr	r3, [pc, #192]	; (8008bcc <CPAP_Mode_Task+0x4cc>)
 8008b0c:	4a31      	ldr	r2, [pc, #196]	; (8008bd4 <CPAP_Mode_Task+0x4d4>)
 8008b0e:	4932      	ldr	r1, [pc, #200]	; (8008bd8 <CPAP_Mode_Task+0x4d8>)
 8008b10:	482a      	ldr	r0, [pc, #168]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008b12:	f00b fe45 	bl	80147a0 <PID>
						PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8008b16:	2101      	movs	r1, #1
 8008b18:	4828      	ldr	r0, [pc, #160]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008b1a:	f00b ff77 	bl	8014a0c <PID_SetMode>

						PID_SetSampleTime(&TPID, Time);
 8008b1e:	4b2f      	ldr	r3, [pc, #188]	; (8008bdc <CPAP_Mode_Task+0x4dc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4619      	mov	r1, r3
 8008b24:	4825      	ldr	r0, [pc, #148]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008b26:	f00c f8ed 	bl	8014d04 <PID_SetSampleTime>
						PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8008b2a:	4b2d      	ldr	r3, [pc, #180]	; (8008be0 <CPAP_Mode_Task+0x4e0>)
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7f7 fc90 	bl	8000454 <__aeabi_ui2d>
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <CPAP_Mode_Task+0x4e4>)
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f7 fc89 	bl	8000454 <__aeabi_ui2d>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	ec43 2b11 	vmov	d1, r2, r3
 8008b4a:	ec45 4b10 	vmov	d0, r4, r5
 8008b4e:	481b      	ldr	r0, [pc, #108]	; (8008bbc <CPAP_Mode_Task+0x4bc>)
 8008b50:	f00b ff7a 	bl	8014a48 <PID_SetOutputLimits>

						Trigger=0;
 8008b54:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <CPAP_Mode_Task+0x49c>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e389      	b.n	8009270 <CPAP_Mode_Task+0xb70>
					}
					else if(Pressure_sensor._Pressure_Val>(P1.PEEP_CPAP_Val-4))
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <CPAP_Mode_Task+0x4a0>)
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	3b03      	subs	r3, #3
 8008b62:	4a10      	ldr	r2, [pc, #64]	; (8008ba4 <CPAP_Mode_Task+0x4a4>)
 8008b64:	7912      	ldrb	r2, [r2, #4]
 8008b66:	4293      	cmp	r3, r2
 8008b68:	f300 8382 	bgt.w	8009270 <CPAP_Mode_Task+0xb70>
					{
						ExpValve_OPEN();
 8008b6c:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	4a08      	ldr	r2, [pc, #32]	; (8008b94 <CPAP_Mode_Task+0x494>)
 8008b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b76:	6153      	str	r3, [r2, #20]
						vTaskDelay(300);
 8008b78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b7c:	f016 fe76 	bl	801f86c <vTaskDelay>
 8008b80:	e376      	b.n	8009270 <CPAP_Mode_Task+0xb70>
 8008b82:	bf00      	nop
 8008b84:	f3af 8000 	nop.w
 8008b88:	00000000 	.word	0x00000000
 8008b8c:	4072c000 	.word	0x4072c000
 8008b90:	20000044 	.word	0x20000044
 8008b94:	40020400 	.word	0x40020400
 8008b98:	20016b28 	.word	0x20016b28
 8008b9c:	20016e50 	.word	0x20016e50
 8008ba0:	20016960 	.word	0x20016960
 8008ba4:	20016cfc 	.word	0x20016cfc
 8008ba8:	40007400 	.word	0x40007400
 8008bac:	20000114 	.word	0x20000114
 8008bb0:	20000118 	.word	0x20000118
 8008bb4:	2000011c 	.word	0x2000011c
 8008bb8:	20017094 	.word	0x20017094
 8008bbc:	200169a0 	.word	0x200169a0
 8008bc0:	20000144 	.word	0x20000144
 8008bc4:	20000136 	.word	0x20000136
 8008bc8:	20000137 	.word	0x20000137
 8008bcc:	20016e80 	.word	0x20016e80
 8008bd0:	20000138 	.word	0x20000138
 8008bd4:	20016a18 	.word	0x20016a18
 8008bd8:	20016a98 	.word	0x20016a98
 8008bdc:	20000140 	.word	0x20000140
 8008be0:	2000012e 	.word	0x2000012e
 8008be4:	20000130 	.word	0x20000130

		/*********************************************************************/



		else if((P1._APNEA_COUNTER >0) && (Trigger==0 )&& (now_update==0))
 8008be8:	4b85      	ldr	r3, [pc, #532]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008bea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8285 	beq.w	80090fc <CPAP_Mode_Task+0x9fc>
 8008bf2:	4b84      	ldr	r3, [pc, #528]	; (8008e04 <CPAP_Mode_Task+0x704>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 8280 	bne.w	80090fc <CPAP_Mode_Task+0x9fc>
 8008bfc:	4b82      	ldr	r3, [pc, #520]	; (8008e08 <CPAP_Mode_Task+0x708>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 827b 	bne.w	80090fc <CPAP_Mode_Task+0x9fc>
		{

			_Control_Byte |= (uint8_t) 0x80;
 8008c06:	4b81      	ldr	r3, [pc, #516]	; (8008e0c <CPAP_Mode_Task+0x70c>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b7e      	ldr	r3, [pc, #504]	; (8008e0c <CPAP_Mode_Task+0x70c>)
 8008c12:	701a      	strb	r2, [r3, #0]



			Alert_Data_send_count++;
 8008c14:	4b7e      	ldr	r3, [pc, #504]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a7d      	ldr	r2, [pc, #500]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008c1c:	6013      	str	r3, [r2, #0]
			if(Alert_Data_send_count>1500)
 8008c1e:	4b7c      	ldr	r3, [pc, #496]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008c26:	4293      	cmp	r3, r2
 8008c28:	dd05      	ble.n	8008c36 <CPAP_Mode_Task+0x536>
			{
				A.Alert_Now=1;
 8008c2a:	4b7a      	ldr	r3, [pc, #488]	; (8008e14 <CPAP_Mode_Task+0x714>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	70da      	strb	r2, [r3, #3]
				Alert_Data_send_count=0;
 8008c30:	4b77      	ldr	r3, [pc, #476]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]

			}

			if(pressure_acheived == 0)
 8008c36:	4b78      	ldr	r3, [pc, #480]	; (8008e18 <CPAP_Mode_Task+0x718>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d112      	bne.n	8008c64 <CPAP_Mode_Task+0x564>
			{
				Dac_control_count++;
 8008c3e:	4b77      	ldr	r3, [pc, #476]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	4a75      	ldr	r2, [pc, #468]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008c46:	6013      	str	r3, [r2, #0]
				if(Dac_control_count>500)
 8008c48:	4b74      	ldr	r3, [pc, #464]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c50:	dd08      	ble.n	8008c64 <CPAP_Mode_Task+0x564>
				{
					pressure_acheived=1;
 8008c52:	4b71      	ldr	r3, [pc, #452]	; (8008e18 <CPAP_Mode_Task+0x718>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
					Wait_Dac=1;
 8008c58:	4b71      	ldr	r3, [pc, #452]	; (8008e20 <CPAP_Mode_Task+0x720>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
					Dac_control_count=0;
 8008c5e:	4b6f      	ldr	r3, [pc, #444]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
				}
			}

			Alert_error_count++;
 8008c64:	4b6f      	ldr	r3, [pc, #444]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	4a6e      	ldr	r2, [pc, #440]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008c6c:	6013      	str	r3, [r2, #0]

			Patient_Circuit_Disconnected_Alert_Func();
 8008c6e:	f7f9 fbd7 	bl	8002420 <Patient_Circuit_Disconnected_Alert_Func>
			Main_Supply_or_Battery_Indication();
 8008c72:	f7f9 f92b 	bl	8001ecc <Main_Supply_or_Battery_Indication>

			if( Alert_error_count >= 500)
 8008c76:	4b6b      	ldr	r3, [pc, #428]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c7e:	db2d      	blt.n	8008cdc <CPAP_Mode_Task+0x5dc>
			{
				if(Apnea_Patient_circuit_disconnected_Flag==1)
 8008c80:	4b69      	ldr	r3, [pc, #420]	; (8008e28 <CPAP_Mode_Task+0x728>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d11b      	bne.n	8008cc0 <CPAP_Mode_Task+0x5c0>
				{

						Alert_Status_count++;
 8008c88:	4b68      	ldr	r3, [pc, #416]	; (8008e2c <CPAP_Mode_Task+0x72c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	4a67      	ldr	r2, [pc, #412]	; (8008e2c <CPAP_Mode_Task+0x72c>)
 8008c90:	6013      	str	r3, [r2, #0]
						if(Alert_Status_count>1)
 8008c92:	4b66      	ldr	r3, [pc, #408]	; (8008e2c <CPAP_Mode_Task+0x72c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	dd1a      	ble.n	8008cd0 <CPAP_Mode_Task+0x5d0>
						{
							A.Alert_Now=1;
 8008c9a:	4b5e      	ldr	r3, [pc, #376]	; (8008e14 <CPAP_Mode_Task+0x714>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	70da      	strb	r2, [r3, #3]
							Apnea_Patient_circuit_disconnected_Flag=0;
 8008ca0:	4b61      	ldr	r3, [pc, #388]	; (8008e28 <CPAP_Mode_Task+0x728>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]

							 Dac_control_count=0;
 8008ca6:	4b5d      	ldr	r3, [pc, #372]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
							 Alert_Data_send_count=0;
 8008cac:	4b58      	ldr	r3, [pc, #352]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
							 Alert_Status_count=0;
 8008cb2:	4b5e      	ldr	r3, [pc, #376]	; (8008e2c <CPAP_Mode_Task+0x72c>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
							 Alert_error_count=0;
 8008cb8:	4b5a      	ldr	r3, [pc, #360]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e007      	b.n	8008cd0 <CPAP_Mode_Task+0x5d0>
						}

				}
				else
				{
					A.Alert_Now=1;
 8008cc0:	4b54      	ldr	r3, [pc, #336]	; (8008e14 <CPAP_Mode_Task+0x714>)
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	70da      	strb	r2, [r3, #3]
					CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 8008cc6:	4a5a      	ldr	r2, [pc, #360]	; (8008e30 <CPAP_Mode_Task+0x730>)
 8008cc8:	78d3      	ldrb	r3, [r2, #3]
 8008cca:	f36f 03c3 	bfc	r3, #3, #1
 8008cce:	70d3      	strb	r3, [r2, #3]
				}
				now_open_valve=1;
 8008cd0:	4b58      	ldr	r3, [pc, #352]	; (8008e34 <CPAP_Mode_Task+0x734>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
				Alert_error_count=0;
 8008cd6:	4b53      	ldr	r3, [pc, #332]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
			}


			/*********************************************************************/

			if((pressure_acheived == 1)  && (Wait_Dac == 1))
 8008cdc:	4b4e      	ldr	r3, [pc, #312]	; (8008e18 <CPAP_Mode_Task+0x718>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d116      	bne.n	8008d12 <CPAP_Mode_Task+0x612>
 8008ce4:	4b4e      	ldr	r3, [pc, #312]	; (8008e20 <CPAP_Mode_Task+0x720>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d112      	bne.n	8008d12 <CPAP_Mode_Task+0x612>
			{
				PID_Compute(&TPID);
 8008cec:	4852      	ldr	r0, [pc, #328]	; (8008e38 <CPAP_Mode_Task+0x738>)
 8008cee:	f00b fda3 	bl	8014838 <PID_Compute>
				P1.PEEP_CPAP_DAC_Val=(int16_t)PIDOut;
 8008cf2:	4b52      	ldr	r3, [pc, #328]	; (8008e3c <CPAP_Mode_Task+0x73c>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f7f7 febe 	bl	8000a7c <__aeabi_d2iz>
 8008d00:	4603      	mov	r3, r0
 8008d02:	b21b      	sxth	r3, r3
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	4b3e      	ldr	r3, [pc, #248]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008d08:	841a      	strh	r2, [r3, #32]
				Blower_Signal( P1.PEEP_CPAP_DAC_Val);
 8008d0a:	4b3d      	ldr	r3, [pc, #244]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008d0c:	8c1a      	ldrh	r2, [r3, #32]
 8008d0e:	4b4c      	ldr	r3, [pc, #304]	; (8008e40 <CPAP_Mode_Task+0x740>)
 8008d10:	609a      	str	r2, [r3, #8]

			}

			  if((Flow_Sensor_cal._Flow_Val>0 )  &&  (pressure_acheived==0))
 8008d12:	4b4c      	ldr	r3, [pc, #304]	; (8008e44 <CPAP_Mode_Task+0x744>)
 8008d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd2a      	ble.n	8008d70 <CPAP_Mode_Task+0x670>
 8008d1a:	4b3f      	ldr	r3, [pc, #252]	; (8008e18 <CPAP_Mode_Task+0x718>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d126      	bne.n	8008d70 <CPAP_Mode_Task+0x670>
			  {
				if( P1._Apnea_counter_trigger_check_time==0)
 8008d22:	4b37      	ldr	r3, [pc, #220]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008d24:	889b      	ldrh	r3, [r3, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d122      	bne.n	8008d70 <CPAP_Mode_Task+0x670>
				{

						 if( (Start_check_time==0) && (Start_check==1))
 8008d2a:	4b47      	ldr	r3, [pc, #284]	; (8008e48 <CPAP_Mode_Task+0x748>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d11e      	bne.n	8008d70 <CPAP_Mode_Task+0x670>
 8008d32:	4b46      	ldr	r3, [pc, #280]	; (8008e4c <CPAP_Mode_Task+0x74c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d11a      	bne.n	8008d70 <CPAP_Mode_Task+0x670>
						 {
							 Blower_Signal(0);
 8008d3a:	4b41      	ldr	r3, [pc, #260]	; (8008e40 <CPAP_Mode_Task+0x740>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	609a      	str	r2, [r3, #8]
							 Wait_Dac=0;
 8008d40:	4b37      	ldr	r3, [pc, #220]	; (8008e20 <CPAP_Mode_Task+0x720>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
							 uwTick=0;
 8008d46:	4b42      	ldr	r3, [pc, #264]	; (8008e50 <CPAP_Mode_Task+0x750>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
							 TPID.OutputSum=300;
 8008d4c:	493a      	ldr	r1, [pc, #232]	; (8008e38 <CPAP_Mode_Task+0x738>)
 8008d4e:	a32a      	add	r3, pc, #168	; (adr r3, 8008df8 <CPAP_Mode_Task+0x6f8>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

							 Dac_control_count=0;
 8008d58:	4b30      	ldr	r3, [pc, #192]	; (8008e1c <CPAP_Mode_Task+0x71c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
							 Alert_Data_send_count=0;
 8008d5e:	4b2c      	ldr	r3, [pc, #176]	; (8008e10 <CPAP_Mode_Task+0x710>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
							 Alert_Status_count=0;
 8008d64:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <CPAP_Mode_Task+0x72c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
							 Alert_error_count=0;
 8008d6a:	4b2e      	ldr	r3, [pc, #184]	; (8008e24 <CPAP_Mode_Task+0x724>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
				 }
			  }



			 if(Pressure_sensor._Pressure_Val >= (P1.PEEP_CPAP_Val))
 8008d70:	4b38      	ldr	r3, [pc, #224]	; (8008e54 <CPAP_Mode_Task+0x754>)
 8008d72:	791a      	ldrb	r2, [r3, #4]
 8008d74:	4b22      	ldr	r3, [pc, #136]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d320      	bcc.n	8008dbe <CPAP_Mode_Task+0x6be>
			{
				if((initial_blower_trigger==0))
 8008d7c:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <CPAP_Mode_Task+0x758>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d112      	bne.n	8008daa <CPAP_Mode_Task+0x6aa>
				{
					if(Start_check_time==0)
 8008d84:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <CPAP_Mode_Task+0x748>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d118      	bne.n	8008dbe <CPAP_Mode_Task+0x6be>
					{
						pressure_acheived=0;
 8008d8c:	4b22      	ldr	r3, [pc, #136]	; (8008e18 <CPAP_Mode_Task+0x718>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
						if(Apnea_counter_trigger_Flag==1)
 8008d92:	4b32      	ldr	r3, [pc, #200]	; (8008e5c <CPAP_Mode_Task+0x75c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d111      	bne.n	8008dbe <CPAP_Mode_Task+0x6be>
						{
							if(Flow_Sensor_cal._Flow_Val==0)
 8008d9a:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <CPAP_Mode_Task+0x744>)
 8008d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10d      	bne.n	8008dbe <CPAP_Mode_Task+0x6be>
							{
								Apnea_counter_trigger_Flag=0;
 8008da2:	4b2e      	ldr	r3, [pc, #184]	; (8008e5c <CPAP_Mode_Task+0x75c>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e009      	b.n	8008dbe <CPAP_Mode_Task+0x6be>
						}
					}
				}
				 else
				 {
					 initial_blower_trigger=0;
 8008daa:	4b2b      	ldr	r3, [pc, #172]	; (8008e58 <CPAP_Mode_Task+0x758>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
					 Start_check=1;
 8008db0:	4b26      	ldr	r3, [pc, #152]	; (8008e4c <CPAP_Mode_Task+0x74c>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
					 Start_check_time=500;
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <CPAP_Mode_Task+0x748>)
 8008db8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008dbc:	601a      	str	r2, [r3, #0]


			/*********************************************************************/

			 /****************  psv air release   ******************************/
			         if(Pressure_sensor._Pressure_Val >= (P1.PEEP_CPAP_Val +5))
 8008dbe:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008dc0:	78db      	ldrb	r3, [r3, #3]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4a23      	ldr	r2, [pc, #140]	; (8008e54 <CPAP_Mode_Task+0x754>)
 8008dc6:	7912      	ldrb	r2, [r2, #4]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	da4b      	bge.n	8008e64 <CPAP_Mode_Task+0x764>
			         {
			         	pressure_high_error_count++;
 8008dcc:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <CPAP_Mode_Task+0x760>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4a23      	ldr	r2, [pc, #140]	; (8008e60 <CPAP_Mode_Task+0x760>)
 8008dd4:	6013      	str	r3, [r2, #0]
			         	P1._Apnea_counter_trigger_check_time=1000;
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <CPAP_Mode_Task+0x700>)
 8008dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ddc:	809a      	strh	r2, [r3, #4]
			         	if(pressure_high_error_count>1000)
 8008dde:	4b20      	ldr	r3, [pc, #128]	; (8008e60 <CPAP_Mode_Task+0x760>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008de6:	dd54      	ble.n	8008e92 <CPAP_Mode_Task+0x792>
			         	{
			         		Trigger=3;
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <CPAP_Mode_Task+0x704>)
 8008dea:	2203      	movs	r2, #3
 8008dec:	601a      	str	r2, [r3, #0]
			         		pressure_high_error_count=0;
 8008dee:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <CPAP_Mode_Task+0x760>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e04d      	b.n	8008e92 <CPAP_Mode_Task+0x792>
 8008df6:	bf00      	nop
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	4072c000 	.word	0x4072c000
 8008e00:	20016960 	.word	0x20016960
 8008e04:	20016e50 	.word	0x20016e50
 8008e08:	20016b28 	.word	0x20016b28
 8008e0c:	20016e59 	.word	0x20016e59
 8008e10:	2000031c 	.word	0x2000031c
 8008e14:	20016a2c 	.word	0x20016a2c
 8008e18:	20000114 	.word	0x20000114
 8008e1c:	20000320 	.word	0x20000320
 8008e20:	20000118 	.word	0x20000118
 8008e24:	20000308 	.word	0x20000308
 8008e28:	200002f4 	.word	0x200002f4
 8008e2c:	20000318 	.word	0x20000318
 8008e30:	20016ea8 	.word	0x20016ea8
 8008e34:	2000030c 	.word	0x2000030c
 8008e38:	200169a0 	.word	0x200169a0
 8008e3c:	20016a18 	.word	0x20016a18
 8008e40:	40007400 	.word	0x40007400
 8008e44:	20016c48 	.word	0x20016c48
 8008e48:	20000324 	.word	0x20000324
 8008e4c:	20000328 	.word	0x20000328
 8008e50:	20017094 	.word	0x20017094
 8008e54:	20016cfc 	.word	0x20016cfc
 8008e58:	20000120 	.word	0x20000120
 8008e5c:	2000011c 	.word	0x2000011c
 8008e60:	2000032c 	.word	0x2000032c
			         	}

			         }

			         else if(Pressure_sensor._Pressure_Val < (P1.PEEP_CPAP_Val +5))
 8008e64:	4b93      	ldr	r3, [pc, #588]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4a93      	ldr	r2, [pc, #588]	; (80090b8 <CPAP_Mode_Task+0x9b8>)
 8008e6c:	7912      	ldrb	r2, [r2, #4]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	db0f      	blt.n	8008e92 <CPAP_Mode_Task+0x792>
			         {
			         	pressure_high_error_count2++;
 8008e72:	4b92      	ldr	r3, [pc, #584]	; (80090bc <CPAP_Mode_Task+0x9bc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a90      	ldr	r2, [pc, #576]	; (80090bc <CPAP_Mode_Task+0x9bc>)
 8008e7a:	6013      	str	r3, [r2, #0]
			         	if(pressure_high_error_count2>1000)
 8008e7c:	4b8f      	ldr	r3, [pc, #572]	; (80090bc <CPAP_Mode_Task+0x9bc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e84:	dd05      	ble.n	8008e92 <CPAP_Mode_Task+0x792>
			         	{
			         		pressure_high_error_count=0;
 8008e86:	4b8e      	ldr	r3, [pc, #568]	; (80090c0 <CPAP_Mode_Task+0x9c0>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
			         		pressure_high_error_count2=0;
 8008e8c:	4b8b      	ldr	r3, [pc, #556]	; (80090bc <CPAP_Mode_Task+0x9bc>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]





			if( P1._Apnea_counter_trigger_check_time==0)
 8008e92:	4b88      	ldr	r3, [pc, #544]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008e94:	889b      	ldrh	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 80f2 	bne.w	8009080 <CPAP_Mode_Task+0x980>
			{
				if (P1._TRIG_TYPE == 1)
 8008e9c:	4b85      	ldr	r3, [pc, #532]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d177      	bne.n	8008f94 <CPAP_Mode_Task+0x894>
			    {
			        if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8008ea4:	4b84      	ldr	r3, [pc, #528]	; (80090b8 <CPAP_Mode_Task+0x9b8>)
 8008ea6:	791b      	ldrb	r3, [r3, #4]
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eb0:	4b80      	ldr	r3, [pc, #512]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008eb2:	edd3 6a05 	vldr	s13, [r3, #20]
 8008eb6:	4b7f      	ldr	r3, [pc, #508]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008eb8:	891b      	ldrh	r3, [r3, #8]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ec2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	f140 80e9 	bpl.w	80090a4 <CPAP_Mode_Task+0x9a4>
			        {


			        	if (_CurrentBackupMode == PCCMV_BACKUP)
 8008ed2:	4b7c      	ldr	r3, [pc, #496]	; (80090c4 <CPAP_Mode_Task+0x9c4>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d12b      	bne.n	8008f32 <CPAP_Mode_Task+0x832>
			        	{
			        		now_check_breath=1;
 8008eda:	4b7b      	ldr	r3, [pc, #492]	; (80090c8 <CPAP_Mode_Task+0x9c8>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
			        		_Control_Byte &= (uint8_t) (~(0x80));
 8008ee0:	4b7a      	ldr	r3, [pc, #488]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	4b78      	ldr	r3, [pc, #480]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008eec:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 8008eee:	4b78      	ldr	r3, [pc, #480]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	4a76      	ldr	r2, [pc, #472]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008ef6:	6013      	str	r3, [r2, #0]
			        		Trigger=1;
 8008ef8:	4b76      	ldr	r3, [pc, #472]	; (80090d4 <CPAP_Mode_Task+0x9d4>)
 8008efa:	2201      	movs	r2, #1
 8008efc:	601a      	str	r2, [r3, #0]
			        		cpap_volume_flag_set=1;
 8008efe:	4b76      	ldr	r3, [pc, #472]	; (80090d8 <CPAP_Mode_Task+0x9d8>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
			        		P1._Apnea_counter_trigger_check_time=1000;
 8008f04:	4b6b      	ldr	r3, [pc, #428]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f0a:	809a      	strh	r2, [r3, #4]
			        		Dac_control_count=0;
 8008f0c:	4b73      	ldr	r3, [pc, #460]	; (80090dc <CPAP_Mode_Task+0x9dc>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			        		Alert_Data_send_count=0;
 8008f12:	4b73      	ldr	r3, [pc, #460]	; (80090e0 <CPAP_Mode_Task+0x9e0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
							Alert_Status_count=0;
 8008f18:	4b72      	ldr	r3, [pc, #456]	; (80090e4 <CPAP_Mode_Task+0x9e4>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
							pressure_acheived=1;
 8008f1e:	4b72      	ldr	r3, [pc, #456]	; (80090e8 <CPAP_Mode_Task+0x9e8>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
							Wait_Dac=1;
 8008f24:	4b71      	ldr	r3, [pc, #452]	; (80090ec <CPAP_Mode_Task+0x9ec>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
							Apnea_counter_trigger_Flag=1;
 8008f2a:	4b71      	ldr	r3, [pc, #452]	; (80090f0 <CPAP_Mode_Task+0x9f0>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	e0b8      	b.n	80090a4 <CPAP_Mode_Task+0x9a4>

			        	}
			        	else if (_CurrentBackupMode == VCCMV_BACKUP)
 8008f32:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <CPAP_Mode_Task+0x9c4>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	f040 80b4 	bne.w	80090a4 <CPAP_Mode_Task+0x9a4>
			        	{
			        		now_check_breath=1;
 8008f3c:	4b62      	ldr	r3, [pc, #392]	; (80090c8 <CPAP_Mode_Task+0x9c8>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	701a      	strb	r2, [r3, #0]
			        		_Control_Byte &= (uint8_t) (~(0x80));
 8008f42:	4b62      	ldr	r3, [pc, #392]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	4b5f      	ldr	r3, [pc, #380]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008f4e:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 8008f50:	4b5f      	ldr	r3, [pc, #380]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a5e      	ldr	r2, [pc, #376]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008f58:	6013      	str	r3, [r2, #0]
			        		Trigger=1;
 8008f5a:	4b5e      	ldr	r3, [pc, #376]	; (80090d4 <CPAP_Mode_Task+0x9d4>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
			        		cpap_volume_flag_set=1;
 8008f60:	4b5d      	ldr	r3, [pc, #372]	; (80090d8 <CPAP_Mode_Task+0x9d8>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
			        		P1._Apnea_counter_trigger_check_time=1000;
 8008f66:	4b53      	ldr	r3, [pc, #332]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f6c:	809a      	strh	r2, [r3, #4]

			        		 Dac_control_count=0;
 8008f6e:	4b5b      	ldr	r3, [pc, #364]	; (80090dc <CPAP_Mode_Task+0x9dc>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
							 Alert_Data_send_count=0;
 8008f74:	4b5a      	ldr	r3, [pc, #360]	; (80090e0 <CPAP_Mode_Task+0x9e0>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
							 Alert_Status_count=0;
 8008f7a:	4b5a      	ldr	r3, [pc, #360]	; (80090e4 <CPAP_Mode_Task+0x9e4>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
							 pressure_acheived=1;
 8008f80:	4b59      	ldr	r3, [pc, #356]	; (80090e8 <CPAP_Mode_Task+0x9e8>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
								Wait_Dac=1;
 8008f86:	4b59      	ldr	r3, [pc, #356]	; (80090ec <CPAP_Mode_Task+0x9ec>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]
								Apnea_counter_trigger_Flag=1;
 8008f8c:	4b58      	ldr	r3, [pc, #352]	; (80090f0 <CPAP_Mode_Task+0x9f0>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e087      	b.n	80090a4 <CPAP_Mode_Task+0x9a4>
			        	}
			         }
			      }
			      else
			      {
			         if((Flow_Sensor_cal._Flow_Val>(P1.simv_trigger_offset2+P1._TRIG_LMT)))
 8008f94:	4b57      	ldr	r3, [pc, #348]	; (80090f4 <CPAP_Mode_Task+0x9f4>)
 8008f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fa0:	4b44      	ldr	r3, [pc, #272]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008fa2:	edd3 6a06 	vldr	s13, [r3, #24]
 8008fa6:	4b43      	ldr	r3, [pc, #268]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008fa8:	891b      	ldrh	r3, [r3, #8]
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	dd71      	ble.n	80090a4 <CPAP_Mode_Task+0x9a4>
			         {

			        	 if (_CurrentBackupMode == PCCMV_BACKUP)
 8008fc0:	4b40      	ldr	r3, [pc, #256]	; (80090c4 <CPAP_Mode_Task+0x9c4>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d12b      	bne.n	8009020 <CPAP_Mode_Task+0x920>
			        	 {
			        		 now_check_breath=1;
 8008fc8:	4b3f      	ldr	r3, [pc, #252]	; (80090c8 <CPAP_Mode_Task+0x9c8>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
			        		 _Control_Byte &= (uint8_t) (~(0x80));
 8008fce:	4b3f      	ldr	r3, [pc, #252]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	4b3c      	ldr	r3, [pc, #240]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8008fda:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	4a3b      	ldr	r2, [pc, #236]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8008fe4:	6013      	str	r3, [r2, #0]
			        	 	Trigger=1;
 8008fe6:	4b3b      	ldr	r3, [pc, #236]	; (80090d4 <CPAP_Mode_Task+0x9d4>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
			        	 	cpap_volume_flag_set=1;
 8008fec:	4b3a      	ldr	r3, [pc, #232]	; (80090d8 <CPAP_Mode_Task+0x9d8>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	701a      	strb	r2, [r3, #0]
			        	 	P1._Apnea_counter_trigger_check_time=1000;
 8008ff2:	4b30      	ldr	r3, [pc, #192]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8008ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ff8:	809a      	strh	r2, [r3, #4]

			        	 	 Dac_control_count=0;
 8008ffa:	4b38      	ldr	r3, [pc, #224]	; (80090dc <CPAP_Mode_Task+0x9dc>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
							 Alert_Data_send_count=0;
 8009000:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <CPAP_Mode_Task+0x9e0>)
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
							 Alert_Status_count=0;
 8009006:	4b37      	ldr	r3, [pc, #220]	; (80090e4 <CPAP_Mode_Task+0x9e4>)
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
							 pressure_acheived=1;
 800900c:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <CPAP_Mode_Task+0x9e8>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
							Wait_Dac=1;
 8009012:	4b36      	ldr	r3, [pc, #216]	; (80090ec <CPAP_Mode_Task+0x9ec>)
 8009014:	2201      	movs	r2, #1
 8009016:	601a      	str	r2, [r3, #0]
							Apnea_counter_trigger_Flag=1;
 8009018:	4b35      	ldr	r3, [pc, #212]	; (80090f0 <CPAP_Mode_Task+0x9f0>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e041      	b.n	80090a4 <CPAP_Mode_Task+0x9a4>

			        	 }
			        	 else if (_CurrentBackupMode == VCCMV_BACKUP)
 8009020:	4b28      	ldr	r3, [pc, #160]	; (80090c4 <CPAP_Mode_Task+0x9c4>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d13d      	bne.n	80090a4 <CPAP_Mode_Task+0x9a4>
			        	 {
			        		now_check_breath=1;
 8009028:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <CPAP_Mode_Task+0x9c8>)
 800902a:	2201      	movs	r2, #1
 800902c:	701a      	strb	r2, [r3, #0]
			        		_Control_Byte &= (uint8_t) (~(0x80));
 800902e:	4b27      	ldr	r3, [pc, #156]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009036:	b2da      	uxtb	r2, r3
 8009038:	4b24      	ldr	r3, [pc, #144]	; (80090cc <CPAP_Mode_Task+0x9cc>)
 800903a:	701a      	strb	r2, [r3, #0]
			        		Trigger_Count++;
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	4a23      	ldr	r2, [pc, #140]	; (80090d0 <CPAP_Mode_Task+0x9d0>)
 8009044:	6013      	str	r3, [r2, #0]
			        	 	Trigger=1;
 8009046:	4b23      	ldr	r3, [pc, #140]	; (80090d4 <CPAP_Mode_Task+0x9d4>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
			        	 	cpap_volume_flag_set=1;
 800904c:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <CPAP_Mode_Task+0x9d8>)
 800904e:	2201      	movs	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
			        	 	P1._Apnea_counter_trigger_check_time=1000;
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 8009054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009058:	809a      	strh	r2, [r3, #4]
			        	 	Dac_control_count=0;
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <CPAP_Mode_Task+0x9dc>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
							Alert_Data_send_count=0;
 8009060:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <CPAP_Mode_Task+0x9e0>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
							Alert_Status_count=0;
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <CPAP_Mode_Task+0x9e4>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
							pressure_acheived=1;
 800906c:	4b1e      	ldr	r3, [pc, #120]	; (80090e8 <CPAP_Mode_Task+0x9e8>)
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
							Wait_Dac=1;
 8009072:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <CPAP_Mode_Task+0x9ec>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]
							Apnea_counter_trigger_Flag=1;
 8009078:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <CPAP_Mode_Task+0x9f0>)
 800907a:	2201      	movs	r2, #1
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e011      	b.n	80090a4 <CPAP_Mode_Task+0x9a4>
		       }
			   else
			   {
				        //if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<3))
			         	//{
			         		 P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 8009080:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <CPAP_Mode_Task+0x9b8>)
 8009082:	791b      	ldrb	r3, [r3, #4]
 8009084:	ee07 3a90 	vmov	s15, r3
 8009088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 800908e:	edc3 7a05 	vstr	s15, [r3, #20]
			         		 P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 8009092:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <CPAP_Mode_Task+0x9f4>)
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <CPAP_Mode_Task+0x9b4>)
 80090a0:	edc3 7a06 	vstr	s15, [r3, #24]

			         	//}
			    }

			ExpValve_CLOSE();
 80090a4:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <CPAP_Mode_Task+0x9f8>)
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <CPAP_Mode_Task+0x9f8>)
 80090aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090ae:	6153      	str	r3, [r2, #20]
 80090b0:	e0de      	b.n	8009270 <CPAP_Mode_Task+0xb70>
 80090b2:	bf00      	nop
 80090b4:	20016960 	.word	0x20016960
 80090b8:	20016cfc 	.word	0x20016cfc
 80090bc:	20000330 	.word	0x20000330
 80090c0:	2000032c 	.word	0x2000032c
 80090c4:	2000012c 	.word	0x2000012c
 80090c8:	20000feb 	.word	0x20000feb
 80090cc:	20016e59 	.word	0x20016e59
 80090d0:	200168b4 	.word	0x200168b4
 80090d4:	20016e50 	.word	0x20016e50
 80090d8:	20016a80 	.word	0x20016a80
 80090dc:	20000320 	.word	0x20000320
 80090e0:	2000031c 	.word	0x2000031c
 80090e4:	20000318 	.word	0x20000318
 80090e8:	20000114 	.word	0x20000114
 80090ec:	20000118 	.word	0x20000118
 80090f0:	2000011c 	.word	0x2000011c
 80090f4:	20016c48 	.word	0x20016c48
 80090f8:	40020400 	.word	0x40020400

		}

		else if(P1._APNEA_COUNTER == 0)
 80090fc:	4b5f      	ldr	r3, [pc, #380]	; (800927c <CPAP_Mode_Task+0xb7c>)
 80090fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	f040 80b5 	bne.w	8009270 <CPAP_Mode_Task+0xb70>
		{
			Alert_Receiving_Parameter();
 8009106:	f7f9 faeb 	bl	80026e0 <Alert_Receiving_Parameter>
			vTaskResume(alert_Handler);
 800910a:	4b5d      	ldr	r3, [pc, #372]	; (8009280 <CPAP_Mode_Task+0xb80>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f016 fca4 	bl	801fa5c <vTaskResume>
			Trigger=0;
 8009114:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <CPAP_Mode_Task+0xb84>)
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
			SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_APNEA);
 800911a:	4a5b      	ldr	r2, [pc, #364]	; (8009288 <CPAP_Mode_Task+0xb88>)
 800911c:	78d3      	ldrb	r3, [r2, #3]
 800911e:	f043 0320 	orr.w	r3, r3, #32
 8009122:	70d3      	strb	r3, [r2, #3]
			A.Alert_Now=1;
 8009124:	4b59      	ldr	r3, [pc, #356]	; (800928c <CPAP_Mode_Task+0xb8c>)
 8009126:	2201      	movs	r2, #1
 8009128:	70da      	strb	r2, [r3, #3]
			A.Apnea_UART_alert=1;
 800912a:	4b58      	ldr	r3, [pc, #352]	; (800928c <CPAP_Mode_Task+0xb8c>)
 800912c:	2201      	movs	r2, #1
 800912e:	711a      	strb	r2, [r3, #4]
			A.Alert=1;
 8009130:	4b56      	ldr	r3, [pc, #344]	; (800928c <CPAP_Mode_Task+0xb8c>)
 8009132:	2201      	movs	r2, #1
 8009134:	709a      	strb	r2, [r3, #2]
			A.Red_Led_Alert=1;
 8009136:	4b55      	ldr	r3, [pc, #340]	; (800928c <CPAP_Mode_Task+0xb8c>)
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Led_Alert();
 800913e:	f7f9 fbd1 	bl	80028e4 <Led_Alert>
			P1.PEEP_CPAP_DAC_Val=0;
 8009142:	4b4e      	ldr	r3, [pc, #312]	; (800927c <CPAP_Mode_Task+0xb7c>)
 8009144:	2200      	movs	r2, #0
 8009146:	841a      	strh	r2, [r3, #32]
			Blower_Signal( P1.PEEP_CPAP_DAC_Val);
 8009148:	4b4c      	ldr	r3, [pc, #304]	; (800927c <CPAP_Mode_Task+0xb7c>)
 800914a:	8c1a      	ldrh	r2, [r3, #32]
 800914c:	4b50      	ldr	r3, [pc, #320]	; (8009290 <CPAP_Mode_Task+0xb90>)
 800914e:	609a      	str	r2, [r3, #8]
			S5.peep_process_done=0;
 8009150:	4b50      	ldr	r3, [pc, #320]	; (8009294 <CPAP_Mode_Task+0xb94>)
 8009152:	2200      	movs	r2, #0
 8009154:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 8009156:	4b4f      	ldr	r3, [pc, #316]	; (8009294 <CPAP_Mode_Task+0xb94>)
 8009158:	2201      	movs	r2, #1
 800915a:	645a      	str	r2, [r3, #68]	; 0x44
			Trigger_Count=0;
 800915c:	4b4e      	ldr	r3, [pc, #312]	; (8009298 <CPAP_Mode_Task+0xb98>)
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
			P1.Apnea_Mode=0;
 8009162:	4b46      	ldr	r3, [pc, #280]	; (800927c <CPAP_Mode_Task+0xb7c>)
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			O2_Parameter();
 800916a:	f001 fc99 	bl	800aaa0 <O2_Parameter>
			if(_CurrentBackupMode == PCCMV_BACKUP )
 800916e:	4b4b      	ldr	r3, [pc, #300]	; (800929c <CPAP_Mode_Task+0xb9c>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d137      	bne.n	80091e6 <CPAP_Mode_Task+0xae6>
			{
				S5.Lock_delay=100;
 8009176:	4b47      	ldr	r3, [pc, #284]	; (8009294 <CPAP_Mode_Task+0xb94>)
 8009178:	2264      	movs	r2, #100	; 0x64
 800917a:	879a      	strh	r2, [r3, #60]	; 0x3c
				_CurrentWaveFormState = Generate_E_Wave;
 800917c:	4b48      	ldr	r3, [pc, #288]	; (80092a0 <CPAP_Mode_Task+0xba0>)
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 8009182:	4b48      	ldr	r3, [pc, #288]	; (80092a4 <CPAP_Mode_Task+0xba4>)
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 8009188:	4b47      	ldr	r3, [pc, #284]	; (80092a8 <CPAP_Mode_Task+0xba8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f016 fc65 	bl	801fa5c <vTaskResume>
			    vTaskResume(Back_Up_PC_CMV_Mode_Handler);
 8009192:	4b46      	ldr	r3, [pc, #280]	; (80092ac <CPAP_Mode_Task+0xbac>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f016 fc60 	bl	801fa5c <vTaskResume>
			    vTaskResume(PID_Back_Up_PC_CMV_Mode_Handler);
 800919c:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <CPAP_Mode_Task+0xbb0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f016 fc5b 	bl	801fa5c <vTaskResume>
			    if(O2._FIO2_Val>21)
 80091a6:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 80091a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80091ac:	2b15      	cmp	r3, #21
 80091ae:	d905      	bls.n	80091bc <CPAP_Mode_Task+0xabc>
			    {
			    	vTaskResume(Oxygen_Handler);
 80091b0:	4b41      	ldr	r3, [pc, #260]	; (80092b8 <CPAP_Mode_Task+0xbb8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f016 fc51 	bl	801fa5c <vTaskResume>
 80091ba:	e00f      	b.n	80091dc <CPAP_Mode_Task+0xadc>
			    }
			    else if(O2._FIO2_Val<=21)
 80091bc:	4b3d      	ldr	r3, [pc, #244]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 80091be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80091c2:	2b15      	cmp	r3, #21
 80091c4:	d80a      	bhi.n	80091dc <CPAP_Mode_Task+0xadc>
			    {
			    	O2.O2_DAC=0;
 80091c6:	4b3b      	ldr	r3, [pc, #236]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	811a      	strh	r2, [r3, #8]
			    	Parkar_valve_Signal(0);
 80091cc:	4b30      	ldr	r3, [pc, #192]	; (8009290 <CPAP_Mode_Task+0xb90>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	615a      	str	r2, [r3, #20]
			    	vTaskSuspend(Oxygen_Handler);
 80091d2:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <CPAP_Mode_Task+0xbb8>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f016 fb7c 	bl	801f8d4 <vTaskSuspend>
			    }

			    vTaskSuspend(Cpap_Handler);
 80091dc:	4b37      	ldr	r3, [pc, #220]	; (80092bc <CPAP_Mode_Task+0xbbc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f016 fb77 	bl	801f8d4 <vTaskSuspend>
			}


			if(_CurrentBackupMode == VCCMV_BACKUP )
 80091e6:	4b2d      	ldr	r3, [pc, #180]	; (800929c <CPAP_Mode_Task+0xb9c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d140      	bne.n	8009270 <CPAP_Mode_Task+0xb70>
			{
				S5.Lock_delay=10;
 80091ee:	4b29      	ldr	r3, [pc, #164]	; (8009294 <CPAP_Mode_Task+0xb94>)
 80091f0:	220a      	movs	r2, #10
 80091f2:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5._Set_Peep=D1._PEEP_Val;
 80091f4:	4b32      	ldr	r3, [pc, #200]	; (80092c0 <CPAP_Mode_Task+0xbc0>)
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009200:	4b24      	ldr	r3, [pc, #144]	; (8009294 <CPAP_Mode_Task+0xb94>)
 8009202:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				_CurrentWaveFormState = Generate_E_Wave;
 8009206:	4b26      	ldr	r3, [pc, #152]	; (80092a0 <CPAP_Mode_Task+0xba0>)
 8009208:	2201      	movs	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 800920c:	4b25      	ldr	r3, [pc, #148]	; (80092a4 <CPAP_Mode_Task+0xba4>)
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 8009212:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <CPAP_Mode_Task+0xba8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f016 fc20 	bl	801fa5c <vTaskResume>
				vTaskResume(Back_Up_VC_CMV_Mode_Handler);
 800921c:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <CPAP_Mode_Task+0xbc4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f016 fc1b 	bl	801fa5c <vTaskResume>
				vTaskResume(PID_Back_Up_VC_CMV_Mode_Handler);
 8009226:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <CPAP_Mode_Task+0xbc8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f016 fc16 	bl	801fa5c <vTaskResume>
				if(O2._FIO2_Val>21)
 8009230:	4b20      	ldr	r3, [pc, #128]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 8009232:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009236:	2b15      	cmp	r3, #21
 8009238:	d905      	bls.n	8009246 <CPAP_Mode_Task+0xb46>
				{
					vTaskResume(Oxygen_Handler);
 800923a:	4b1f      	ldr	r3, [pc, #124]	; (80092b8 <CPAP_Mode_Task+0xbb8>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f016 fc0c 	bl	801fa5c <vTaskResume>
 8009244:	e00f      	b.n	8009266 <CPAP_Mode_Task+0xb66>
				}
				else if(O2._FIO2_Val<=21)
 8009246:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 8009248:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800924c:	2b15      	cmp	r3, #21
 800924e:	d80a      	bhi.n	8009266 <CPAP_Mode_Task+0xb66>
				{
					O2.O2_DAC=0;
 8009250:	4b18      	ldr	r3, [pc, #96]	; (80092b4 <CPAP_Mode_Task+0xbb4>)
 8009252:	2200      	movs	r2, #0
 8009254:	811a      	strh	r2, [r3, #8]
					Parkar_valve_Signal(0);
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <CPAP_Mode_Task+0xb90>)
 8009258:	2200      	movs	r2, #0
 800925a:	615a      	str	r2, [r3, #20]
					vTaskSuspend(Oxygen_Handler);
 800925c:	4b16      	ldr	r3, [pc, #88]	; (80092b8 <CPAP_Mode_Task+0xbb8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f016 fb37 	bl	801f8d4 <vTaskSuspend>
				}

				vTaskSuspend(Cpap_Handler);
 8009266:	4b15      	ldr	r3, [pc, #84]	; (80092bc <CPAP_Mode_Task+0xbbc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f016 fb32 	bl	801f8d4 <vTaskSuspend>
			}
		}
		vTaskDelay(2);
 8009270:	2002      	movs	r0, #2
 8009272:	f016 fafb 	bl	801f86c <vTaskDelay>
		  if(Initial_open_valve==1)
 8009276:	f7ff ba47 	b.w	8008708 <CPAP_Mode_Task+0x8>
 800927a:	bf00      	nop
 800927c:	20016960 	.word	0x20016960
 8009280:	20016ad4 	.word	0x20016ad4
 8009284:	20016e50 	.word	0x20016e50
 8009288:	20016ea8 	.word	0x20016ea8
 800928c:	20016a2c 	.word	0x20016a2c
 8009290:	40007400 	.word	0x40007400
 8009294:	20016df4 	.word	0x20016df4
 8009298:	200168b4 	.word	0x200168b4
 800929c:	2000012c 	.word	0x2000012c
 80092a0:	20016adc 	.word	0x20016adc
 80092a4:	20016cc8 	.word	0x20016cc8
 80092a8:	20016d40 	.word	0x20016d40
 80092ac:	20016bcc 	.word	0x20016bcc
 80092b0:	20016d3c 	.word	0x20016d3c
 80092b4:	20000048 	.word	0x20000048
 80092b8:	20016958 	.word	0x20016958
 80092bc:	20016bb8 	.word	0x20016bb8
 80092c0:	20016e90 	.word	0x20016e90
 80092c4:	20016d7c 	.word	0x20016d7c
 80092c8:	20016a7c 	.word	0x20016a7c

080092cc <CPAP_PARAMETERS>:




void CPAP_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80092cc:	b5b0      	push	{r4, r5, r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	     P1.PEEP_CPAP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	795a      	ldrb	r2, [r3, #5]
 80092d8:	4b89      	ldr	r3, [pc, #548]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80092da:	70da      	strb	r2, [r3, #3]
	     P1._Apnea_counter_trigger_check_time=3000;
 80092dc:	4b88      	ldr	r3, [pc, #544]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80092de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80092e2:	809a      	strh	r2, [r3, #4]
		 P1._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT)>>4;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7b9b      	ldrb	r3, [r3, #14]
 80092e8:	091b      	lsrs	r3, r3, #4
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	4b84      	ldr	r3, [pc, #528]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80092f0:	80da      	strh	r2, [r3, #6]
		 P1._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7b9b      	ldrb	r3, [r3, #14]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	4b80      	ldr	r3, [pc, #512]	; (8009500 <CPAP_PARAMETERS+0x234>)
 8009300:	811a      	strh	r2, [r3, #8]
		 P1._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7adb      	ldrb	r3, [r3, #11]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	b29a      	uxth	r2, r3
 800930e:	4b7c      	ldr	r3, [pc, #496]	; (8009500 <CPAP_PARAMETERS+0x234>)
 8009310:	815a      	strh	r2, [r3, #10]

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 8009312:	4b7c      	ldr	r3, [pc, #496]	; (8009504 <CPAP_PARAMETERS+0x238>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <CPAP_PARAMETERS+0x62>
		 {
			 P1._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 800931a:	4b7b      	ldr	r3, [pc, #492]	; (8009508 <CPAP_PARAMETERS+0x23c>)
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	b29a      	uxth	r2, r3
 8009320:	4b77      	ldr	r3, [pc, #476]	; (8009500 <CPAP_PARAMETERS+0x234>)
 8009322:	899b      	ldrh	r3, [r3, #12]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	b29a      	uxth	r2, r3
 8009328:	4b75      	ldr	r3, [pc, #468]	; (8009500 <CPAP_PARAMETERS+0x234>)
 800932a:	81da      	strh	r2, [r3, #14]
 800932c:	e00c      	b.n	8009348 <CPAP_PARAMETERS+0x7c>
		 }

		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 800932e:	4b75      	ldr	r3, [pc, #468]	; (8009504 <CPAP_PARAMETERS+0x238>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d108      	bne.n	8009348 <CPAP_PARAMETERS+0x7c>
		 {

			 P1._TOLERANCE_EWAVE = D2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 8009336:	4b75      	ldr	r3, [pc, #468]	; (800950c <CPAP_PARAMETERS+0x240>)
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b29a      	uxth	r2, r3
 800933c:	4b70      	ldr	r3, [pc, #448]	; (8009500 <CPAP_PARAMETERS+0x234>)
 800933e:	899b      	ldrh	r3, [r3, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29a      	uxth	r2, r3
 8009344:	4b6e      	ldr	r3, [pc, #440]	; (8009500 <CPAP_PARAMETERS+0x234>)
 8009346:	81da      	strh	r2, [r3, #14]
		 }
		 P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 8009348:	4b6d      	ldr	r3, [pc, #436]	; (8009500 <CPAP_PARAMETERS+0x234>)
 800934a:	89db      	ldrh	r3, [r3, #14]
 800934c:	4618      	mov	r0, r3
 800934e:	f7f7 f891 	bl	8000474 <__aeabi_i2d>
 8009352:	4604      	mov	r4, r0
 8009354:	460d      	mov	r5, r1
 8009356:	4b6a      	ldr	r3, [pc, #424]	; (8009500 <CPAP_PARAMETERS+0x234>)
 8009358:	895b      	ldrh	r3, [r3, #10]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009362:	ee17 0a90 	vmov	r0, s15
 8009366:	f7f7 f897 	bl	8000498 <__aeabi_f2d>
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	4b68      	ldr	r3, [pc, #416]	; (8009510 <CPAP_PARAMETERS+0x244>)
 8009370:	f7f7 f8ea 	bl	8000548 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4610      	mov	r0, r2
 800937a:	4619      	mov	r1, r3
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	4b64      	ldr	r3, [pc, #400]	; (8009514 <CPAP_PARAMETERS+0x248>)
 8009382:	f7f7 fa0b 	bl	800079c <__aeabi_ddiv>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4620      	mov	r0, r4
 800938c:	4629      	mov	r1, r5
 800938e:	f7f7 f8db 	bl	8000548 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4610      	mov	r0, r2
 8009398:	4619      	mov	r1, r3
 800939a:	f7f7 fb97 	bl	8000acc <__aeabi_d2uiz>
 800939e:	4603      	mov	r3, r0
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	4b57      	ldr	r3, [pc, #348]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80093a4:	821a      	strh	r2, [r3, #16]
		 P1._APNEA_TIME = RX_PARAM_CMD_PACKET->_APNEA;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	7b5b      	ldrb	r3, [r3, #13]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	4b54      	ldr	r3, [pc, #336]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80093ae:	845a      	strh	r2, [r3, #34]	; 0x22
		 P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 80093b0:	4b53      	ldr	r3, [pc, #332]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80093b2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80093b4:	461a      	mov	r2, r3
 80093b6:	0152      	lsls	r2, r2, #5
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	0092      	lsls	r2, r2, #2
 80093bc:	4413      	add	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <CPAP_PARAMETERS+0x234>)
 80093c4:	849a      	strh	r2, [r3, #36]	; 0x24


		 Initial_open_valve=1;
 80093c6:	4b54      	ldr	r3, [pc, #336]	; (8009518 <CPAP_PARAMETERS+0x24c>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	601a      	str	r2, [r3, #0]
		 one_time_only=1;
 80093cc:	4b53      	ldr	r3, [pc, #332]	; (800951c <CPAP_PARAMETERS+0x250>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]


		 ExpValve_CLOSE();
 80093d2:	4b53      	ldr	r3, [pc, #332]	; (8009520 <CPAP_PARAMETERS+0x254>)
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	4a52      	ldr	r2, [pc, #328]	; (8009520 <CPAP_PARAMETERS+0x254>)
 80093d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093dc:	6153      	str	r3, [r2, #20]
		 Trigger_Count=0;
 80093de:	4b51      	ldr	r3, [pc, #324]	; (8009524 <CPAP_PARAMETERS+0x258>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
		 vTaskSuspend(pc_mode_Handler);
 80093e4:	4b50      	ldr	r3, [pc, #320]	; (8009528 <CPAP_PARAMETERS+0x25c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f016 fa73 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_cmv_Pid_Handler);
 80093ee:	4b4f      	ldr	r3, [pc, #316]	; (800952c <CPAP_PARAMETERS+0x260>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f016 fa6e 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Pc_simv_Mode_Handler);
 80093f8:	4b4d      	ldr	r3, [pc, #308]	; (8009530 <CPAP_PARAMETERS+0x264>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f016 fa69 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8009402:	4b4c      	ldr	r3, [pc, #304]	; (8009534 <CPAP_PARAMETERS+0x268>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f016 fa64 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_mode_Handler);
 800940c:	4b4a      	ldr	r3, [pc, #296]	; (8009538 <CPAP_PARAMETERS+0x26c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4618      	mov	r0, r3
 8009412:	f016 fa5f 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_Pid_Handler);
 8009416:	4b49      	ldr	r3, [pc, #292]	; (800953c <CPAP_PARAMETERS+0x270>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f016 fa5a 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_simv_mode_Handler);
 8009420:	4b47      	ldr	r3, [pc, #284]	; (8009540 <CPAP_PARAMETERS+0x274>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f016 fa55 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_simv_Pid_Handler);
 800942a:	4b46      	ldr	r3, [pc, #280]	; (8009544 <CPAP_PARAMETERS+0x278>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f016 fa50 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Psv_Handler);
 8009434:	4b44      	ldr	r3, [pc, #272]	; (8009548 <CPAP_PARAMETERS+0x27c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f016 fa4b 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Psv_Pid_Handler);
 800943e:	4b43      	ldr	r3, [pc, #268]	; (800954c <CPAP_PARAMETERS+0x280>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f016 fa46 	bl	801f8d4 <vTaskSuspend>

	     vTaskSuspend(BiPap_Handler);
 8009448:	4b41      	ldr	r3, [pc, #260]	; (8009550 <CPAP_PARAMETERS+0x284>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f016 fa41 	bl	801f8d4 <vTaskSuspend>
	     vTaskSuspend(BiPap_Pid_Handler);
 8009452:	4b40      	ldr	r3, [pc, #256]	; (8009554 <CPAP_PARAMETERS+0x288>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f016 fa3c 	bl	801f8d4 <vTaskSuspend>

	     vTaskSuspend(APRV_Handler);
 800945c:	4b3e      	ldr	r3, [pc, #248]	; (8009558 <CPAP_PARAMETERS+0x28c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f016 fa37 	bl	801f8d4 <vTaskSuspend>
	     vTaskSuspend(APRV_one_Handler);
 8009466:	4b3d      	ldr	r3, [pc, #244]	; (800955c <CPAP_PARAMETERS+0x290>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f016 fa32 	bl	801f8d4 <vTaskSuspend>

	     vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8009470:	4b3b      	ldr	r3, [pc, #236]	; (8009560 <CPAP_PARAMETERS+0x294>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f016 fa2d 	bl	801f8d4 <vTaskSuspend>
	     vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800947a:	4b3a      	ldr	r3, [pc, #232]	; (8009564 <CPAP_PARAMETERS+0x298>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f016 fa28 	bl	801f8d4 <vTaskSuspend>

	     vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8009484:	4b38      	ldr	r3, [pc, #224]	; (8009568 <CPAP_PARAMETERS+0x29c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f016 fa23 	bl	801f8d4 <vTaskSuspend>
	     vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800948e:	4b37      	ldr	r3, [pc, #220]	; (800956c <CPAP_PARAMETERS+0x2a0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f016 fa1e 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(One_Time_Handler);
 8009498:	4b35      	ldr	r3, [pc, #212]	; (8009570 <CPAP_PARAMETERS+0x2a4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f016 fa19 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Oxygen_Handler);
 80094a2:	4b34      	ldr	r3, [pc, #208]	; (8009574 <CPAP_PARAMETERS+0x2a8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f016 fa14 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(alert_Handler);
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <CPAP_PARAMETERS+0x2ac>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f016 fa0f 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(HFNC_Handler);
 80094b6:	4b31      	ldr	r3, [pc, #196]	; (800957c <CPAP_PARAMETERS+0x2b0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f016 fa0a 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Suction_Handler);
 80094c0:	4b2f      	ldr	r3, [pc, #188]	; (8009580 <CPAP_PARAMETERS+0x2b4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f016 fa05 	bl	801f8d4 <vTaskSuspend>

		 vTaskResume(Cpap_Handler);
 80094ca:	4b2e      	ldr	r3, [pc, #184]	; (8009584 <CPAP_PARAMETERS+0x2b8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f016 fac4 	bl	801fa5c <vTaskResume>

		 _CurrentMode = cPAP;
 80094d4:	4b2c      	ldr	r3, [pc, #176]	; (8009588 <CPAP_PARAMETERS+0x2bc>)
 80094d6:	2207      	movs	r2, #7
 80094d8:	701a      	strb	r2, [r3, #0]

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 80094da:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <CPAP_PARAMETERS+0x238>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d103      	bne.n	80094ea <CPAP_PARAMETERS+0x21e>
		 {
			 S1._Mode_Val=10;
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <CPAP_PARAMETERS+0x2c0>)
 80094e4:	220a      	movs	r2, #10
 80094e6:	701a      	strb	r2, [r3, #0]
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
		 {
			 S1._Mode_Val=11;
		 }

}
 80094e8:	e006      	b.n	80094f8 <CPAP_PARAMETERS+0x22c>
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 80094ea:	4b06      	ldr	r3, [pc, #24]	; (8009504 <CPAP_PARAMETERS+0x238>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d102      	bne.n	80094f8 <CPAP_PARAMETERS+0x22c>
			 S1._Mode_Val=11;
 80094f2:	4b26      	ldr	r3, [pc, #152]	; (800958c <CPAP_PARAMETERS+0x2c0>)
 80094f4:	220b      	movs	r2, #11
 80094f6:	701a      	strb	r2, [r3, #0]
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009500:	20016960 	.word	0x20016960
 8009504:	2000012c 	.word	0x2000012c
 8009508:	20016cd4 	.word	0x20016cd4
 800950c:	20016cc0 	.word	0x20016cc0
 8009510:	40240000 	.word	0x40240000
 8009514:	40590000 	.word	0x40590000
 8009518:	20000044 	.word	0x20000044
 800951c:	20000128 	.word	0x20000128
 8009520:	40020400 	.word	0x40020400
 8009524:	200168b4 	.word	0x200168b4
 8009528:	20016a84 	.word	0x20016a84
 800952c:	20016a28 	.word	0x20016a28
 8009530:	20016e60 	.word	0x20016e60
 8009534:	20016e8c 	.word	0x20016e8c
 8009538:	20016d78 	.word	0x20016d78
 800953c:	2001695c 	.word	0x2001695c
 8009540:	20016c44 	.word	0x20016c44
 8009544:	20016ad0 	.word	0x20016ad0
 8009548:	20016bf0 	.word	0x20016bf0
 800954c:	20016a74 	.word	0x20016a74
 8009550:	20016a24 	.word	0x20016a24
 8009554:	20016878 	.word	0x20016878
 8009558:	20016c00 	.word	0x20016c00
 800955c:	20016bc8 	.word	0x20016bc8
 8009560:	20016bcc 	.word	0x20016bcc
 8009564:	20016d3c 	.word	0x20016d3c
 8009568:	20016d7c 	.word	0x20016d7c
 800956c:	20016a7c 	.word	0x20016a7c
 8009570:	20016d40 	.word	0x20016d40
 8009574:	20016958 	.word	0x20016958
 8009578:	20016ad4 	.word	0x20016ad4
 800957c:	20016a20 	.word	0x20016a20
 8009580:	20016e5c 	.word	0x20016e5c
 8009584:	20016bb8 	.word	0x20016bb8
 8009588:	20016c04 	.word	0x20016c04
 800958c:	20016ae0 	.word	0x20016ae0

08009590 <Get_Volume>:

#include "Flow_Sensors_Data.h"


void Get_Volume()
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0

	vol.Flow_Volume=(Flow_Sensor_cal.Flow1/60.00)*2;
 8009594:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <Get_Volume+0x78>)
 8009596:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	4b1b      	ldr	r3, [pc, #108]	; (800960c <Get_Volume+0x7c>)
 80095a0:	f7f7 f8fc 	bl	800079c <__aeabi_ddiv>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4610      	mov	r0, r2
 80095aa:	4619      	mov	r1, r3
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	f7f6 fe14 	bl	80001dc <__adddf3>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4610      	mov	r0, r2
 80095ba:	4619      	mov	r1, r3
 80095bc:	f7f7 faa6 	bl	8000b0c <__aeabi_d2f>
 80095c0:	4603      	mov	r3, r0
 80095c2:	4a13      	ldr	r2, [pc, #76]	; (8009610 <Get_Volume+0x80>)
 80095c4:	6013      	str	r3, [r2, #0]
	vol.Volume=vol.Volume+vol.Flow_Volume;
 80095c6:	4b12      	ldr	r3, [pc, #72]	; (8009610 <Get_Volume+0x80>)
 80095c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80095cc:	4b10      	ldr	r3, [pc, #64]	; (8009610 <Get_Volume+0x80>)
 80095ce:	edd3 7a00 	vldr	s15, [r3]
 80095d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095d6:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <Get_Volume+0x80>)
 80095d8:	edc3 7a01 	vstr	s15, [r3, #4]
	vol.Volume_Val=(int)vol.Volume;
 80095dc:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <Get_Volume+0x80>)
 80095de:	edd3 7a01 	vldr	s15, [r3, #4]
 80095e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095e6:	ee17 2a90 	vmov	r2, s15
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <Get_Volume+0x80>)
 80095ec:	609a      	str	r2, [r3, #8]
	if(V_max<vol.Volume_Val)
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <Get_Volume+0x80>)
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	4b08      	ldr	r3, [pc, #32]	; (8009614 <Get_Volume+0x84>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	dd03      	ble.n	8009602 <Get_Volume+0x72>
	{
		V_max=vol.Volume_Val;
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <Get_Volume+0x80>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	4a05      	ldr	r2, [pc, #20]	; (8009614 <Get_Volume+0x84>)
 8009600:	6013      	str	r3, [r2, #0]
	}


}
 8009602:	bf00      	nop
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20016c48 	.word	0x20016c48
 800960c:	404e0000 	.word	0x404e0000
 8009610:	20016d44 	.word	0x20016d44
 8009614:	20016d60 	.word	0x20016d60

08009618 <AW_flow_raw_Volt>:

float AW_flow_raw_Volt(uint16_t r)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	80fb      	strh	r3, [r7, #6]
	float volt=0;
 8009622:	f04f 0300 	mov.w	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]
	volt=(r*6144.00)/32768;
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	4618      	mov	r0, r3
 800962c:	f7f6 ff22 	bl	8000474 <__aeabi_i2d>
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <AW_flow_raw_Volt+0x54>)
 8009636:	f7f6 ff87 	bl	8000548 <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <AW_flow_raw_Volt+0x58>)
 8009648:	f7f7 f8a8 	bl	800079c <__aeabi_ddiv>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4610      	mov	r0, r2
 8009652:	4619      	mov	r1, r3
 8009654:	f7f7 fa5a 	bl	8000b0c <__aeabi_d2f>
 8009658:	4603      	mov	r3, r0
 800965a:	60fb      	str	r3, [r7, #12]
	return volt;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	ee07 3a90 	vmov	s15, r3
}
 8009662:	eeb0 0a67 	vmov.f32	s0, s15
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	40b80000 	.word	0x40b80000
 8009670:	40e00000 	.word	0x40e00000

08009674 <AW_flow_moving_average>:

uint16_t AW_flow_moving_average(uint16_t value)
{
 8009674:	b5b0      	push	{r4, r5, r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	80fb      	strh	r3, [r7, #6]
	    Flow_sensor.AW_flow_raw1_new = value;
 800967e:	4a1a      	ldr	r2, [pc, #104]	; (80096e8 <AW_flow_moving_average+0x74>)
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	81d3      	strh	r3, [r2, #14]

	    Flow_sensor.AW_flow_raw1_new = ((Flow_sensor.AW_flow_raw1_new-Flow_sensor.AW_flow_raw_old)/3.00)+Flow_sensor.AW_flow_raw_old;
 8009684:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <AW_flow_moving_average+0x74>)
 8009686:	89db      	ldrh	r3, [r3, #14]
 8009688:	461a      	mov	r2, r3
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <AW_flow_moving_average+0x74>)
 800968c:	8a1b      	ldrh	r3, [r3, #16]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	4618      	mov	r0, r3
 8009692:	f7f6 feef 	bl	8000474 <__aeabi_i2d>
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	4b14      	ldr	r3, [pc, #80]	; (80096ec <AW_flow_moving_average+0x78>)
 800969c:	f7f7 f87e 	bl	800079c <__aeabi_ddiv>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	461d      	mov	r5, r3
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <AW_flow_moving_average+0x74>)
 80096aa:	8a1b      	ldrh	r3, [r3, #16]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7f6 fee1 	bl	8000474 <__aeabi_i2d>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4620      	mov	r0, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f6 fd8f 	bl	80001dc <__adddf3>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	f7f7 fa01 	bl	8000acc <__aeabi_d2uiz>
 80096ca:	4603      	mov	r3, r0
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <AW_flow_moving_average+0x74>)
 80096d0:	81da      	strh	r2, [r3, #14]

	    Flow_sensor.AW_flow_raw_old = Flow_sensor.AW_flow_raw1_new;
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <AW_flow_moving_average+0x74>)
 80096d4:	89da      	ldrh	r2, [r3, #14]
 80096d6:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <AW_flow_moving_average+0x74>)
 80096d8:	821a      	strh	r2, [r3, #16]

		return Flow_sensor.AW_flow_raw1_new;
 80096da:	4b03      	ldr	r3, [pc, #12]	; (80096e8 <AW_flow_moving_average+0x74>)
 80096dc:	89db      	ldrh	r3, [r3, #14]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bdb0      	pop	{r4, r5, r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20016914 	.word	0x20016914
 80096ec:	40080000 	.word	0x40080000

080096f0 <ADS1115_AW_flow_sensor>:

uint16_t ADS1115_AW_flow_sensor()
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af02      	add	r7, sp, #8
		uint16_t  ADCraw=0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	80fb      	strh	r3, [r7, #6]


		Flow_sensor.ADSwrite[0] = 0x01;
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	721a      	strb	r2, [r3, #8]

		Flow_sensor.ADSwrite[1] =0x40;
 8009700:	4b1a      	ldr	r3, [pc, #104]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 8009702:	2240      	movs	r2, #64	; 0x40
 8009704:	725a      	strb	r2, [r3, #9]

		Flow_sensor.ADSwrite[2] = 0xE3;
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 8009708:	22e3      	movs	r2, #227	; 0xe3
 800970a:	729a      	strb	r2, [r3, #10]

      	if(HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1,(Flow_sensor.ADSwrite), 3, 10)!=HAL_OK)
 800970c:	230a      	movs	r3, #10
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2303      	movs	r3, #3
 8009712:	4a17      	ldr	r2, [pc, #92]	; (8009770 <ADS1115_AW_flow_sensor+0x80>)
 8009714:	2190      	movs	r1, #144	; 0x90
 8009716:	4817      	ldr	r0, [pc, #92]	; (8009774 <ADS1115_AW_flow_sensor+0x84>)
 8009718:	f00d fc60 	bl	8016fdc <HAL_I2C_Master_Transmit>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <ADS1115_AW_flow_sensor+0x38>
      	{
      		Flow_sensor.fault=1;
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 8009724:	2201      	movs	r2, #1
 8009726:	749a      	strb	r2, [r3, #18]
      	}

      	Flow_sensor.ADSwrite[0] = 0x00;
 8009728:	4b10      	ldr	r3, [pc, #64]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 800972a:	2200      	movs	r2, #0
 800972c:	721a      	strb	r2, [r3, #8]


		HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, (Flow_sensor.ADSwrite), 1, 10);
 800972e:	230a      	movs	r3, #10
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2301      	movs	r3, #1
 8009734:	4a0e      	ldr	r2, [pc, #56]	; (8009770 <ADS1115_AW_flow_sensor+0x80>)
 8009736:	2190      	movs	r1, #144	; 0x90
 8009738:	480e      	ldr	r0, [pc, #56]	; (8009774 <ADS1115_AW_flow_sensor+0x84>)
 800973a:	f00d fc4f 	bl	8016fdc <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c2, (ADS1115_ADDRESS<<1),(Flow_sensor.ADSread),2,10);
 800973e:	230a      	movs	r3, #10
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	2302      	movs	r3, #2
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <ADS1115_AW_flow_sensor+0x88>)
 8009746:	2190      	movs	r1, #144	; 0x90
 8009748:	480a      	ldr	r0, [pc, #40]	; (8009774 <ADS1115_AW_flow_sensor+0x84>)
 800974a:	f00d fd45 	bl	80171d8 <HAL_I2C_Master_Receive>


		ADCraw = ((Flow_sensor.ADSread[0]) << 8 | (Flow_sensor.ADSread[1]));
 800974e:	4b07      	ldr	r3, [pc, #28]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 8009750:	7adb      	ldrb	r3, [r3, #11]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	b21a      	sxth	r2, r3
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <ADS1115_AW_flow_sensor+0x7c>)
 8009758:	7b1b      	ldrb	r3, [r3, #12]
 800975a:	b21b      	sxth	r3, r3
 800975c:	4313      	orrs	r3, r2
 800975e:	b21b      	sxth	r3, r3
 8009760:	80fb      	strh	r3, [r7, #6]

		return   ADCraw;
 8009762:	88fb      	ldrh	r3, [r7, #6]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20016914 	.word	0x20016914
 8009770:	2001691c 	.word	0x2001691c
 8009774:	20016efc 	.word	0x20016efc
 8009778:	2001691f 	.word	0x2001691f

0800977c <Get_AW_Flow>:

void Get_AW_Flow(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0

	    Flow_sensor.AW_flow_raw = ADS1115_AW_flow_sensor();
 8009780:	f7ff ffb6 	bl	80096f0 <ADS1115_AW_flow_sensor>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <Get_AW_Flow+0x44>)
 800978a:	805a      	strh	r2, [r3, #2]

	    Flow_sensor.AW_flow_raw_filtered = AW_flow_moving_average(Flow_sensor.AW_flow_raw);
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <Get_AW_Flow+0x44>)
 800978e:	885b      	ldrh	r3, [r3, #2]
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff ff6f 	bl	8009674 <AW_flow_moving_average>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <Get_AW_Flow+0x44>)
 800979c:	809a      	strh	r2, [r3, #4]

	 	Flow_sensor.AW_flow_milli_volt = AW_flow_raw_Volt(Flow_sensor.AW_flow_raw_filtered);
 800979e:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <Get_AW_Flow+0x44>)
 80097a0:	889b      	ldrh	r3, [r3, #4]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff ff38 	bl	8009618 <AW_flow_raw_Volt>
 80097a8:	eef0 7a40 	vmov.f32	s15, s0
 80097ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b0:	ee17 3a90 	vmov	r3, s15
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <Get_AW_Flow+0x44>)
 80097b8:	80da      	strh	r2, [r3, #6]
}
 80097ba:	bf00      	nop
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20016914 	.word	0x20016914

080097c4 <Flow_Sensor_7002_offset>:

void Flow_Sensor_7002_offset(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
	for(int i=0;i<1000;i++)
 80097ca:	2300      	movs	r3, #0
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	e00b      	b.n	80097e8 <Flow_Sensor_7002_offset+0x24>
	{
			Get_AW_Flow();
 80097d0:	f7ff ffd4 	bl	800977c <Get_AW_Flow>
			Flow_sensor.AW_Flow_Offset=Flow_sensor.AW_flow_milli_volt;
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <Flow_Sensor_7002_offset+0x38>)
 80097d6:	88da      	ldrh	r2, [r3, #6]
 80097d8:	4b08      	ldr	r3, [pc, #32]	; (80097fc <Flow_Sensor_7002_offset+0x38>)
 80097da:	801a      	strh	r2, [r3, #0]
			vTaskDelay(2);
 80097dc:	2002      	movs	r0, #2
 80097de:	f016 f845 	bl	801f86c <vTaskDelay>
	for(int i=0;i<1000;i++)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3301      	adds	r3, #1
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ee:	dbef      	blt.n	80097d0 <Flow_Sensor_7002_offset+0xc>
	}
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20016914 	.word	0x20016914

08009800 <adj>:




long adj(long x, long in_min, long in_max, long out_min, long out_max)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	1a8a      	subs	r2, r1, r2
 800981a:	fb02 f203 	mul.w	r2, r2, r3
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	1acb      	subs	r3, r1, r3
 8009824:	fb92 f2f3 	sdiv	r2, r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	4413      	add	r3, r2
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <_Flow>:

void _Flow()
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af02      	add	r7, sp, #8

	    const int numReadings  = 15;
 8009840:	230f      	movs	r3, #15
 8009842:	607b      	str	r3, [r7, #4]
	    Flow_Sensor_cal.delp_flow1 =(Flow_sensor.AW_flow_milli_volt-Flow_sensor.AW_Flow_Offset)/1000.00;
 8009844:	4b58      	ldr	r3, [pc, #352]	; (80099a8 <_Flow+0x170>)
 8009846:	88db      	ldrh	r3, [r3, #6]
 8009848:	461a      	mov	r2, r3
 800984a:	4b57      	ldr	r3, [pc, #348]	; (80099a8 <_Flow+0x170>)
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	4618      	mov	r0, r3
 8009852:	f7f6 fe0f 	bl	8000474 <__aeabi_i2d>
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	4b54      	ldr	r3, [pc, #336]	; (80099ac <_Flow+0x174>)
 800985c:	f7f6 ff9e 	bl	800079c <__aeabi_ddiv>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4610      	mov	r0, r2
 8009866:	4619      	mov	r1, r3
 8009868:	f7f7 f950 	bl	8000b0c <__aeabi_d2f>
 800986c:	4603      	mov	r3, r0
 800986e:	4a50      	ldr	r2, [pc, #320]	; (80099b0 <_Flow+0x178>)
 8009870:	6013      	str	r3, [r2, #0]
	    Flow_Sensor_cal.dp=Flow_Sensor_cal.delp_flow1*10;
 8009872:	4b4f      	ldr	r3, [pc, #316]	; (80099b0 <_Flow+0x178>)
 8009874:	edd3 7a00 	vldr	s15, [r3]
 8009878:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800987c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009880:	4b4b      	ldr	r3, [pc, #300]	; (80099b0 <_Flow+0x178>)
 8009882:	edc3 7a01 	vstr	s15, [r3, #4]


		if(Flow_Sensor_cal.dp>0)
 8009886:	4b4a      	ldr	r3, [pc, #296]	; (80099b0 <_Flow+0x178>)
 8009888:	edd3 7a01 	vldr	s15, [r3, #4]
 800988c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009894:	f340 808e 	ble.w	80099b4 <_Flow+0x17c>
		{
			Flow_Sensor_cal.Flow1=0.1512*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)-3.3424*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)+41.657*(Flow_Sensor_cal.dp);
 8009898:	4b45      	ldr	r3, [pc, #276]	; (80099b0 <_Flow+0x178>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f7f6 fdfb 	bl	8000498 <__aeabi_f2d>
 80098a2:	a33b      	add	r3, pc, #236	; (adr r3, 8009990 <_Flow+0x158>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f6 fe4e 	bl	8000548 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	461d      	mov	r5, r3
 80098b4:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <_Flow+0x178>)
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7f6 fded 	bl	8000498 <__aeabi_f2d>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4620      	mov	r0, r4
 80098c4:	4629      	mov	r1, r5
 80098c6:	f7f6 fe3f 	bl	8000548 <__aeabi_dmul>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4614      	mov	r4, r2
 80098d0:	461d      	mov	r5, r3
 80098d2:	4b37      	ldr	r3, [pc, #220]	; (80099b0 <_Flow+0x178>)
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f6 fdde 	bl	8000498 <__aeabi_f2d>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4620      	mov	r0, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	f7f6 fe30 	bl	8000548 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	461d      	mov	r5, r3
 80098f0:	4b2f      	ldr	r3, [pc, #188]	; (80099b0 <_Flow+0x178>)
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f6 fdcf 	bl	8000498 <__aeabi_f2d>
 80098fa:	a327      	add	r3, pc, #156	; (adr r3, 8009998 <_Flow+0x160>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fe22 	bl	8000548 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4690      	mov	r8, r2
 800990a:	4699      	mov	r9, r3
 800990c:	4b28      	ldr	r3, [pc, #160]	; (80099b0 <_Flow+0x178>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4618      	mov	r0, r3
 8009912:	f7f6 fdc1 	bl	8000498 <__aeabi_f2d>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fe13 	bl	8000548 <__aeabi_dmul>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4620      	mov	r0, r4
 8009928:	4629      	mov	r1, r5
 800992a:	f7f6 fc55 	bl	80001d8 <__aeabi_dsub>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4614      	mov	r4, r2
 8009934:	461d      	mov	r5, r3
 8009936:	4b1e      	ldr	r3, [pc, #120]	; (80099b0 <_Flow+0x178>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	4618      	mov	r0, r3
 800993c:	f7f6 fdac 	bl	8000498 <__aeabi_f2d>
 8009940:	a317      	add	r3, pc, #92	; (adr r3, 80099a0 <_Flow+0x168>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fdff 	bl	8000548 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f6 fc43 	bl	80001dc <__adddf3>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4915      	ldr	r1, [pc, #84]	; (80099b0 <_Flow+0x178>)
 800995c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 8009960:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <_Flow+0x178>)
 8009962:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	f7f7 f887 	bl	8000a7c <__aeabi_d2iz>
 800996e:	23b9      	movs	r3, #185	; 0xb9
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	2300      	movs	r3, #0
 8009974:	22a0      	movs	r2, #160	; 0xa0
 8009976:	2100      	movs	r1, #0
 8009978:	f7ff ff42 	bl	8009800 <adj>
 800997c:	4603      	mov	r3, r0
 800997e:	4618      	mov	r0, r3
 8009980:	f7f6 fd78 	bl	8000474 <__aeabi_i2d>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4909      	ldr	r1, [pc, #36]	; (80099b0 <_Flow+0x178>)
 800998a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800998e:	e0a6      	b.n	8009ade <_Flow+0x2a6>
 8009990:	8793dd98 	.word	0x8793dd98
 8009994:	3fc35a85 	.word	0x3fc35a85
 8009998:	36113405 	.word	0x36113405
 800999c:	400abd3c 	.word	0x400abd3c
 80099a0:	9374bc6a 	.word	0x9374bc6a
 80099a4:	4044d418 	.word	0x4044d418
 80099a8:	20016914 	.word	0x20016914
 80099ac:	408f4000 	.word	0x408f4000
 80099b0:	20016c48 	.word	0x20016c48
		}
		else if(Flow_Sensor_cal.dp<0)
 80099b4:	4b8a      	ldr	r3, [pc, #552]	; (8009be0 <_Flow+0x3a8>)
 80099b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80099ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c2:	f140 808c 	bpl.w	8009ade <_Flow+0x2a6>
		{
			Flow_Sensor_cal.dp*=-1;
 80099c6:	4b86      	ldr	r3, [pc, #536]	; (8009be0 <_Flow+0x3a8>)
 80099c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80099cc:	eef1 7a67 	vneg.f32	s15, s15
 80099d0:	4b83      	ldr	r3, [pc, #524]	; (8009be0 <_Flow+0x3a8>)
 80099d2:	edc3 7a01 	vstr	s15, [r3, #4]
			Flow_Sensor_cal.Flow1=0.1512*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp-3.3424*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp+41.657*Flow_Sensor_cal.dp;
 80099d6:	4b82      	ldr	r3, [pc, #520]	; (8009be0 <_Flow+0x3a8>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f6 fd5c 	bl	8000498 <__aeabi_f2d>
 80099e0:	a377      	add	r3, pc, #476	; (adr r3, 8009bc0 <_Flow+0x388>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fdaf 	bl	8000548 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4690      	mov	r8, r2
 80099f0:	4699      	mov	r9, r3
 80099f2:	4b7b      	ldr	r3, [pc, #492]	; (8009be0 <_Flow+0x3a8>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f6 fd4e 	bl	8000498 <__aeabi_f2d>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f6 fda0 	bl	8000548 <__aeabi_dmul>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4690      	mov	r8, r2
 8009a0e:	4699      	mov	r9, r3
 8009a10:	4b73      	ldr	r3, [pc, #460]	; (8009be0 <_Flow+0x3a8>)
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f6 fd3f 	bl	8000498 <__aeabi_f2d>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fd91 	bl	8000548 <__aeabi_dmul>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4690      	mov	r8, r2
 8009a2c:	4699      	mov	r9, r3
 8009a2e:	4b6c      	ldr	r3, [pc, #432]	; (8009be0 <_Flow+0x3a8>)
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f6 fd30 	bl	8000498 <__aeabi_f2d>
 8009a38:	a363      	add	r3, pc, #396	; (adr r3, 8009bc8 <_Flow+0x390>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fd83 	bl	8000548 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4692      	mov	sl, r2
 8009a48:	469b      	mov	fp, r3
 8009a4a:	4b65      	ldr	r3, [pc, #404]	; (8009be0 <_Flow+0x3a8>)
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f6 fd22 	bl	8000498 <__aeabi_f2d>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4650      	mov	r0, sl
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	f7f6 fd74 	bl	8000548 <__aeabi_dmul>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4640      	mov	r0, r8
 8009a66:	4649      	mov	r1, r9
 8009a68:	f7f6 fbb6 	bl	80001d8 <__aeabi_dsub>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4690      	mov	r8, r2
 8009a72:	4699      	mov	r9, r3
 8009a74:	4b5a      	ldr	r3, [pc, #360]	; (8009be0 <_Flow+0x3a8>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f6 fd0d 	bl	8000498 <__aeabi_f2d>
 8009a7e:	a354      	add	r3, pc, #336	; (adr r3, 8009bd0 <_Flow+0x398>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fd60 	bl	8000548 <__aeabi_dmul>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fba4 	bl	80001dc <__adddf3>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4951      	ldr	r1, [pc, #324]	; (8009be0 <_Flow+0x3a8>)
 8009a9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 8009a9e:	4b50      	ldr	r3, [pc, #320]	; (8009be0 <_Flow+0x3a8>)
 8009aa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	f7f6 ffe8 	bl	8000a7c <__aeabi_d2iz>
 8009aac:	23b9      	movs	r3, #185	; 0xb9
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	22a0      	movs	r2, #160	; 0xa0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	f7ff fea3 	bl	8009800 <adj>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f6 fcd9 	bl	8000474 <__aeabi_i2d>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4946      	ldr	r1, [pc, #280]	; (8009be0 <_Flow+0x3a8>)
 8009ac8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1*=-1;
 8009acc:	4b44      	ldr	r3, [pc, #272]	; (8009be0 <_Flow+0x3a8>)
 8009ace:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ad2:	4614      	mov	r4, r2
 8009ad4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009ad8:	4b41      	ldr	r3, [pc, #260]	; (8009be0 <_Flow+0x3a8>)
 8009ada:	e9c3 4504 	strd	r4, r5, [r3, #16]

		}


		      Flow_Sensor_cal.total = Flow_Sensor_cal.total - Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 8009ade:	4b40      	ldr	r3, [pc, #256]	; (8009be0 <_Flow+0x3a8>)
 8009ae0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ae2:	4b3f      	ldr	r3, [pc, #252]	; (8009be0 <_Flow+0x3a8>)
 8009ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae6:	493e      	ldr	r1, [pc, #248]	; (8009be0 <_Flow+0x3a8>)
 8009ae8:	3306      	adds	r3, #6
 8009aea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	4a3b      	ldr	r2, [pc, #236]	; (8009be0 <_Flow+0x3a8>)
 8009af2:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex] = Flow_Sensor_cal.Flow1;
 8009af4:	4b3a      	ldr	r3, [pc, #232]	; (8009be0 <_Flow+0x3a8>)
 8009af6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009afa:	4939      	ldr	r1, [pc, #228]	; (8009be0 <_Flow+0x3a8>)
 8009afc:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8009afe:	4610      	mov	r0, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7f6 ffbb 	bl	8000a7c <__aeabi_d2iz>
 8009b06:	4602      	mov	r2, r0
 8009b08:	4935      	ldr	r1, [pc, #212]	; (8009be0 <_Flow+0x3a8>)
 8009b0a:	1da3      	adds	r3, r4, #6
 8009b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		      Flow_Sensor_cal.total = Flow_Sensor_cal.total + Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 8009b10:	4b33      	ldr	r3, [pc, #204]	; (8009be0 <_Flow+0x3a8>)
 8009b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b14:	4b32      	ldr	r3, [pc, #200]	; (8009be0 <_Flow+0x3a8>)
 8009b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b18:	4931      	ldr	r1, [pc, #196]	; (8009be0 <_Flow+0x3a8>)
 8009b1a:	3306      	adds	r3, #6
 8009b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b20:	4413      	add	r3, r2
 8009b22:	4a2f      	ldr	r2, [pc, #188]	; (8009be0 <_Flow+0x3a8>)
 8009b24:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readIndex = Flow_Sensor_cal.readIndex + 1;
 8009b26:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <_Flow+0x3a8>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	4a2c      	ldr	r2, [pc, #176]	; (8009be0 <_Flow+0x3a8>)
 8009b2e:	6553      	str	r3, [r2, #84]	; 0x54
			  if (Flow_Sensor_cal.readIndex >= numReadings)
 8009b30:	4b2b      	ldr	r3, [pc, #172]	; (8009be0 <_Flow+0x3a8>)
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	dc02      	bgt.n	8009b40 <_Flow+0x308>
			  {
				  Flow_Sensor_cal.readIndex = 0;
 8009b3a:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <_Flow+0x3a8>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	655a      	str	r2, [r3, #84]	; 0x54
			  }
			  Flow_Sensor_cal.average = Flow_Sensor_cal.total / numReadings;
 8009b40:	4b27      	ldr	r3, [pc, #156]	; (8009be0 <_Flow+0x3a8>)
 8009b42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8009b4a:	4a25      	ldr	r2, [pc, #148]	; (8009be0 <_Flow+0x3a8>)
 8009b4c:	65d3      	str	r3, [r2, #92]	; 0x5c
			  Flow_Sensor_cal.Flow1= Flow_Sensor_cal.average;
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <_Flow+0x3a8>)
 8009b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f6 fc8e 	bl	8000474 <__aeabi_i2d>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4920      	ldr	r1, [pc, #128]	; (8009be0 <_Flow+0x3a8>)
 8009b5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if((Flow_Sensor_cal.Flow1<1.2)&&(Flow_Sensor_cal.Flow1>-1.2))
 8009b62:	4b1f      	ldr	r3, [pc, #124]	; (8009be0 <_Flow+0x3a8>)
 8009b64:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009b68:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009b6c:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <_Flow+0x3ac>)
 8009b6e:	f7f6 ff5d 	bl	8000a2c <__aeabi_dcmplt>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d011      	beq.n	8009b9c <_Flow+0x364>
 8009b78:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <_Flow+0x3a8>)
 8009b7a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009b7e:	a316      	add	r3, pc, #88	; (adr r3, 8009bd8 <_Flow+0x3a0>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 ff70 	bl	8000a68 <__aeabi_dcmpgt>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <_Flow+0x364>
	    {
			Flow_Sensor_cal.Flow1=0;
 8009b8e:	4914      	ldr	r1, [pc, #80]	; (8009be0 <_Flow+0x3a8>)
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		    Flow_Sensor_cal._Flow_Val=(int)Flow_Sensor_cal.Flow1;
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <_Flow+0x3a8>)
 8009b9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f7f6 ff69 	bl	8000a7c <__aeabi_d2iz>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <_Flow+0x3a8>)
 8009bae:	6613      	str	r3, [r2, #96]	; 0x60


}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	8793dd98 	.word	0x8793dd98
 8009bc4:	3fc35a85 	.word	0x3fc35a85
 8009bc8:	36113405 	.word	0x36113405
 8009bcc:	400abd3c 	.word	0x400abd3c
 8009bd0:	9374bc6a 	.word	0x9374bc6a
 8009bd4:	4044d418 	.word	0x4044d418
 8009bd8:	33333333 	.word	0x33333333
 8009bdc:	bff33333 	.word	0xbff33333
 8009be0:	20016c48 	.word	0x20016c48
 8009be4:	3ff33333 	.word	0x3ff33333

08009be8 <Flow_Sensor_Value>:

void  Flow_Sensor_Value()
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
	Get_AW_Flow();
 8009bec:	f7ff fdc6 	bl	800977c <Get_AW_Flow>

	_Flow();
 8009bf0:	f7ff fe22 	bl	8009838 <_Flow>

}
 8009bf4:	bf00      	nop
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HFNC_Task>:
extern int Time;
extern int Speed;


void HFNC_Task (void *argument)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	while (1)
	{


		PID_Compute(&TPID);
 8009c00:	4811      	ldr	r0, [pc, #68]	; (8009c48 <HFNC_Task+0x50>)
 8009c02:	f00a fe19 	bl	8014838 <PID_Compute>
		HFNC_Dac_Value=(int16_t)PIDOut;
 8009c06:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <HFNC_Task+0x54>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f7f6 ff34 	bl	8000a7c <__aeabi_d2iz>
 8009c14:	4603      	mov	r3, r0
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <HFNC_Task+0x58>)
 8009c1c:	801a      	strh	r2, [r3, #0]
		Parkar_valve_Signal( HFNC_Dac_Value);
 8009c1e:	4b0c      	ldr	r3, [pc, #48]	; (8009c50 <HFNC_Task+0x58>)
 8009c20:	881a      	ldrh	r2, [r3, #0]
 8009c22:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <HFNC_Task+0x5c>)
 8009c24:	615a      	str	r2, [r3, #20]

		//Parkar_valve_Signal( HFNC_Dac_Value);     // FOR DEBUG PURPOSE

		O2.Servo=100;
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <HFNC_Task+0x60>)
 8009c28:	2264      	movs	r2, #100	; 0x64
 8009c2a:	605a      	str	r2, [r3, #4]
		Servo_Angle(O2.Servo);
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <HFNC_Task+0x60>)
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <HFNC_Task+0x64>)
 8009c32:	635a      	str	r2, [r3, #52]	; 0x34

		ExpValve_OPEN();
 8009c34:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <HFNC_Task+0x68>)
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <HFNC_Task+0x68>)
 8009c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c3e:	6153      	str	r3, [r2, #20]

		vTaskDelay(2);
 8009c40:	2002      	movs	r0, #2
 8009c42:	f015 fe13 	bl	801f86c <vTaskDelay>
		PID_Compute(&TPID);
 8009c46:	e7db      	b.n	8009c00 <HFNC_Task+0x8>
 8009c48:	200169a0 	.word	0x200169a0
 8009c4c:	20016a18 	.word	0x20016a18
 8009c50:	20000310 	.word	0x20000310
 8009c54:	40007400 	.word	0x40007400
 8009c58:	20000048 	.word	0x20000048
 8009c5c:	40001800 	.word	0x40001800
 8009c60:	40020400 	.word	0x40020400

08009c64 <HFNC_PARAMETERS>:




void HFNC_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8009c64:	b5b0      	push	{r4, r5, r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	6078      	str	r0, [r7, #4]

	 H1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7b1b      	ldrb	r3, [r3, #12]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	4b83      	ldr	r3, [pc, #524]	; (8009e80 <HFNC_PARAMETERS+0x21c>)
 8009c74:	801a      	strh	r2, [r3, #0]


	 vTaskSuspend(pc_mode_Handler);
 8009c76:	4b83      	ldr	r3, [pc, #524]	; (8009e84 <HFNC_PARAMETERS+0x220>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f015 fe2a 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Pc_cmv_Pid_Handler);
 8009c80:	4b81      	ldr	r3, [pc, #516]	; (8009e88 <HFNC_PARAMETERS+0x224>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f015 fe25 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Pc_simv_Mode_Handler);
 8009c8a:	4b80      	ldr	r3, [pc, #512]	; (8009e8c <HFNC_PARAMETERS+0x228>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f015 fe20 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8009c94:	4b7e      	ldr	r3, [pc, #504]	; (8009e90 <HFNC_PARAMETERS+0x22c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f015 fe1b 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Vc_mode_Handler);
 8009c9e:	4b7d      	ldr	r3, [pc, #500]	; (8009e94 <HFNC_PARAMETERS+0x230>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f015 fe16 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Vc_cmv_Pid_Handler);
 8009ca8:	4b7b      	ldr	r3, [pc, #492]	; (8009e98 <HFNC_PARAMETERS+0x234>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f015 fe11 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Vc_simv_mode_Handler);
 8009cb2:	4b7a      	ldr	r3, [pc, #488]	; (8009e9c <HFNC_PARAMETERS+0x238>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f015 fe0c 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Vc_simv_Pid_Handler);
 8009cbc:	4b78      	ldr	r3, [pc, #480]	; (8009ea0 <HFNC_PARAMETERS+0x23c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f015 fe07 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Psv_Handler);
 8009cc6:	4b77      	ldr	r3, [pc, #476]	; (8009ea4 <HFNC_PARAMETERS+0x240>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f015 fe02 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Psv_Pid_Handler);
 8009cd0:	4b75      	ldr	r3, [pc, #468]	; (8009ea8 <HFNC_PARAMETERS+0x244>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f015 fdfd 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Cpap_Handler);
 8009cda:	4b74      	ldr	r3, [pc, #464]	; (8009eac <HFNC_PARAMETERS+0x248>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f015 fdf8 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(BiPap_Handler);
 8009ce4:	4b72      	ldr	r3, [pc, #456]	; (8009eb0 <HFNC_PARAMETERS+0x24c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f015 fdf3 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(BiPap_Pid_Handler);
 8009cee:	4b71      	ldr	r3, [pc, #452]	; (8009eb4 <HFNC_PARAMETERS+0x250>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f015 fdee 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(APRV_Handler);
 8009cf8:	4b6f      	ldr	r3, [pc, #444]	; (8009eb8 <HFNC_PARAMETERS+0x254>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f015 fde9 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(APRV_one_Handler);
 8009d02:	4b6e      	ldr	r3, [pc, #440]	; (8009ebc <HFNC_PARAMETERS+0x258>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f015 fde4 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8009d0c:	4b6c      	ldr	r3, [pc, #432]	; (8009ec0 <HFNC_PARAMETERS+0x25c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f015 fddf 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8009d16:	4b6b      	ldr	r3, [pc, #428]	; (8009ec4 <HFNC_PARAMETERS+0x260>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f015 fdda 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8009d20:	4b69      	ldr	r3, [pc, #420]	; (8009ec8 <HFNC_PARAMETERS+0x264>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f015 fdd5 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8009d2a:	4b68      	ldr	r3, [pc, #416]	; (8009ecc <HFNC_PARAMETERS+0x268>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f015 fdd0 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(One_Time_Handler);
 8009d34:	4b66      	ldr	r3, [pc, #408]	; (8009ed0 <HFNC_PARAMETERS+0x26c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f015 fdcb 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Oxygen_Handler);
 8009d3e:	4b65      	ldr	r3, [pc, #404]	; (8009ed4 <HFNC_PARAMETERS+0x270>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f015 fdc6 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(alert_Handler);
 8009d48:	4b63      	ldr	r3, [pc, #396]	; (8009ed8 <HFNC_PARAMETERS+0x274>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f015 fdc1 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Nebuliser_Handler);
 8009d52:	4b62      	ldr	r3, [pc, #392]	; (8009edc <HFNC_PARAMETERS+0x278>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f015 fdbc 	bl	801f8d4 <vTaskSuspend>


	 Blower_Signal(0);
 8009d5c:	4b60      	ldr	r3, [pc, #384]	; (8009ee0 <HFNC_PARAMETERS+0x27c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	609a      	str	r2, [r3, #8]
	 ExpValve_OPEN();
 8009d62:	4b60      	ldr	r3, [pc, #384]	; (8009ee4 <HFNC_PARAMETERS+0x280>)
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	4a5f      	ldr	r2, [pc, #380]	; (8009ee4 <HFNC_PARAMETERS+0x280>)
 8009d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d6c:	6153      	str	r3, [r2, #20]
	 _CurrentMode=HFNC;
 8009d6e:	4b5e      	ldr	r3, [pc, #376]	; (8009ee8 <HFNC_PARAMETERS+0x284>)
 8009d70:	220c      	movs	r2, #12
 8009d72:	701a      	strb	r2, [r3, #0]
	 _CurrentBackupMode = IdleState;
 8009d74:	4b5d      	ldr	r3, [pc, #372]	; (8009eec <HFNC_PARAMETERS+0x288>)
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]

	 HFNC_Dac_Value=0;
 8009d7a:	4b5d      	ldr	r3, [pc, #372]	; (8009ef0 <HFNC_PARAMETERS+0x28c>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	801a      	strh	r2, [r3, #0]

  	 uwTick=0;
 8009d80:	4b5c      	ldr	r3, [pc, #368]	; (8009ef4 <HFNC_PARAMETERS+0x290>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]

  	 HFNC_Dac1=1800;
 8009d86:	4b5c      	ldr	r3, [pc, #368]	; (8009ef8 <HFNC_PARAMETERS+0x294>)
 8009d88:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8009d8c:	801a      	strh	r2, [r3, #0]
  	 HFNC_Dac2=4000;
 8009d8e:	4b5b      	ldr	r3, [pc, #364]	; (8009efc <HFNC_PARAMETERS+0x298>)
 8009d90:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8009d94:	801a      	strh	r2, [r3, #0]
	 kp=10;
 8009d96:	4b5a      	ldr	r3, [pc, #360]	; (8009f00 <HFNC_PARAMETERS+0x29c>)
 8009d98:	220a      	movs	r2, #10
 8009d9a:	701a      	strb	r2, [r3, #0]
	 ki=9;
 8009d9c:	4b59      	ldr	r3, [pc, #356]	; (8009f04 <HFNC_PARAMETERS+0x2a0>)
 8009d9e:	2209      	movs	r2, #9
 8009da0:	701a      	strb	r2, [r3, #0]
	 kd=1;
 8009da2:	4959      	ldr	r1, [pc, #356]	; (8009f08 <HFNC_PARAMETERS+0x2a4>)
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <HFNC_PARAMETERS+0x2a8>)
 8009daa:	e9c1 2300 	strd	r2, r3, [r1]
	 Time=1000;
 8009dae:	4b58      	ldr	r3, [pc, #352]	; (8009f10 <HFNC_PARAMETERS+0x2ac>)
 8009db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009db4:	601a      	str	r2, [r3, #0]
	 Speed=1000;
 8009db6:	4b57      	ldr	r3, [pc, #348]	; (8009f14 <HFNC_PARAMETERS+0x2b0>)
 8009db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dbc:	601a      	str	r2, [r3, #0]

	 TempSetpoint = H1._Flow_Rate;
 8009dbe:	4b30      	ldr	r3, [pc, #192]	; (8009e80 <HFNC_PARAMETERS+0x21c>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7f6 fb46 	bl	8000454 <__aeabi_ui2d>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4952      	ldr	r1, [pc, #328]	; (8009f18 <HFNC_PARAMETERS+0x2b4>)
 8009dce:	e9c1 2300 	strd	r2, r3, [r1]
	 PID(&TPID, &Temp_Flow, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8009dd2:	4b4b      	ldr	r3, [pc, #300]	; (8009f00 <HFNC_PARAMETERS+0x29c>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f6 fb3c 	bl	8000454 <__aeabi_ui2d>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	4b48      	ldr	r3, [pc, #288]	; (8009f04 <HFNC_PARAMETERS+0x2a0>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7f6 fb35 	bl	8000454 <__aeabi_ui2d>
 8009dea:	4b47      	ldr	r3, [pc, #284]	; (8009f08 <HFNC_PARAMETERS+0x2a4>)
 8009dec:	ed93 7b00 	vldr	d7, [r3]
 8009df0:	2300      	movs	r3, #0
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	2301      	movs	r3, #1
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	eeb0 2a47 	vmov.f32	s4, s14
 8009dfc:	eef0 2a67 	vmov.f32	s5, s15
 8009e00:	ec41 0b11 	vmov	d1, r0, r1
 8009e04:	ec45 4b10 	vmov	d0, r4, r5
 8009e08:	4b43      	ldr	r3, [pc, #268]	; (8009f18 <HFNC_PARAMETERS+0x2b4>)
 8009e0a:	4a44      	ldr	r2, [pc, #272]	; (8009f1c <HFNC_PARAMETERS+0x2b8>)
 8009e0c:	4944      	ldr	r1, [pc, #272]	; (8009f20 <HFNC_PARAMETERS+0x2bc>)
 8009e0e:	4845      	ldr	r0, [pc, #276]	; (8009f24 <HFNC_PARAMETERS+0x2c0>)
 8009e10:	f00a fcc6 	bl	80147a0 <PID>
	 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8009e14:	2101      	movs	r1, #1
 8009e16:	4843      	ldr	r0, [pc, #268]	; (8009f24 <HFNC_PARAMETERS+0x2c0>)
 8009e18:	f00a fdf8 	bl	8014a0c <PID_SetMode>

	 PID_SetSampleTime(&TPID, Time);
 8009e1c:	4b3c      	ldr	r3, [pc, #240]	; (8009f10 <HFNC_PARAMETERS+0x2ac>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4619      	mov	r1, r3
 8009e22:	4840      	ldr	r0, [pc, #256]	; (8009f24 <HFNC_PARAMETERS+0x2c0>)
 8009e24:	f00a ff6e 	bl	8014d04 <PID_SetSampleTime>
	 PID_SetOutputLimits(&TPID, HFNC_Dac1, HFNC_Dac2);
 8009e28:	4b33      	ldr	r3, [pc, #204]	; (8009ef8 <HFNC_PARAMETERS+0x294>)
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7f6 fb11 	bl	8000454 <__aeabi_ui2d>
 8009e32:	4604      	mov	r4, r0
 8009e34:	460d      	mov	r5, r1
 8009e36:	4b31      	ldr	r3, [pc, #196]	; (8009efc <HFNC_PARAMETERS+0x298>)
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7f6 fb0a 	bl	8000454 <__aeabi_ui2d>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	ec43 2b11 	vmov	d1, r2, r3
 8009e48:	ec45 4b10 	vmov	d0, r4, r5
 8009e4c:	4835      	ldr	r0, [pc, #212]	; (8009f24 <HFNC_PARAMETERS+0x2c0>)
 8009e4e:	f00a fdfb 	bl	8014a48 <PID_SetOutputLimits>

	 Parkar_valve_Signal(0);
 8009e52:	4b23      	ldr	r3, [pc, #140]	; (8009ee0 <HFNC_PARAMETERS+0x27c>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	615a      	str	r2, [r3, #20]
	 O2.O2_process = 0;
 8009e58:	4b33      	ldr	r3, [pc, #204]	; (8009f28 <HFNC_PARAMETERS+0x2c4>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	60da      	str	r2, [r3, #12]
	 O2.Servo=45;
 8009e5e:	4b32      	ldr	r3, [pc, #200]	; (8009f28 <HFNC_PARAMETERS+0x2c4>)
 8009e60:	222d      	movs	r2, #45	; 0x2d
 8009e62:	605a      	str	r2, [r3, #4]
	 Servo_Angle(O2.Servo);
 8009e64:	4b30      	ldr	r3, [pc, #192]	; (8009f28 <HFNC_PARAMETERS+0x2c4>)
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <HFNC_PARAMETERS+0x2c8>)
 8009e6a:	635a      	str	r2, [r3, #52]	; 0x34

	 vTaskResume(HFNC_Handler);
 8009e6c:	4b30      	ldr	r3, [pc, #192]	; (8009f30 <HFNC_PARAMETERS+0x2cc>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f015 fdf3 	bl	801fa5c <vTaskResume>


}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20016eb8 	.word	0x20016eb8
 8009e84:	20016a84 	.word	0x20016a84
 8009e88:	20016a28 	.word	0x20016a28
 8009e8c:	20016e60 	.word	0x20016e60
 8009e90:	20016e8c 	.word	0x20016e8c
 8009e94:	20016d78 	.word	0x20016d78
 8009e98:	2001695c 	.word	0x2001695c
 8009e9c:	20016c44 	.word	0x20016c44
 8009ea0:	20016ad0 	.word	0x20016ad0
 8009ea4:	20016bf0 	.word	0x20016bf0
 8009ea8:	20016a74 	.word	0x20016a74
 8009eac:	20016bb8 	.word	0x20016bb8
 8009eb0:	20016a24 	.word	0x20016a24
 8009eb4:	20016878 	.word	0x20016878
 8009eb8:	20016c00 	.word	0x20016c00
 8009ebc:	20016bc8 	.word	0x20016bc8
 8009ec0:	20016bcc 	.word	0x20016bcc
 8009ec4:	20016d3c 	.word	0x20016d3c
 8009ec8:	20016d7c 	.word	0x20016d7c
 8009ecc:	20016a7c 	.word	0x20016a7c
 8009ed0:	20016d40 	.word	0x20016d40
 8009ed4:	20016958 	.word	0x20016958
 8009ed8:	20016ad4 	.word	0x20016ad4
 8009edc:	20016a94 	.word	0x20016a94
 8009ee0:	40007400 	.word	0x40007400
 8009ee4:	40020400 	.word	0x40020400
 8009ee8:	20016c04 	.word	0x20016c04
 8009eec:	2000012c 	.word	0x2000012c
 8009ef0:	20000310 	.word	0x20000310
 8009ef4:	20017094 	.word	0x20017094
 8009ef8:	20000132 	.word	0x20000132
 8009efc:	20000134 	.word	0x20000134
 8009f00:	20000136 	.word	0x20000136
 8009f04:	20000137 	.word	0x20000137
 8009f08:	20000138 	.word	0x20000138
 8009f0c:	3ff00000 	.word	0x3ff00000
 8009f10:	20000140 	.word	0x20000140
 8009f14:	20000144 	.word	0x20000144
 8009f18:	20016e80 	.word	0x20016e80
 8009f1c:	20016a18 	.word	0x20016a18
 8009f20:	20016b30 	.word	0x20016b30
 8009f24:	200169a0 	.word	0x200169a0
 8009f28:	20000048 	.word	0x20000048
 8009f2c:	40001800 	.word	0x40001800
 8009f30:	20016a20 	.word	0x20016a20

08009f34 <Suction_Task>:


void Suction_Task(void *argument)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Blower_Signal(1300);
 8009f3c:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <Suction_Task+0x28>)
 8009f3e:	f240 5214 	movw	r2, #1300	; 0x514
 8009f42:	609a      	str	r2, [r3, #8]
		vTaskDelay(1000);
 8009f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f48:	f015 fc90 	bl	801f86c <vTaskDelay>
		ExpValve_CLOSE();
 8009f4c:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <Suction_Task+0x2c>)
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	4a03      	ldr	r2, [pc, #12]	; (8009f60 <Suction_Task+0x2c>)
 8009f52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f56:	6153      	str	r3, [r2, #20]
		Blower_Signal(1300);
 8009f58:	e7f0      	b.n	8009f3c <Suction_Task+0x8>
 8009f5a:	bf00      	nop
 8009f5c:	40007400 	.word	0x40007400
 8009f60:	40020400 	.word	0x40020400

08009f64 <SUCTION_PARAMETERS>:




void SUCTION_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	 ExpValve_OPEN();
 8009f6c:	4b49      	ldr	r3, [pc, #292]	; (800a094 <SUCTION_PARAMETERS+0x130>)
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	4a48      	ldr	r2, [pc, #288]	; (800a094 <SUCTION_PARAMETERS+0x130>)
 8009f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f76:	6153      	str	r3, [r2, #20]
     vTaskSuspend(pc_mode_Handler);
 8009f78:	4b47      	ldr	r3, [pc, #284]	; (800a098 <SUCTION_PARAMETERS+0x134>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f015 fca9 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Pc_cmv_Pid_Handler);
 8009f82:	4b46      	ldr	r3, [pc, #280]	; (800a09c <SUCTION_PARAMETERS+0x138>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f015 fca4 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Pc_simv_Mode_Handler);
 8009f8c:	4b44      	ldr	r3, [pc, #272]	; (800a0a0 <SUCTION_PARAMETERS+0x13c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f015 fc9f 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8009f96:	4b43      	ldr	r3, [pc, #268]	; (800a0a4 <SUCTION_PARAMETERS+0x140>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f015 fc9a 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Vc_mode_Handler);
 8009fa0:	4b41      	ldr	r3, [pc, #260]	; (800a0a8 <SUCTION_PARAMETERS+0x144>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f015 fc95 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Vc_cmv_Pid_Handler);
 8009faa:	4b40      	ldr	r3, [pc, #256]	; (800a0ac <SUCTION_PARAMETERS+0x148>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f015 fc90 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Vc_simv_mode_Handler);
 8009fb4:	4b3e      	ldr	r3, [pc, #248]	; (800a0b0 <SUCTION_PARAMETERS+0x14c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f015 fc8b 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Vc_simv_Pid_Handler);
 8009fbe:	4b3d      	ldr	r3, [pc, #244]	; (800a0b4 <SUCTION_PARAMETERS+0x150>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f015 fc86 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Psv_Handler);
 8009fc8:	4b3b      	ldr	r3, [pc, #236]	; (800a0b8 <SUCTION_PARAMETERS+0x154>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f015 fc81 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(Psv_Pid_Handler);
 8009fd2:	4b3a      	ldr	r3, [pc, #232]	; (800a0bc <SUCTION_PARAMETERS+0x158>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f015 fc7c 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Cpap_Handler);
 8009fdc:	4b38      	ldr	r3, [pc, #224]	; (800a0c0 <SUCTION_PARAMETERS+0x15c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f015 fc77 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(BiPap_Handler);
 8009fe6:	4b37      	ldr	r3, [pc, #220]	; (800a0c4 <SUCTION_PARAMETERS+0x160>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f015 fc72 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(BiPap_Pid_Handler);
 8009ff0:	4b35      	ldr	r3, [pc, #212]	; (800a0c8 <SUCTION_PARAMETERS+0x164>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f015 fc6d 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(APRV_Handler);
 8009ffa:	4b34      	ldr	r3, [pc, #208]	; (800a0cc <SUCTION_PARAMETERS+0x168>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f015 fc68 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(APRV_one_Handler);
 800a004:	4b32      	ldr	r3, [pc, #200]	; (800a0d0 <SUCTION_PARAMETERS+0x16c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f015 fc63 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800a00e:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <SUCTION_PARAMETERS+0x170>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f015 fc5e 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800a018:	4b2f      	ldr	r3, [pc, #188]	; (800a0d8 <SUCTION_PARAMETERS+0x174>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f015 fc59 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800a022:	4b2e      	ldr	r3, [pc, #184]	; (800a0dc <SUCTION_PARAMETERS+0x178>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f015 fc54 	bl	801f8d4 <vTaskSuspend>
	 vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800a02c:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <SUCTION_PARAMETERS+0x17c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4618      	mov	r0, r3
 800a032:	f015 fc4f 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(One_Time_Handler);
 800a036:	4b2b      	ldr	r3, [pc, #172]	; (800a0e4 <SUCTION_PARAMETERS+0x180>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f015 fc4a 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Oxygen_Handler);
 800a040:	4b29      	ldr	r3, [pc, #164]	; (800a0e8 <SUCTION_PARAMETERS+0x184>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f015 fc45 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(alert_Handler);
 800a04a:	4b28      	ldr	r3, [pc, #160]	; (800a0ec <SUCTION_PARAMETERS+0x188>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
 800a050:	f015 fc40 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(Nebuliser_Handler);
 800a054:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <SUCTION_PARAMETERS+0x18c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f015 fc3b 	bl	801f8d4 <vTaskSuspend>

	 vTaskSuspend(HFNC_Handler);
 800a05e:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <SUCTION_PARAMETERS+0x190>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f015 fc36 	bl	801f8d4 <vTaskSuspend>

	 Parkar_valve_Signal(0);
 800a068:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <SUCTION_PARAMETERS+0x194>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	615a      	str	r2, [r3, #20]
	 O2.O2_process = 0;
 800a06e:	4b23      	ldr	r3, [pc, #140]	; (800a0fc <SUCTION_PARAMETERS+0x198>)
 800a070:	2200      	movs	r2, #0
 800a072:	60da      	str	r2, [r3, #12]
	 O2.Servo=45;
 800a074:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <SUCTION_PARAMETERS+0x198>)
 800a076:	222d      	movs	r2, #45	; 0x2d
 800a078:	605a      	str	r2, [r3, #4]
	 Servo_Angle(O2.Servo);
 800a07a:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <SUCTION_PARAMETERS+0x198>)
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	4b20      	ldr	r3, [pc, #128]	; (800a100 <SUCTION_PARAMETERS+0x19c>)
 800a080:	635a      	str	r2, [r3, #52]	; 0x34

	 vTaskResume(Suction_Handler);
 800a082:	4b20      	ldr	r3, [pc, #128]	; (800a104 <SUCTION_PARAMETERS+0x1a0>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f015 fce8 	bl	801fa5c <vTaskResume>

}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40020400 	.word	0x40020400
 800a098:	20016a84 	.word	0x20016a84
 800a09c:	20016a28 	.word	0x20016a28
 800a0a0:	20016e60 	.word	0x20016e60
 800a0a4:	20016e8c 	.word	0x20016e8c
 800a0a8:	20016d78 	.word	0x20016d78
 800a0ac:	2001695c 	.word	0x2001695c
 800a0b0:	20016c44 	.word	0x20016c44
 800a0b4:	20016ad0 	.word	0x20016ad0
 800a0b8:	20016bf0 	.word	0x20016bf0
 800a0bc:	20016a74 	.word	0x20016a74
 800a0c0:	20016bb8 	.word	0x20016bb8
 800a0c4:	20016a24 	.word	0x20016a24
 800a0c8:	20016878 	.word	0x20016878
 800a0cc:	20016c00 	.word	0x20016c00
 800a0d0:	20016bc8 	.word	0x20016bc8
 800a0d4:	20016bcc 	.word	0x20016bcc
 800a0d8:	20016d3c 	.word	0x20016d3c
 800a0dc:	20016d7c 	.word	0x20016d7c
 800a0e0:	20016a7c 	.word	0x20016a7c
 800a0e4:	20016d40 	.word	0x20016d40
 800a0e8:	20016958 	.word	0x20016958
 800a0ec:	20016ad4 	.word	0x20016ad4
 800a0f0:	20016a94 	.word	0x20016a94
 800a0f4:	20016a20 	.word	0x20016a20
 800a0f8:	40007400 	.word	0x40007400
 800a0fc:	20000048 	.word	0x20000048
 800a100:	40001800 	.word	0x40001800
 800a104:	20016e5c 	.word	0x20016e5c

0800a108 <NEBULISER_COMMAND_HANDLER>:




void NEBULISER_COMMAND_HANDLER(NEBULISER_RANGE_PACKET * RX_ALERT_RANGE_PACKET)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

	 N._RANGE_NEBULISER_SYNC_ON_Val= (RX_ALERT_RANGE_PACKET->NEBULISER_SYNC)>>7;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	78db      	ldrb	r3, [r3, #3]
 800a114:	09db      	lsrs	r3, r3, #7
 800a116:	b2da      	uxtb	r2, r3
 800a118:	4b3a      	ldr	r3, [pc, #232]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a11a:	705a      	strb	r2, [r3, #1]
	 N._RANGE_NEBULISER_ON_Val= (RX_ALERT_RANGE_PACKET->NEBULISER_ON)>>7;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	791b      	ldrb	r3, [r3, #4]
 800a120:	09db      	lsrs	r3, r3, #7
 800a122:	b2da      	uxtb	r2, r3
 800a124:	4b37      	ldr	r3, [pc, #220]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a126:	701a      	strb	r2, [r3, #0]
	 N._TAB_CHARGER= (RX_ALERT_RANGE_PACKET->TAB_CHARGER)>>7;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	795b      	ldrb	r3, [r3, #5]
 800a12c:	09db      	lsrs	r3, r3, #7
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	4b34      	ldr	r3, [pc, #208]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a132:	709a      	strb	r2, [r3, #2]

	 N._FIND_MY_DEVICE= (RX_ALERT_RANGE_PACKET->FIND_MY_DEVICE)>>7;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	799b      	ldrb	r3, [r3, #6]
 800a138:	09db      	lsrs	r3, r3, #7
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	4b31      	ldr	r3, [pc, #196]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a13e:	70da      	strb	r2, [r3, #3]
	 N._SHUT_DOWN= (RX_ALERT_RANGE_PACKET->SHUT_DOWN)>>7;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	79db      	ldrb	r3, [r3, #7]
 800a144:	09db      	lsrs	r3, r3, #7
 800a146:	b2da      	uxtb	r2, r3
 800a148:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a14a:	711a      	strb	r2, [r3, #4]
	 N._ALERT_SNOOZE= (RX_ALERT_RANGE_PACKET->ALERT_SNOOZE)>>7;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	7a1b      	ldrb	r3, [r3, #8]
 800a150:	09db      	lsrs	r3, r3, #7
 800a152:	b2da      	uxtb	r2, r3
 800a154:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a156:	715a      	strb	r2, [r3, #5]
	 //N._INSPIRATORY_HOLD= (RX_ALERT_RANGE_PACKET->INSPIRATORY_HOLD)>>7;
	 //N._EXPIRATORY_HOLD = (RX_ALERT_RANGE_PACKET->EXPIRATORY_HOLD)>>7;
	 N._READ_SENSOR_OFFSET = (RX_ALERT_RANGE_PACKET->READ_SENSOR_OFFSET)>>7;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	7adb      	ldrb	r3, [r3, #11]
 800a15c:	09db      	lsrs	r3, r3, #7
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	4b28      	ldr	r3, [pc, #160]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a162:	729a      	strb	r2, [r3, #10]


	 if(N._SHUT_DOWN==1)
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a166:	791b      	ldrb	r3, [r3, #4]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d104      	bne.n	800a176 <NEBULISER_COMMAND_HANDLER+0x6e>
	 {
		 vTaskResume(Shutdown_Handler);
 800a16c:	4b26      	ldr	r3, [pc, #152]	; (800a208 <NEBULISER_COMMAND_HANDLER+0x100>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f015 fc73 	bl	801fa5c <vTaskResume>
	 }
	 if(N._READ_SENSOR_OFFSET == 1)
 800a176:	4b23      	ldr	r3, [pc, #140]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a178:	7a9b      	ldrb	r3, [r3, #10]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <NEBULISER_COMMAND_HANDLER+0x7a>
	 {
	 	Sensor_Voltage_Transmit();
 800a17e:	f000 f9a9 	bl	800a4d4 <Sensor_Voltage_Transmit>
	 }

	 if(N._TAB_CHARGER==1)
 800a182:	4b20      	ldr	r3, [pc, #128]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a184:	789b      	ldrb	r3, [r3, #2]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d106      	bne.n	800a198 <NEBULISER_COMMAND_HANDLER+0x90>
	 {
	    Tab_Charger_ON();
 800a18a:	4b20      	ldr	r3, [pc, #128]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a194:	6153      	str	r3, [r2, #20]
 800a196:	e009      	b.n	800a1ac <NEBULISER_COMMAND_HANDLER+0xa4>
	 }
	 else if(N._TAB_CHARGER==0)
 800a198:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a19a:	789b      	ldrb	r3, [r3, #2]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d105      	bne.n	800a1ac <NEBULISER_COMMAND_HANDLER+0xa4>
	 {
	    Tab_Charger_OFF();
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	4a19      	ldr	r2, [pc, #100]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1aa:	6153      	str	r3, [r2, #20]
	 }
	 if(N._RANGE_NEBULISER_ON_Val==1)
 800a1ac:	4b15      	ldr	r3, [pc, #84]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d105      	bne.n	800a1c0 <NEBULISER_COMMAND_HANDLER+0xb8>
	 {
		 vTaskResume(Nebuliser_Handler);
 800a1b4:	4b16      	ldr	r3, [pc, #88]	; (800a210 <NEBULISER_COMMAND_HANDLER+0x108>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f015 fc4f 	bl	801fa5c <vTaskResume>
 800a1be:	e008      	b.n	800a1d2 <NEBULISER_COMMAND_HANDLER+0xca>
	 }
	 else if(N._RANGE_NEBULISER_ON_Val==0)
 800a1c0:	4b10      	ldr	r3, [pc, #64]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <NEBULISER_COMMAND_HANDLER+0xca>
	 {
		 vTaskResume(Nebuliser_Handler);
 800a1c8:	4b11      	ldr	r3, [pc, #68]	; (800a210 <NEBULISER_COMMAND_HANDLER+0x108>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f015 fc45 	bl	801fa5c <vTaskResume>

	 }

	 if(N._FIND_MY_DEVICE==1)
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a1d4:	78db      	ldrb	r3, [r3, #3]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d106      	bne.n	800a1e8 <NEBULISER_COMMAND_HANDLER+0xe0>
	 {
		 Buzzer1_ON();
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e4:	6153      	str	r3, [r2, #20]





}
 800a1e6:	e009      	b.n	800a1fc <NEBULISER_COMMAND_HANDLER+0xf4>
	 else if(N._FIND_MY_DEVICE==0)
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <NEBULISER_COMMAND_HANDLER+0xfc>)
 800a1ea:	78db      	ldrb	r3, [r3, #3]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d105      	bne.n	800a1fc <NEBULISER_COMMAND_HANDLER+0xf4>
		 Buzzer1_OFF();
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	4a05      	ldr	r2, [pc, #20]	; (800a20c <NEBULISER_COMMAND_HANDLER+0x104>)
 800a1f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1fa:	6153      	str	r3, [r2, #20]
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	2001687c 	.word	0x2001687c
 800a208:	20016d24 	.word	0x20016d24
 800a20c:	40020c00 	.word	0x40020c00
 800a210:	20016a94 	.word	0x20016a94

0800a214 <Shutdown_Task>:



void Shutdown_Task(void *argument)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Call_Shutdown_Func();
 800a21c:	f000 f802 	bl	800a224 <Call_Shutdown_Func>
 800a220:	e7fc      	b.n	800a21c <Shutdown_Task+0x8>
	...

0800a224 <Call_Shutdown_Func>:
}



void Call_Shutdown_Func()
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
	    vTaskSuspend(pc_mode_Handler);
 800a228:	4b55      	ldr	r3, [pc, #340]	; (800a380 <Call_Shutdown_Func+0x15c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f015 fb51 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Pc_cmv_Pid_Handler);
 800a232:	4b54      	ldr	r3, [pc, #336]	; (800a384 <Call_Shutdown_Func+0x160>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f015 fb4c 	bl	801f8d4 <vTaskSuspend>
    	vTaskSuspend(Vc_mode_Handler);
 800a23c:	4b52      	ldr	r3, [pc, #328]	; (800a388 <Call_Shutdown_Func+0x164>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4618      	mov	r0, r3
 800a242:	f015 fb47 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Vc_cmv_Pid_Handler);
 800a246:	4b51      	ldr	r3, [pc, #324]	; (800a38c <Call_Shutdown_Func+0x168>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f015 fb42 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Pc_simv_Mode_Handler);
 800a250:	4b4f      	ldr	r3, [pc, #316]	; (800a390 <Call_Shutdown_Func+0x16c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f015 fb3d 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 800a25a:	4b4e      	ldr	r3, [pc, #312]	; (800a394 <Call_Shutdown_Func+0x170>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f015 fb38 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Vc_simv_mode_Handler);
 800a264:	4b4c      	ldr	r3, [pc, #304]	; (800a398 <Call_Shutdown_Func+0x174>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4618      	mov	r0, r3
 800a26a:	f015 fb33 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Vc_simv_Pid_Handler);
 800a26e:	4b4b      	ldr	r3, [pc, #300]	; (800a39c <Call_Shutdown_Func+0x178>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f015 fb2e 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Psv_Handler);
 800a278:	4b49      	ldr	r3, [pc, #292]	; (800a3a0 <Call_Shutdown_Func+0x17c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f015 fb29 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Psv_Pid_Handler);
 800a282:	4b48      	ldr	r3, [pc, #288]	; (800a3a4 <Call_Shutdown_Func+0x180>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f015 fb24 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Cpap_Handler);
 800a28c:	4b46      	ldr	r3, [pc, #280]	; (800a3a8 <Call_Shutdown_Func+0x184>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f015 fb1f 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(BiPap_Handler);
 800a296:	4b45      	ldr	r3, [pc, #276]	; (800a3ac <Call_Shutdown_Func+0x188>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f015 fb1a 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(BiPap_Pid_Handler);
 800a2a0:	4b43      	ldr	r3, [pc, #268]	; (800a3b0 <Call_Shutdown_Func+0x18c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f015 fb15 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(APRV_one_Handler);
 800a2aa:	4b42      	ldr	r3, [pc, #264]	; (800a3b4 <Call_Shutdown_Func+0x190>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f015 fb10 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(APRV_Handler);
 800a2b4:	4b40      	ldr	r3, [pc, #256]	; (800a3b8 <Call_Shutdown_Func+0x194>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f015 fb0b 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800a2be:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <Call_Shutdown_Func+0x198>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f015 fb06 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800a2c8:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <Call_Shutdown_Func+0x19c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f015 fb01 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800a2d2:	4b3c      	ldr	r3, [pc, #240]	; (800a3c4 <Call_Shutdown_Func+0x1a0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f015 fafc 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800a2dc:	4b3a      	ldr	r3, [pc, #232]	; (800a3c8 <Call_Shutdown_Func+0x1a4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f015 faf7 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(alert_Handler);
 800a2e6:	4b39      	ldr	r3, [pc, #228]	; (800a3cc <Call_Shutdown_Func+0x1a8>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f015 faf2 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(HFNC_Handler);
 800a2f0:	4b37      	ldr	r3, [pc, #220]	; (800a3d0 <Call_Shutdown_Func+0x1ac>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f015 faed 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Suction_Handler);
 800a2fa:	4b36      	ldr	r3, [pc, #216]	; (800a3d4 <Call_Shutdown_Func+0x1b0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f015 fae8 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Oxygen_Handler);
 800a304:	4b34      	ldr	r3, [pc, #208]	; (800a3d8 <Call_Shutdown_Func+0x1b4>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4618      	mov	r0, r3
 800a30a:	f015 fae3 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Nebuliser_Handler);
 800a30e:	4b33      	ldr	r3, [pc, #204]	; (800a3dc <Call_Shutdown_Func+0x1b8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f015 fade 	bl	801f8d4 <vTaskSuspend>
  	    ExpValve_OPEN();
 800a318:	4b31      	ldr	r3, [pc, #196]	; (800a3e0 <Call_Shutdown_Func+0x1bc>)
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	4a30      	ldr	r2, [pc, #192]	; (800a3e0 <Call_Shutdown_Func+0x1bc>)
 800a31e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a322:	6153      	str	r3, [r2, #20]
  	    Blower_Signal( 0);
 800a324:	4b2f      	ldr	r3, [pc, #188]	; (800a3e4 <Call_Shutdown_Func+0x1c0>)
 800a326:	2200      	movs	r2, #0
 800a328:	609a      	str	r2, [r3, #8]
  	    Parkar_valve_Signal(0);
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <Call_Shutdown_Func+0x1c0>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	615a      	str	r2, [r3, #20]
  	    Nebuliser_OFF();
 800a330:	4b2b      	ldr	r3, [pc, #172]	; (800a3e0 <Call_Shutdown_Func+0x1bc>)
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	4a2a      	ldr	r2, [pc, #168]	; (800a3e0 <Call_Shutdown_Func+0x1bc>)
 800a336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a33a:	6153      	str	r3, [r2, #20]
  	    vol.Volume=0;
 800a33c:	4b2a      	ldr	r3, [pc, #168]	; (800a3e8 <Call_Shutdown_Func+0x1c4>)
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	605a      	str	r2, [r3, #4]
  	    A.Red_Led_Alert=0;
 800a344:	4b29      	ldr	r3, [pc, #164]	; (800a3ec <Call_Shutdown_Func+0x1c8>)
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  	    Blue_Led_ON();
 800a34c:	4b28      	ldr	r3, [pc, #160]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	4a27      	ldr	r2, [pc, #156]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a352:	f043 0308 	orr.w	r3, r3, #8
 800a356:	6153      	str	r3, [r2, #20]
  	    Red_Led_OFF();
 800a358:	4b25      	ldr	r3, [pc, #148]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	4a24      	ldr	r2, [pc, #144]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a35e:	f023 0310 	bic.w	r3, r3, #16
 800a362:	6153      	str	r3, [r2, #20]
  	    Green_Led_OFF();
 800a364:	4b22      	ldr	r3, [pc, #136]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <Call_Shutdown_Func+0x1cc>)
 800a36a:	f023 0320 	bic.w	r3, r3, #32
 800a36e:	6153      	str	r3, [r2, #20]

  	  vTaskSuspend(Shutdown_Handler);
 800a370:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <Call_Shutdown_Func+0x1d0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4618      	mov	r0, r3
 800a376:	f015 faad 	bl	801f8d4 <vTaskSuspend>
}
 800a37a:	bf00      	nop
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20016a84 	.word	0x20016a84
 800a384:	20016a28 	.word	0x20016a28
 800a388:	20016d78 	.word	0x20016d78
 800a38c:	2001695c 	.word	0x2001695c
 800a390:	20016e60 	.word	0x20016e60
 800a394:	20016e8c 	.word	0x20016e8c
 800a398:	20016c44 	.word	0x20016c44
 800a39c:	20016ad0 	.word	0x20016ad0
 800a3a0:	20016bf0 	.word	0x20016bf0
 800a3a4:	20016a74 	.word	0x20016a74
 800a3a8:	20016bb8 	.word	0x20016bb8
 800a3ac:	20016a24 	.word	0x20016a24
 800a3b0:	20016878 	.word	0x20016878
 800a3b4:	20016bc8 	.word	0x20016bc8
 800a3b8:	20016c00 	.word	0x20016c00
 800a3bc:	20016bcc 	.word	0x20016bcc
 800a3c0:	20016d3c 	.word	0x20016d3c
 800a3c4:	20016d7c 	.word	0x20016d7c
 800a3c8:	20016a7c 	.word	0x20016a7c
 800a3cc:	20016ad4 	.word	0x20016ad4
 800a3d0:	20016a20 	.word	0x20016a20
 800a3d4:	20016e5c 	.word	0x20016e5c
 800a3d8:	20016958 	.word	0x20016958
 800a3dc:	20016a94 	.word	0x20016a94
 800a3e0:	40020400 	.word	0x40020400
 800a3e4:	40007400 	.word	0x40007400
 800a3e8:	20016d44 	.word	0x20016d44
 800a3ec:	20016a2c 	.word	0x20016a2c
 800a3f0:	40020c00 	.word	0x40020c00
 800a3f4:	20016d24 	.word	0x20016d24

0800a3f8 <Nebuliser_Task>:

void Nebuliser_Task (void *argument)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(S1._Mode_Val!=0 && S1._Pause==0)
 800a400:	4b06      	ldr	r3, [pc, #24]	; (800a41c <Nebuliser_Task+0x24>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d005      	beq.n	800a414 <Nebuliser_Task+0x1c>
 800a408:	4b04      	ldr	r3, [pc, #16]	; (800a41c <Nebuliser_Task+0x24>)
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <Nebuliser_Task+0x1c>
	    {
			Nebuliser_Func();
 800a410:	f000 f806 	bl	800a420 <Nebuliser_Func>
	    }

		vTaskDelay(100);
 800a414:	2064      	movs	r0, #100	; 0x64
 800a416:	f015 fa29 	bl	801f86c <vTaskDelay>
		if(S1._Mode_Val!=0 && S1._Pause==0)
 800a41a:	e7f1      	b.n	800a400 <Nebuliser_Task+0x8>
 800a41c:	20016ae0 	.word	0x20016ae0

0800a420 <Nebuliser_Func>:
}



void Nebuliser_Func()
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0

	        if(N._RANGE_NEBULISER_ON_Val==1)
 800a424:	4b18      	ldr	r3, [pc, #96]	; (800a488 <Nebuliser_Func+0x68>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d120      	bne.n	800a46e <Nebuliser_Func+0x4e>
	        {
	        	if(N._RANGE_NEBULISER_SYNC_ON_Val==0)
 800a42c:	4b16      	ldr	r3, [pc, #88]	; (800a488 <Nebuliser_Func+0x68>)
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d106      	bne.n	800a442 <Nebuliser_Func+0x22>
	        	{
	        		Nebuliser_ON();
 800a434:	4b15      	ldr	r3, [pc, #84]	; (800a48c <Nebuliser_Func+0x6c>)
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	4a14      	ldr	r2, [pc, #80]	; (800a48c <Nebuliser_Func+0x6c>)
 800a43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a43e:	6153      	str	r3, [r2, #20]
	        {
	        	Nebuliser_OFF();
	        	vTaskSuspend(Nebuliser_Handler);
	        }

}
 800a440:	e020      	b.n	800a484 <Nebuliser_Func+0x64>
	        		if(_CurrentComputationState==Compute_I_Wave)
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <Nebuliser_Func+0x70>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <Nebuliser_Func+0x38>
	        			Nebuliser_ON();
 800a44a:	4b10      	ldr	r3, [pc, #64]	; (800a48c <Nebuliser_Func+0x6c>)
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	4a0f      	ldr	r2, [pc, #60]	; (800a48c <Nebuliser_Func+0x6c>)
 800a450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a454:	6153      	str	r3, [r2, #20]
}
 800a456:	e015      	b.n	800a484 <Nebuliser_Func+0x64>
	                else if(_CurrentComputationState==Compute_E_Wave)
 800a458:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <Nebuliser_Func+0x70>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d111      	bne.n	800a484 <Nebuliser_Func+0x64>
	                	Nebuliser_OFF();
 800a460:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <Nebuliser_Func+0x6c>)
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	4a09      	ldr	r2, [pc, #36]	; (800a48c <Nebuliser_Func+0x6c>)
 800a466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a46a:	6153      	str	r3, [r2, #20]
}
 800a46c:	e00a      	b.n	800a484 <Nebuliser_Func+0x64>
	        	Nebuliser_OFF();
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <Nebuliser_Func+0x6c>)
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	4a06      	ldr	r2, [pc, #24]	; (800a48c <Nebuliser_Func+0x6c>)
 800a474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a478:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <Nebuliser_Func+0x74>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4618      	mov	r0, r3
 800a480:	f015 fa28 	bl	801f8d4 <vTaskSuspend>
}
 800a484:	bf00      	nop
 800a486:	bd80      	pop	{r7, pc}
 800a488:	2001687c 	.word	0x2001687c
 800a48c:	40020400 	.word	0x40020400
 800a490:	20016cc8 	.word	0x20016cc8
 800a494:	20016a94 	.word	0x20016a94

0800a498 <chksum8_cal_neb>:


uint8_t chksum8_cal_neb(const unsigned char *buff, size_t len)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	e00a      	b.n	800a4be <chksum8_cal_neb+0x26>
        sum += *(buff++);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	603b      	str	r3, [r7, #0]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f1      	bne.n	800a4a8 <chksum8_cal_neb+0x10>
    return (uint8_t)sum;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	b2db      	uxtb	r3, r3
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <Sensor_Voltage_Transmit>:

void Sensor_Voltage_Transmit()
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0

	Pressure_sensor._Pressure_Sensor_Offset_Val = Pressure_sensor._Runtime_Pressure_Val;
 800a4d8:	4b20      	ldr	r3, [pc, #128]	; (800a55c <Sensor_Voltage_Transmit+0x88>)
 800a4da:	885a      	ldrh	r2, [r3, #2]
 800a4dc:	4b1f      	ldr	r3, [pc, #124]	; (800a55c <Sensor_Voltage_Transmit+0x88>)
 800a4de:	801a      	strh	r2, [r3, #0]
	Flow_sensor.AW_Flow_Offset                  = Flow_sensor.AW_flow_milli_volt;
 800a4e0:	4b1f      	ldr	r3, [pc, #124]	; (800a560 <Sensor_Voltage_Transmit+0x8c>)
 800a4e2:	88da      	ldrh	r2, [r3, #6]
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <Sensor_Voltage_Transmit+0x8c>)
 800a4e6:	801a      	strh	r2, [r3, #0]

	Sensor_Voltage._header         				 = 0x5058 ;
 800a4e8:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a4f8:	705a      	strb	r2, [r3, #1]
	Sensor_Voltage._length        				 = sizeof(Sensor_Voltage)-4 ;
 800a4fa:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	709a      	strb	r2, [r3, #2]
	Sensor_Voltage._Dummy_1                      = 0;
 800a500:	4b18      	ldr	r3, [pc, #96]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a502:	2200      	movs	r2, #0
 800a504:	70da      	strb	r2, [r3, #3]
	Sensor_Voltage._Pressure_Sensor_Voltage_Val  = Pressure_sensor._Runtime_Pressure_Val;
 800a506:	4b15      	ldr	r3, [pc, #84]	; (800a55c <Sensor_Voltage_Transmit+0x88>)
 800a508:	885b      	ldrh	r3, [r3, #2]
 800a50a:	b21a      	sxth	r2, r3
 800a50c:	4b15      	ldr	r3, [pc, #84]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a50e:	809a      	strh	r2, [r3, #4]
	Sensor_Voltage._Flow_Sensor_Voltage_Val      = Flow_sensor.AW_flow_milli_volt;
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <Sensor_Voltage_Transmit+0x8c>)
 800a512:	88db      	ldrh	r3, [r3, #6]
 800a514:	b21a      	sxth	r2, r3
 800a516:	4b13      	ldr	r3, [pc, #76]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a518:	80da      	strh	r2, [r3, #6]
	Sensor_Voltage._O2_Flow_Sensor_Voltage_Val   = 0;
 800a51a:	4b12      	ldr	r3, [pc, #72]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	721a      	strb	r2, [r3, #8]
 800a520:	2200      	movs	r2, #0
 800a522:	725a      	strb	r2, [r3, #9]
	Sensor_Voltage._Dummy_2                      = 0;
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a526:	2200      	movs	r2, #0
 800a528:	729a      	strb	r2, [r3, #10]
	Sensor_Voltage._CRC8                         = chksum8_cal_neb(&Sensor_Voltage._Dummy_1,Sensor_Voltage._length);
 800a52a:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a52c:	789b      	ldrb	r3, [r3, #2]
 800a52e:	4619      	mov	r1, r3
 800a530:	480d      	ldr	r0, [pc, #52]	; (800a568 <Sensor_Voltage_Transmit+0x94>)
 800a532:	f7ff ffb1 	bl	800a498 <chksum8_cal_neb>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a53c:	72da      	strb	r2, [r3, #11]



#if UART==6
		  	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sensor_Voltage,sizeof(Sensor_Voltage));
 800a53e:	220c      	movs	r2, #12
 800a540:	4908      	ldr	r1, [pc, #32]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a542:	480a      	ldr	r0, [pc, #40]	; (800a56c <Sensor_Voltage_Transmit+0x98>)
 800a544:	f010 fa60 	bl	801aa08 <HAL_UART_Transmit_IT>
#endif
#if UART==5
		  	HAL_UART_Transmit_IT(&huart5,(uint8_t*)&Sensor_Voltage,sizeof(Sensor_Voltage));
#endif
		  	CDC_Transmit_FS((uint8_t*)&Sensor_Voltage,sizeof(Sensor_Voltage));
 800a548:	210c      	movs	r1, #12
 800a54a:	4806      	ldr	r0, [pc, #24]	; (800a564 <Sensor_Voltage_Transmit+0x90>)
 800a54c:	f017 f886 	bl	802165c <CDC_Transmit_FS>

		  	N._READ_SENSOR_OFFSET =0;
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <Sensor_Voltage_Transmit+0x9c>)
 800a552:	2200      	movs	r2, #0
 800a554:	729a      	strb	r2, [r3, #10]

}
 800a556:	bf00      	nop
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20016cfc 	.word	0x20016cfc
 800a560:	20016914 	.word	0x20016914
 800a564:	20016e44 	.word	0x20016e44
 800a568:	20016e47 	.word	0x20016e47
 800a56c:	20016dac 	.word	0x20016dac
 800a570:	2001687c 	.word	0x2001687c
 800a574:	00000000 	.word	0x00000000

0800a578 <O2_Func>:
O2_PARAMETER O2={0,45,1800,1,0,300,30};



void O2_Func()
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
	  if(_CurrentComputationState==Compute_I_Wave)
 800a57c:	4bac      	ldr	r3, [pc, #688]	; (800a830 <O2_Func+0x2b8>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 8140 	bne.w	800a806 <O2_Func+0x28e>
		if(O2.oxygen_Acheived!=1)
		{
			//O2_Flow_Func();
		}

		Servo_Angle(O2.Servo);
 800a586:	4bab      	ldr	r3, [pc, #684]	; (800a834 <O2_Func+0x2bc>)
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	4bab      	ldr	r3, [pc, #684]	; (800a838 <O2_Func+0x2c0>)
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
		if(O2.FiO2_old!=O2._FIO2_Val)
 800a58e:	4ba9      	ldr	r3, [pc, #676]	; (800a834 <O2_Func+0x2bc>)
 800a590:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800a594:	4ba7      	ldr	r3, [pc, #668]	; (800a834 <O2_Func+0x2bc>)
 800a596:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d023      	beq.n	800a5e6 <O2_Func+0x6e>
		{

			O2.O2_DAC=(((9.3452*(O2._FIO2_Val)) + 1586.3095));
 800a59e:	4ba5      	ldr	r3, [pc, #660]	; (800a834 <O2_Func+0x2bc>)
 800a5a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f5 ff65 	bl	8000474 <__aeabi_i2d>
 800a5aa:	a39d      	add	r3, pc, #628	; (adr r3, 800a820 <O2_Func+0x2a8>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 ffca 	bl	8000548 <__aeabi_dmul>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	a39a      	add	r3, pc, #616	; (adr r3, 800a828 <O2_Func+0x2b0>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe0b 	bl	80001dc <__adddf3>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	f7f6 fa7d 	bl	8000acc <__aeabi_d2uiz>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	4b97      	ldr	r3, [pc, #604]	; (800a834 <O2_Func+0x2bc>)
 800a5d8:	811a      	strh	r2, [r3, #8]
			O2.FiO2_old=O2._FIO2_Val;
 800a5da:	4b96      	ldr	r3, [pc, #600]	; (800a834 <O2_Func+0x2bc>)
 800a5dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a5e0:	4b94      	ldr	r3, [pc, #592]	; (800a834 <O2_Func+0x2bc>)
 800a5e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		}
		if (O2.O2_process == 1)
 800a5e6:	4b93      	ldr	r3, [pc, #588]	; (800a834 <O2_Func+0x2bc>)
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	f040 80de 	bne.w	800a7ac <O2_Func+0x234>
		{
			    Servo_Angle(O2.Servo);
 800a5f0:	4b90      	ldr	r3, [pc, #576]	; (800a834 <O2_Func+0x2bc>)
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	4b90      	ldr	r3, [pc, #576]	; (800a838 <O2_Func+0x2c0>)
 800a5f6:	635a      	str	r2, [r3, #52]	; 0x34
				if (O2.O2_percentage < (O2._FIO2_Val -2 ))
 800a5f8:	4b8e      	ldr	r3, [pc, #568]	; (800a834 <O2_Func+0x2bc>)
 800a5fa:	7c1b      	ldrb	r3, [r3, #16]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4b8d      	ldr	r3, [pc, #564]	; (800a834 <O2_Func+0x2bc>)
 800a600:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a604:	3b02      	subs	r3, #2
 800a606:	429a      	cmp	r2, r3
 800a608:	da60      	bge.n	800a6cc <O2_Func+0x154>
				{


					O2._FIO2_Val_float=O2._FIO2_Val;
 800a60a:	4b8a      	ldr	r3, [pc, #552]	; (800a834 <O2_Func+0x2bc>)
 800a60c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a618:	4b86      	ldr	r3, [pc, #536]	; (800a834 <O2_Func+0x2bc>)
 800a61a:	edc3 7a07 	vstr	s15, [r3, #28]
					O2.O2_percentage_float=O2.O2_percentage;
 800a61e:	4b85      	ldr	r3, [pc, #532]	; (800a834 <O2_Func+0x2bc>)
 800a620:	7c1b      	ldrb	r3, [r3, #16]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	4b82      	ldr	r3, [pc, #520]	; (800a834 <O2_Func+0x2bc>)
 800a62c:	edc3 7a08 	vstr	s15, [r3, #32]
					O2.Fio2_Acheived_Percentage=(O2.O2_percentage_float/O2._FIO2_Val_float)*100;
 800a630:	4b80      	ldr	r3, [pc, #512]	; (800a834 <O2_Func+0x2bc>)
 800a632:	edd3 6a08 	vldr	s13, [r3, #32]
 800a636:	4b7f      	ldr	r3, [pc, #508]	; (800a834 <O2_Func+0x2bc>)
 800a638:	ed93 7a07 	vldr	s14, [r3, #28]
 800a63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a640:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a83c <O2_Func+0x2c4>
 800a644:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a648:	4b7a      	ldr	r3, [pc, #488]	; (800a834 <O2_Func+0x2bc>)
 800a64a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


					if(O2._FIO2_Val>40)
 800a64e:	4b79      	ldr	r3, [pc, #484]	; (800a834 <O2_Func+0x2bc>)
 800a650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a654:	2b28      	cmp	r3, #40	; 0x28
 800a656:	d921      	bls.n	800a69c <O2_Func+0x124>
					{
						if(O2.Fio2_Acheived_Percentage2<70)
 800a658:	4b76      	ldr	r3, [pc, #472]	; (800a834 <O2_Func+0x2bc>)
 800a65a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a65e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800a840 <O2_Func+0x2c8>
 800a662:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66a:	d506      	bpl.n	800a67a <O2_Func+0x102>
						{
							O2.O2_DAC = O2.O2_DAC + 80;
 800a66c:	4b71      	ldr	r3, [pc, #452]	; (800a834 <O2_Func+0x2bc>)
 800a66e:	891b      	ldrh	r3, [r3, #8]
 800a670:	3350      	adds	r3, #80	; 0x50
 800a672:	b29a      	uxth	r2, r3
 800a674:	4b6f      	ldr	r3, [pc, #444]	; (800a834 <O2_Func+0x2bc>)
 800a676:	811a      	strh	r2, [r3, #8]
 800a678:	e016      	b.n	800a6a8 <O2_Func+0x130>
						}
						else if(O2.Fio2_Acheived_Percentage2>70)
 800a67a:	4b6e      	ldr	r3, [pc, #440]	; (800a834 <O2_Func+0x2bc>)
 800a67c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a680:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a840 <O2_Func+0x2c8>
 800a684:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68c:	dd0c      	ble.n	800a6a8 <O2_Func+0x130>
						{
							O2.O2_DAC = O2.O2_DAC + 10;
 800a68e:	4b69      	ldr	r3, [pc, #420]	; (800a834 <O2_Func+0x2bc>)
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	330a      	adds	r3, #10
 800a694:	b29a      	uxth	r2, r3
 800a696:	4b67      	ldr	r3, [pc, #412]	; (800a834 <O2_Func+0x2bc>)
 800a698:	811a      	strh	r2, [r3, #8]
 800a69a:	e005      	b.n	800a6a8 <O2_Func+0x130>
						}
					}
					else
					{
						O2.O2_DAC = O2.O2_DAC + 5;
 800a69c:	4b65      	ldr	r3, [pc, #404]	; (800a834 <O2_Func+0x2bc>)
 800a69e:	891b      	ldrh	r3, [r3, #8]
 800a6a0:	3305      	adds	r3, #5
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	4b63      	ldr	r3, [pc, #396]	; (800a834 <O2_Func+0x2bc>)
 800a6a6:	811a      	strh	r2, [r3, #8]
					}

					if(O2.O2_DAC>3300)
 800a6a8:	4b62      	ldr	r3, [pc, #392]	; (800a834 <O2_Func+0x2bc>)
 800a6aa:	891b      	ldrh	r3, [r3, #8]
 800a6ac:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d903      	bls.n	800a6bc <O2_Func+0x144>
					{
						O2.O2_DAC=3300;
 800a6b4:	4b5f      	ldr	r3, [pc, #380]	; (800a834 <O2_Func+0x2bc>)
 800a6b6:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a6ba:	811a      	strh	r2, [r3, #8]
					}
					Parkar_valve_Signal(O2.O2_DAC);
 800a6bc:	4b5d      	ldr	r3, [pc, #372]	; (800a834 <O2_Func+0x2bc>)
 800a6be:	891a      	ldrh	r2, [r3, #8]
 800a6c0:	4b60      	ldr	r3, [pc, #384]	; (800a844 <O2_Func+0x2cc>)
 800a6c2:	615a      	str	r2, [r3, #20]
					O2.O2_process = 0;
 800a6c4:	4b5b      	ldr	r3, [pc, #364]	; (800a834 <O2_Func+0x2bc>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	e06f      	b.n	800a7ac <O2_Func+0x234>
				}
				else if (O2.O2_percentage > (O2._FIO2_Val +2))
 800a6cc:	4b59      	ldr	r3, [pc, #356]	; (800a834 <O2_Func+0x2bc>)
 800a6ce:	7c1b      	ldrb	r3, [r3, #16]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b58      	ldr	r3, [pc, #352]	; (800a834 <O2_Func+0x2bc>)
 800a6d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a6d8:	3302      	adds	r3, #2
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	dd5f      	ble.n	800a79e <O2_Func+0x226>
				{
					O2._FIO2_Val_float=O2._FIO2_Val;
 800a6de:	4b55      	ldr	r3, [pc, #340]	; (800a834 <O2_Func+0x2bc>)
 800a6e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ec:	4b51      	ldr	r3, [pc, #324]	; (800a834 <O2_Func+0x2bc>)
 800a6ee:	edc3 7a07 	vstr	s15, [r3, #28]
					O2.O2_percentage_float=O2.O2_percentage;
 800a6f2:	4b50      	ldr	r3, [pc, #320]	; (800a834 <O2_Func+0x2bc>)
 800a6f4:	7c1b      	ldrb	r3, [r3, #16]
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	4b4d      	ldr	r3, [pc, #308]	; (800a834 <O2_Func+0x2bc>)
 800a700:	edc3 7a08 	vstr	s15, [r3, #32]
					O2.Fio2_Acheived_Percentage2=(O2.O2_percentage_float/O2._FIO2_Val_float)*100;
 800a704:	4b4b      	ldr	r3, [pc, #300]	; (800a834 <O2_Func+0x2bc>)
 800a706:	edd3 6a08 	vldr	s13, [r3, #32]
 800a70a:	4b4a      	ldr	r3, [pc, #296]	; (800a834 <O2_Func+0x2bc>)
 800a70c:	ed93 7a07 	vldr	s14, [r3, #28]
 800a710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a714:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a83c <O2_Func+0x2c4>
 800a718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a71c:	4b45      	ldr	r3, [pc, #276]	; (800a834 <O2_Func+0x2bc>)
 800a71e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					if(O2._FIO2_Val>40)
 800a722:	4b44      	ldr	r3, [pc, #272]	; (800a834 <O2_Func+0x2bc>)
 800a724:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a728:	2b28      	cmp	r3, #40	; 0x28
 800a72a:	d921      	bls.n	800a770 <O2_Func+0x1f8>
					{
						if(O2.Fio2_Acheived_Percentage2>130)
 800a72c:	4b41      	ldr	r3, [pc, #260]	; (800a834 <O2_Func+0x2bc>)
 800a72e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a732:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800a848 <O2_Func+0x2d0>
 800a736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73e:	dd06      	ble.n	800a74e <O2_Func+0x1d6>
						{
							O2.O2_DAC = O2.O2_DAC - 80;
 800a740:	4b3c      	ldr	r3, [pc, #240]	; (800a834 <O2_Func+0x2bc>)
 800a742:	891b      	ldrh	r3, [r3, #8]
 800a744:	3b50      	subs	r3, #80	; 0x50
 800a746:	b29a      	uxth	r2, r3
 800a748:	4b3a      	ldr	r3, [pc, #232]	; (800a834 <O2_Func+0x2bc>)
 800a74a:	811a      	strh	r2, [r3, #8]
 800a74c:	e016      	b.n	800a77c <O2_Func+0x204>
						}
						else if(O2.Fio2_Acheived_Percentage2<130)
 800a74e:	4b39      	ldr	r3, [pc, #228]	; (800a834 <O2_Func+0x2bc>)
 800a750:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a754:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800a848 <O2_Func+0x2d0>
 800a758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	d50c      	bpl.n	800a77c <O2_Func+0x204>
						{
							O2.O2_DAC = O2.O2_DAC - 10;
 800a762:	4b34      	ldr	r3, [pc, #208]	; (800a834 <O2_Func+0x2bc>)
 800a764:	891b      	ldrh	r3, [r3, #8]
 800a766:	3b0a      	subs	r3, #10
 800a768:	b29a      	uxth	r2, r3
 800a76a:	4b32      	ldr	r3, [pc, #200]	; (800a834 <O2_Func+0x2bc>)
 800a76c:	811a      	strh	r2, [r3, #8]
 800a76e:	e005      	b.n	800a77c <O2_Func+0x204>
						}
					}
					else
					{
						O2.O2_DAC = O2.O2_DAC - 5;
 800a770:	4b30      	ldr	r3, [pc, #192]	; (800a834 <O2_Func+0x2bc>)
 800a772:	891b      	ldrh	r3, [r3, #8]
 800a774:	3b05      	subs	r3, #5
 800a776:	b29a      	uxth	r2, r3
 800a778:	4b2e      	ldr	r3, [pc, #184]	; (800a834 <O2_Func+0x2bc>)
 800a77a:	811a      	strh	r2, [r3, #8]
					}



					if(O2.O2_DAC<=1800)
 800a77c:	4b2d      	ldr	r3, [pc, #180]	; (800a834 <O2_Func+0x2bc>)
 800a77e:	891b      	ldrh	r3, [r3, #8]
 800a780:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800a784:	d803      	bhi.n	800a78e <O2_Func+0x216>
					{
						O2.O2_DAC=1800;
 800a786:	4b2b      	ldr	r3, [pc, #172]	; (800a834 <O2_Func+0x2bc>)
 800a788:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a78c:	811a      	strh	r2, [r3, #8]
					}
					Parkar_valve_Signal(O2.O2_DAC);
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <O2_Func+0x2bc>)
 800a790:	891a      	ldrh	r2, [r3, #8]
 800a792:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <O2_Func+0x2cc>)
 800a794:	615a      	str	r2, [r3, #20]
					O2.O2_process = 0;
 800a796:	4b27      	ldr	r3, [pc, #156]	; (800a834 <O2_Func+0x2bc>)
 800a798:	2200      	movs	r2, #0
 800a79a:	60da      	str	r2, [r3, #12]
 800a79c:	e006      	b.n	800a7ac <O2_Func+0x234>

				}
				else
				{
					Parkar_valve_Signal(O2.O2_DAC);
 800a79e:	4b25      	ldr	r3, [pc, #148]	; (800a834 <O2_Func+0x2bc>)
 800a7a0:	891a      	ldrh	r2, [r3, #8]
 800a7a2:	4b28      	ldr	r3, [pc, #160]	; (800a844 <O2_Func+0x2cc>)
 800a7a4:	615a      	str	r2, [r3, #20]
					O2.O2_process = 0;
 800a7a6:	4b23      	ldr	r3, [pc, #140]	; (800a834 <O2_Func+0x2bc>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	60da      	str	r2, [r3, #12]

				}
	  }

			if(O2._Pressure_Base==1)
 800a7ac:	4b21      	ldr	r3, [pc, #132]	; (800a834 <O2_Func+0x2bc>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d10c      	bne.n	800a7ce <O2_Func+0x256>
			{
				if(Pressure_sensor._Pressure_Val>=O2._PIP_Val)
 800a7b4:	4b25      	ldr	r3, [pc, #148]	; (800a84c <O2_Func+0x2d4>)
 800a7b6:	791a      	ldrb	r2, [r3, #4]
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <O2_Func+0x2bc>)
 800a7ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d305      	bcc.n	800a7ce <O2_Func+0x256>
				{

					Parkar_valve_Signal(0);
 800a7c2:	4b20      	ldr	r3, [pc, #128]	; (800a844 <O2_Func+0x2cc>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	615a      	str	r2, [r3, #20]
					O2.oxygen_Acheived=1;
 800a7c8:	4b1a      	ldr	r3, [pc, #104]	; (800a834 <O2_Func+0x2bc>)
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]

				}
			}
			if(O2._Flow_Base==1)
 800a7ce:	4b19      	ldr	r3, [pc, #100]	; (800a834 <O2_Func+0x2bc>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d117      	bne.n	800a806 <O2_Func+0x28e>
			{
				if(vol.Volume>=(O2._VT_Val-check_dev))
 800a7d6:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <O2_Func+0x2d8>)
 800a7d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a7dc:	4b15      	ldr	r3, [pc, #84]	; (800a834 <O2_Func+0x2bc>)
 800a7de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4b1c      	ldr	r3, [pc, #112]	; (800a854 <O2_Func+0x2dc>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f8:	db05      	blt.n	800a806 <O2_Func+0x28e>
				{
						Parkar_valve_Signal(0);
 800a7fa:	4b12      	ldr	r3, [pc, #72]	; (800a844 <O2_Func+0x2cc>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	615a      	str	r2, [r3, #20]
						O2.oxygen_Acheived=1;
 800a800:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <O2_Func+0x2bc>)
 800a802:	2201      	movs	r2, #1
 800a804:	601a      	str	r2, [r3, #0]
			}



		}
	     if(_CurrentComputationState==Compute_E_Wave)
 800a806:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <O2_Func+0x2b8>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d105      	bne.n	800a81a <O2_Func+0x2a2>
	  	 {
	    	 O2.O2_process=1;
 800a80e:	4b09      	ldr	r3, [pc, #36]	; (800a834 <O2_Func+0x2bc>)
 800a810:	2201      	movs	r2, #1
 800a812:	60da      	str	r2, [r3, #12]
			 Parkar_valve_Signal(0);
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <O2_Func+0x2cc>)
 800a816:	2200      	movs	r2, #0
 800a818:	615a      	str	r2, [r3, #20]

		 }
}
 800a81a:	bf00      	nop
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	0ded288d 	.word	0x0ded288d
 800a824:	4022b0be 	.word	0x4022b0be
 800a828:	ed916873 	.word	0xed916873
 800a82c:	4098c93c 	.word	0x4098c93c
 800a830:	20016cc8 	.word	0x20016cc8
 800a834:	20000048 	.word	0x20000048
 800a838:	40001800 	.word	0x40001800
 800a83c:	42c80000 	.word	0x42c80000
 800a840:	428c0000 	.word	0x428c0000
 800a844:	40007400 	.word	0x40007400
 800a848:	43020000 	.word	0x43020000
 800a84c:	20016cfc 	.word	0x20016cfc
 800a850:	20016d44 	.word	0x20016d44
 800a854:	20016bd4 	.word	0x20016bd4

0800a858 <Oxygen_Task>:



void Oxygen_Task(void *argument)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	while(1)
	{

	  if (O2._FIO2_Val > 21)
 800a860:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <Oxygen_Task+0x7c>)
 800a862:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a866:	2b15      	cmp	r3, #21
 800a868:	d923      	bls.n	800a8b2 <Oxygen_Task+0x5a>
	  {
		if(S1._Pause==0 && P1.Apnea_Mode==0)
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <Oxygen_Task+0x80>)
 800a86c:	785b      	ldrb	r3, [r3, #1]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d12c      	bne.n	800a8cc <Oxygen_Task+0x74>
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <Oxygen_Task+0x84>)
 800a874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d127      	bne.n	800a8cc <Oxygen_Task+0x74>
		{
			if(S1._Mode_Val == 1 || S1._Mode_Val == 2 || S1._Mode_Val == 3 || S1._Mode_Val == 4 || S1._Mode_Val == 10 || S1._Mode_Val == 11)
 800a87c:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <Oxygen_Task+0x80>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d013      	beq.n	800a8ac <Oxygen_Task+0x54>
 800a884:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <Oxygen_Task+0x80>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d00f      	beq.n	800a8ac <Oxygen_Task+0x54>
 800a88c:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <Oxygen_Task+0x80>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b03      	cmp	r3, #3
 800a892:	d00b      	beq.n	800a8ac <Oxygen_Task+0x54>
 800a894:	4b10      	ldr	r3, [pc, #64]	; (800a8d8 <Oxygen_Task+0x80>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d007      	beq.n	800a8ac <Oxygen_Task+0x54>
 800a89c:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <Oxygen_Task+0x80>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b0a      	cmp	r3, #10
 800a8a2:	d003      	beq.n	800a8ac <Oxygen_Task+0x54>
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <Oxygen_Task+0x80>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b0b      	cmp	r3, #11
 800a8aa:	d10f      	bne.n	800a8cc <Oxygen_Task+0x74>
			{
				O2_Func();
 800a8ac:	f7ff fe64 	bl	800a578 <O2_Func>
 800a8b0:	e00c      	b.n	800a8cc <Oxygen_Task+0x74>

	  }
	  else
	  {

		  Parkar_valve_Signal(0);
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <Oxygen_Task+0x88>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	615a      	str	r2, [r3, #20]
		  O2.O2_process = 0;
 800a8b8:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <Oxygen_Task+0x7c>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	60da      	str	r2, [r3, #12]
		  O2.Servo=45;
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <Oxygen_Task+0x7c>)
 800a8c0:	222d      	movs	r2, #45	; 0x2d
 800a8c2:	605a      	str	r2, [r3, #4]
		  Servo_Angle(O2.Servo);
 800a8c4:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <Oxygen_Task+0x7c>)
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <Oxygen_Task+0x8c>)
 800a8ca:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  vTaskDelay(2);
 800a8cc:	2002      	movs	r0, #2
 800a8ce:	f014 ffcd 	bl	801f86c <vTaskDelay>
	  if (O2._FIO2_Val > 21)
 800a8d2:	e7c5      	b.n	800a860 <Oxygen_Task+0x8>
 800a8d4:	20000048 	.word	0x20000048
 800a8d8:	20016ae0 	.word	0x20016ae0
 800a8dc:	20016960 	.word	0x20016960
 800a8e0:	40007400 	.word	0x40007400
 800a8e4:	40001800 	.word	0x40001800

0800a8e8 <adjust_servo>:
}



void adjust_servo()
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0

	                if(O2._FIO2_Val>21)
 800a8ee:	4b46      	ldr	r3, [pc, #280]	; (800aa08 <adjust_servo+0x120>)
 800a8f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a8f4:	2b15      	cmp	r3, #21
 800a8f6:	d97f      	bls.n	800a9f8 <adjust_servo+0x110>
					{

	                	O2.Result=O2._AVG_CirusO2Sensor_value/O2.count;
 800a8f8:	4b43      	ldr	r3, [pc, #268]	; (800aa08 <adjust_servo+0x120>)
 800a8fa:	695a      	ldr	r2, [r3, #20]
 800a8fc:	4b42      	ldr	r3, [pc, #264]	; (800aa08 <adjust_servo+0x120>)
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	fbb2 f3f3 	udiv	r3, r2, r3
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90c:	4b3e      	ldr	r3, [pc, #248]	; (800aa08 <adjust_servo+0x120>)
 800a90e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	                	O2.O2_percentage_float=(O2.Result/9.2);
 800a912:	4b3d      	ldr	r3, [pc, #244]	; (800aa08 <adjust_servo+0x120>)
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	4618      	mov	r0, r3
 800a918:	f7f5 fdbe 	bl	8000498 <__aeabi_f2d>
 800a91c:	a338      	add	r3, pc, #224	; (adr r3, 800aa00 <adjust_servo+0x118>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 ff3b 	bl	800079c <__aeabi_ddiv>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4610      	mov	r0, r2
 800a92c:	4619      	mov	r1, r3
 800a92e:	f7f6 f8ed 	bl	8000b0c <__aeabi_d2f>
 800a932:	4603      	mov	r3, r0
 800a934:	4a34      	ldr	r2, [pc, #208]	; (800aa08 <adjust_servo+0x120>)
 800a936:	6213      	str	r3, [r2, #32]

	                	if(O2.O2_percentage_float>100)
 800a938:	4b33      	ldr	r3, [pc, #204]	; (800aa08 <adjust_servo+0x120>)
 800a93a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a93e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800aa0c <adjust_servo+0x124>
 800a942:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	dd02      	ble.n	800a952 <adjust_servo+0x6a>
	                		O2.O2_percentage_float=100;
 800a94c:	4b2e      	ldr	r3, [pc, #184]	; (800aa08 <adjust_servo+0x120>)
 800a94e:	4a30      	ldr	r2, [pc, #192]	; (800aa10 <adjust_servo+0x128>)
 800a950:	621a      	str	r2, [r3, #32]
	                	O2.O2_percentage=(int)O2.O2_percentage_float;
 800a952:	4b2d      	ldr	r3, [pc, #180]	; (800aa08 <adjust_servo+0x120>)
 800a954:	edd3 7a08 	vldr	s15, [r3, #32]
 800a958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a95c:	edc7 7a01 	vstr	s15, [r7, #4]
 800a960:	793a      	ldrb	r2, [r7, #4]
 800a962:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <adjust_servo+0x120>)
 800a964:	741a      	strb	r2, [r3, #16]

	                	O2.count=10;
 800a966:	4b28      	ldr	r3, [pc, #160]	; (800aa08 <adjust_servo+0x120>)
 800a968:	220a      	movs	r2, #10
 800a96a:	619a      	str	r2, [r3, #24]
	                	O2._AVG_CirusO2Sensor_value=10;
 800a96c:	4b26      	ldr	r3, [pc, #152]	; (800aa08 <adjust_servo+0x120>)
 800a96e:	220a      	movs	r2, #10
 800a970:	615a      	str	r2, [r3, #20]


					if(O2.O2_percentage<(O2._FIO2_Val-3))
 800a972:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <adjust_servo+0x120>)
 800a974:	7c1b      	ldrb	r3, [r3, #16]
 800a976:	461a      	mov	r2, r3
 800a978:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <adjust_servo+0x120>)
 800a97a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a97e:	3b03      	subs	r3, #3
 800a980:	429a      	cmp	r2, r3
 800a982:	da18      	bge.n	800a9b6 <adjust_servo+0xce>
					{
						O2.fio2_check++;
 800a984:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <adjust_servo+0x120>)
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	3301      	adds	r3, #1
 800a98a:	4a1f      	ldr	r2, [pc, #124]	; (800aa08 <adjust_servo+0x120>)
 800a98c:	6393      	str	r3, [r2, #56]	; 0x38
						if(O2.fio2_check>3)
 800a98e:	4b1e      	ldr	r3, [pc, #120]	; (800aa08 <adjust_servo+0x120>)
 800a990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a992:	2b03      	cmp	r3, #3
 800a994:	dd07      	ble.n	800a9a6 <adjust_servo+0xbe>
						{
							O2.Servo=O2.Servo+5;
 800a996:	4b1c      	ldr	r3, [pc, #112]	; (800aa08 <adjust_servo+0x120>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	3305      	adds	r3, #5
 800a99c:	4a1a      	ldr	r2, [pc, #104]	; (800aa08 <adjust_servo+0x120>)
 800a99e:	6053      	str	r3, [r2, #4]
							O2.fio2_check=0;
 800a9a0:	4b19      	ldr	r3, [pc, #100]	; (800aa08 <adjust_servo+0x120>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38
						}

						if(O2.Servo>=100)
 800a9a6:	4b18      	ldr	r3, [pc, #96]	; (800aa08 <adjust_servo+0x120>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b63      	cmp	r3, #99	; 0x63
 800a9ac:	dd24      	ble.n	800a9f8 <adjust_servo+0x110>
							O2.Servo=100;
 800a9ae:	4b16      	ldr	r3, [pc, #88]	; (800aa08 <adjust_servo+0x120>)
 800a9b0:	2264      	movs	r2, #100	; 0x64
 800a9b2:	605a      	str	r2, [r3, #4]


					}


}
 800a9b4:	e020      	b.n	800a9f8 <adjust_servo+0x110>
					else if(O2.O2_percentage>(O2._FIO2_Val+3))
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <adjust_servo+0x120>)
 800a9b8:	7c1b      	ldrb	r3, [r3, #16]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4b12      	ldr	r3, [pc, #72]	; (800aa08 <adjust_servo+0x120>)
 800a9be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a9c2:	3303      	adds	r3, #3
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	dd17      	ble.n	800a9f8 <adjust_servo+0x110>
						O2.fio2_check2++;
 800a9c8:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <adjust_servo+0x120>)
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	4a0e      	ldr	r2, [pc, #56]	; (800aa08 <adjust_servo+0x120>)
 800a9d0:	63d3      	str	r3, [r2, #60]	; 0x3c
						if(O2.fio2_check2>3)
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <adjust_servo+0x120>)
 800a9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	dd07      	ble.n	800a9ea <adjust_servo+0x102>
							O2.Servo=O2.Servo-5;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <adjust_servo+0x120>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	3b05      	subs	r3, #5
 800a9e0:	4a09      	ldr	r2, [pc, #36]	; (800aa08 <adjust_servo+0x120>)
 800a9e2:	6053      	str	r3, [r2, #4]
							O2.fio2_check2=0;
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <adjust_servo+0x120>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	63da      	str	r2, [r3, #60]	; 0x3c
						if(O2.Servo<=45)
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <adjust_servo+0x120>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b2d      	cmp	r3, #45	; 0x2d
 800a9f0:	dc02      	bgt.n	800a9f8 <adjust_servo+0x110>
							O2.Servo=45;
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <adjust_servo+0x120>)
 800a9f4:	222d      	movs	r2, #45	; 0x2d
 800a9f6:	605a      	str	r2, [r3, #4]
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	66666666 	.word	0x66666666
 800aa04:	40226666 	.word	0x40226666
 800aa08:	20000048 	.word	0x20000048
 800aa0c:	42c80000 	.word	0x42c80000
 800aa10:	42c80000 	.word	0x42c80000

0800aa14 <Get_Oxygen>:

void Get_Oxygen()
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
	if(_CurrentComputationState==Compute_I_Wave)
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <Get_Oxygen+0x78>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d12f      	bne.n	800aa80 <Get_Oxygen+0x6c>
	{
		if (O2._FIO2_Val > 21)
 800aa20:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa26:	2b15      	cmp	r3, #21
 800aa28:	d92a      	bls.n	800aa80 <Get_Oxygen+0x6c>
		{
			O2._AVG_CirusO2Sensor = (AdcData[1] * 3300) / 4095;
 800aa2a:	4b1a      	ldr	r3, [pc, #104]	; (800aa94 <Get_Oxygen+0x80>)
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f640 43e4 	movw	r3, #3300	; 0xce4
 800aa34:	fb03 f302 	mul.w	r3, r3, r2
 800aa38:	4a17      	ldr	r2, [pc, #92]	; (800aa98 <Get_Oxygen+0x84>)
 800aa3a:	fb82 1203 	smull	r1, r2, r2, r3
 800aa3e:	441a      	add	r2, r3
 800aa40:	12d2      	asrs	r2, r2, #11
 800aa42:	17db      	asrs	r3, r3, #31
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa4e:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa50:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			//O2._AVG_CirusO2Sensor = (AdcData[4] * 3300) / 4095;
			O2.count++;
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	4a0d      	ldr	r2, [pc, #52]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa5c:	6193      	str	r3, [r2, #24]
			O2._AVG_CirusO2Sensor_value=O2._AVG_CirusO2Sensor+O2._AVG_CirusO2Sensor_value;
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa60:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa78:	ee17 2a90 	vmov	r2, s15
 800aa7c:	4b04      	ldr	r3, [pc, #16]	; (800aa90 <Get_Oxygen+0x7c>)
 800aa7e:	615a      	str	r2, [r3, #20]
		}
	}
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20016cc8 	.word	0x20016cc8
 800aa90:	20000048 	.word	0x20000048
 800aa94:	20016bbc 	.word	0x20016bbc
 800aa98:	80080081 	.word	0x80080081
 800aa9c:	00000000 	.word	0x00000000

0800aaa0 <O2_Parameter>:

void O2_Parameter()
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
			O2.count=10;
 800aaa4:	4b3e      	ldr	r3, [pc, #248]	; (800aba0 <O2_Parameter+0x100>)
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	619a      	str	r2, [r3, #24]
			O2._AVG_CirusO2Sensor_value=10;
 800aaaa:	4b3d      	ldr	r3, [pc, #244]	; (800aba0 <O2_Parameter+0x100>)
 800aaac:	220a      	movs	r2, #10
 800aaae:	615a      	str	r2, [r3, #20]
			O2.O2_DAC=(((9.3452*(O2._FIO2_Val)) + 1586.3095)+100);
 800aab0:	4b3b      	ldr	r3, [pc, #236]	; (800aba0 <O2_Parameter+0x100>)
 800aab2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f5 fcdc 	bl	8000474 <__aeabi_i2d>
 800aabc:	a334      	add	r3, pc, #208	; (adr r3, 800ab90 <O2_Parameter+0xf0>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fd41 	bl	8000548 <__aeabi_dmul>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4610      	mov	r0, r2
 800aacc:	4619      	mov	r1, r3
 800aace:	a332      	add	r3, pc, #200	; (adr r3, 800ab98 <O2_Parameter+0xf8>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fb82 	bl	80001dc <__adddf3>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4610      	mov	r0, r2
 800aade:	4619      	mov	r1, r3
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	4b2f      	ldr	r3, [pc, #188]	; (800aba4 <O2_Parameter+0x104>)
 800aae6:	f7f5 fb79 	bl	80001dc <__adddf3>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f7f5 ffeb 	bl	8000acc <__aeabi_d2uiz>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	4b29      	ldr	r3, [pc, #164]	; (800aba0 <O2_Parameter+0x100>)
 800aafc:	811a      	strh	r2, [r3, #8]
			if(O2._FIO2_Val==100)
 800aafe:	4b28      	ldr	r3, [pc, #160]	; (800aba0 <O2_Parameter+0x100>)
 800ab00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab04:	2b64      	cmp	r3, #100	; 0x64
 800ab06:	d107      	bne.n	800ab18 <O2_Parameter+0x78>
			{
				O2.Servo=100;
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <O2_Parameter+0x100>)
 800ab0a:	2264      	movs	r2, #100	; 0x64
 800ab0c:	605a      	str	r2, [r3, #4]
				A.Fio2_Value_Set=6;
 800ab0e:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <O2_Parameter+0x108>)
 800ab10:	2206      	movs	r2, #6
 800ab12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Parkar_valve_Signal(1800);
			}



}
 800ab16:	e037      	b.n	800ab88 <O2_Parameter+0xe8>
			else if(O2._FIO2_Val>=70 && O2._FIO2_Val<95)
 800ab18:	4b21      	ldr	r3, [pc, #132]	; (800aba0 <O2_Parameter+0x100>)
 800ab1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab1e:	2b45      	cmp	r3, #69	; 0x45
 800ab20:	d90c      	bls.n	800ab3c <O2_Parameter+0x9c>
 800ab22:	4b1f      	ldr	r3, [pc, #124]	; (800aba0 <O2_Parameter+0x100>)
 800ab24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab28:	2b5e      	cmp	r3, #94	; 0x5e
 800ab2a:	d807      	bhi.n	800ab3c <O2_Parameter+0x9c>
				O2.Servo=75;
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <O2_Parameter+0x100>)
 800ab2e:	224b      	movs	r2, #75	; 0x4b
 800ab30:	605a      	str	r2, [r3, #4]
				A.Fio2_Value_Set=6;
 800ab32:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <O2_Parameter+0x108>)
 800ab34:	2206      	movs	r2, #6
 800ab36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800ab3a:	e025      	b.n	800ab88 <O2_Parameter+0xe8>
			else if(O2._FIO2_Val>21 && O2._FIO2_Val<70)
 800ab3c:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <O2_Parameter+0x100>)
 800ab3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab42:	2b15      	cmp	r3, #21
 800ab44:	d90c      	bls.n	800ab60 <O2_Parameter+0xc0>
 800ab46:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <O2_Parameter+0x100>)
 800ab48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab4c:	2b45      	cmp	r3, #69	; 0x45
 800ab4e:	d807      	bhi.n	800ab60 <O2_Parameter+0xc0>
				O2.Servo=50;
 800ab50:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <O2_Parameter+0x100>)
 800ab52:	2232      	movs	r2, #50	; 0x32
 800ab54:	605a      	str	r2, [r3, #4]
				A.Fio2_Value_Set=6;
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <O2_Parameter+0x108>)
 800ab58:	2206      	movs	r2, #6
 800ab5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800ab5e:	e013      	b.n	800ab88 <O2_Parameter+0xe8>
			else if(O2._FIO2_Val<=21)
 800ab60:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <O2_Parameter+0x100>)
 800ab62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab66:	2b15      	cmp	r3, #21
 800ab68:	d80e      	bhi.n	800ab88 <O2_Parameter+0xe8>
				O2.Servo=45;
 800ab6a:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <O2_Parameter+0x100>)
 800ab6c:	222d      	movs	r2, #45	; 0x2d
 800ab6e:	605a      	str	r2, [r3, #4]
				O2.O2_percentage=21;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <O2_Parameter+0x100>)
 800ab72:	2215      	movs	r2, #21
 800ab74:	741a      	strb	r2, [r3, #16]
				Servo_Angle(O2.Servo);
 800ab76:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <O2_Parameter+0x100>)
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	; (800abac <O2_Parameter+0x10c>)
 800ab7c:	635a      	str	r2, [r3, #52]	; 0x34
				Parkar_valve_Signal(1800);
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	; (800abb0 <O2_Parameter+0x110>)
 800ab80:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800ab84:	615a      	str	r2, [r3, #20]
}
 800ab86:	e7ff      	b.n	800ab88 <O2_Parameter+0xe8>
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	f3af 8000 	nop.w
 800ab90:	0ded288d 	.word	0x0ded288d
 800ab94:	4022b0be 	.word	0x4022b0be
 800ab98:	ed916873 	.word	0xed916873
 800ab9c:	4098c93c 	.word	0x4098c93c
 800aba0:	20000048 	.word	0x20000048
 800aba4:	40590000 	.word	0x40590000
 800aba8:	20016a2c 	.word	0x20016a2c
 800abac:	40001800 	.word	0x40001800
 800abb0:	40007400 	.word	0x40007400

0800abb4 <O2_Flow_Func>:




void O2_Flow_Func()
{
 800abb4:	b5b0      	push	{r4, r5, r7, lr}
 800abb6:	af00      	add	r7, sp, #0

#if ADC_PIN==0
	O2_F._AVG_O2_Flow_Sensor = (AdcData[0] * 3300) / 4095;
 800abb8:	4b4b      	ldr	r3, [pc, #300]	; (800ace8 <O2_Flow_Func+0x134>)
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	f640 43e4 	movw	r3, #3300	; 0xce4
 800abc2:	fb03 f302 	mul.w	r3, r3, r2
 800abc6:	4a49      	ldr	r2, [pc, #292]	; (800acec <O2_Flow_Func+0x138>)
 800abc8:	fb82 1203 	smull	r1, r2, r2, r3
 800abcc:	441a      	add	r2, r3
 800abce:	12d2      	asrs	r2, r2, #11
 800abd0:	17db      	asrs	r3, r3, #31
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abdc:	4b44      	ldr	r3, [pc, #272]	; (800acf0 <O2_Flow_Func+0x13c>)
 800abde:	edc3 7a00 	vstr	s15, [r3]
#endif
#if ADC_PIN==4
	O2_F._AVG_O2_Flow_Sensor = (AdcData[4] * 3300) / 4095;
#endif
	O2_F.O2_flow_raw1=O2_F._AVG_O2_Flow_Sensor-O2_F.O2_Flow_Offset;
 800abe2:	4b43      	ldr	r3, [pc, #268]	; (800acf0 <O2_Flow_Func+0x13c>)
 800abe4:	ed93 7a00 	vldr	s14, [r3]
 800abe8:	4b41      	ldr	r3, [pc, #260]	; (800acf0 <O2_Flow_Func+0x13c>)
 800abea:	8a9b      	ldrh	r3, [r3, #20]
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abf8:	4b3d      	ldr	r3, [pc, #244]	; (800acf0 <O2_Flow_Func+0x13c>)
 800abfa:	edc3 7a06 	vstr	s15, [r3, #24]
	O2_F.O2_volt2=O2_F.O2_flow_raw1;
 800abfe:	4b3c      	ldr	r3, [pc, #240]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac00:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac08:	ee17 3a90 	vmov	r3, s15
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	4b38      	ldr	r3, [pc, #224]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac10:	841a      	strh	r2, [r3, #32]
	O2_F.O2_volt_new=O2_F.O2_volt2;
 800ac12:	4b37      	ldr	r3, [pc, #220]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac14:	8c1a      	ldrh	r2, [r3, #32]
 800ac16:	4b36      	ldr	r3, [pc, #216]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac18:	845a      	strh	r2, [r3, #34]	; 0x22
	O2_F.O2_volt_new=((O2_F.O2_volt_new-O2_F.O2_volt_old)/10.00)+O2_F.O2_volt_old;
 800ac1a:	4b35      	ldr	r3, [pc, #212]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ac1e:	461a      	mov	r2, r3
 800ac20:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f5 fc24 	bl	8000474 <__aeabi_i2d>
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	4b30      	ldr	r3, [pc, #192]	; (800acf4 <O2_Flow_Func+0x140>)
 800ac32:	f7f5 fdb3 	bl	800079c <__aeabi_ddiv>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4614      	mov	r4, r2
 800ac3c:	461d      	mov	r5, r3
 800ac3e:	4b2c      	ldr	r3, [pc, #176]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7f5 fc16 	bl	8000474 <__aeabi_i2d>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fac4 	bl	80001dc <__adddf3>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	f7f5 ff36 	bl	8000acc <__aeabi_d2uiz>
 800ac60:	4603      	mov	r3, r0
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac66:	845a      	strh	r2, [r3, #34]	; 0x22
	O2_F.O2_volt_old=O2_F.O2_volt_new;
 800ac68:	4b21      	ldr	r3, [pc, #132]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac6a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ac6c:	4b20      	ldr	r3, [pc, #128]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac6e:	849a      	strh	r2, [r3, #36]	; 0x24
	O2_F.O2_p=O2_F.O2_volt_new/90.00;
 800ac70:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac72:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f5 fbfd 	bl	8000474 <__aeabi_i2d>
 800ac7a:	f04f 0200 	mov.w	r2, #0
 800ac7e:	4b1e      	ldr	r3, [pc, #120]	; (800acf8 <O2_Flow_Func+0x144>)
 800ac80:	f7f5 fd8c 	bl	800079c <__aeabi_ddiv>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f7f5 ff3e 	bl	8000b0c <__aeabi_d2f>
 800ac90:	4603      	mov	r3, r0
 800ac92:	4a17      	ldr	r2, [pc, #92]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac94:	6293      	str	r3, [r2, #40]	; 0x28
	O2_F.O2_kpa=(O2_F.O2_p/9.0)*100;
 800ac96:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f5 fbfc 	bl	8000498 <__aeabi_f2d>
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	4b15      	ldr	r3, [pc, #84]	; (800acfc <O2_Flow_Func+0x148>)
 800aca6:	f7f5 fd79 	bl	800079c <__aeabi_ddiv>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4610      	mov	r0, r2
 800acb0:	4619      	mov	r1, r3
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	4b12      	ldr	r3, [pc, #72]	; (800ad00 <O2_Flow_Func+0x14c>)
 800acb8:	f7f5 fc46 	bl	8000548 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4610      	mov	r0, r2
 800acc2:	4619      	mov	r1, r3
 800acc4:	f7f5 ff22 	bl	8000b0c <__aeabi_d2f>
 800acc8:	4603      	mov	r3, r0
 800acca:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <O2_Flow_Func+0x13c>)
 800accc:	62d3      	str	r3, [r2, #44]	; 0x2c
	O2_F.O2_kpa1=(int)O2_F.O2_kpa+20;
 800acce:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <O2_Flow_Func+0x13c>)
 800acd0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800acd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acd8:	ee17 3a90 	vmov	r3, s15
 800acdc:	3314      	adds	r3, #20
 800acde:	4a04      	ldr	r2, [pc, #16]	; (800acf0 <O2_Flow_Func+0x13c>)
 800ace0:	6313      	str	r3, [r2, #48]	; 0x30

}
 800ace2:	bf00      	nop
 800ace4:	bdb0      	pop	{r4, r5, r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20016bbc 	.word	0x20016bbc
 800acec:	80080081 	.word	0x80080081
 800acf0:	200168cc 	.word	0x200168cc
 800acf4:	40240000 	.word	0x40240000
 800acf8:	40568000 	.word	0x40568000
 800acfc:	40220000 	.word	0x40220000
 800ad00:	40590000 	.word	0x40590000

0800ad04 <O2_milli_volt1>:




uint16_t O2_milli_volt1(uint16_t C_value)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	80fb      	strh	r3, [r7, #6]
	O2_F.Raw_O2_Flow=C_value;
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <O2_milli_volt1+0x44>)
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	8093      	strh	r3, [r2, #4]
	O2_F.O2_milli_volt=(O2_F.Raw_O2_Flow*3300)/4095;
 800ad14:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <O2_milli_volt1+0x44>)
 800ad16:	889b      	ldrh	r3, [r3, #4]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f640 43e4 	movw	r3, #3300	; 0xce4
 800ad1e:	fb03 f302 	mul.w	r3, r3, r2
 800ad22:	4a0a      	ldr	r2, [pc, #40]	; (800ad4c <O2_milli_volt1+0x48>)
 800ad24:	fb82 1203 	smull	r1, r2, r2, r3
 800ad28:	441a      	add	r2, r3
 800ad2a:	12d2      	asrs	r2, r2, #11
 800ad2c:	17db      	asrs	r3, r3, #31
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <O2_milli_volt1+0x44>)
 800ad34:	80da      	strh	r2, [r3, #6]
	return O2_F.O2_milli_volt;
 800ad36:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <O2_milli_volt1+0x44>)
 800ad38:	88db      	ldrh	r3, [r3, #6]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	200168cc 	.word	0x200168cc
 800ad4c:	80080081 	.word	0x80080081

0800ad50 <O2_Flow_offset>:

void O2_Flow_offset(void)
{
 800ad50:	b5b0      	push	{r4, r5, r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
	for(int l=0;l<1000;l++)
 800ad56:	2300      	movs	r3, #0
 800ad58:	607b      	str	r3, [r7, #4]
 800ad5a:	e03e      	b.n	800adda <O2_Flow_offset+0x8a>
	{
		#if ADC_PIN==0
			O2_F.O2_Flow_raw1 = O2_milli_volt1(AdcData[0]);
 800ad5c:	4b23      	ldr	r3, [pc, #140]	; (800adec <O2_Flow_offset+0x9c>)
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff ffcf 	bl	800ad04 <O2_milli_volt1>
 800ad66:	4603      	mov	r3, r0
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad6c:	811a      	strh	r2, [r3, #8]
		#endif
		#if ADC_PIN==4
			O2_F.O2_Flow_raw1 = O2_milli_volt1(AdcData[4]);
		#endif
			O2_F.O2_Flow_raw1_new = O2_F.O2_Flow_raw1;
 800ad6e:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad70:	891a      	ldrh	r2, [r3, #8]
 800ad72:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad74:	821a      	strh	r2, [r3, #16]
			O2_F.O2_Flow_raw1_new = ((O2_F.O2_Flow_raw1_new-O2_F.O2_Flow_raw1_old)/3.00)+O2_F.O2_Flow_raw1_old;
 800ad76:	4b1e      	ldr	r3, [pc, #120]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad78:	8a1b      	ldrh	r3, [r3, #16]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	4b1c      	ldr	r3, [pc, #112]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad7e:	8a5b      	ldrh	r3, [r3, #18]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f5 fb76 	bl	8000474 <__aeabi_i2d>
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <O2_Flow_offset+0xa4>)
 800ad8e:	f7f5 fd05 	bl	800079c <__aeabi_ddiv>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4614      	mov	r4, r2
 800ad98:	461d      	mov	r5, r3
 800ad9a:	4b15      	ldr	r3, [pc, #84]	; (800adf0 <O2_Flow_offset+0xa0>)
 800ad9c:	8a5b      	ldrh	r3, [r3, #18]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f5 fb68 	bl	8000474 <__aeabi_i2d>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4620      	mov	r0, r4
 800adaa:	4629      	mov	r1, r5
 800adac:	f7f5 fa16 	bl	80001dc <__adddf3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4610      	mov	r0, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	f7f5 fe88 	bl	8000acc <__aeabi_d2uiz>
 800adbc:	4603      	mov	r3, r0
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <O2_Flow_offset+0xa0>)
 800adc2:	821a      	strh	r2, [r3, #16]
			O2_F.O2_Flow_raw1_old = O2_F.O2_Flow_raw1_new;
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <O2_Flow_offset+0xa0>)
 800adc6:	8a1a      	ldrh	r2, [r3, #16]
 800adc8:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <O2_Flow_offset+0xa0>)
 800adca:	825a      	strh	r2, [r3, #18]
			O2_F.O2_Flow_Offset   = O2_F.O2_Flow_raw1_new;
 800adcc:	4b08      	ldr	r3, [pc, #32]	; (800adf0 <O2_Flow_offset+0xa0>)
 800adce:	8a1a      	ldrh	r2, [r3, #16]
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <O2_Flow_offset+0xa0>)
 800add2:	829a      	strh	r2, [r3, #20]
	for(int l=0;l<1000;l++)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	607b      	str	r3, [r7, #4]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ade0:	dbbc      	blt.n	800ad5c <O2_Flow_offset+0xc>
	}
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bdb0      	pop	{r4, r5, r7, pc}
 800adec:	20016bbc 	.word	0x20016bbc
 800adf0:	200168cc 	.word	0x200168cc
 800adf4:	40080000 	.word	0x40080000

0800adf8 <PC_SIMV_Task>:

int trigger_valve_modification=0;


void PC_SIMV_Task (void *argument)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 800ae00:	4ba7      	ldr	r3, [pc, #668]	; (800b0a0 <PC_SIMV_Task+0x2a8>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	f000 817f 	beq.w	800b108 <PC_SIMV_Task+0x310>
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	f300 817e 	bgt.w	800b10c <PC_SIMV_Task+0x314>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <PC_SIMV_Task+0x22>
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d014      	beq.n	800ae42 <PC_SIMV_Task+0x4a>

				break;
				case NoComputeState:
				break;
				default:
				break;
 800ae18:	e178      	b.n	800b10c <PC_SIMV_Task+0x314>
					ExpValve_CLOSE();
 800ae1a:	4ba2      	ldr	r3, [pc, #648]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	4aa1      	ldr	r2, [pc, #644]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800ae20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ae24:	6153      	str	r3, [r2, #20]
					Blower_Signal( T4._DAC_VAL0);
 800ae26:	4ba0      	ldr	r3, [pc, #640]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800ae28:	889a      	ldrh	r2, [r3, #4]
 800ae2a:	4ba0      	ldr	r3, [pc, #640]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800ae2c:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 800ae2e:	4ba0      	ldr	r3, [pc, #640]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	64da      	str	r2, [r3, #76]	; 0x4c
					S5.lock=1;
 800ae34:	4b9e      	ldr	r3, [pc, #632]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	645a      	str	r2, [r3, #68]	; 0x44
					pressure_acheived = 1;
 800ae3a:	4b9e      	ldr	r3, [pc, #632]	; (800b0b4 <PC_SIMV_Task+0x2bc>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
				break;
 800ae40:	e167      	b.n	800b112 <PC_SIMV_Task+0x31a>
					Blower_Signal( T4._DAC_VAL0);
 800ae42:	4b99      	ldr	r3, [pc, #612]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800ae44:	889a      	ldrh	r2, [r3, #4]
 800ae46:	4b99      	ldr	r3, [pc, #612]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800ae48:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 800ae4a:	4b99      	ldr	r3, [pc, #612]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800ae4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d136      	bne.n	800aec0 <PC_SIMV_Task+0xc8>
								if(T1.Assist_mode==0 )
 800ae52:	4b99      	ldr	r3, [pc, #612]	; (800b0b8 <PC_SIMV_Task+0x2c0>)
 800ae54:	7cdb      	ldrb	r3, [r3, #19]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d117      	bne.n	800ae8a <PC_SIMV_Task+0x92>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 800ae5a:	4b98      	ldr	r3, [pc, #608]	; (800b0bc <PC_SIMV_Task+0x2c4>)
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae66:	4b92      	ldr	r3, [pc, #584]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800ae68:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ae6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae74:	d504      	bpl.n	800ae80 <PC_SIMV_Task+0x88>
										Blower_Signal( T4._DAC_VAL0);
 800ae76:	4b8c      	ldr	r3, [pc, #560]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800ae78:	889a      	ldrh	r2, [r3, #4]
 800ae7a:	4b8c      	ldr	r3, [pc, #560]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800ae7c:	609a      	str	r2, [r3, #8]
 800ae7e:	e01f      	b.n	800aec0 <PC_SIMV_Task+0xc8>
										Blower_Signal( T4._DAC_VAL0);
 800ae80:	4b89      	ldr	r3, [pc, #548]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800ae82:	889a      	ldrh	r2, [r3, #4]
 800ae84:	4b89      	ldr	r3, [pc, #548]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	e01a      	b.n	800aec0 <PC_SIMV_Task+0xc8>
								else if(T1.Assist_mode==1 )
 800ae8a:	4b8b      	ldr	r3, [pc, #556]	; (800b0b8 <PC_SIMV_Task+0x2c0>)
 800ae8c:	7cdb      	ldrb	r3, [r3, #19]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d116      	bne.n	800aec0 <PC_SIMV_Task+0xc8>
									if(pressure_acheived == 1)
 800ae92:	4b88      	ldr	r3, [pc, #544]	; (800b0b4 <PC_SIMV_Task+0x2bc>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d112      	bne.n	800aec0 <PC_SIMV_Task+0xc8>
										PID_Compute(&TPID);
 800ae9a:	4889      	ldr	r0, [pc, #548]	; (800b0c0 <PC_SIMV_Task+0x2c8>)
 800ae9c:	f009 fccc 	bl	8014838 <PID_Compute>
										T4._DAC_VAL0=(int16_t)PIDOut;
 800aea0:	4b88      	ldr	r3, [pc, #544]	; (800b0c4 <PC_SIMV_Task+0x2cc>)
 800aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f7f5 fde7 	bl	8000a7c <__aeabi_d2iz>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	b21b      	sxth	r3, r3
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	4b7c      	ldr	r3, [pc, #496]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800aeb6:	809a      	strh	r2, [r3, #4]
										Blower_Signal( T4._DAC_VAL0);
 800aeb8:	4b7b      	ldr	r3, [pc, #492]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800aeba:	889a      	ldrh	r2, [r3, #4]
 800aebc:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800aebe:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 800aec0:	4b7e      	ldr	r3, [pc, #504]	; (800b0bc <PC_SIMV_Task+0x2c4>)
 800aec2:	791b      	ldrb	r3, [r3, #4]
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aecc:	4b78      	ldr	r3, [pc, #480]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800aece:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800aed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeda:	d815      	bhi.n	800af08 <PC_SIMV_Task+0x110>
								if(S5.lock==1)
 800aedc:	4b74      	ldr	r3, [pc, #464]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800aede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d107      	bne.n	800aef4 <PC_SIMV_Task+0xfc>
									S5.lock=0;
 800aee4:	4b72      	ldr	r3, [pc, #456]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	645a      	str	r2, [r3, #68]	; 0x44
									vTaskDelay(S5.Lock_delay);
 800aeea:	4b71      	ldr	r3, [pc, #452]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800aeec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aeee:	4618      	mov	r0, r3
 800aef0:	f014 fcbc 	bl	801f86c <vTaskDelay>
								S5.peep_process_done=1;
 800aef4:	4b6e      	ldr	r3, [pc, #440]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800aef6:	2201      	movs	r2, #1
 800aef8:	64da      	str	r2, [r3, #76]	; 0x4c
								ExpValve_CLOSE();
 800aefa:	4b6a      	ldr	r3, [pc, #424]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	4a69      	ldr	r2, [pc, #420]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800af00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af04:	6153      	str	r3, [r2, #20]
 800af06:	e009      	b.n	800af1c <PC_SIMV_Task+0x124>
							else if(S5.peep_process_done==0)
 800af08:	4b69      	ldr	r3, [pc, #420]	; (800b0b0 <PC_SIMV_Task+0x2b8>)
 800af0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d105      	bne.n	800af1c <PC_SIMV_Task+0x124>
								ExpValve_OPEN();
 800af10:	4b64      	ldr	r3, [pc, #400]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	4a63      	ldr	r2, [pc, #396]	; (800b0a4 <PC_SIMV_Task+0x2ac>)
 800af16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af1a:	6153      	str	r3, [r2, #20]
										if(_E_TIMER <= (T5._TRIG_WINDOW) &&  _E_TIMER != 0)
 800af1c:	4b6a      	ldr	r3, [pc, #424]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800af1e:	895b      	ldrh	r3, [r3, #10]
 800af20:	461a      	mov	r2, r3
 800af22:	4b6a      	ldr	r3, [pc, #424]	; (800b0cc <PC_SIMV_Task+0x2d4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	f0c0 809a 	bcc.w	800b060 <PC_SIMV_Task+0x268>
 800af2c:	4b67      	ldr	r3, [pc, #412]	; (800b0cc <PC_SIMV_Task+0x2d4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 8095 	beq.w	800b060 <PC_SIMV_Task+0x268>
											pressure_acheived =0;
 800af36:	4b5f      	ldr	r3, [pc, #380]	; (800b0b4 <PC_SIMV_Task+0x2bc>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
											T4._DAC_VAL0=0;
 800af3c:	4b5a      	ldr	r3, [pc, #360]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800af3e:	2200      	movs	r2, #0
 800af40:	809a      	strh	r2, [r3, #4]
											Blower_Signal( T4._DAC_VAL0);
 800af42:	4b59      	ldr	r3, [pc, #356]	; (800b0a8 <PC_SIMV_Task+0x2b0>)
 800af44:	889a      	ldrh	r2, [r3, #4]
 800af46:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <PC_SIMV_Task+0x2b4>)
 800af48:	609a      	str	r2, [r3, #8]
											if(T1.Assist_mode==0 )
 800af4a:	4b5b      	ldr	r3, [pc, #364]	; (800b0b8 <PC_SIMV_Task+0x2c0>)
 800af4c:	7cdb      	ldrb	r3, [r3, #19]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d13d      	bne.n	800afce <PC_SIMV_Task+0x1d6>
												if(T5._TRIG_TYPE==1)
 800af52:	4b5d      	ldr	r3, [pc, #372]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d11c      	bne.n	800af94 <PC_SIMV_Task+0x19c>
													if((Pressure_sensor._Pressure_Val<(T5.simv_trigger_offset-T5._TRIG_LMT)))
 800af5a:	4b58      	ldr	r3, [pc, #352]	; (800b0bc <PC_SIMV_Task+0x2c4>)
 800af5c:	791b      	ldrb	r3, [r3, #4]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af66:	4b58      	ldr	r3, [pc, #352]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800af68:	edd3 6a03 	vldr	s13, [r3, #12]
 800af6c:	4b56      	ldr	r3, [pc, #344]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800af6e:	885b      	ldrh	r3, [r3, #2]
 800af70:	ee07 3a90 	vmov	s15, r3
 800af74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af84:	d400      	bmi.n	800af88 <PC_SIMV_Task+0x190>
											if(T1.Assist_mode==0 )
 800af86:	e0a9      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
														trigger_valve_modification=1;
 800af88:	4b51      	ldr	r3, [pc, #324]	; (800b0d0 <PC_SIMV_Task+0x2d8>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	601a      	str	r2, [r3, #0]
														Switch_TASK_I_CYCLE();
 800af8e:	f000 f8d1 	bl	800b134 <Switch_TASK_I_CYCLE>
											if(T1.Assist_mode==0 )
 800af92:	e0a3      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
													if((Flow_Sensor_cal._Flow_Val>=(T5.simv_trigger_offset2+T5._TRIG_LMT)))
 800af94:	4b4f      	ldr	r3, [pc, #316]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800af96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800afa0:	4b49      	ldr	r3, [pc, #292]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800afa2:	edd3 6a04 	vldr	s13, [r3, #16]
 800afa6:	4b48      	ldr	r3, [pc, #288]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbe:	da00      	bge.n	800afc2 <PC_SIMV_Task+0x1ca>
											if(T1.Assist_mode==0 )
 800afc0:	e08c      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
														trigger_valve_modification=1;
 800afc2:	4b43      	ldr	r3, [pc, #268]	; (800b0d0 <PC_SIMV_Task+0x2d8>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	601a      	str	r2, [r3, #0]
														Switch_TASK_I_CYCLE();
 800afc8:	f000 f8b4 	bl	800b134 <Switch_TASK_I_CYCLE>
											if(T1.Assist_mode==0 )
 800afcc:	e086      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
											else if(T1.Assist_mode==1 )
 800afce:	4b3a      	ldr	r3, [pc, #232]	; (800b0b8 <PC_SIMV_Task+0x2c0>)
 800afd0:	7cdb      	ldrb	r3, [r3, #19]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	f040 8082 	bne.w	800b0dc <PC_SIMV_Task+0x2e4>
												if(T5._TRIG_TYPE==1)
 800afd8:	4b3b      	ldr	r3, [pc, #236]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11f      	bne.n	800b020 <PC_SIMV_Task+0x228>
													if((Pressure_sensor._Pressure_Val<(T5.simv_trigger_offset-T5._TRIG_LMT)))
 800afe0:	4b36      	ldr	r3, [pc, #216]	; (800b0bc <PC_SIMV_Task+0x2c4>)
 800afe2:	791b      	ldrb	r3, [r3, #4]
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800afec:	4b36      	ldr	r3, [pc, #216]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800afee:	edd3 6a03 	vldr	s13, [r3, #12]
 800aff2:	4b35      	ldr	r3, [pc, #212]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800aff4:	885b      	ldrh	r3, [r3, #2]
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800affe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00a:	d400      	bmi.n	800b00e <PC_SIMV_Task+0x216>
											if(T1.Assist_mode==0 )
 800b00c:	e066      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
														trigger_valve_modification=1;
 800b00e:	4b30      	ldr	r3, [pc, #192]	; (800b0d0 <PC_SIMV_Task+0x2d8>)
 800b010:	2201      	movs	r2, #1
 800b012:	601a      	str	r2, [r3, #0]
														Trigger_Flag=1;
 800b014:	4b30      	ldr	r3, [pc, #192]	; (800b0d8 <PC_SIMV_Task+0x2e0>)
 800b016:	2201      	movs	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
														Switch_TASK_I_CYCLE();
 800b01a:	f000 f88b 	bl	800b134 <Switch_TASK_I_CYCLE>
											if(T1.Assist_mode==0 )
 800b01e:	e05d      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
													if((Flow_Sensor_cal._Flow_Val>=(T5.simv_trigger_offset2+T5._TRIG_LMT)))
 800b020:	4b2c      	ldr	r3, [pc, #176]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800b022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b02c:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800b02e:	edd3 6a04 	vldr	s13, [r3, #16]
 800b032:	4b25      	ldr	r3, [pc, #148]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800b034:	885b      	ldrh	r3, [r3, #2]
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04a:	da00      	bge.n	800b04e <PC_SIMV_Task+0x256>
											if(T1.Assist_mode==0 )
 800b04c:	e046      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
														trigger_valve_modification=1;
 800b04e:	4b20      	ldr	r3, [pc, #128]	; (800b0d0 <PC_SIMV_Task+0x2d8>)
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
														Trigger_Flag=1;
 800b054:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <PC_SIMV_Task+0x2e0>)
 800b056:	2201      	movs	r2, #1
 800b058:	701a      	strb	r2, [r3, #0]
														Switch_TASK_I_CYCLE();
 800b05a:	f000 f86b 	bl	800b134 <Switch_TASK_I_CYCLE>
											if(T1.Assist_mode==0 )
 800b05e:	e03d      	b.n	800b0dc <PC_SIMV_Task+0x2e4>
											  if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 800b060:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800b062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b064:	2b00      	cmp	r3, #0
 800b066:	d008      	beq.n	800b07a <PC_SIMV_Task+0x282>
 800b068:	4b1a      	ldr	r3, [pc, #104]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800b06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06c:	f113 0f08 	cmn.w	r3, #8
 800b070:	db35      	blt.n	800b0de <PC_SIMV_Task+0x2e6>
 800b072:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800b074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b076:	2b00      	cmp	r3, #0
 800b078:	da31      	bge.n	800b0de <PC_SIMV_Task+0x2e6>
												  T5.simv_trigger_offset=Pressure_sensor._Pressure_Val;
 800b07a:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <PC_SIMV_Task+0x2c4>)
 800b07c:	791b      	ldrb	r3, [r3, #4]
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b086:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800b088:	edc3 7a03 	vstr	s15, [r3, #12]
												  T5.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 800b08c:	4b11      	ldr	r3, [pc, #68]	; (800b0d4 <PC_SIMV_Task+0x2dc>)
 800b08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b090:	ee07 3a90 	vmov	s15, r3
 800b094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <PC_SIMV_Task+0x2d0>)
 800b09a:	edc3 7a04 	vstr	s15, [r3, #16]
 800b09e:	e01e      	b.n	800b0de <PC_SIMV_Task+0x2e6>
 800b0a0:	20016cc8 	.word	0x20016cc8
 800b0a4:	40020400 	.word	0x40020400
 800b0a8:	20000094 	.word	0x20000094
 800b0ac:	40007400 	.word	0x40007400
 800b0b0:	20016df4 	.word	0x20016df4
 800b0b4:	20000114 	.word	0x20000114
 800b0b8:	20016d10 	.word	0x20016d10
 800b0bc:	20016cfc 	.word	0x20016cfc
 800b0c0:	200169a0 	.word	0x200169a0
 800b0c4:	20016a18 	.word	0x20016a18
 800b0c8:	20016aa4 	.word	0x20016aa4
 800b0cc:	20016d74 	.word	0x20016d74
 800b0d0:	20000314 	.word	0x20000314
 800b0d4:	20016c48 	.word	0x20016c48
 800b0d8:	20016b38 	.word	0x20016b38
											if(T1.Assist_mode==0 )
 800b0dc:	bf00      	nop
										if(  (Pressure_sensor._Pressure_Val > (T1._PEEP_Val))   &&  (S5.peep_process_done==1))
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <PC_SIMV_Task+0x324>)
 800b0e0:	791a      	ldrb	r2, [r3, #4]
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <PC_SIMV_Task+0x328>)
 800b0e4:	78db      	ldrb	r3, [r3, #3]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d912      	bls.n	800b110 <PC_SIMV_Task+0x318>
 800b0ea:	4b0e      	ldr	r3, [pc, #56]	; (800b124 <PC_SIMV_Task+0x32c>)
 800b0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d10e      	bne.n	800b110 <PC_SIMV_Task+0x318>
											pressure_acheived=0;
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <PC_SIMV_Task+0x330>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
											T4._DAC_VAL0=0;
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <PC_SIMV_Task+0x334>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	809a      	strh	r2, [r3, #4]
										    Blower_Signal( T4._DAC_VAL0);
 800b0fe:	4b0b      	ldr	r3, [pc, #44]	; (800b12c <PC_SIMV_Task+0x334>)
 800b100:	889a      	ldrh	r2, [r3, #4]
 800b102:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <PC_SIMV_Task+0x338>)
 800b104:	609a      	str	r2, [r3, #8]
				break;
 800b106:	e003      	b.n	800b110 <PC_SIMV_Task+0x318>
				break;
 800b108:	bf00      	nop
 800b10a:	e002      	b.n	800b112 <PC_SIMV_Task+0x31a>
				break;
 800b10c:	bf00      	nop
 800b10e:	e000      	b.n	800b112 <PC_SIMV_Task+0x31a>
				break;
 800b110:	bf00      	nop


		}
		vTaskDelay(2);
 800b112:	2002      	movs	r0, #2
 800b114:	f014 fbaa 	bl	801f86c <vTaskDelay>
		switch (_CurrentComputationState)
 800b118:	e672      	b.n	800ae00 <PC_SIMV_Task+0x8>
 800b11a:	bf00      	nop
 800b11c:	20016cfc 	.word	0x20016cfc
 800b120:	20016d10 	.word	0x20016d10
 800b124:	20016df4 	.word	0x20016df4
 800b128:	20000114 	.word	0x20000114
 800b12c:	20000094 	.word	0x20000094
 800b130:	40007400 	.word	0x40007400

0800b134 <Switch_TASK_I_CYCLE>:


}

void Switch_TASK_I_CYCLE()
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af02      	add	r7, sp, #8

	vTaskDelete(One_Time_Handler);
 800b13a:	4b0e      	ldr	r3, [pc, #56]	; (800b174 <Switch_TASK_I_CYCLE+0x40>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f014 fb04 	bl	801f74c <vTaskDelete>
	_I_TIMER = 0 ;
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <Switch_TASK_I_CYCLE+0x44>)
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
	_E_TIMER = 0 ;
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <Switch_TASK_I_CYCLE+0x48>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
	_CurrentWaveFormState = Generate_I_Wave ;
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <Switch_TASK_I_CYCLE+0x4c>)
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
	 xTaskCreate(One_Time_Task, "one-time-task", 256, NULL, 2, &One_Time_Handler);
 800b156:	4b07      	ldr	r3, [pc, #28]	; (800b174 <Switch_TASK_I_CYCLE+0x40>)
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	2302      	movs	r3, #2
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2300      	movs	r3, #0
 800b160:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b164:	4907      	ldr	r1, [pc, #28]	; (800b184 <Switch_TASK_I_CYCLE+0x50>)
 800b166:	4808      	ldr	r0, [pc, #32]	; (800b188 <Switch_TASK_I_CYCLE+0x54>)
 800b168:	f014 f9b9 	bl	801f4de <xTaskCreate>

}
 800b16c:	bf00      	nop
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20016d40 	.word	0x20016d40
 800b178:	20016df0 	.word	0x20016df0
 800b17c:	20016d74 	.word	0x20016d74
 800b180:	20016adc 	.word	0x20016adc
 800b184:	08021fa0 	.word	0x08021fa0
 800b188:	080140e9 	.word	0x080140e9

0800b18c <PC_SIMV_Pulse_I_Parameter>:

void PC_SIMV_Pulse_I_Parameter()
{
 800b18c:	b5b0      	push	{r4, r5, r7, lr}
 800b18e:	af00      	add	r7, sp, #0




	if(Trigger_Flag==0)
 800b190:	4b8a      	ldr	r3, [pc, #552]	; (800b3bc <PC_SIMV_Pulse_I_Parameter+0x230>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f040 80a0 	bne.w	800b2da <PC_SIMV_Pulse_I_Parameter+0x14e>
	{

		T5._TOLERANCE_EWAVE = T2._E_TIMER_HOLD - S5.Lock_delay;
 800b19a:	4b89      	ldr	r3, [pc, #548]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	4b88      	ldr	r3, [pc, #544]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b1a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	4b87      	ldr	r3, [pc, #540]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b1aa:	811a      	strh	r2, [r3, #8]
		T5._TRIG_WINDOW = T5._TOLERANCE_EWAVE* (((float) T5._TRIG_TIME * 10.00) / 100.00);
 800b1ac:	4b86      	ldr	r3, [pc, #536]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b1ae:	891b      	ldrh	r3, [r3, #8]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7f5 f95f 	bl	8000474 <__aeabi_i2d>
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	4b83      	ldr	r3, [pc, #524]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b1bc:	889b      	ldrh	r3, [r3, #4]
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c6:	ee17 0a90 	vmov	r0, s15
 800b1ca:	f7f5 f965 	bl	8000498 <__aeabi_f2d>
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	4b7e      	ldr	r3, [pc, #504]	; (800b3cc <PC_SIMV_Pulse_I_Parameter+0x240>)
 800b1d4:	f7f5 f9b8 	bl	8000548 <__aeabi_dmul>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4619      	mov	r1, r3
 800b1e0:	f04f 0200 	mov.w	r2, #0
 800b1e4:	4b7a      	ldr	r3, [pc, #488]	; (800b3d0 <PC_SIMV_Pulse_I_Parameter+0x244>)
 800b1e6:	f7f5 fad9 	bl	800079c <__aeabi_ddiv>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 f9a9 	bl	8000548 <__aeabi_dmul>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7f5 fc65 	bl	8000acc <__aeabi_d2uiz>
 800b202:	4603      	mov	r3, r0
 800b204:	b29a      	uxth	r2, r3
 800b206:	4b70      	ldr	r3, [pc, #448]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b208:	815a      	strh	r2, [r3, #10]
		now_check_breath=1;
 800b20a:	4b72      	ldr	r3, [pc, #456]	; (800b3d4 <PC_SIMV_Pulse_I_Parameter+0x248>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	701a      	strb	r2, [r3, #0]
	    _Control_Byte &= (uint8_t) (~(0x80));
 800b210:	4b71      	ldr	r3, [pc, #452]	; (800b3d8 <PC_SIMV_Pulse_I_Parameter+0x24c>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	4b6f      	ldr	r3, [pc, #444]	; (800b3d8 <PC_SIMV_Pulse_I_Parameter+0x24c>)
 800b21c:	701a      	strb	r2, [r3, #0]
	    vol.Volume = 0;
 800b21e:	4b6f      	ldr	r3, [pc, #444]	; (800b3dc <PC_SIMV_Pulse_I_Parameter+0x250>)
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	605a      	str	r2, [r3, #4]
	    Flow_sensor.AW_Flow_Offset=Flow_sensor.AW_flow_milli_volt;
 800b226:	4b6e      	ldr	r3, [pc, #440]	; (800b3e0 <PC_SIMV_Pulse_I_Parameter+0x254>)
 800b228:	88da      	ldrh	r2, [r3, #6]
 800b22a:	4b6d      	ldr	r3, [pc, #436]	; (800b3e0 <PC_SIMV_Pulse_I_Parameter+0x254>)
 800b22c:	801a      	strh	r2, [r3, #0]
	    V_max=0;
 800b22e:	4b6d      	ldr	r3, [pc, #436]	; (800b3e4 <PC_SIMV_Pulse_I_Parameter+0x258>)
 800b230:	2200      	movs	r2, #0
 800b232:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800b234:	2201      	movs	r2, #1
 800b236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b23a:	486b      	ldr	r0, [pc, #428]	; (800b3e8 <PC_SIMV_Pulse_I_Parameter+0x25c>)
 800b23c:	f00b fd32 	bl	8016ca4 <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 800b240:	4b6a      	ldr	r3, [pc, #424]	; (800b3ec <PC_SIMV_Pulse_I_Parameter+0x260>)
 800b242:	2200      	movs	r2, #0
 800b244:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 800b246:	4b5f      	ldr	r3, [pc, #380]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b248:	2200      	movs	r2, #0
 800b24a:	64da      	str	r2, [r3, #76]	; 0x4c

			T4._DAC_VAL0 = T4.starting_DAC;
 800b24c:	4b68      	ldr	r3, [pc, #416]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b24e:	edd3 7a00 	vldr	s15, [r3]
 800b252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b256:	ee17 3a90 	vmov	r3, s15
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	4b64      	ldr	r3, [pc, #400]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b25e:	809a      	strh	r2, [r3, #4]
			T4.Last_DAC = T4._DAC_VAL0;
 800b260:	4b63      	ldr	r3, [pc, #396]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b262:	889a      	ldrh	r2, [r3, #4]
 800b264:	4b62      	ldr	r3, [pc, #392]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b266:	80da      	strh	r2, [r3, #6]
			T3.ok = 1;
 800b268:	4b62      	ldr	r3, [pc, #392]	; (800b3f4 <PC_SIMV_Pulse_I_Parameter+0x268>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
			T3.cycle_done = 1;
 800b26e:	4b61      	ldr	r3, [pc, #388]	; (800b3f4 <PC_SIMV_Pulse_I_Parameter+0x268>)
 800b270:	2201      	movs	r2, #1
 800b272:	605a      	str	r2, [r3, #4]
			T4.last_result1 = T4.result1;
 800b274:	4b5e      	ldr	r3, [pc, #376]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	4a5d      	ldr	r2, [pc, #372]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b27a:	60d3      	str	r3, [r2, #12]
			Led_Alert();
 800b27c:	f7f7 fb32 	bl	80028e4 <Led_Alert>
			DAC_Value_Correction_SIMV();
 800b280:	f000 f9b4 	bl	800b5ec <DAC_Value_Correction_SIMV>
			Ending_Dac_value_correction_SIMV();
 800b284:	f000 fd08 	bl	800bc98 <Ending_Dac_value_correction_SIMV>
			S5.P_Max = 0;
 800b288:	4b4e      	ldr	r3, [pc, #312]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
			T3.Pip_Acheived_Flag = 0;
 800b28e:	4b59      	ldr	r3, [pc, #356]	; (800b3f4 <PC_SIMV_Pulse_I_Parameter+0x268>)
 800b290:	2200      	movs	r2, #0
 800b292:	609a      	str	r2, [r3, #8]
			S5.now_check = 0;
 800b294:	4b4b      	ldr	r3, [pc, #300]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b296:	2200      	movs	r2, #0
 800b298:	649a      	str	r2, [r3, #72]	; 0x48
			S5.P_Min = 60;
 800b29a:	4b4a      	ldr	r3, [pc, #296]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b29c:	223c      	movs	r2, #60	; 0x3c
 800b29e:	605a      	str	r2, [r3, #4]

		T3.cycle_done = 1;
 800b2a0:	4b54      	ldr	r3, [pc, #336]	; (800b3f4 <PC_SIMV_Pulse_I_Parameter+0x268>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	605a      	str	r2, [r3, #4]
		Peep_E_Valve_Lock_delay_Pc_SIMV();
 800b2a6:	f001 f803 	bl	800c2b0 <Peep_E_Valve_Lock_delay_Pc_SIMV>
		T4.ten_ms = 0;
 800b2aa:	4b51      	ldr	r3, [pc, #324]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	831a      	strh	r2, [r3, #24]
		T4.Acheived_ten_ms = 0;
 800b2b0:	4b4f      	ldr	r3, [pc, #316]	; (800b3f0 <PC_SIMV_Pulse_I_Parameter+0x264>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	839a      	strh	r2, [r3, #28]
		Alert_I_Time_Parameter();
 800b2b6:	f7f7 f963 	bl	8002580 <Alert_I_Time_Parameter>
		_I_TIMER = T2._I_TIMER_HOLD;
 800b2ba:	4b41      	ldr	r3, [pc, #260]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a4e      	ldr	r2, [pc, #312]	; (800b3f8 <PC_SIMV_Pulse_I_Parameter+0x26c>)
 800b2c0:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 800b2c2:	4b4e      	ldr	r3, [pc, #312]	; (800b3fc <PC_SIMV_Pulse_I_Parameter+0x270>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 800b2c8:	4b4d      	ldr	r3, [pc, #308]	; (800b400 <PC_SIMV_Pulse_I_Parameter+0x274>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
		vTaskDelay(T2._I_TIMER_HOLD);
 800b2ce:	4b3c      	ldr	r3, [pc, #240]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f014 faca 	bl	801f86c <vTaskDelay>
		_CurrentWaveFormState = Generate_E_Wave;
		_CurrentComputationState = Compute_I_Wave ;
		vTaskDelay(T2._I_TIMER_HOLD);

	}
}
 800b2d8:	e06d      	b.n	800b3b6 <PC_SIMV_Pulse_I_Parameter+0x22a>
	else if(Trigger_Flag==1)
 800b2da:	4b38      	ldr	r3, [pc, #224]	; (800b3bc <PC_SIMV_Pulse_I_Parameter+0x230>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d169      	bne.n	800b3b6 <PC_SIMV_Pulse_I_Parameter+0x22a>
		T5._TOLERANCE_EWAVE = T2._E_TIMER_HOLD - S5.Lock_delay;
 800b2e2:	4b37      	ldr	r3, [pc, #220]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	4b36      	ldr	r3, [pc, #216]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b2ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b2f2:	811a      	strh	r2, [r3, #8]
		T5._TRIG_WINDOW = T5._TOLERANCE_EWAVE* (((float) T5._TRIG_TIME * 10.00) / 100.00);
 800b2f4:	4b34      	ldr	r3, [pc, #208]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b2f6:	891b      	ldrh	r3, [r3, #8]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7f5 f8bb 	bl	8000474 <__aeabi_i2d>
 800b2fe:	4604      	mov	r4, r0
 800b300:	460d      	mov	r5, r1
 800b302:	4b31      	ldr	r3, [pc, #196]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b304:	889b      	ldrh	r3, [r3, #4]
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30e:	ee17 0a90 	vmov	r0, s15
 800b312:	f7f5 f8c1 	bl	8000498 <__aeabi_f2d>
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	4b2c      	ldr	r3, [pc, #176]	; (800b3cc <PC_SIMV_Pulse_I_Parameter+0x240>)
 800b31c:	f7f5 f914 	bl	8000548 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4610      	mov	r0, r2
 800b326:	4619      	mov	r1, r3
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	4b28      	ldr	r3, [pc, #160]	; (800b3d0 <PC_SIMV_Pulse_I_Parameter+0x244>)
 800b32e:	f7f5 fa35 	bl	800079c <__aeabi_ddiv>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f5 f905 	bl	8000548 <__aeabi_dmul>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4610      	mov	r0, r2
 800b344:	4619      	mov	r1, r3
 800b346:	f7f5 fbc1 	bl	8000acc <__aeabi_d2uiz>
 800b34a:	4603      	mov	r3, r0
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	4b1e      	ldr	r3, [pc, #120]	; (800b3c8 <PC_SIMV_Pulse_I_Parameter+0x23c>)
 800b350:	815a      	strh	r2, [r3, #10]
		now_check_breath=1;
 800b352:	4b20      	ldr	r3, [pc, #128]	; (800b3d4 <PC_SIMV_Pulse_I_Parameter+0x248>)
 800b354:	2201      	movs	r2, #1
 800b356:	701a      	strb	r2, [r3, #0]
		 _Control_Byte &= (uint8_t) (~(0x80));
 800b358:	4b1f      	ldr	r3, [pc, #124]	; (800b3d8 <PC_SIMV_Pulse_I_Parameter+0x24c>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b360:	b2da      	uxtb	r2, r3
 800b362:	4b1d      	ldr	r3, [pc, #116]	; (800b3d8 <PC_SIMV_Pulse_I_Parameter+0x24c>)
 800b364:	701a      	strb	r2, [r3, #0]
		 vol.Volume = 0;
 800b366:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <PC_SIMV_Pulse_I_Parameter+0x250>)
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	605a      	str	r2, [r3, #4]
		 V_max=0;
 800b36e:	4b1d      	ldr	r3, [pc, #116]	; (800b3e4 <PC_SIMV_Pulse_I_Parameter+0x258>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800b374:	2201      	movs	r2, #1
 800b376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b37a:	481b      	ldr	r0, [pc, #108]	; (800b3e8 <PC_SIMV_Pulse_I_Parameter+0x25c>)
 800b37c:	f00b fc92 	bl	8016ca4 <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 800b380:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <PC_SIMV_Pulse_I_Parameter+0x260>)
 800b382:	2200      	movs	r2, #0
 800b384:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <PC_SIMV_Pulse_I_Parameter+0x238>)
 800b388:	2200      	movs	r2, #0
 800b38a:	64da      	str	r2, [r3, #76]	; 0x4c
		Led_Alert();
 800b38c:	f7f7 faaa 	bl	80028e4 <Led_Alert>
		Peep_E_Valve_Lock_delay_Pc_SIMV();
 800b390:	f000 ff8e 	bl	800c2b0 <Peep_E_Valve_Lock_delay_Pc_SIMV>
		Alert_I_Time_Parameter();
 800b394:	f7f7 f8f4 	bl	8002580 <Alert_I_Time_Parameter>
		_I_TIMER = T2._I_TIMER_HOLD;
 800b398:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a16      	ldr	r2, [pc, #88]	; (800b3f8 <PC_SIMV_Pulse_I_Parameter+0x26c>)
 800b39e:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 800b3a0:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <PC_SIMV_Pulse_I_Parameter+0x270>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 800b3a6:	4b16      	ldr	r3, [pc, #88]	; (800b400 <PC_SIMV_Pulse_I_Parameter+0x274>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
		vTaskDelay(T2._I_TIMER_HOLD);
 800b3ac:	4b04      	ldr	r3, [pc, #16]	; (800b3c0 <PC_SIMV_Pulse_I_Parameter+0x234>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f014 fa5b 	bl	801f86c <vTaskDelay>
}
 800b3b6:	bf00      	nop
 800b3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20016b38 	.word	0x20016b38
 800b3c0:	2001688c 	.word	0x2001688c
 800b3c4:	20016df4 	.word	0x20016df4
 800b3c8:	20016aa4 	.word	0x20016aa4
 800b3cc:	40240000 	.word	0x40240000
 800b3d0:	40590000 	.word	0x40590000
 800b3d4:	20000feb 	.word	0x20000feb
 800b3d8:	20016e59 	.word	0x20016e59
 800b3dc:	20016d44 	.word	0x20016d44
 800b3e0:	20016914 	.word	0x20016914
 800b3e4:	20016d60 	.word	0x20016d60
 800b3e8:	40020400 	.word	0x40020400
 800b3ec:	20016af4 	.word	0x20016af4
 800b3f0:	20000094 	.word	0x20000094
 800b3f4:	20016bf4 	.word	0x20016bf4
 800b3f8:	20016df0 	.word	0x20016df0
 800b3fc:	20016adc 	.word	0x20016adc
 800b400:	20016cc8 	.word	0x20016cc8

0800b404 <PC_SIMV_Pulse_E_Parameter>:



void PC_SIMV_Pulse_E_Parameter()
{
 800b404:	b5b0      	push	{r4, r5, r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af02      	add	r7, sp, #8
	if(Trigger_Flag==0)
 800b40a:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <PC_SIMV_Pulse_E_Parameter+0x140>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d123      	bne.n	800b45a <PC_SIMV_Pulse_E_Parameter+0x56>
	{
		_Control_Byte |= (uint8_t) 0x80;
 800b412:	4b4d      	ldr	r3, [pc, #308]	; (800b548 <PC_SIMV_Pulse_E_Parameter+0x144>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	4b4a      	ldr	r3, [pc, #296]	; (800b548 <PC_SIMV_Pulse_E_Parameter+0x144>)
 800b41e:	701a      	strb	r2, [r3, #0]
		T4._DAC_VAL0=0;
 800b420:	4b4a      	ldr	r3, [pc, #296]	; (800b54c <PC_SIMV_Pulse_E_Parameter+0x148>)
 800b422:	2200      	movs	r2, #0
 800b424:	809a      	strh	r2, [r3, #4]
		_E_TIMER = T2._E_TIMER_HOLD;
 800b426:	4b4a      	ldr	r3, [pc, #296]	; (800b550 <PC_SIMV_Pulse_E_Parameter+0x14c>)
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	4a4a      	ldr	r2, [pc, #296]	; (800b554 <PC_SIMV_Pulse_E_Parameter+0x150>)
 800b42c:	6013      	str	r3, [r2, #0]
		_E_TIMER_ACHEIVED = 0;
 800b42e:	4b4a      	ldr	r3, [pc, #296]	; (800b558 <PC_SIMV_Pulse_E_Parameter+0x154>)
 800b430:	2200      	movs	r2, #0
 800b432:	801a      	strh	r2, [r3, #0]
		S5.lock = 1;
 800b434:	4b49      	ldr	r3, [pc, #292]	; (800b55c <PC_SIMV_Pulse_E_Parameter+0x158>)
 800b436:	2201      	movs	r2, #1
 800b438:	645a      	str	r2, [r3, #68]	; 0x44
		Alert_E_Time_Parameter();
 800b43a:	f7f7 f8ed 	bl	8002618 <Alert_E_Time_Parameter>
		adjust_servo();
 800b43e:	f7ff fa53 	bl	800a8e8 <adjust_servo>
		_CurrentWaveFormState = Generate_I_Wave;
 800b442:	4b47      	ldr	r3, [pc, #284]	; (800b560 <PC_SIMV_Pulse_E_Parameter+0x15c>)
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_E_Wave ;
 800b448:	4b46      	ldr	r3, [pc, #280]	; (800b564 <PC_SIMV_Pulse_E_Parameter+0x160>)
 800b44a:	2201      	movs	r2, #1
 800b44c:	701a      	strb	r2, [r3, #0]
		vTaskDelay(T2._E_TIMER_HOLD);
 800b44e:	4b40      	ldr	r3, [pc, #256]	; (800b550 <PC_SIMV_Pulse_E_Parameter+0x14c>)
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	f014 fa0a 	bl	801f86c <vTaskDelay>
		_CurrentWaveFormState = Generate_I_Wave;
		_CurrentComputationState = Compute_E_Wave ;
		vTaskDelay(T2._E_TIMER_HOLD);
	}

}
 800b458:	e070      	b.n	800b53c <PC_SIMV_Pulse_E_Parameter+0x138>
	else if(Trigger_Flag==1)
 800b45a:	4b3a      	ldr	r3, [pc, #232]	; (800b544 <PC_SIMV_Pulse_E_Parameter+0x140>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d16c      	bne.n	800b53c <PC_SIMV_Pulse_E_Parameter+0x138>
		_Control_Byte |= (uint8_t) 0x80;
 800b462:	4b39      	ldr	r3, [pc, #228]	; (800b548 <PC_SIMV_Pulse_E_Parameter+0x144>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	4b36      	ldr	r3, [pc, #216]	; (800b548 <PC_SIMV_Pulse_E_Parameter+0x144>)
 800b46e:	701a      	strb	r2, [r3, #0]
		TempSetpoint = T1._PEEP_Val;
 800b470:	4b3d      	ldr	r3, [pc, #244]	; (800b568 <PC_SIMV_Pulse_E_Parameter+0x164>)
 800b472:	78db      	ldrb	r3, [r3, #3]
 800b474:	4618      	mov	r0, r3
 800b476:	f7f4 ffed 	bl	8000454 <__aeabi_ui2d>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	493b      	ldr	r1, [pc, #236]	; (800b56c <PC_SIMV_Pulse_E_Parameter+0x168>)
 800b480:	e9c1 2300 	strd	r2, r3, [r1]
		PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800b484:	4b3a      	ldr	r3, [pc, #232]	; (800b570 <PC_SIMV_Pulse_E_Parameter+0x16c>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f4 ffe3 	bl	8000454 <__aeabi_ui2d>
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	4b38      	ldr	r3, [pc, #224]	; (800b574 <PC_SIMV_Pulse_E_Parameter+0x170>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f7f4 ffdc 	bl	8000454 <__aeabi_ui2d>
 800b49c:	4b36      	ldr	r3, [pc, #216]	; (800b578 <PC_SIMV_Pulse_E_Parameter+0x174>)
 800b49e:	ed93 7b00 	vldr	d7, [r3]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	eeb0 2a47 	vmov.f32	s4, s14
 800b4ae:	eef0 2a67 	vmov.f32	s5, s15
 800b4b2:	ec41 0b11 	vmov	d1, r0, r1
 800b4b6:	ec45 4b10 	vmov	d0, r4, r5
 800b4ba:	4b2c      	ldr	r3, [pc, #176]	; (800b56c <PC_SIMV_Pulse_E_Parameter+0x168>)
 800b4bc:	4a2f      	ldr	r2, [pc, #188]	; (800b57c <PC_SIMV_Pulse_E_Parameter+0x178>)
 800b4be:	4930      	ldr	r1, [pc, #192]	; (800b580 <PC_SIMV_Pulse_E_Parameter+0x17c>)
 800b4c0:	4830      	ldr	r0, [pc, #192]	; (800b584 <PC_SIMV_Pulse_E_Parameter+0x180>)
 800b4c2:	f009 f96d 	bl	80147a0 <PID>
		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	482e      	ldr	r0, [pc, #184]	; (800b584 <PC_SIMV_Pulse_E_Parameter+0x180>)
 800b4ca:	f009 fa9f 	bl	8014a0c <PID_SetMode>
		PID_SetSampleTime(&TPID, Time);
 800b4ce:	4b2e      	ldr	r3, [pc, #184]	; (800b588 <PC_SIMV_Pulse_E_Parameter+0x184>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	482b      	ldr	r0, [pc, #172]	; (800b584 <PC_SIMV_Pulse_E_Parameter+0x180>)
 800b4d6:	f009 fc15 	bl	8014d04 <PID_SetSampleTime>
		PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800b4da:	4b2c      	ldr	r3, [pc, #176]	; (800b58c <PC_SIMV_Pulse_E_Parameter+0x188>)
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f4 ffb8 	bl	8000454 <__aeabi_ui2d>
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	4b29      	ldr	r3, [pc, #164]	; (800b590 <PC_SIMV_Pulse_E_Parameter+0x18c>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7f4 ffb1 	bl	8000454 <__aeabi_ui2d>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	ec43 2b11 	vmov	d1, r2, r3
 800b4fa:	ec45 4b10 	vmov	d0, r4, r5
 800b4fe:	4821      	ldr	r0, [pc, #132]	; (800b584 <PC_SIMV_Pulse_E_Parameter+0x180>)
 800b500:	f009 faa2 	bl	8014a48 <PID_SetOutputLimits>
		_E_TIMER = T2._E_TIMER_HOLD;
 800b504:	4b12      	ldr	r3, [pc, #72]	; (800b550 <PC_SIMV_Pulse_E_Parameter+0x14c>)
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	4a12      	ldr	r2, [pc, #72]	; (800b554 <PC_SIMV_Pulse_E_Parameter+0x150>)
 800b50a:	6013      	str	r3, [r2, #0]
		_E_TIMER_ACHEIVED = 0;
 800b50c:	4b12      	ldr	r3, [pc, #72]	; (800b558 <PC_SIMV_Pulse_E_Parameter+0x154>)
 800b50e:	2200      	movs	r2, #0
 800b510:	801a      	strh	r2, [r3, #0]
		S5.lock = 1;
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <PC_SIMV_Pulse_E_Parameter+0x158>)
 800b514:	2201      	movs	r2, #1
 800b516:	645a      	str	r2, [r3, #68]	; 0x44
		Trigger_Flag=0;
 800b518:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <PC_SIMV_Pulse_E_Parameter+0x140>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
		Alert_E_Time_Parameter();
 800b51e:	f7f7 f87b 	bl	8002618 <Alert_E_Time_Parameter>
		adjust_servo();
 800b522:	f7ff f9e1 	bl	800a8e8 <adjust_servo>
		_CurrentWaveFormState = Generate_I_Wave;
 800b526:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <PC_SIMV_Pulse_E_Parameter+0x15c>)
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_E_Wave ;
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <PC_SIMV_Pulse_E_Parameter+0x160>)
 800b52e:	2201      	movs	r2, #1
 800b530:	701a      	strb	r2, [r3, #0]
		vTaskDelay(T2._E_TIMER_HOLD);
 800b532:	4b07      	ldr	r3, [pc, #28]	; (800b550 <PC_SIMV_Pulse_E_Parameter+0x14c>)
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f014 f998 	bl	801f86c <vTaskDelay>
}
 800b53c:	bf00      	nop
 800b53e:	46bd      	mov	sp, r7
 800b540:	bdb0      	pop	{r4, r5, r7, pc}
 800b542:	bf00      	nop
 800b544:	20016b38 	.word	0x20016b38
 800b548:	20016e59 	.word	0x20016e59
 800b54c:	20000094 	.word	0x20000094
 800b550:	2001688c 	.word	0x2001688c
 800b554:	20016d74 	.word	0x20016d74
 800b558:	20016eb4 	.word	0x20016eb4
 800b55c:	20016df4 	.word	0x20016df4
 800b560:	20016adc 	.word	0x20016adc
 800b564:	20016cc8 	.word	0x20016cc8
 800b568:	20016d10 	.word	0x20016d10
 800b56c:	20016e80 	.word	0x20016e80
 800b570:	20000136 	.word	0x20000136
 800b574:	20000137 	.word	0x20000137
 800b578:	20000138 	.word	0x20000138
 800b57c:	20016a18 	.word	0x20016a18
 800b580:	20016a98 	.word	0x20016a98
 800b584:	200169a0 	.word	0x200169a0
 800b588:	20000140 	.word	0x20000140
 800b58c:	2000012e 	.word	0x2000012e
 800b590:	20000130 	.word	0x20000130

0800b594 <PC_SIMV_PID_Task>:


void PC_SIMV_PID_Task(void *argument)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		T4.ten_ms++;
 800b59c:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <PC_SIMV_PID_Task+0x48>)
 800b59e:	8b1b      	ldrh	r3, [r3, #24]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <PC_SIMV_PID_Task+0x48>)
 800b5a6:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 3)
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <PC_SIMV_PID_Task+0x4c>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d10f      	bne.n	800b5d0 <PC_SIMV_PID_Task+0x3c>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 800b5b0:	4b0c      	ldr	r3, [pc, #48]	; (800b5e4 <PC_SIMV_PID_Task+0x50>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <PC_SIMV_PID_Task+0x3c>
				{
					if(O2._FIO2_Val==100)
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <PC_SIMV_PID_Task+0x54>)
 800b5ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b5be:	2b64      	cmp	r3, #100	; 0x64
 800b5c0:	d104      	bne.n	800b5cc <PC_SIMV_PID_Task+0x38>
					{
						T4._DAC_VAL0=400;
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <PC_SIMV_PID_Task+0x48>)
 800b5c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5c8:	809a      	strh	r2, [r3, #4]
 800b5ca:	e001      	b.n	800b5d0 <PC_SIMV_PID_Task+0x3c>
					}
					else
					{
					    pip_value_correction_SIMV();
 800b5cc:	f000 f846 	bl	800b65c <pip_value_correction_SIMV>
					}
				}
			 }
		vTaskDelay(T4.PID_task_delay);
 800b5d0:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <PC_SIMV_PID_Task+0x48>)
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f014 f949 	bl	801f86c <vTaskDelay>
		T4.ten_ms++;
 800b5da:	e7df      	b.n	800b59c <PC_SIMV_PID_Task+0x8>
 800b5dc:	20000094 	.word	0x20000094
 800b5e0:	20016ae0 	.word	0x20016ae0
 800b5e4:	20016cc8 	.word	0x20016cc8
 800b5e8:	20000048 	.word	0x20000048

0800b5ec <DAC_Value_Correction_SIMV>:

}


void DAC_Value_Correction_SIMV()
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0



		 if(T4.Acheived_ms < (T2.ramp_time_percentage -40))
 800b5f0:	4b17      	ldr	r3, [pc, #92]	; (800b650 <DAC_Value_Correction_SIMV+0x64>)
 800b5f2:	8b5b      	ldrh	r3, [r3, #26]
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5fc:	4b15      	ldr	r3, [pc, #84]	; (800b654 <DAC_Value_Correction_SIMV+0x68>)
 800b5fe:	edd3 7a03 	vldr	s15, [r3, #12]
 800b602:	eddf 6a15 	vldr	s13, [pc, #84]	; 800b658 <DAC_Value_Correction_SIMV+0x6c>
 800b606:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b60a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b612:	d502      	bpl.n	800b61a <DAC_Value_Correction_SIMV+0x2e>
	     {
			 Pip_Acheived_Early_SIMV();
 800b614:	f000 fc14 	bl	800be40 <Pip_Acheived_Early_SIMV>
 800b618:	e016      	b.n	800b648 <DAC_Value_Correction_SIMV+0x5c>

	     }


	       else if(T4.Acheived_ms > (T2.ramp_time_percentage +40))
 800b61a:	4b0d      	ldr	r3, [pc, #52]	; (800b650 <DAC_Value_Correction_SIMV+0x64>)
 800b61c:	8b5b      	ldrh	r3, [r3, #26]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <DAC_Value_Correction_SIMV+0x68>)
 800b628:	edd3 7a03 	vldr	s15, [r3, #12]
 800b62c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b658 <DAC_Value_Correction_SIMV+0x6c>
 800b630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63c:	dd02      	ble.n	800b644 <DAC_Value_Correction_SIMV+0x58>
	       {
	    	   Pip_Acheived_Slowly_SIMV();
 800b63e:	f000 fd3b 	bl	800c0b8 <Pip_Acheived_Slowly_SIMV>
 800b642:	e001      	b.n	800b648 <DAC_Value_Correction_SIMV+0x5c>
	       }

	       else
	       {
	    	   Pip_Acheived_Normally_SIMV();
 800b644:	f000 fdf8 	bl	800c238 <Pip_Acheived_Normally_SIMV>

	       }

		     Pip_Not_Acheived_SIMV();
 800b648:	f000 fe04 	bl	800c254 <Pip_Not_Acheived_SIMV>

}
 800b64c:	bf00      	nop
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000094 	.word	0x20000094
 800b654:	2001688c 	.word	0x2001688c
 800b658:	42200000 	.word	0x42200000

0800b65c <pip_value_correction_SIMV>:

void pip_value_correction_SIMV()
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (T1._PIP_Val ))
 800b660:	4b38      	ldr	r3, [pc, #224]	; (800b744 <pip_value_correction_SIMV+0xe8>)
 800b662:	791a      	ldrb	r2, [r3, #4]
 800b664:	4b38      	ldr	r3, [pc, #224]	; (800b748 <pip_value_correction_SIMV+0xec>)
 800b666:	789b      	ldrb	r3, [r3, #2]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d324      	bcc.n	800b6b6 <pip_value_correction_SIMV+0x5a>
	{
		T3.cycle_done = 0;
 800b66c:	4b37      	ldr	r3, [pc, #220]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b66e:	2200      	movs	r2, #0
 800b670:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b678:	4835      	ldr	r0, [pc, #212]	; (800b750 <pip_value_correction_SIMV+0xf4>)
 800b67a:	f00b fb13 	bl	8016ca4 <HAL_GPIO_WritePin>
		if(T3.ok==1)
 800b67e:	4b33      	ldr	r3, [pc, #204]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d117      	bne.n	800b6b6 <pip_value_correction_SIMV+0x5a>
		{
			T4.Acheived_ten_ms = T4.ten_ms;
 800b686:	4b33      	ldr	r3, [pc, #204]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b688:	8b1a      	ldrh	r2, [r3, #24]
 800b68a:	4b32      	ldr	r3, [pc, #200]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b68c:	839a      	strh	r2, [r3, #28]
			T4.Acheived_ms=(T4.Acheived_ten_ms*T4.PID_task_delay);
 800b68e:	4b31      	ldr	r3, [pc, #196]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b690:	8b9a      	ldrh	r2, [r3, #28]
 800b692:	4b30      	ldr	r3, [pc, #192]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b696:	b29b      	uxth	r3, r3
 800b698:	fb12 f303 	smulbb	r3, r2, r3
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6a0:	835a      	strh	r2, [r3, #26]
			T3.ok=0;
 800b6a2:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
			T3.Pip_Acheived_Flag=1;
 800b6a8:	4b28      	ldr	r3, [pc, #160]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	609a      	str	r2, [r3, #8]
			T4._DAC_VAL0 = T4.Last_DAC;
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6b0:	88da      	ldrh	r2, [r3, #6]
 800b6b2:	4b28      	ldr	r3, [pc, #160]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6b4:	809a      	strh	r2, [r3, #4]
		}
	}
	if (T3.cycle_done == 1)
 800b6b6:	4b25      	ldr	r3, [pc, #148]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d140      	bne.n	800b740 <pip_value_correction_SIMV+0xe4>
	{
		if (T4.Last_DAC >= T4.Ending_Dac)
 800b6be:	4b25      	ldr	r3, [pc, #148]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6c0:	88db      	ldrh	r3, [r3, #6]
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6ca:	4b22      	ldr	r3, [pc, #136]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	db0d      	blt.n	800b6f6 <pip_value_correction_SIMV+0x9a>
		{
			T4.Last_DAC = T4.Ending_Dac;
 800b6da:	4b1e      	ldr	r3, [pc, #120]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e4:	ee17 3a90 	vmov	r3, s15
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	4b1a      	ldr	r3, [pc, #104]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6ec:	80da      	strh	r2, [r3, #6]
			T3.cycle_done = 0;
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <pip_value_correction_SIMV+0xf0>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	605a      	str	r2, [r3, #4]
			T4.Last_DAC = T4._DAC_VAL0;
			T4._DAC_VAL0=T4.Last_DAC + (T4.incrementing_Dac_value_10ms );
		}
	}

}
 800b6f4:	e024      	b.n	800b740 <pip_value_correction_SIMV+0xe4>
		else if (T4.Last_DAC < T4.Ending_Dac)
 800b6f6:	4b17      	ldr	r3, [pc, #92]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b702:	4b14      	ldr	r3, [pc, #80]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b704:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b710:	d400      	bmi.n	800b714 <pip_value_correction_SIMV+0xb8>
}
 800b712:	e015      	b.n	800b740 <pip_value_correction_SIMV+0xe4>
			T4.Last_DAC = T4._DAC_VAL0;
 800b714:	4b0f      	ldr	r3, [pc, #60]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b716:	889a      	ldrh	r2, [r3, #4]
 800b718:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b71a:	80da      	strh	r2, [r3, #6]
			T4._DAC_VAL0=T4.Last_DAC + (T4.incrementing_Dac_value_10ms );
 800b71c:	4b0d      	ldr	r3, [pc, #52]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b71e:	88db      	ldrh	r3, [r3, #6]
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b72a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b72e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b736:	ee17 3a90 	vmov	r3, s15
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <pip_value_correction_SIMV+0xf8>)
 800b73e:	809a      	strh	r2, [r3, #4]
}
 800b740:	bf00      	nop
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20016cfc 	.word	0x20016cfc
 800b748:	20016d10 	.word	0x20016d10
 800b74c:	20016bf4 	.word	0x20016bf4
 800b750:	40020400 	.word	0x40020400
 800b754:	20000094 	.word	0x20000094

0800b758 <PC_SIMV_PARAMETERS>:




void PC_SIMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800b758:	b5b0      	push	{r4, r5, r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]


			T1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	791a      	ldrb	r2, [r3, #4]
 800b764:	4bb0      	ldr	r3, [pc, #704]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b766:	709a      	strb	r2, [r3, #2]
			T1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	795a      	ldrb	r2, [r3, #5]
 800b76c:	4bae      	ldr	r3, [pc, #696]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b76e:	70da      	strb	r2, [r3, #3]
			T1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7a5b      	ldrb	r3, [r3, #9]
 800b774:	461a      	mov	r2, r3
 800b776:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b77e:	461a      	mov	r2, r3
 800b780:	4ba9      	ldr	r3, [pc, #676]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b782:	605a      	str	r2, [r3, #4]
			T1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7a1b      	ldrb	r3, [r3, #8]
 800b788:	091b      	lsrs	r3, r3, #4
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	4ba6      	ldr	r3, [pc, #664]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b790:	609a      	str	r2, [r3, #8]
			T1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7a1b      	ldrb	r3, [r3, #8]
 800b796:	f003 030f 	and.w	r3, r3, #15
 800b79a:	4aa3      	ldr	r2, [pc, #652]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b79c:	60d3      	str	r3, [r2, #12]
			T1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7adb      	ldrb	r3, [r3, #11]
 800b7a2:	091b      	lsrs	r3, r3, #4
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	4b9f      	ldr	r3, [pc, #636]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7aa:	821a      	strh	r2, [r3, #16]
			T1.RR=RX_PARAM_CMD_PACKET->_RR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	7a5a      	ldrb	r2, [r3, #9]
 800b7b0:	4b9d      	ldr	r3, [pc, #628]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7b2:	749a      	strb	r2, [r3, #18]



			T5._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT) >> 4;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	7b9b      	ldrb	r3, [r3, #14]
 800b7b8:	091b      	lsrs	r3, r3, #4
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	4b9b      	ldr	r3, [pc, #620]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b7c0:	801a      	strh	r2, [r3, #0]
			T5._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7b9b      	ldrb	r3, [r3, #14]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	4b97      	ldr	r3, [pc, #604]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b7d0:	805a      	strh	r2, [r3, #2]
			T5._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7adb      	ldrb	r3, [r3, #11]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	4b93      	ldr	r3, [pc, #588]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b7e0:	809a      	strh	r2, [r3, #4]

			T1.Assist_mode = 0x0F & (RX_PARAM_CMD_PACKET->_T_HIGH);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7bdb      	ldrb	r3, [r3, #15]
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	4b8e      	ldr	r3, [pc, #568]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7ee:	74da      	strb	r2, [r3, #19]

			T2._I_TIMER_HOLD = (T1.I_Time * (T1.CycleTime / (T1.I_Time +T1.E_Time)));
 800b7f0:	4b8d      	ldr	r3, [pc, #564]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	4a8c      	ldr	r2, [pc, #560]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7f6:	6851      	ldr	r1, [r2, #4]
 800b7f8:	4a8b      	ldr	r2, [pc, #556]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7fa:	6890      	ldr	r0, [r2, #8]
 800b7fc:	4a8a      	ldr	r2, [pc, #552]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b7fe:	68d2      	ldr	r2, [r2, #12]
 800b800:	4402      	add	r2, r0
 800b802:	fbb1 f2f2 	udiv	r2, r1, r2
 800b806:	fb02 f303 	mul.w	r3, r2, r3
 800b80a:	4a89      	ldr	r2, [pc, #548]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b80c:	6013      	str	r3, [r2, #0]
			T2._E_TIMER_HOLD = (T1.E_Time * (T1.CycleTime / (T1.I_Time + T1.E_Time)));
 800b80e:	4b86      	ldr	r3, [pc, #536]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	4a85      	ldr	r2, [pc, #532]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b814:	6851      	ldr	r1, [r2, #4]
 800b816:	4a84      	ldr	r2, [pc, #528]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b818:	6890      	ldr	r0, [r2, #8]
 800b81a:	4a83      	ldr	r2, [pc, #524]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b81c:	68d2      	ldr	r2, [r2, #12]
 800b81e:	4402      	add	r2, r0
 800b820:	fbb1 f2f2 	udiv	r2, r1, r2
 800b824:	fb02 f303 	mul.w	r3, r2, r3
 800b828:	4a81      	ldr	r2, [pc, #516]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b82a:	6053      	str	r3, [r2, #4]
			T2.ramp_time=(T1.RT_Value*10);
 800b82c:	4b7e      	ldr	r3, [pc, #504]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b82e:	8a1b      	ldrh	r3, [r3, #16]
 800b830:	461a      	mov	r2, r3
 800b832:	0092      	lsls	r2, r2, #2
 800b834:	4413      	add	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	b29a      	uxth	r2, r3
 800b83a:	4b7d      	ldr	r3, [pc, #500]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b83c:	811a      	strh	r2, [r3, #8]
			T2.ramp_time_percentage = ((float)T2.ramp_time/100.00)*(T2._I_TIMER_HOLD) ;
 800b83e:	4b7c      	ldr	r3, [pc, #496]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b840:	891b      	ldrh	r3, [r3, #8]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	ee17 0a90 	vmov	r0, s15
 800b84e:	f7f4 fe23 	bl	8000498 <__aeabi_f2d>
 800b852:	f04f 0200 	mov.w	r2, #0
 800b856:	4b77      	ldr	r3, [pc, #476]	; (800ba34 <PC_SIMV_PARAMETERS+0x2dc>)
 800b858:	f7f4 ffa0 	bl	800079c <__aeabi_ddiv>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4614      	mov	r4, r2
 800b862:	461d      	mov	r5, r3
 800b864:	4b72      	ldr	r3, [pc, #456]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f4 fdf3 	bl	8000454 <__aeabi_ui2d>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4620      	mov	r0, r4
 800b874:	4629      	mov	r1, r5
 800b876:	f7f4 fe67 	bl	8000548 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4610      	mov	r0, r2
 800b880:	4619      	mov	r1, r3
 800b882:	f7f5 f943 	bl	8000b0c <__aeabi_d2f>
 800b886:	4603      	mov	r3, r0
 800b888:	4a69      	ldr	r2, [pc, #420]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b88a:	60d3      	str	r3, [r2, #12]
			T4.Ending_Dac=17.1129 * (T1._PIP_Val) + 587.7390+((1/70)*200);
 800b88c:	4b66      	ldr	r3, [pc, #408]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b88e:	789b      	ldrb	r3, [r3, #2]
 800b890:	4618      	mov	r0, r3
 800b892:	f7f4 fdef 	bl	8000474 <__aeabi_i2d>
 800b896:	a35e      	add	r3, pc, #376	; (adr r3, 800ba10 <PC_SIMV_PARAMETERS+0x2b8>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f4 fe54 	bl	8000548 <__aeabi_dmul>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	a35b      	add	r3, pc, #364	; (adr r3, 800ba18 <PC_SIMV_PARAMETERS+0x2c0>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fc95 	bl	80001dc <__adddf3>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f04f 0200 	mov.w	r2, #0
 800b8be:	f04f 0300 	mov.w	r3, #0
 800b8c2:	f7f4 fc8b 	bl	80001dc <__adddf3>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f7f5 f91d 	bl	8000b0c <__aeabi_d2f>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4a58      	ldr	r2, [pc, #352]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b8d6:	6293      	str	r3, [r2, #40]	; 0x28
			T4.incrementing_Dac_value_10ms=70;
 800b8d8:	4b57      	ldr	r3, [pc, #348]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b8da:	4a58      	ldr	r2, [pc, #352]	; (800ba3c <PC_SIMV_PARAMETERS+0x2e4>)
 800b8dc:	62da      	str	r2, [r3, #44]	; 0x2c
			T4.Acheived_ms=(T2.ramp_time_percentage*2);
 800b8de:	4b54      	ldr	r3, [pc, #336]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b8e0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b8e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ec:	ee17 3a90 	vmov	r3, s15
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	4b51      	ldr	r3, [pc, #324]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b8f4:	835a      	strh	r2, [r3, #26]

			T5._CALC_TRIG_VAL = ((float) E_TIME_TOLERANCE / 100.00)* (T2._E_TIMER_HOLD);
 800b8f6:	4b4e      	ldr	r3, [pc, #312]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f4 fdaa 	bl	8000454 <__aeabi_ui2d>
 800b900:	a347      	add	r3, pc, #284	; (adr r3, 800ba20 <PC_SIMV_PARAMETERS+0x2c8>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fe1f 	bl	8000548 <__aeabi_dmul>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	4610      	mov	r0, r2
 800b910:	4619      	mov	r1, r3
 800b912:	f7f5 f8db 	bl	8000acc <__aeabi_d2uiz>
 800b916:	4603      	mov	r3, r0
 800b918:	b29a      	uxth	r2, r3
 800b91a:	4b44      	ldr	r3, [pc, #272]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b91c:	80da      	strh	r2, [r3, #6]
			T5._TOLERANCE_EWAVE = T2._E_TIMER_HOLD - T5._CALC_TRIG_VAL;
 800b91e:	4b44      	ldr	r3, [pc, #272]	; (800ba30 <PC_SIMV_PARAMETERS+0x2d8>)
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	b29a      	uxth	r2, r3
 800b924:	4b41      	ldr	r3, [pc, #260]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b926:	88db      	ldrh	r3, [r3, #6]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b92e:	811a      	strh	r2, [r3, #8]
			T5._TRIG_WINDOW = T5._TOLERANCE_EWAVE* (((float) T5._TRIG_TIME * 10.00) / 100.00);
 800b930:	4b3e      	ldr	r3, [pc, #248]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b932:	891b      	ldrh	r3, [r3, #8]
 800b934:	4618      	mov	r0, r3
 800b936:	f7f4 fd9d 	bl	8000474 <__aeabi_i2d>
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	4b3b      	ldr	r3, [pc, #236]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b940:	889b      	ldrh	r3, [r3, #4]
 800b942:	ee07 3a90 	vmov	s15, r3
 800b946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94a:	ee17 0a90 	vmov	r0, s15
 800b94e:	f7f4 fda3 	bl	8000498 <__aeabi_f2d>
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	4b3a      	ldr	r3, [pc, #232]	; (800ba40 <PC_SIMV_PARAMETERS+0x2e8>)
 800b958:	f7f4 fdf6 	bl	8000548 <__aeabi_dmul>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4610      	mov	r0, r2
 800b962:	4619      	mov	r1, r3
 800b964:	f04f 0200 	mov.w	r2, #0
 800b968:	4b32      	ldr	r3, [pc, #200]	; (800ba34 <PC_SIMV_PARAMETERS+0x2dc>)
 800b96a:	f7f4 ff17 	bl	800079c <__aeabi_ddiv>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fde7 	bl	8000548 <__aeabi_dmul>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4610      	mov	r0, r2
 800b980:	4619      	mov	r1, r3
 800b982:	f7f5 f8a3 	bl	8000acc <__aeabi_d2uiz>
 800b986:	4603      	mov	r3, r0
 800b988:	b29a      	uxth	r2, r3
 800b98a:	4b28      	ldr	r3, [pc, #160]	; (800ba2c <PC_SIMV_PARAMETERS+0x2d4>)
 800b98c:	815a      	strh	r2, [r3, #10]

			T3.Pip_Acheived_Flag=0;
 800b98e:	4b2d      	ldr	r3, [pc, #180]	; (800ba44 <PC_SIMV_PARAMETERS+0x2ec>)
 800b990:	2200      	movs	r2, #0
 800b992:	609a      	str	r2, [r3, #8]
			T4.nack=1;
 800b994:	4b28      	ldr	r3, [pc, #160]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b996:	2201      	movs	r2, #1
 800b998:	631a      	str	r2, [r3, #48]	; 0x30
			T4.PID_task_delay=10;
 800b99a:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b99c:	220a      	movs	r2, #10
 800b99e:	635a      	str	r2, [r3, #52]	; 0x34
			T4.result1_error=0;
 800b9a0:	4b25      	ldr	r3, [pc, #148]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	63da      	str	r2, [r3, #60]	; 0x3c
			T4.last_result1=0;
 800b9a6:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	60da      	str	r2, [r3, #12]
			T4.PID_task_delay_lock=0;
 800b9ae:	4b22      	ldr	r3, [pc, #136]	; (800ba38 <PC_SIMV_PARAMETERS+0x2e0>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=T1._PEEP_Val/2;
 800b9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b9b6:	78db      	ldrb	r3, [r3, #3]
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9c4:	4b20      	ldr	r3, [pc, #128]	; (800ba48 <PC_SIMV_PARAMETERS+0x2f0>)
 800b9c6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			S5.peep_process_done=0;
 800b9ca:	4b1f      	ldr	r3, [pc, #124]	; (800ba48 <PC_SIMV_PARAMETERS+0x2f0>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 800b9d0:	4b1d      	ldr	r3, [pc, #116]	; (800ba48 <PC_SIMV_PARAMETERS+0x2f0>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44

			A.PEEP_VAL=T1._PEEP_Val;
 800b9d6:	4b14      	ldr	r3, [pc, #80]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b9d8:	78da      	ldrb	r2, [r3, #3]
 800b9da:	4b1c      	ldr	r3, [pc, #112]	; (800ba4c <PC_SIMV_PARAMETERS+0x2f4>)
 800b9dc:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 800b9de:	f7f6 fe7f 	bl	80026e0 <Alert_Receiving_Parameter>
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7a9a      	ldrb	r2, [r3, #10]
 800b9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ba50 <PC_SIMV_PARAMETERS+0x2f8>)
 800b9e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._PIP_Val=T1._PIP_Val;
 800b9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <PC_SIMV_PARAMETERS+0x2d0>)
 800b9ee:	789a      	ldrb	r2, [r3, #2]
 800b9f0:	4b17      	ldr	r3, [pc, #92]	; (800ba50 <PC_SIMV_PARAMETERS+0x2f8>)
 800b9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			O2._Pressure_Base=1;
 800b9f6:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <PC_SIMV_PARAMETERS+0x2f8>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=0;
 800b9fc:	4b14      	ldr	r3, [pc, #80]	; (800ba50 <PC_SIMV_PARAMETERS+0x2f8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 800ba02:	f7ff f84d 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=0;
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <PC_SIMV_PARAMETERS+0x2fc>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba0e:	e023      	b.n	800ba58 <PC_SIMV_PARAMETERS+0x300>
 800ba10:	03afb7e9 	.word	0x03afb7e9
 800ba14:	40311ce7 	.word	0x40311ce7
 800ba18:	78d4fdf4 	.word	0x78d4fdf4
 800ba1c:	40825de9 	.word	0x40825de9
 800ba20:	33333333 	.word	0x33333333
 800ba24:	3fd33333 	.word	0x3fd33333
 800ba28:	20016d10 	.word	0x20016d10
 800ba2c:	20016aa4 	.word	0x20016aa4
 800ba30:	2001688c 	.word	0x2001688c
 800ba34:	40590000 	.word	0x40590000
 800ba38:	20000094 	.word	0x20000094
 800ba3c:	428c0000 	.word	0x428c0000
 800ba40:	40240000 	.word	0x40240000
 800ba44:	20016bf4 	.word	0x20016bf4
 800ba48:	20016df4 	.word	0x20016df4
 800ba4c:	20016a2c 	.word	0x20016a2c
 800ba50:	20000048 	.word	0x20000048
 800ba54:	20016960 	.word	0x20016960
			S5.Lock_delay=300;
 800ba58:	4b64      	ldr	r3, [pc, #400]	; (800bbec <PC_SIMV_PARAMETERS+0x494>)
 800ba5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ba5e:	879a      	strh	r2, [r3, #60]	; 0x3c

			trigger_valve_modification=0;
 800ba60:	4b63      	ldr	r3, [pc, #396]	; (800bbf0 <PC_SIMV_PARAMETERS+0x498>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]

			Dac1=300;
 800ba66:	4b63      	ldr	r3, [pc, #396]	; (800bbf4 <PC_SIMV_PARAMETERS+0x49c>)
 800ba68:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ba6c:	801a      	strh	r2, [r3, #0]
			Dac2=1200;
 800ba6e:	4b62      	ldr	r3, [pc, #392]	; (800bbf8 <PC_SIMV_PARAMETERS+0x4a0>)
 800ba70:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ba74:	801a      	strh	r2, [r3, #0]

			kp=10;
 800ba76:	4b61      	ldr	r3, [pc, #388]	; (800bbfc <PC_SIMV_PARAMETERS+0x4a4>)
 800ba78:	220a      	movs	r2, #10
 800ba7a:	701a      	strb	r2, [r3, #0]
			ki=10;
 800ba7c:	4b60      	ldr	r3, [pc, #384]	; (800bc00 <PC_SIMV_PARAMETERS+0x4a8>)
 800ba7e:	220a      	movs	r2, #10
 800ba80:	701a      	strb	r2, [r3, #0]
			kd=1;
 800ba82:	4960      	ldr	r1, [pc, #384]	; (800bc04 <PC_SIMV_PARAMETERS+0x4ac>)
 800ba84:	f04f 0200 	mov.w	r2, #0
 800ba88:	4b5f      	ldr	r3, [pc, #380]	; (800bc08 <PC_SIMV_PARAMETERS+0x4b0>)
 800ba8a:	e9c1 2300 	strd	r2, r3, [r1]
			Time=50;
 800ba8e:	4b5f      	ldr	r3, [pc, #380]	; (800bc0c <PC_SIMV_PARAMETERS+0x4b4>)
 800ba90:	2232      	movs	r2, #50	; 0x32
 800ba92:	601a      	str	r2, [r3, #0]
			Speed=50;
 800ba94:	4b5e      	ldr	r3, [pc, #376]	; (800bc10 <PC_SIMV_PARAMETERS+0x4b8>)
 800ba96:	2232      	movs	r2, #50	; 0x32
 800ba98:	601a      	str	r2, [r3, #0]

			_60_Seconds=60000;				//breath
 800ba9a:	4b5e      	ldr	r3, [pc, #376]	; (800bc14 <PC_SIMV_PARAMETERS+0x4bc>)
 800ba9c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800baa0:	801a      	strh	r2, [r3, #0]
			 now_check_breath=0;			//breath
 800baa2:	4b5d      	ldr	r3, [pc, #372]	; (800bc18 <PC_SIMV_PARAMETERS+0x4c0>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
			 Breath=0;
 800baa8:	4b5c      	ldr	r3, [pc, #368]	; (800bc1c <PC_SIMV_PARAMETERS+0x4c4>)
 800baaa:	2200      	movs	r2, #0
 800baac:	701a      	strb	r2, [r3, #0]

			vTaskSuspend(Vc_mode_Handler);
 800baae:	4b5c      	ldr	r3, [pc, #368]	; (800bc20 <PC_SIMV_PARAMETERS+0x4c8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f013 ff0e 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 800bab8:	4b5a      	ldr	r3, [pc, #360]	; (800bc24 <PC_SIMV_PARAMETERS+0x4cc>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	f013 ff09 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(pc_mode_Handler);
 800bac2:	4b59      	ldr	r3, [pc, #356]	; (800bc28 <PC_SIMV_PARAMETERS+0x4d0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f013 ff04 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 800bacc:	4b57      	ldr	r3, [pc, #348]	; (800bc2c <PC_SIMV_PARAMETERS+0x4d4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f013 feff 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_simv_mode_Handler);
 800bad6:	4b56      	ldr	r3, [pc, #344]	; (800bc30 <PC_SIMV_PARAMETERS+0x4d8>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4618      	mov	r0, r3
 800badc:	f013 fefa 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(Vc_simv_Pid_Handler);
 800bae0:	4b54      	ldr	r3, [pc, #336]	; (800bc34 <PC_SIMV_PARAMETERS+0x4dc>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f013 fef5 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Psv_Handler);
 800baea:	4b53      	ldr	r3, [pc, #332]	; (800bc38 <PC_SIMV_PARAMETERS+0x4e0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f013 fef0 	bl	801f8d4 <vTaskSuspend>
		   	vTaskSuspend(Psv_Pid_Handler);
 800baf4:	4b51      	ldr	r3, [pc, #324]	; (800bc3c <PC_SIMV_PARAMETERS+0x4e4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f013 feeb 	bl	801f8d4 <vTaskSuspend>

		   	vTaskSuspend(Cpap_Handler);
 800bafe:	4b50      	ldr	r3, [pc, #320]	; (800bc40 <PC_SIMV_PARAMETERS+0x4e8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f013 fee6 	bl	801f8d4 <vTaskSuspend>

		   	vTaskSuspend(BiPap_Handler);
 800bb08:	4b4e      	ldr	r3, [pc, #312]	; (800bc44 <PC_SIMV_PARAMETERS+0x4ec>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f013 fee1 	bl	801f8d4 <vTaskSuspend>
		   	vTaskSuspend(BiPap_Pid_Handler);
 800bb12:	4b4d      	ldr	r3, [pc, #308]	; (800bc48 <PC_SIMV_PARAMETERS+0x4f0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f013 fedc 	bl	801f8d4 <vTaskSuspend>

		   	vTaskSuspend(APRV_Handler);
 800bb1c:	4b4b      	ldr	r3, [pc, #300]	; (800bc4c <PC_SIMV_PARAMETERS+0x4f4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f013 fed7 	bl	801f8d4 <vTaskSuspend>
		   	vTaskSuspend(APRV_one_Handler);
 800bb26:	4b4a      	ldr	r3, [pc, #296]	; (800bc50 <PC_SIMV_PARAMETERS+0x4f8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f013 fed2 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800bb30:	4b48      	ldr	r3, [pc, #288]	; (800bc54 <PC_SIMV_PARAMETERS+0x4fc>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f013 fecd 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800bb3a:	4b47      	ldr	r3, [pc, #284]	; (800bc58 <PC_SIMV_PARAMETERS+0x500>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f013 fec8 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800bb44:	4b45      	ldr	r3, [pc, #276]	; (800bc5c <PC_SIMV_PARAMETERS+0x504>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f013 fec3 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800bb4e:	4b44      	ldr	r3, [pc, #272]	; (800bc60 <PC_SIMV_PARAMETERS+0x508>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f013 febe 	bl	801f8d4 <vTaskSuspend>

		    vTaskSuspend(HFNC_Handler);
 800bb58:	4b42      	ldr	r3, [pc, #264]	; (800bc64 <PC_SIMV_PARAMETERS+0x50c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f013 feb9 	bl	801f8d4 <vTaskSuspend>
		    vTaskSuspend(Suction_Handler);
 800bb62:	4b41      	ldr	r3, [pc, #260]	; (800bc68 <PC_SIMV_PARAMETERS+0x510>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f013 feb4 	bl	801f8d4 <vTaskSuspend>

		    vTaskResume(Pc_simv_Mode_Handler);
 800bb6c:	4b3f      	ldr	r3, [pc, #252]	; (800bc6c <PC_SIMV_PARAMETERS+0x514>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f013 ff73 	bl	801fa5c <vTaskResume>
			vTaskResume(Pc_simv_Mode_Pid_Handler);
 800bb76:	4b3e      	ldr	r3, [pc, #248]	; (800bc70 <PC_SIMV_PARAMETERS+0x518>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f013 ff6e 	bl	801fa5c <vTaskResume>
			vTaskResume(One_Time_Handler);
 800bb80:	4b3c      	ldr	r3, [pc, #240]	; (800bc74 <PC_SIMV_PARAMETERS+0x51c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f013 ff69 	bl	801fa5c <vTaskResume>
			vTaskResume(alert_Handler);
 800bb8a:	4b3b      	ldr	r3, [pc, #236]	; (800bc78 <PC_SIMV_PARAMETERS+0x520>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f013 ff64 	bl	801fa5c <vTaskResume>

			if(O2._FIO2_Val>21)							// FOR O2
 800bb94:	4b39      	ldr	r3, [pc, #228]	; (800bc7c <PC_SIMV_PARAMETERS+0x524>)
 800bb96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bb9a:	2b15      	cmp	r3, #21
 800bb9c:	d905      	bls.n	800bbaa <PC_SIMV_PARAMETERS+0x452>
			{
				vTaskResume(Oxygen_Handler);
 800bb9e:	4b38      	ldr	r3, [pc, #224]	; (800bc80 <PC_SIMV_PARAMETERS+0x528>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f013 ff5a 	bl	801fa5c <vTaskResume>
 800bba8:	e00f      	b.n	800bbca <PC_SIMV_PARAMETERS+0x472>
			}
			else if(O2._FIO2_Val<=21)
 800bbaa:	4b34      	ldr	r3, [pc, #208]	; (800bc7c <PC_SIMV_PARAMETERS+0x524>)
 800bbac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bbb0:	2b15      	cmp	r3, #21
 800bbb2:	d80a      	bhi.n	800bbca <PC_SIMV_PARAMETERS+0x472>
			{
				O2.O2_DAC=0;
 800bbb4:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <PC_SIMV_PARAMETERS+0x524>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	811a      	strh	r2, [r3, #8]
				Parkar_valve_Signal(0);
 800bbba:	4b32      	ldr	r3, [pc, #200]	; (800bc84 <PC_SIMV_PARAMETERS+0x52c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	615a      	str	r2, [r3, #20]
				vTaskSuspend(Oxygen_Handler);
 800bbc0:	4b2f      	ldr	r3, [pc, #188]	; (800bc80 <PC_SIMV_PARAMETERS+0x528>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f013 fe85 	bl	801f8d4 <vTaskSuspend>
			}
			_CurrentMode=SIMVPC;
 800bbca:	4b2f      	ldr	r3, [pc, #188]	; (800bc88 <PC_SIMV_PARAMETERS+0x530>)
 800bbcc:	2203      	movs	r2, #3
 800bbce:	701a      	strb	r2, [r3, #0]
			_CurrentBackupMode = IdleState;
 800bbd0:	4b2e      	ldr	r3, [pc, #184]	; (800bc8c <PC_SIMV_PARAMETERS+0x534>)
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 800bbd6:	4b2e      	ldr	r3, [pc, #184]	; (800bc90 <PC_SIMV_PARAMETERS+0x538>)
 800bbd8:	2201      	movs	r2, #1
 800bbda:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 800bbdc:	4b2d      	ldr	r3, [pc, #180]	; (800bc94 <PC_SIMV_PARAMETERS+0x53c>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	701a      	strb	r2, [r3, #0]




}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bdb0      	pop	{r4, r5, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20016df4 	.word	0x20016df4
 800bbf0:	20000314 	.word	0x20000314
 800bbf4:	2000012e 	.word	0x2000012e
 800bbf8:	20000130 	.word	0x20000130
 800bbfc:	20000136 	.word	0x20000136
 800bc00:	20000137 	.word	0x20000137
 800bc04:	20000138 	.word	0x20000138
 800bc08:	3ff00000 	.word	0x3ff00000
 800bc0c:	20000140 	.word	0x20000140
 800bc10:	20000144 	.word	0x20000144
 800bc14:	20000fe8 	.word	0x20000fe8
 800bc18:	20000feb 	.word	0x20000feb
 800bc1c:	20000fea 	.word	0x20000fea
 800bc20:	20016d78 	.word	0x20016d78
 800bc24:	2001695c 	.word	0x2001695c
 800bc28:	20016a84 	.word	0x20016a84
 800bc2c:	20016a28 	.word	0x20016a28
 800bc30:	20016c44 	.word	0x20016c44
 800bc34:	20016ad0 	.word	0x20016ad0
 800bc38:	20016bf0 	.word	0x20016bf0
 800bc3c:	20016a74 	.word	0x20016a74
 800bc40:	20016bb8 	.word	0x20016bb8
 800bc44:	20016a24 	.word	0x20016a24
 800bc48:	20016878 	.word	0x20016878
 800bc4c:	20016c00 	.word	0x20016c00
 800bc50:	20016bc8 	.word	0x20016bc8
 800bc54:	20016bcc 	.word	0x20016bcc
 800bc58:	20016d3c 	.word	0x20016d3c
 800bc5c:	20016d7c 	.word	0x20016d7c
 800bc60:	20016a7c 	.word	0x20016a7c
 800bc64:	20016a20 	.word	0x20016a20
 800bc68:	20016e5c 	.word	0x20016e5c
 800bc6c:	20016e60 	.word	0x20016e60
 800bc70:	20016e8c 	.word	0x20016e8c
 800bc74:	20016d40 	.word	0x20016d40
 800bc78:	20016ad4 	.word	0x20016ad4
 800bc7c:	20000048 	.word	0x20000048
 800bc80:	20016958 	.word	0x20016958
 800bc84:	40007400 	.word	0x40007400
 800bc88:	20016c04 	.word	0x20016c04
 800bc8c:	2000012c 	.word	0x2000012c
 800bc90:	20016adc 	.word	0x20016adc
 800bc94:	20016cc8 	.word	0x20016cc8

0800bc98 <Ending_Dac_value_correction_SIMV>:




void Ending_Dac_value_correction_SIMV()
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0

	if(T1.RR>=30 || T2.ramp_time>80 || (T1.E_Time>4))
 800bc9c:	4b5f      	ldr	r3, [pc, #380]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bc9e:	7c9b      	ldrb	r3, [r3, #18]
 800bca0:	2b1d      	cmp	r3, #29
 800bca2:	d807      	bhi.n	800bcb4 <Ending_Dac_value_correction_SIMV+0x1c>
 800bca4:	4b5e      	ldr	r3, [pc, #376]	; (800be20 <Ending_Dac_value_correction_SIMV+0x188>)
 800bca6:	891b      	ldrh	r3, [r3, #8]
 800bca8:	2b50      	cmp	r3, #80	; 0x50
 800bcaa:	d803      	bhi.n	800bcb4 <Ending_Dac_value_correction_SIMV+0x1c>
 800bcac:	4b5b      	ldr	r3, [pc, #364]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	2b04      	cmp	r3, #4
 800bcb2:	d961      	bls.n	800bd78 <Ending_Dac_value_correction_SIMV+0xe0>
    {
		    if(S5.P_Max>(T1._PIP_Val))
 800bcb4:	4b5b      	ldr	r3, [pc, #364]	; (800be24 <Ending_Dac_value_correction_SIMV+0x18c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a58      	ldr	r2, [pc, #352]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bcba:	7892      	ldrb	r2, [r2, #2]
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	dd28      	ble.n	800bd12 <Ending_Dac_value_correction_SIMV+0x7a>
			{
		    	T4.pmax_error1++;
 800bcc0:	4b59      	ldr	r3, [pc, #356]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	4a58      	ldr	r2, [pc, #352]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcc8:	6253      	str	r3, [r2, #36]	; 0x24
		    	T4.pmax_error2=0;
 800bcca:	4b57      	ldr	r3, [pc, #348]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	621a      	str	r2, [r3, #32]
		    	if(T4.pmax_error1>2)
 800bcd0:	4b55      	ldr	r3, [pc, #340]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	f340 809a 	ble.w	800be0e <Ending_Dac_value_correction_SIMV+0x176>
		    	{
		    	T4.Ending_Dac=T4.Ending_Dac-1;
 800bcda:	4b53      	ldr	r3, [pc, #332]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcdc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bce8:	4b4f      	ldr	r3, [pc, #316]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				T4.pmax_error1=0;
 800bcee:	4b4e      	ldr	r3, [pc, #312]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	625a      	str	r2, [r3, #36]	; 0x24
					if(T4.Ending_Dac<=500)
 800bcf4:	4b4c      	ldr	r3, [pc, #304]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bcf6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bcfa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800be2c <Ending_Dac_value_correction_SIMV+0x194>
 800bcfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd06:	d900      	bls.n	800bd0a <Ending_Dac_value_correction_SIMV+0x72>
		    if(S5.P_Max>(T1._PIP_Val))
 800bd08:	e081      	b.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
						T4.Ending_Dac=500;
 800bd0a:	4b47      	ldr	r3, [pc, #284]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd0c:	4a48      	ldr	r2, [pc, #288]	; (800be30 <Ending_Dac_value_correction_SIMV+0x198>)
 800bd0e:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 800bd10:	e07d      	b.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
		    	}
			}
			else if(S5.P_Max<(T1._PIP_Val))
 800bd12:	4b44      	ldr	r3, [pc, #272]	; (800be24 <Ending_Dac_value_correction_SIMV+0x18c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a41      	ldr	r2, [pc, #260]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bd18:	7892      	ldrb	r2, [r2, #2]
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	da27      	bge.n	800bd6e <Ending_Dac_value_correction_SIMV+0xd6>
			{
				T4.pmax_error2++;
 800bd1e:	4b42      	ldr	r3, [pc, #264]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	3301      	adds	r3, #1
 800bd24:	4a40      	ldr	r2, [pc, #256]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd26:	6213      	str	r3, [r2, #32]
				T4.pmax_error1=0;
 800bd28:	4b3f      	ldr	r3, [pc, #252]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	625a      	str	r2, [r3, #36]	; 0x24
				if(T4.pmax_error2>2)
 800bd2e:	4b3e      	ldr	r3, [pc, #248]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	dd6b      	ble.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
				{
				T4.Ending_Dac=T4.Ending_Dac+1;
 800bd36:	4b3c      	ldr	r3, [pc, #240]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bd3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd44:	4b38      	ldr	r3, [pc, #224]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd46:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				T4.pmax_error2=0;
 800bd4a:	4b37      	ldr	r3, [pc, #220]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	621a      	str	r2, [r3, #32]
				if(T4.Ending_Dac>=4095)
 800bd50:	4b35      	ldr	r3, [pc, #212]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bd56:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800be34 <Ending_Dac_value_correction_SIMV+0x19c>
 800bd5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd62:	da00      	bge.n	800bd66 <Ending_Dac_value_correction_SIMV+0xce>
		    if(S5.P_Max>(T1._PIP_Val))
 800bd64:	e053      	b.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
					 T4.Ending_Dac=4095;
 800bd66:	4b30      	ldr	r3, [pc, #192]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd68:	4a33      	ldr	r2, [pc, #204]	; (800be38 <Ending_Dac_value_correction_SIMV+0x1a0>)
 800bd6a:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 800bd6c:	e04f      	b.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
				}
			}
			else
			{
				T4.Ending_Dac=T4.Ending_Dac;
 800bd6e:	4b2e      	ldr	r3, [pc, #184]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd72:	4a2d      	ldr	r2, [pc, #180]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd74:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 800bd76:	e04a      	b.n	800be0e <Ending_Dac_value_correction_SIMV+0x176>
			}
    }

 else if(T1.RR<30 || T2.ramp_time<=80)
 800bd78:	4b28      	ldr	r3, [pc, #160]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bd7a:	7c9b      	ldrb	r3, [r3, #18]
 800bd7c:	2b1d      	cmp	r3, #29
 800bd7e:	d903      	bls.n	800bd88 <Ending_Dac_value_correction_SIMV+0xf0>
 800bd80:	4b27      	ldr	r3, [pc, #156]	; (800be20 <Ending_Dac_value_correction_SIMV+0x188>)
 800bd82:	891b      	ldrh	r3, [r3, #8]
 800bd84:	2b50      	cmp	r3, #80	; 0x50
 800bd86:	d843      	bhi.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
 {
	if(S5._Pip_Avg_val_int>T1._PIP_Val)
 800bd88:	4b26      	ldr	r3, [pc, #152]	; (800be24 <Ending_Dac_value_correction_SIMV+0x18c>)
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a23      	ldr	r2, [pc, #140]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bd8e:	7892      	ldrb	r2, [r2, #2]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	dd18      	ble.n	800bdc6 <Ending_Dac_value_correction_SIMV+0x12e>
	{
		T4.Ending_Dac=T4.Ending_Dac-5;
 800bd94:	4b24      	ldr	r3, [pc, #144]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bd96:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bd9a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800bd9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bda2:	4b21      	ldr	r3, [pc, #132]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bda4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(T4.Ending_Dac<=500)
 800bda8:	4b1f      	ldr	r3, [pc, #124]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bdaa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bdae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800be2c <Ending_Dac_value_correction_SIMV+0x194>
 800bdb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdba:	d900      	bls.n	800bdbe <Ending_Dac_value_correction_SIMV+0x126>
	{
		T4.Ending_Dac=T4.Ending_Dac;

	}
 }
}
 800bdbc:	e028      	b.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
			T4.Ending_Dac=500;
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <Ending_Dac_value_correction_SIMV+0x198>)
 800bdc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bdc4:	e024      	b.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
	else if(S5._Pip_Avg_val_int<T1._PIP_Val)
 800bdc6:	4b17      	ldr	r3, [pc, #92]	; (800be24 <Ending_Dac_value_correction_SIMV+0x18c>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	4a14      	ldr	r2, [pc, #80]	; (800be1c <Ending_Dac_value_correction_SIMV+0x184>)
 800bdcc:	7892      	ldrb	r2, [r2, #2]
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	da18      	bge.n	800be04 <Ending_Dac_value_correction_SIMV+0x16c>
		T4.Ending_Dac=T4.Ending_Dac+5;
 800bdd2:	4b15      	ldr	r3, [pc, #84]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bdd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bdd8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800bddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bde0:	4b11      	ldr	r3, [pc, #68]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bde2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(T4.Ending_Dac>=4095)
 800bde6:	4b10      	ldr	r3, [pc, #64]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bde8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bdec:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800be34 <Ending_Dac_value_correction_SIMV+0x19c>
 800bdf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf8:	da00      	bge.n	800bdfc <Ending_Dac_value_correction_SIMV+0x164>
}
 800bdfa:	e009      	b.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
			T4.Ending_Dac=4095;
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800bdfe:	4a0e      	ldr	r2, [pc, #56]	; (800be38 <Ending_Dac_value_correction_SIMV+0x1a0>)
 800be00:	629a      	str	r2, [r3, #40]	; 0x28
}
 800be02:	e005      	b.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
		T4.Ending_Dac=T4.Ending_Dac;
 800be04:	4b08      	ldr	r3, [pc, #32]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800be06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be08:	4a07      	ldr	r2, [pc, #28]	; (800be28 <Ending_Dac_value_correction_SIMV+0x190>)
 800be0a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800be0c:	e000      	b.n	800be10 <Ending_Dac_value_correction_SIMV+0x178>
		    if(S5.P_Max>(T1._PIP_Val))
 800be0e:	bf00      	nop
}
 800be10:	bf00      	nop
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	20016d10 	.word	0x20016d10
 800be20:	2001688c 	.word	0x2001688c
 800be24:	20016df4 	.word	0x20016df4
 800be28:	20000094 	.word	0x20000094
 800be2c:	43fa0000 	.word	0x43fa0000
 800be30:	43fa0000 	.word	0x43fa0000
 800be34:	457ff000 	.word	0x457ff000
 800be38:	457ff000 	.word	0x457ff000
 800be3c:	00000000 	.word	0x00000000

0800be40 <Pip_Acheived_Early_SIMV>:


void Pip_Acheived_Early_SIMV()
{
 800be40:	b580      	push	{r7, lr}
 800be42:	af00      	add	r7, sp, #0

		     if(T3.Pip_Acheived_Flag==0)
 800be44:	4b90      	ldr	r3, [pc, #576]	; (800c088 <Pip_Acheived_Early_SIMV+0x248>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8115 	beq.w	800c078 <Pip_Acheived_Early_SIMV+0x238>

			 }
			 else
			 {

			    T4.result1=(T4.Acheived_ms/T2.ramp_time_percentage)*100;
 800be4e:	4b8f      	ldr	r3, [pc, #572]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be50:	8b5b      	ldrh	r3, [r3, #26]
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800be5a:	4b8d      	ldr	r3, [pc, #564]	; (800c090 <Pip_Acheived_Early_SIMV+0x250>)
 800be5c:	ed93 7a03 	vldr	s14, [r3, #12]
 800be60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be64:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800c094 <Pip_Acheived_Early_SIMV+0x254>
 800be68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be6c:	4b87      	ldr	r3, [pc, #540]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be6e:	edc3 7a02 	vstr	s15, [r3, #8]
			    if(T4.result1<=70)
 800be72:	4b86      	ldr	r3, [pc, #536]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be74:	edd3 7a02 	vldr	s15, [r3, #8]
 800be78:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800c098 <Pip_Acheived_Early_SIMV+0x258>
 800be7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be84:	d81a      	bhi.n	800bebc <Pip_Acheived_Early_SIMV+0x7c>
			    {
			    	T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms-5;
 800be86:	4b81      	ldr	r3, [pc, #516]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800be8c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800be90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be94:	4b7d      	ldr	r3, [pc, #500]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(T4.incrementing_Dac_value_10ms<=50)
 800be9a:	4b7c      	ldr	r3, [pc, #496]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800be9c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800bea0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c09c <Pip_Acheived_Early_SIMV+0x25c>
 800bea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beac:	d86c      	bhi.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    	{
			    		T4.incrementing_Dac_value_10ms=50;
 800beae:	4b77      	ldr	r3, [pc, #476]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800beb0:	4a7b      	ldr	r2, [pc, #492]	; (800c0a0 <Pip_Acheived_Early_SIMV+0x260>)
 800beb2:	62da      	str	r2, [r3, #44]	; 0x2c
			    		T4.nack=0;
 800beb4:	4b75      	ldr	r3, [pc, #468]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	631a      	str	r2, [r3, #48]	; 0x30
 800beba:	e065      	b.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    	}
			    }

			    else if(T4.result1<=80 && T4.result1>70)
 800bebc:	4b73      	ldr	r3, [pc, #460]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bebe:	edd3 7a02 	vldr	s15, [r3, #8]
 800bec2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800c0a4 <Pip_Acheived_Early_SIMV+0x264>
 800bec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	d824      	bhi.n	800bf1a <Pip_Acheived_Early_SIMV+0xda>
 800bed0:	4b6e      	ldr	r3, [pc, #440]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bed2:	edd3 7a02 	vldr	s15, [r3, #8]
 800bed6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800c098 <Pip_Acheived_Early_SIMV+0x258>
 800beda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	dd1a      	ble.n	800bf1a <Pip_Acheived_Early_SIMV+0xda>
			    {
			    	T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms-(0.5);
 800bee4:	4b69      	ldr	r3, [pc, #420]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bee6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800beea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800beee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bef2:	4b66      	ldr	r3, [pc, #408]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bef4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(T4.incrementing_Dac_value_10ms<=50)
 800bef8:	4b64      	ldr	r3, [pc, #400]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800befa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800befe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c09c <Pip_Acheived_Early_SIMV+0x25c>
 800bf02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0a:	d83d      	bhi.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    	{
			    		T4.incrementing_Dac_value_10ms=50;
 800bf0c:	4b5f      	ldr	r3, [pc, #380]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf0e:	4a64      	ldr	r2, [pc, #400]	; (800c0a0 <Pip_Acheived_Early_SIMV+0x260>)
 800bf10:	62da      	str	r2, [r3, #44]	; 0x2c
			    		T4.nack=0;
 800bf12:	4b5e      	ldr	r3, [pc, #376]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	631a      	str	r2, [r3, #48]	; 0x30
			    	if(T4.incrementing_Dac_value_10ms<=50)
 800bf18:	e036      	b.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    	}
			    }
			    else if(T4.result1<=90 && T4.result1>80)
 800bf1a:	4b5c      	ldr	r3, [pc, #368]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf1c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf20:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800c0a8 <Pip_Acheived_Early_SIMV+0x268>
 800bf24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	d82c      	bhi.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
 800bf2e:	4b57      	ldr	r3, [pc, #348]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf30:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf34:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800c0a4 <Pip_Acheived_Early_SIMV+0x264>
 800bf38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	dd22      	ble.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    {
			    	T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms-(0.1);
 800bf42:	4b52      	ldr	r3, [pc, #328]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7f4 faa6 	bl	8000498 <__aeabi_f2d>
 800bf4c:	a34c      	add	r3, pc, #304	; (adr r3, 800c080 <Pip_Acheived_Early_SIMV+0x240>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 f941 	bl	80001d8 <__aeabi_dsub>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	f7f4 fdd5 	bl	8000b0c <__aeabi_d2f>
 800bf62:	4603      	mov	r3, r0
 800bf64:	4a49      	ldr	r2, [pc, #292]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf66:	62d3      	str	r3, [r2, #44]	; 0x2c
			    	if(T4.incrementing_Dac_value_10ms<=50)
 800bf68:	4b48      	ldr	r3, [pc, #288]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800bf6e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c09c <Pip_Acheived_Early_SIMV+0x25c>
 800bf72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7a:	d805      	bhi.n	800bf88 <Pip_Acheived_Early_SIMV+0x148>
			    	{
			    		T4.incrementing_Dac_value_10ms=50;
 800bf7c:	4b43      	ldr	r3, [pc, #268]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf7e:	4a48      	ldr	r2, [pc, #288]	; (800c0a0 <Pip_Acheived_Early_SIMV+0x260>)
 800bf80:	62da      	str	r2, [r3, #44]	; 0x2c
			    		T4.nack=0;
 800bf82:	4b42      	ldr	r3, [pc, #264]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	631a      	str	r2, [r3, #48]	; 0x30
			    	}
			    }


			    if(T4.nack==0)
 800bf88:	4b40      	ldr	r3, [pc, #256]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d173      	bne.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    {

			    	if(S5.P_Max<T1._PIP_Val)
 800bf90:	4b46      	ldr	r3, [pc, #280]	; (800c0ac <Pip_Acheived_Early_SIMV+0x26c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a46      	ldr	r2, [pc, #280]	; (800c0b0 <Pip_Acheived_Early_SIMV+0x270>)
 800bf96:	7892      	ldrb	r2, [r2, #2]
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	da13      	bge.n	800bfc4 <Pip_Acheived_Early_SIMV+0x184>
			    	{
			    		 T4.result1_error++;
 800bf9c:	4b3b      	ldr	r3, [pc, #236]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	4a3a      	ldr	r2, [pc, #232]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfa4:	63d3      	str	r3, [r2, #60]	; 0x3c
			    		 if(T4.result1_error>=5)
 800bfa6:	4b39      	ldr	r3, [pc, #228]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	dd64      	ble.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    		 {
			    			T4.PID_task_delay=T4.PID_task_delay;
 800bfae:	4b37      	ldr	r3, [pc, #220]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb2:	4a36      	ldr	r2, [pc, #216]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfb4:	6353      	str	r3, [r2, #52]	; 0x34
			    			T4.result1_error=6;
 800bfb6:	4b35      	ldr	r3, [pc, #212]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfb8:	2206      	movs	r2, #6
 800bfba:	63da      	str	r2, [r3, #60]	; 0x3c
			    		    T4.PID_task_delay_lock=1;
 800bfbc:	4b33      	ldr	r3, [pc, #204]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	639a      	str	r2, [r3, #56]	; 0x38
			    	}

			    }
			 }

}
 800bfc2:	e059      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    	else if(T4.result1>T4.last_result1)
 800bfc4:	4b31      	ldr	r3, [pc, #196]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfc6:	ed93 7a02 	vldr	s14, [r3, #8]
 800bfca:	4b30      	ldr	r3, [pc, #192]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfcc:	edd3 7a03 	vldr	s15, [r3, #12]
 800bfd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	dc00      	bgt.n	800bfdc <Pip_Acheived_Early_SIMV+0x19c>
}
 800bfda:	e04d      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    		if(T4.PID_task_delay_lock==0)
 800bfdc:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d149      	bne.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    		  if(T4.result1<60)
 800bfe4:	4b29      	ldr	r3, [pc, #164]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bfe6:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c0b4 <Pip_Acheived_Early_SIMV+0x274>
 800bfee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff6:	d505      	bpl.n	800c004 <Pip_Acheived_Early_SIMV+0x1c4>
			    			  T4.PID_task_delay=T4.PID_task_delay+10;
 800bff8:	4b24      	ldr	r3, [pc, #144]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffc:	330a      	adds	r3, #10
 800bffe:	4a23      	ldr	r2, [pc, #140]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c000:	6353      	str	r3, [r2, #52]	; 0x34
}
 800c002:	e039      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    		  else if(T4.result1<70 && T4.result1>=60)
 800c004:	4b21      	ldr	r3, [pc, #132]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c006:	edd3 7a02 	vldr	s15, [r3, #8]
 800c00a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c098 <Pip_Acheived_Early_SIMV+0x258>
 800c00e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c016:	d50f      	bpl.n	800c038 <Pip_Acheived_Early_SIMV+0x1f8>
 800c018:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c01a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c01e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c0b4 <Pip_Acheived_Early_SIMV+0x274>
 800c022:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02a:	db05      	blt.n	800c038 <Pip_Acheived_Early_SIMV+0x1f8>
			    			  T4.PID_task_delay=T4.PID_task_delay+6;
 800c02c:	4b17      	ldr	r3, [pc, #92]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c030:	3306      	adds	r3, #6
 800c032:	4a16      	ldr	r2, [pc, #88]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c034:	6353      	str	r3, [r2, #52]	; 0x34
 800c036:	e01f      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    		  else if(T4.result1<=80 && T4.result1>=70)
 800c038:	4b14      	ldr	r3, [pc, #80]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c03a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c03e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c0a4 <Pip_Acheived_Early_SIMV+0x264>
 800c042:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	d80f      	bhi.n	800c06c <Pip_Acheived_Early_SIMV+0x22c>
 800c04c:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c04e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c052:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c098 <Pip_Acheived_Early_SIMV+0x258>
 800c056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	db05      	blt.n	800c06c <Pip_Acheived_Early_SIMV+0x22c>
			    			  T4.PID_task_delay=T4.PID_task_delay+4;
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c064:	3304      	adds	r3, #4
 800c066:	4a09      	ldr	r2, [pc, #36]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c068:	6353      	str	r3, [r2, #52]	; 0x34
 800c06a:	e005      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
			    			  T4.PID_task_delay=T4.PID_task_delay+1;
 800c06c:	4b07      	ldr	r3, [pc, #28]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c070:	3301      	adds	r3, #1
 800c072:	4a06      	ldr	r2, [pc, #24]	; (800c08c <Pip_Acheived_Early_SIMV+0x24c>)
 800c074:	6353      	str	r3, [r2, #52]	; 0x34
}
 800c076:	e7ff      	b.n	800c078 <Pip_Acheived_Early_SIMV+0x238>
 800c078:	bf00      	nop
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	f3af 8000 	nop.w
 800c080:	9999999a 	.word	0x9999999a
 800c084:	3fb99999 	.word	0x3fb99999
 800c088:	20016bf4 	.word	0x20016bf4
 800c08c:	20000094 	.word	0x20000094
 800c090:	2001688c 	.word	0x2001688c
 800c094:	42c80000 	.word	0x42c80000
 800c098:	428c0000 	.word	0x428c0000
 800c09c:	42480000 	.word	0x42480000
 800c0a0:	42480000 	.word	0x42480000
 800c0a4:	42a00000 	.word	0x42a00000
 800c0a8:	42b40000 	.word	0x42b40000
 800c0ac:	20016df4 	.word	0x20016df4
 800c0b0:	20016d10 	.word	0x20016d10
 800c0b4:	42700000 	.word	0x42700000

0800c0b8 <Pip_Acheived_Slowly_SIMV>:



void Pip_Acheived_Slowly_SIMV()
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	af00      	add	r7, sp, #0
	               T4.result2=(T4.Acheived_ms/T2.ramp_time_percentage)*100;
 800c0bc:	4b56      	ldr	r3, [pc, #344]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0be:	8b5b      	ldrh	r3, [r3, #26]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c0c8:	4b54      	ldr	r3, [pc, #336]	; (800c21c <Pip_Acheived_Slowly_SIMV+0x164>)
 800c0ca:	ed93 7a03 	vldr	s14, [r3, #12]
 800c0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800c220 <Pip_Acheived_Slowly_SIMV+0x168>
 800c0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0da:	4b4f      	ldr	r3, [pc, #316]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0dc:	edc3 7a04 	vstr	s15, [r3, #16]
		    	   T4.last_result2=T4.result2;
 800c0e0:	4b4d      	ldr	r3, [pc, #308]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	4a4c      	ldr	r2, [pc, #304]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0e6:	6153      	str	r3, [r2, #20]

		    	   if(T4.result2 >= 130)
 800c0e8:	4b4b      	ldr	r3, [pc, #300]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0ea:	edd3 7a04 	vldr	s15, [r3, #16]
 800c0ee:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800c224 <Pip_Acheived_Slowly_SIMV+0x16c>
 800c0f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fa:	db1b      	blt.n	800c134 <Pip_Acheived_Slowly_SIMV+0x7c>
		    	   {
		    		    T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms+5;
 800c0fc:	4b46      	ldr	r3, [pc, #280]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c0fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c102:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c10a:	4b43      	ldr	r3, [pc, #268]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c10c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   	    if(T4.incrementing_Dac_value_10ms>=350)
 800c110:	4b41      	ldr	r3, [pc, #260]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c112:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c116:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800c228 <Pip_Acheived_Slowly_SIMV+0x170>
 800c11a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	da00      	bge.n	800c126 <Pip_Acheived_Slowly_SIMV+0x6e>
		    	   			   T4.nack=0;
		    	   		}
		    	   	}


}
 800c124:	e070      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   	    	 T4.incrementing_Dac_value_10ms=350;
 800c126:	4b3c      	ldr	r3, [pc, #240]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c128:	4a40      	ldr	r2, [pc, #256]	; (800c22c <Pip_Acheived_Slowly_SIMV+0x174>)
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   	    	 T4.nack=0;
 800c12c:	4b3a      	ldr	r3, [pc, #232]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c12e:	2200      	movs	r2, #0
 800c130:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c132:	e069      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   else if(T4.result2 > 120 && T4.result2 <130)
 800c134:	4b38      	ldr	r3, [pc, #224]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c136:	edd3 7a04 	vldr	s15, [r3, #16]
 800c13a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800c230 <Pip_Acheived_Slowly_SIMV+0x178>
 800c13e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c146:	dd24      	ble.n	800c192 <Pip_Acheived_Slowly_SIMV+0xda>
 800c148:	4b33      	ldr	r3, [pc, #204]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c14a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c14e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800c224 <Pip_Acheived_Slowly_SIMV+0x16c>
 800c152:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15a:	d51a      	bpl.n	800c192 <Pip_Acheived_Slowly_SIMV+0xda>
		    		    T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms+(0.5);
 800c15c:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c15e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c162:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c16a:	4b2b      	ldr	r3, [pc, #172]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c16c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   		if(T4.incrementing_Dac_value_10ms>=350)
 800c170:	4b29      	ldr	r3, [pc, #164]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c172:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c176:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800c228 <Pip_Acheived_Slowly_SIMV+0x170>
 800c17a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c182:	db41      	blt.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   			  T4.incrementing_Dac_value_10ms=350;
 800c184:	4b24      	ldr	r3, [pc, #144]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c186:	4a29      	ldr	r2, [pc, #164]	; (800c22c <Pip_Acheived_Slowly_SIMV+0x174>)
 800c188:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			  T4.nack=0;
 800c18a:	4b23      	ldr	r3, [pc, #140]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	631a      	str	r2, [r3, #48]	; 0x30
		    	   		if(T4.incrementing_Dac_value_10ms>=350)
 800c190:	e03a      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   	else if(T4.result2<=120 && T4.result2>=110)
 800c192:	4b21      	ldr	r3, [pc, #132]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c194:	edd3 7a04 	vldr	s15, [r3, #16]
 800c198:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c230 <Pip_Acheived_Slowly_SIMV+0x178>
 800c19c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	d900      	bls.n	800c1a8 <Pip_Acheived_Slowly_SIMV+0xf0>
}
 800c1a6:	e02f      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   	else if(T4.result2<=120 && T4.result2>=110)
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c1aa:	edd3 7a04 	vldr	s15, [r3, #16]
 800c1ae:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c234 <Pip_Acheived_Slowly_SIMV+0x17c>
 800c1b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ba:	da00      	bge.n	800c1be <Pip_Acheived_Slowly_SIMV+0x106>
}
 800c1bc:	e024      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   		T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms+(0.1);
 800c1be:	4b16      	ldr	r3, [pc, #88]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f4 f968 	bl	8000498 <__aeabi_f2d>
 800c1c8:	a311      	add	r3, pc, #68	; (adr r3, 800c210 <Pip_Acheived_Slowly_SIMV+0x158>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f7f4 f805 	bl	80001dc <__adddf3>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4619      	mov	r1, r3
 800c1da:	f7f4 fc97 	bl	8000b0c <__aeabi_d2f>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	4a0d      	ldr	r2, [pc, #52]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c1e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		    	   		if(T4.incrementing_Dac_value_10ms>=350)
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c1e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c1ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c228 <Pip_Acheived_Slowly_SIMV+0x170>
 800c1ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f6:	da00      	bge.n	800c1fa <Pip_Acheived_Slowly_SIMV+0x142>
}
 800c1f8:	e006      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
		    	   			   T4.incrementing_Dac_value_10ms=350;
 800c1fa:	4b07      	ldr	r3, [pc, #28]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c1fc:	4a0b      	ldr	r2, [pc, #44]	; (800c22c <Pip_Acheived_Slowly_SIMV+0x174>)
 800c1fe:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			   T4.nack=0;
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <Pip_Acheived_Slowly_SIMV+0x160>)
 800c202:	2200      	movs	r2, #0
 800c204:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c206:	e7ff      	b.n	800c208 <Pip_Acheived_Slowly_SIMV+0x150>
 800c208:	bf00      	nop
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	f3af 8000 	nop.w
 800c210:	9999999a 	.word	0x9999999a
 800c214:	3fb99999 	.word	0x3fb99999
 800c218:	20000094 	.word	0x20000094
 800c21c:	2001688c 	.word	0x2001688c
 800c220:	42c80000 	.word	0x42c80000
 800c224:	43020000 	.word	0x43020000
 800c228:	43af0000 	.word	0x43af0000
 800c22c:	43af0000 	.word	0x43af0000
 800c230:	42f00000 	.word	0x42f00000
 800c234:	42dc0000 	.word	0x42dc0000

0800c238 <Pip_Acheived_Normally_SIMV>:
void Pip_Acheived_Normally_SIMV()
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
 	   T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms;
 800c23c:	4b04      	ldr	r3, [pc, #16]	; (800c250 <Pip_Acheived_Normally_SIMV+0x18>)
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	4a03      	ldr	r2, [pc, #12]	; (800c250 <Pip_Acheived_Normally_SIMV+0x18>)
 800c242:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c244:	bf00      	nop
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20000094 	.word	0x20000094

0800c254 <Pip_Not_Acheived_SIMV>:


void Pip_Not_Acheived_SIMV()
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
		   if(T3.Pip_Acheived_Flag==0)
 800c258:	4b11      	ldr	r3, [pc, #68]	; (800c2a0 <Pip_Not_Acheived_SIMV+0x4c>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d11a      	bne.n	800c296 <Pip_Not_Acheived_SIMV+0x42>
		   {
			   T4.incrementing_Dac_value_10ms=T4.incrementing_Dac_value_10ms+1;
 800c260:	4b10      	ldr	r3, [pc, #64]	; (800c2a4 <Pip_Not_Acheived_SIMV+0x50>)
 800c262:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c26a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c26e:	4b0d      	ldr	r3, [pc, #52]	; (800c2a4 <Pip_Not_Acheived_SIMV+0x50>)
 800c270:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			   if(T4.incrementing_Dac_value_10ms>=350)
 800c274:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <Pip_Not_Acheived_SIMV+0x50>)
 800c276:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c27a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800c2a8 <Pip_Not_Acheived_SIMV+0x54>
 800c27e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	da00      	bge.n	800c28a <Pip_Not_Acheived_SIMV+0x36>
			   {
				   T4.incrementing_Dac_value_10ms=350;
				   T4.nack=0;
			   }
		   }
}
 800c288:	e005      	b.n	800c296 <Pip_Not_Acheived_SIMV+0x42>
				   T4.incrementing_Dac_value_10ms=350;
 800c28a:	4b06      	ldr	r3, [pc, #24]	; (800c2a4 <Pip_Not_Acheived_SIMV+0x50>)
 800c28c:	4a07      	ldr	r2, [pc, #28]	; (800c2ac <Pip_Not_Acheived_SIMV+0x58>)
 800c28e:	62da      	str	r2, [r3, #44]	; 0x2c
				   T4.nack=0;
 800c290:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <Pip_Not_Acheived_SIMV+0x50>)
 800c292:	2200      	movs	r2, #0
 800c294:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c296:	bf00      	nop
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20016bf4 	.word	0x20016bf4
 800c2a4:	20000094 	.word	0x20000094
 800c2a8:	43af0000 	.word	0x43af0000
 800c2ac:	43af0000 	.word	0x43af0000

0800c2b0 <Peep_E_Valve_Lock_delay_Pc_SIMV>:




void Peep_E_Valve_Lock_delay_Pc_SIMV()
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
	if (T1.RR < 30)
 800c2b4:	4b8f      	ldr	r3, [pc, #572]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c2b6:	7c9b      	ldrb	r3, [r3, #18]
 800c2b8:	2b1d      	cmp	r3, #29
 800c2ba:	f200 8257 	bhi.w	800c76c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4bc>
	{
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 800c2be:	4b8e      	ldr	r3, [pc, #568]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2c0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c2c4:	4b8c      	ldr	r3, [pc, #560]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2c6:	ed93 7a03 	vldr	s14, [r3, #12]
 800c2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ce:	4b8a      	ldr	r3, [pc, #552]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2d0:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800c2d4:	4b88      	ldr	r3, [pc, #544]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c2da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2de:	ee17 2a90 	vmov	r2, s15
 800c2e2:	4b85      	ldr	r3, [pc, #532]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2e4:	62da      	str	r2, [r3, #44]	; 0x2c

		S5._Pip_Avg_count = 0;
 800c2e6:	4b84      	ldr	r3, [pc, #528]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2e8:	f04f 0200 	mov.w	r2, #0
 800c2ec:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 800c2ee:	4b82      	ldr	r3, [pc, #520]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c2f0:	f04f 0200 	mov.w	r2, #0
 800c2f4:	609a      	str	r2, [r3, #8]



		if(trigger_valve_modification==1)
 800c2f6:	4b81      	ldr	r3, [pc, #516]	; (800c4fc <Peep_E_Valve_Lock_delay_Pc_SIMV+0x24c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d117      	bne.n	800c32e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x7e>
		{
			S5._Peep_Avg_val = S5._Peep_Avg_trigger / S5._Peep_Avg_count_trigger;
 800c2fe:	4b7e      	ldr	r3, [pc, #504]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c300:	edd3 6a06 	vldr	s13, [r3, #24]
 800c304:	4b7c      	ldr	r3, [pc, #496]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c306:	ed93 7a07 	vldr	s14, [r3, #28]
 800c30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30e:	4b7a      	ldr	r3, [pc, #488]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c310:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800c314:	4b78      	ldr	r3, [pc, #480]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c316:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c31e:	ee17 2a90 	vmov	r2, s15
 800c322:	4b75      	ldr	r3, [pc, #468]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c324:	629a      	str	r2, [r3, #40]	; 0x28
			trigger_valve_modification=0;
 800c326:	4b75      	ldr	r3, [pc, #468]	; (800c4fc <Peep_E_Valve_Lock_delay_Pc_SIMV+0x24c>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	e013      	b.n	800c356 <Peep_E_Valve_Lock_delay_Pc_SIMV+0xa6>
		}

		else
		{
			S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 800c32e:	4b72      	ldr	r3, [pc, #456]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c330:	edd3 6a05 	vldr	s13, [r3, #20]
 800c334:	4b70      	ldr	r3, [pc, #448]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c336:	ed93 7a08 	vldr	s14, [r3, #32]
 800c33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c33e:	4b6e      	ldr	r3, [pc, #440]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c340:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800c344:	4b6c      	ldr	r3, [pc, #432]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c346:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c34a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c34e:	ee17 2a90 	vmov	r2, s15
 800c352:	4b69      	ldr	r3, [pc, #420]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c354:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (T1.RR >= 30 || T2._E_TIMER_HOLD < 700)
 800c356:	4b67      	ldr	r3, [pc, #412]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c358:	7c9b      	ldrb	r3, [r3, #18]
 800c35a:	2b1d      	cmp	r3, #29
 800c35c:	d804      	bhi.n	800c368 <Peep_E_Valve_Lock_delay_Pc_SIMV+0xb8>
 800c35e:	4b68      	ldr	r3, [pc, #416]	; (800c500 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x250>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c366:	d203      	bcs.n	800c370 <Peep_E_Valve_Lock_delay_Pc_SIMV+0xc0>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 800c368:	4b63      	ldr	r3, [pc, #396]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36c:	4a62      	ldr	r2, [pc, #392]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c36e:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 800c370:	4b61      	ldr	r3, [pc, #388]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c372:	2200      	movs	r2, #0
 800c374:	641a      	str	r2, [r3, #64]	; 0x40

		if (S5._Peep_Avg_val_int > (T1._PEEP_Val +8) )
 800c376:	4b60      	ldr	r3, [pc, #384]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c37a:	4b5e      	ldr	r3, [pc, #376]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c37c:	78db      	ldrb	r3, [r3, #3]
 800c37e:	3308      	adds	r3, #8
 800c380:	429a      	cmp	r2, r3
 800c382:	dd33      	ble.n	800c3ec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x13c>
		{

			S5.error_count++;
 800c384:	4b5c      	ldr	r3, [pc, #368]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c388:	3301      	adds	r3, #1
 800c38a:	4a5b      	ldr	r2, [pc, #364]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c38c:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800c38e:	4b5a      	ldr	r3, [pc, #360]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c392:	2b00      	cmp	r3, #0
 800c394:	dd1b      	ble.n	800c3ce <Peep_E_Valve_Lock_delay_Pc_SIMV+0x11e>
			{

				S5.Lock_delay = S5.Lock_delay + 100;
 800c396:	4b58      	ldr	r3, [pc, #352]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c398:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c39a:	3364      	adds	r3, #100	; 0x64
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	4b56      	ldr	r3, [pc, #344]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3a0:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c3a2:	4b55      	ldr	r3, [pc, #340]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c3a8:	4b53      	ldr	r3, [pc, #332]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c3ac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c3b0:	d90d      	bls.n	800c3ce <Peep_E_Valve_Lock_delay_Pc_SIMV+0x11e>
				{
					S5.Lock_delay = 700;
 800c3b2:	4b51      	ldr	r3, [pc, #324]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3b4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c3b8:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c3ba:	4b4f      	ldr	r3, [pc, #316]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3bc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c3c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c3c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3c8:	4b4b      	ldr	r3, [pc, #300]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3ca:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800c3ce:	4b4a      	ldr	r3, [pc, #296]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c3d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c3d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e0:	f200 81ae 	bhi.w	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			{
				S5._Set_Peep = 3;
 800c3e4:	4b44      	ldr	r3, [pc, #272]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3e6:	4a47      	ldr	r2, [pc, #284]	; (800c504 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x254>)
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
 800c3ea:	e1a9      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			}
		}



		else if( (S5._Peep_Avg_val_int > (T1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (T1._PEEP_Val+8)) )
 800c3ec:	4b42      	ldr	r3, [pc, #264]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3f0:	4b40      	ldr	r3, [pc, #256]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c3f2:	78db      	ldrb	r3, [r3, #3]
 800c3f4:	3302      	adds	r3, #2
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	dd3a      	ble.n	800c470 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x1c0>
 800c3fa:	4b3f      	ldr	r3, [pc, #252]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c3fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3fe:	4b3d      	ldr	r3, [pc, #244]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c400:	78db      	ldrb	r3, [r3, #3]
 800c402:	3308      	adds	r3, #8
 800c404:	429a      	cmp	r2, r3
 800c406:	dc33      	bgt.n	800c470 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x1c0>
		{

			S5.error_count++;
 800c408:	4b3b      	ldr	r3, [pc, #236]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40c:	3301      	adds	r3, #1
 800c40e:	4a3a      	ldr	r2, [pc, #232]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c410:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800c412:	4b39      	ldr	r3, [pc, #228]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c416:	2b00      	cmp	r3, #0
 800c418:	dd1b      	ble.n	800c452 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x1a2>
			{
				S5.Lock_delay = S5.Lock_delay + 40;
 800c41a:	4b37      	ldr	r3, [pc, #220]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c41c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c41e:	3328      	adds	r3, #40	; 0x28
 800c420:	b29a      	uxth	r2, r3
 800c422:	4b35      	ldr	r3, [pc, #212]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c424:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c426:	4b34      	ldr	r3, [pc, #208]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c428:	2200      	movs	r2, #0
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c42c:	4b32      	ldr	r3, [pc, #200]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c42e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c430:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c434:	d90d      	bls.n	800c452 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x1a2>
				{
					S5.Lock_delay = 700;
 800c436:	4b30      	ldr	r3, [pc, #192]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c438:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c43c:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c43e:	4b2e      	ldr	r3, [pc, #184]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c440:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c444:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c44c:	4b2a      	ldr	r3, [pc, #168]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c44e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800c452:	4b29      	ldr	r3, [pc, #164]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c454:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c458:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c45c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c464:	f200 816c 	bhi.w	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			{
				S5._Set_Peep = 3;
 800c468:	4b23      	ldr	r3, [pc, #140]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c46a:	4a26      	ldr	r2, [pc, #152]	; (800c504 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x254>)
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c46e:	e167      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			}
		}

		else if( (S5._Peep_Avg_val_int > (T1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (T1._PEEP_Val+2)) )
 800c470:	4b21      	ldr	r3, [pc, #132]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c476:	78d2      	ldrb	r2, [r2, #3]
 800c478:	4293      	cmp	r3, r2
 800c47a:	dd45      	ble.n	800c508 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x258>
 800c47c:	4b1e      	ldr	r3, [pc, #120]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c480:	4b1c      	ldr	r3, [pc, #112]	; (800c4f4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x244>)
 800c482:	78db      	ldrb	r3, [r3, #3]
 800c484:	3302      	adds	r3, #2
 800c486:	429a      	cmp	r2, r3
 800c488:	dc3e      	bgt.n	800c508 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x258>
		{

			S5.error_count++;
 800c48a:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	3301      	adds	r3, #1
 800c490:	4a19      	ldr	r2, [pc, #100]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c492:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800c494:	4b18      	ldr	r3, [pc, #96]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dd1b      	ble.n	800c4d4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x224>
			{

				S5.Lock_delay = S5.Lock_delay + 10;
 800c49c:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c49e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c4a0:	330a      	adds	r3, #10
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4a6:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c4a8:	4b13      	ldr	r3, [pc, #76]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c4ae:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c4b2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c4b6:	d90d      	bls.n	800c4d4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x224>
				{
					S5.Lock_delay = 700;
 800c4b8:	4b0f      	ldr	r3, [pc, #60]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4ba:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c4be:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c4c0:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c4c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4ce:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4d0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800c4d4:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c4da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c4de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e6:	f200 812b 	bhi.w	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			{
				S5._Set_Peep = 3;
 800c4ea:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x248>)
 800c4ec:	4a05      	ldr	r2, [pc, #20]	; (800c504 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x254>)
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c4f0:	e126      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
 800c4f2:	bf00      	nop
 800c4f4:	20016d10 	.word	0x20016d10
 800c4f8:	20016df4 	.word	0x20016df4
 800c4fc:	20000314 	.word	0x20000314
 800c500:	2001688c 	.word	0x2001688c
 800c504:	40400000 	.word	0x40400000
			}
		}
		else if ((S5._Peep_Avg_val_int == 0 ) )
 800c508:	4b96      	ldr	r3, [pc, #600]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d13c      	bne.n	800c58a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x2da>
		{


			S5.error_count2++;
 800c510:	4b94      	ldr	r3, [pc, #592]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	3301      	adds	r3, #1
 800c516:	4a93      	ldr	r2, [pc, #588]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c518:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 0)
 800c51a:	4b92      	ldr	r3, [pc, #584]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c51e:	2b00      	cmp	r3, #0
 800c520:	dd1e      	ble.n	800c560 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x2b0>
			{
				S5._Set_Peep = S5._Set_Peep + 1;
 800c522:	4b90      	ldr	r3, [pc, #576]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c524:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c52c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c530:	4b8c      	ldr	r3, [pc, #560]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c532:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				S5.Lock_delay = S5.Lock_delay - 10;
 800c536:	4b8b      	ldr	r3, [pc, #556]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c538:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c53a:	3b0a      	subs	r3, #10
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	4b89      	ldr	r3, [pc, #548]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c540:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800c542:	4b88      	ldr	r3, [pc, #544]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c544:	2200      	movs	r2, #0
 800c546:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800c548:	4b86      	ldr	r3, [pc, #536]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c54a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d004      	beq.n	800c55a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x2aa>
 800c550:	4b84      	ldr	r3, [pc, #528]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c552:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c554:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c558:	d902      	bls.n	800c560 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x2b0>
				{
					S5.Lock_delay = 1;
 800c55a:	4b82      	ldr	r3, [pc, #520]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	879a      	strh	r2, [r3, #60]	; 0x3c

				}
			}
			if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c560:	4b80      	ldr	r3, [pc, #512]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c562:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c566:	4b80      	ldr	r3, [pc, #512]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c568:	78db      	ldrb	r3, [r3, #3]
 800c56a:	330a      	adds	r3, #10
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57c:	f340 80e0 	ble.w	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			{
				S5._Set_Peep = S5._Set_Peep;
 800c580:	4b78      	ldr	r3, [pc, #480]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	4a77      	ldr	r2, [pc, #476]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c586:	6393      	str	r3, [r2, #56]	; 0x38
 800c588:	e0da      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
			}
		}



				else if ((S5._Peep_Avg_val_int < (T1._PEEP_Val -8)))
 800c58a:	4b76      	ldr	r3, [pc, #472]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c58e:	4b76      	ldr	r3, [pc, #472]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c590:	78db      	ldrb	r3, [r3, #3]
 800c592:	3b08      	subs	r3, #8
 800c594:	429a      	cmp	r2, r3
 800c596:	da3c      	bge.n	800c612 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x362>
				{


					S5.error_count2++;
 800c598:	4b72      	ldr	r3, [pc, #456]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59c:	3301      	adds	r3, #1
 800c59e:	4a71      	ldr	r2, [pc, #452]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5a0:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 800c5a2:	4b70      	ldr	r3, [pc, #448]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dd1e      	ble.n	800c5e8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x338>
					{
						S5.Lock_delay = S5.Lock_delay - 50;
 800c5aa:	4b6e      	ldr	r3, [pc, #440]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c5ae:	3b32      	subs	r3, #50	; 0x32
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	4b6c      	ldr	r3, [pc, #432]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5b4:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800c5b6:	4b6b      	ldr	r3, [pc, #428]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800c5bc:	4b69      	ldr	r3, [pc, #420]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <Peep_E_Valve_Lock_delay_Pc_SIMV+0x31e>
 800c5c4:	4b67      	ldr	r3, [pc, #412]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c5c8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c5cc:	d90c      	bls.n	800c5e8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x338>
						{
							S5.Lock_delay = 1;
 800c5ce:	4b65      	ldr	r3, [pc, #404]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800c5d4:	4b63      	ldr	r3, [pc, #396]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c5da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c5de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5e2:	4b60      	ldr	r3, [pc, #384]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5e4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c5e8:	4b5e      	ldr	r3, [pc, #376]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c5ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c5ee:	4b5e      	ldr	r3, [pc, #376]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c5f0:	78db      	ldrb	r3, [r3, #3]
 800c5f2:	330a      	adds	r3, #10
 800c5f4:	ee07 3a90 	vmov	s15, r3
 800c5f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c604:	f340 809c 	ble.w	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
					{
						S5._Set_Peep = S5._Set_Peep;
 800c608:	4b56      	ldr	r3, [pc, #344]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60c:	4a55      	ldr	r2, [pc, #340]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c60e:	6393      	str	r3, [r2, #56]	; 0x38
 800c610:	e096      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
					}
				}



				else if ((S5._Peep_Avg_val_int >= (T1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (T1._PEEP_Val-2)))
 800c612:	4b54      	ldr	r3, [pc, #336]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c616:	4b54      	ldr	r3, [pc, #336]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c618:	78db      	ldrb	r3, [r3, #3]
 800c61a:	3b08      	subs	r3, #8
 800c61c:	429a      	cmp	r2, r3
 800c61e:	db42      	blt.n	800c6a6 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x3f6>
 800c620:	4b50      	ldr	r3, [pc, #320]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c624:	4b50      	ldr	r3, [pc, #320]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c626:	78db      	ldrb	r3, [r3, #3]
 800c628:	3b02      	subs	r3, #2
 800c62a:	429a      	cmp	r2, r3
 800c62c:	da3b      	bge.n	800c6a6 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x3f6>
				{


					S5.error_count2++;
 800c62e:	4b4d      	ldr	r3, [pc, #308]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c632:	3301      	adds	r3, #1
 800c634:	4a4b      	ldr	r2, [pc, #300]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c636:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 800c638:	4b4a      	ldr	r3, [pc, #296]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dd1e      	ble.n	800c67e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x3ce>
					{
						S5.Lock_delay = S5.Lock_delay - 30;
 800c640:	4b48      	ldr	r3, [pc, #288]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c642:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c644:	3b1e      	subs	r3, #30
 800c646:	b29a      	uxth	r2, r3
 800c648:	4b46      	ldr	r3, [pc, #280]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c64a:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800c64c:	4b45      	ldr	r3, [pc, #276]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c64e:	2200      	movs	r2, #0
 800c650:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800c652:	4b44      	ldr	r3, [pc, #272]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c654:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x3b4>
 800c65a:	4b42      	ldr	r3, [pc, #264]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c65c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c65e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c662:	d90c      	bls.n	800c67e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x3ce>
						{
							S5.Lock_delay = 1;
 800c664:	4b3f      	ldr	r3, [pc, #252]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c666:	2201      	movs	r2, #1
 800c668:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800c66a:	4b3e      	ldr	r3, [pc, #248]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c66c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c670:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c674:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c678:	4b3a      	ldr	r3, [pc, #232]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c67a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c67e:	4b39      	ldr	r3, [pc, #228]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c680:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c684:	4b38      	ldr	r3, [pc, #224]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c686:	78db      	ldrb	r3, [r3, #3]
 800c688:	330a      	adds	r3, #10
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69a:	dd51      	ble.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
					{
						S5._Set_Peep = S5._Set_Peep;
 800c69c:	4b31      	ldr	r3, [pc, #196]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	4a30      	ldr	r2, [pc, #192]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6a2:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c6a4:	e04c      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
					}
				}


				else if ((S5._Peep_Avg_val_int >= (T1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (T1._PEEP_Val)))
 800c6a6:	4b2f      	ldr	r3, [pc, #188]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6aa:	4b2f      	ldr	r3, [pc, #188]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c6ac:	78db      	ldrb	r3, [r3, #3]
 800c6ae:	3b02      	subs	r3, #2
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	db41      	blt.n	800c738 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x488>
 800c6b4:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b8:	4a2b      	ldr	r2, [pc, #172]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c6ba:	78d2      	ldrb	r2, [r2, #3]
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	da3b      	bge.n	800c738 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x488>
				{


					S5.error_count2++;
 800c6c0:	4b28      	ldr	r3, [pc, #160]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	4a27      	ldr	r2, [pc, #156]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6c8:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 0)
 800c6ca:	4b26      	ldr	r3, [pc, #152]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dd1e      	ble.n	800c710 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x460>
					{

						S5.Lock_delay = S5.Lock_delay - 10;
 800c6d2:	4b24      	ldr	r3, [pc, #144]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c6d6:	3b0a      	subs	r3, #10
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	4b22      	ldr	r3, [pc, #136]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6dc:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800c6de:	4b21      	ldr	r3, [pc, #132]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d004      	beq.n	800c6f6 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x446>
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c6f0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c6f4:	d90c      	bls.n	800c710 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x460>
						{
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800c6f6:	4b1b      	ldr	r3, [pc, #108]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c6f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c6fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c700:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c704:	4b17      	ldr	r3, [pc, #92]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c706:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 800c70a:	4b16      	ldr	r3, [pc, #88]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	879a      	strh	r2, [r3, #60]	; 0x3c
						}
					}
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c712:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c716:	4b14      	ldr	r3, [pc, #80]	; (800c768 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b8>)
 800c718:	78db      	ldrb	r3, [r3, #3]
 800c71a:	330a      	adds	r3, #10
 800c71c:	ee07 3a90 	vmov	s15, r3
 800c720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72c:	dd08      	ble.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>
					{
						S5._Set_Peep = S5._Set_Peep;
 800c72e:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	4a0c      	ldr	r2, [pc, #48]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c734:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800c736:	e003      	b.n	800c740 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x490>



				else
				{
					S5._Set_Peep = S5._Set_Peep;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	4a09      	ldr	r2, [pc, #36]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c73e:	6393      	str	r3, [r2, #56]	; 0x38
				}
				S5._Peep_Avg_count = 0;
 800c740:	4b08      	ldr	r3, [pc, #32]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c742:	f04f 0200 	mov.w	r2, #0
 800c746:	621a      	str	r2, [r3, #32]
				S5._Peep_Avg = 0;
 800c748:	4b06      	ldr	r3, [pc, #24]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c74a:	f04f 0200 	mov.w	r2, #0
 800c74e:	615a      	str	r2, [r3, #20]

				S5._Peep_Avg_trigger=0;
 800c750:	4b04      	ldr	r3, [pc, #16]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	619a      	str	r2, [r3, #24]
				S5._Peep_Avg_count_trigger=0;
 800c758:	4b02      	ldr	r3, [pc, #8]	; (800c764 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x4b4>)
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	61da      	str	r2, [r3, #28]
				S5._Peep_Avg = 0;

				S5._Peep_Avg_trigger=0;
				S5._Peep_Avg_count_trigger=0;
	}
}
 800c760:	e254      	b.n	800cc0c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x95c>
 800c762:	bf00      	nop
 800c764:	20016df4 	.word	0x20016df4
 800c768:	20016d10 	.word	0x20016d10
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 800c76c:	4b8c      	ldr	r3, [pc, #560]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c76e:	edd3 6a02 	vldr	s13, [r3, #8]
 800c772:	4b8b      	ldr	r3, [pc, #556]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c774:	ed93 7a03 	vldr	s14, [r3, #12]
 800c778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77c:	4b88      	ldr	r3, [pc, #544]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c77e:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800c782:	4b87      	ldr	r3, [pc, #540]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c784:	edd3 7a04 	vldr	s15, [r3, #16]
 800c788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c78c:	ee17 2a90 	vmov	r2, s15
 800c790:	4b83      	ldr	r3, [pc, #524]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 800c794:	4b82      	ldr	r3, [pc, #520]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c796:	f04f 0200 	mov.w	r2, #0
 800c79a:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 800c79c:	4b80      	ldr	r3, [pc, #512]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c79e:	f04f 0200 	mov.w	r2, #0
 800c7a2:	609a      	str	r2, [r3, #8]
		if(trigger_valve_modification==1)
 800c7a4:	4b7f      	ldr	r3, [pc, #508]	; (800c9a4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d117      	bne.n	800c7dc <Peep_E_Valve_Lock_delay_Pc_SIMV+0x52c>
			S5._Peep_Avg_val = S5._Peep_Avg_trigger / S5._Peep_Avg_count_trigger;
 800c7ac:	4b7c      	ldr	r3, [pc, #496]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7ae:	edd3 6a06 	vldr	s13, [r3, #24]
 800c7b2:	4b7b      	ldr	r3, [pc, #492]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7b4:	ed93 7a07 	vldr	s14, [r3, #28]
 800c7b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7bc:	4b78      	ldr	r3, [pc, #480]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800c7c2:	4b77      	ldr	r3, [pc, #476]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7cc:	ee17 2a90 	vmov	r2, s15
 800c7d0:	4b73      	ldr	r3, [pc, #460]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7d2:	629a      	str	r2, [r3, #40]	; 0x28
			trigger_valve_modification=0;
 800c7d4:	4b73      	ldr	r3, [pc, #460]	; (800c9a4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f4>)
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e013      	b.n	800c804 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x554>
			S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 800c7dc:	4b70      	ldr	r3, [pc, #448]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7de:	edd3 6a05 	vldr	s13, [r3, #20]
 800c7e2:	4b6f      	ldr	r3, [pc, #444]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7e4:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ec:	4b6c      	ldr	r3, [pc, #432]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7ee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800c7f2:	4b6b      	ldr	r3, [pc, #428]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c7f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7fc:	ee17 2a90 	vmov	r2, s15
 800c800:	4b67      	ldr	r3, [pc, #412]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c802:	629a      	str	r2, [r3, #40]	; 0x28
		if (T1.RR >= 30 || T2._E_TIMER_HOLD < 700)
 800c804:	4b68      	ldr	r3, [pc, #416]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c806:	7c9b      	ldrb	r3, [r3, #18]
 800c808:	2b1d      	cmp	r3, #29
 800c80a:	d804      	bhi.n	800c816 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x566>
 800c80c:	4b67      	ldr	r3, [pc, #412]	; (800c9ac <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6fc>)
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c814:	d203      	bcs.n	800c81e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x56e>
			S5._Peep_Avg_val_int = S5.peep_max;
 800c816:	4b62      	ldr	r3, [pc, #392]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	4a61      	ldr	r2, [pc, #388]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c81c:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 800c81e:	4b60      	ldr	r3, [pc, #384]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c820:	2200      	movs	r2, #0
 800c822:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (T1._PEEP_Val +8) )
 800c824:	4b5e      	ldr	r3, [pc, #376]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c828:	4b5f      	ldr	r3, [pc, #380]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c82a:	78db      	ldrb	r3, [r3, #3]
 800c82c:	3308      	adds	r3, #8
 800c82e:	429a      	cmp	r2, r3
 800c830:	dd33      	ble.n	800c89a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x5ea>
			S5.error_count++;
 800c832:	4b5b      	ldr	r3, [pc, #364]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	3301      	adds	r3, #1
 800c838:	4a59      	ldr	r2, [pc, #356]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c83a:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800c83c:	4b58      	ldr	r3, [pc, #352]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c840:	2b02      	cmp	r3, #2
 800c842:	dd1b      	ble.n	800c87c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x5cc>
				S5.Lock_delay = S5.Lock_delay + 100;
 800c844:	4b56      	ldr	r3, [pc, #344]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c846:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c848:	3364      	adds	r3, #100	; 0x64
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	4b54      	ldr	r3, [pc, #336]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c84e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c850:	4b53      	ldr	r3, [pc, #332]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c852:	2200      	movs	r2, #0
 800c854:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c856:	4b52      	ldr	r3, [pc, #328]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c858:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c85a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c85e:	d90d      	bls.n	800c87c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x5cc>
					S5.Lock_delay = 700;
 800c860:	4b4f      	ldr	r3, [pc, #316]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c862:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c866:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c868:	4b4d      	ldr	r3, [pc, #308]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c86a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c86e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c876:	4b4a      	ldr	r3, [pc, #296]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c878:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c87c:	4b48      	ldr	r3, [pc, #288]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c87e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c882:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88e:	f200 81ad 	bhi.w	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
				S5._Set_Peep = 3;
 800c892:	4b43      	ldr	r3, [pc, #268]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c894:	4a46      	ldr	r2, [pc, #280]	; (800c9b0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x700>)
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
 800c898:	e1a8      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
		else if( (S5._Peep_Avg_val_int > (T1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (T1._PEEP_Val+8)) )
 800c89a:	4b41      	ldr	r3, [pc, #260]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c89e:	4b42      	ldr	r3, [pc, #264]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c8a0:	78db      	ldrb	r3, [r3, #3]
 800c8a2:	3302      	adds	r3, #2
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	dd3a      	ble.n	800c91e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x66e>
 800c8a8:	4b3d      	ldr	r3, [pc, #244]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8ac:	4b3e      	ldr	r3, [pc, #248]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c8ae:	78db      	ldrb	r3, [r3, #3]
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	dc33      	bgt.n	800c91e <Peep_E_Valve_Lock_delay_Pc_SIMV+0x66e>
			S5.error_count++;
 800c8b6:	4b3a      	ldr	r3, [pc, #232]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	4a38      	ldr	r2, [pc, #224]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8be:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800c8c0:	4b37      	ldr	r3, [pc, #220]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	dd1b      	ble.n	800c900 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x650>
				S5.Lock_delay = S5.Lock_delay + 40;
 800c8c8:	4b35      	ldr	r3, [pc, #212]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c8cc:	3328      	adds	r3, #40	; 0x28
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	4b33      	ldr	r3, [pc, #204]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8d2:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c8d4:	4b32      	ldr	r3, [pc, #200]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c8da:	4b31      	ldr	r3, [pc, #196]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c8de:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c8e2:	d90d      	bls.n	800c900 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x650>
					S5.Lock_delay = 700;
 800c8e4:	4b2e      	ldr	r3, [pc, #184]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8e6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c8ea:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c8ec:	4b2c      	ldr	r3, [pc, #176]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c8f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8fa:	4b29      	ldr	r3, [pc, #164]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c8fc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c900:	4b27      	ldr	r3, [pc, #156]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c902:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c906:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c90a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c912:	f200 816b 	bhi.w	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
				S5._Set_Peep = 3;
 800c916:	4b22      	ldr	r3, [pc, #136]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c918:	4a25      	ldr	r2, [pc, #148]	; (800c9b0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x700>)
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c91c:	e166      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
		else if( (S5._Peep_Avg_val_int > (T1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (T1._PEEP_Val+2)) )
 800c91e:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	4a21      	ldr	r2, [pc, #132]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c924:	78d2      	ldrb	r2, [r2, #3]
 800c926:	4293      	cmp	r3, r2
 800c928:	dd44      	ble.n	800c9b4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x704>
 800c92a:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c92e:	4b1e      	ldr	r3, [pc, #120]	; (800c9a8 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f8>)
 800c930:	78db      	ldrb	r3, [r3, #3]
 800c932:	3302      	adds	r3, #2
 800c934:	429a      	cmp	r2, r3
 800c936:	dc3d      	bgt.n	800c9b4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x704>
			S5.error_count++;
 800c938:	4b19      	ldr	r3, [pc, #100]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93c:	3301      	adds	r3, #1
 800c93e:	4a18      	ldr	r2, [pc, #96]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c940:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	2b02      	cmp	r3, #2
 800c948:	dd1b      	ble.n	800c982 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6d2>
				S5.Lock_delay = S5.Lock_delay + 10;
 800c94a:	4b15      	ldr	r3, [pc, #84]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c94c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c94e:	330a      	adds	r3, #10
 800c950:	b29a      	uxth	r2, r3
 800c952:	4b13      	ldr	r3, [pc, #76]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c954:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800c956:	4b12      	ldr	r3, [pc, #72]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c958:	2200      	movs	r2, #0
 800c95a:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800c95c:	4b10      	ldr	r3, [pc, #64]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c95e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c960:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c964:	d90d      	bls.n	800c982 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6d2>
					S5.Lock_delay = 700;
 800c966:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c968:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c96c:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c970:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c974:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c97c:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c97e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c982:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c984:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c988:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c98c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	f200 812a 	bhi.w	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
				S5._Set_Peep = 3;
 800c998:	4b01      	ldr	r3, [pc, #4]	; (800c9a0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x6f0>)
 800c99a:	4a05      	ldr	r2, [pc, #20]	; (800c9b0 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x700>)
 800c99c:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800c99e:	e125      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
 800c9a0:	20016df4 	.word	0x20016df4
 800c9a4:	20000314 	.word	0x20000314
 800c9a8:	20016d10 	.word	0x20016d10
 800c9ac:	2001688c 	.word	0x2001688c
 800c9b0:	40400000 	.word	0x40400000
			else if ((S5._Peep_Avg_val_int == 0 ) )
 800c9b4:	4b98      	ldr	r3, [pc, #608]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d13c      	bne.n	800ca36 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x786>
				S5.error_count2++;
 800c9bc:	4b96      	ldr	r3, [pc, #600]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	4a95      	ldr	r2, [pc, #596]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9c4:	6353      	str	r3, [r2, #52]	; 0x34
				if (S5.error_count2 > 2)
 800c9c6:	4b94      	ldr	r3, [pc, #592]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	dd1e      	ble.n	800ca0c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x75c>
					S5._Set_Peep = S5._Set_Peep + 1;
 800c9ce:	4b92      	ldr	r3, [pc, #584]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c9d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9dc:	4b8e      	ldr	r3, [pc, #568]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9de:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.Lock_delay = S5.Lock_delay - 10;
 800c9e2:	4b8d      	ldr	r3, [pc, #564]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c9e6:	3b0a      	subs	r3, #10
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	4b8b      	ldr	r3, [pc, #556]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9ec:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5.error_count2 = 0;
 800c9ee:	4b8a      	ldr	r3, [pc, #552]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	635a      	str	r2, [r3, #52]	; 0x34
					if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800c9f4:	4b88      	ldr	r3, [pc, #544]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d004      	beq.n	800ca06 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x756>
 800c9fc:	4b86      	ldr	r3, [pc, #536]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800c9fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca00:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ca04:	d902      	bls.n	800ca0c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x75c>
						S5.Lock_delay = 1;
 800ca06:	4b84      	ldr	r3, [pc, #528]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca08:	2201      	movs	r2, #1
 800ca0a:	879a      	strh	r2, [r3, #60]	; 0x3c
				if (S5._Set_Peep > T1._PEEP_Val + 10)
 800ca0c:	4b82      	ldr	r3, [pc, #520]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca0e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ca12:	4b82      	ldr	r3, [pc, #520]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800ca14:	78db      	ldrb	r3, [r3, #3]
 800ca16:	330a      	adds	r3, #10
 800ca18:	ee07 3a90 	vmov	s15, r3
 800ca1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca28:	f340 80e0 	ble.w	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
					S5._Set_Peep = S5._Set_Peep;
 800ca2c:	4b7a      	ldr	r3, [pc, #488]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca30:	4a79      	ldr	r2, [pc, #484]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca32:	6393      	str	r3, [r2, #56]	; 0x38
 800ca34:	e0da      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
			else if ((S5._Peep_Avg_val_int < (T1._PEEP_Val -8)))
 800ca36:	4b78      	ldr	r3, [pc, #480]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca3a:	4b78      	ldr	r3, [pc, #480]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800ca3c:	78db      	ldrb	r3, [r3, #3]
 800ca3e:	3b08      	subs	r3, #8
 800ca40:	429a      	cmp	r2, r3
 800ca42:	da3c      	bge.n	800cabe <Peep_E_Valve_Lock_delay_Pc_SIMV+0x80e>
				S5.error_count2++;
 800ca44:	4b74      	ldr	r3, [pc, #464]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a73      	ldr	r2, [pc, #460]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca4c:	6353      	str	r3, [r2, #52]	; 0x34
				if (S5.error_count2 > 2)
 800ca4e:	4b72      	ldr	r3, [pc, #456]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	dd1e      	ble.n	800ca94 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x7e4>
					S5.Lock_delay = S5.Lock_delay - 50;
 800ca56:	4b70      	ldr	r3, [pc, #448]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca5a:	3b32      	subs	r3, #50	; 0x32
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	4b6e      	ldr	r3, [pc, #440]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca60:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5.error_count2 = 0;
 800ca62:	4b6d      	ldr	r3, [pc, #436]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	635a      	str	r2, [r3, #52]	; 0x34
					if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800ca68:	4b6b      	ldr	r3, [pc, #428]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d004      	beq.n	800ca7a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x7ca>
 800ca70:	4b69      	ldr	r3, [pc, #420]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca74:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ca78:	d90c      	bls.n	800ca94 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x7e4>
						S5.Lock_delay = 1;
 800ca7a:	4b67      	ldr	r3, [pc, #412]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5._Set_Peep = S5._Set_Peep + 0.5;
 800ca80:	4b65      	ldr	r3, [pc, #404]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca82:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ca86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ca8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca8e:	4b62      	ldr	r3, [pc, #392]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca90:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				if (S5._Set_Peep > T1._PEEP_Val + 10)
 800ca94:	4b60      	ldr	r3, [pc, #384]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800ca96:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ca9a:	4b60      	ldr	r3, [pc, #384]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800ca9c:	78db      	ldrb	r3, [r3, #3]
 800ca9e:	330a      	adds	r3, #10
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800caac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab0:	f340 809c 	ble.w	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
					S5._Set_Peep = S5._Set_Peep;
 800cab4:	4b58      	ldr	r3, [pc, #352]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	4a57      	ldr	r2, [pc, #348]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800caba:	6393      	str	r3, [r2, #56]	; 0x38
 800cabc:	e096      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
				else if ((S5._Peep_Avg_val_int >= (T1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (T1._PEEP_Val-2)))
 800cabe:	4b56      	ldr	r3, [pc, #344]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cac2:	4b56      	ldr	r3, [pc, #344]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	3b08      	subs	r3, #8
 800cac8:	429a      	cmp	r2, r3
 800caca:	db42      	blt.n	800cb52 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x8a2>
 800cacc:	4b52      	ldr	r3, [pc, #328]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cad0:	4b52      	ldr	r3, [pc, #328]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cad2:	78db      	ldrb	r3, [r3, #3]
 800cad4:	3b02      	subs	r3, #2
 800cad6:	429a      	cmp	r2, r3
 800cad8:	da3b      	bge.n	800cb52 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x8a2>
					S5.error_count2++;
 800cada:	4b4f      	ldr	r3, [pc, #316]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cade:	3301      	adds	r3, #1
 800cae0:	4a4d      	ldr	r2, [pc, #308]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cae2:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 800cae4:	4b4c      	ldr	r3, [pc, #304]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae8:	2b02      	cmp	r3, #2
 800caea:	dd1e      	ble.n	800cb2a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x87a>
						S5.Lock_delay = S5.Lock_delay - 30;
 800caec:	4b4a      	ldr	r3, [pc, #296]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800caee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800caf0:	3b1e      	subs	r3, #30
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	4b48      	ldr	r3, [pc, #288]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800caf6:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800caf8:	4b47      	ldr	r3, [pc, #284]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800cafe:	4b46      	ldr	r3, [pc, #280]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb00:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d004      	beq.n	800cb10 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x860>
 800cb06:	4b44      	ldr	r3, [pc, #272]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb0a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cb0e:	d90c      	bls.n	800cb2a <Peep_E_Valve_Lock_delay_Pc_SIMV+0x87a>
							S5.Lock_delay = 1;
 800cb10:	4b41      	ldr	r3, [pc, #260]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb12:	2201      	movs	r2, #1
 800cb14:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800cb16:	4b40      	ldr	r3, [pc, #256]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb18:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800cb1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb24:	4b3c      	ldr	r3, [pc, #240]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb26:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800cb2a:	4b3b      	ldr	r3, [pc, #236]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb2c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cb30:	4b3a      	ldr	r3, [pc, #232]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cb32:	78db      	ldrb	r3, [r3, #3]
 800cb34:	330a      	adds	r3, #10
 800cb36:	ee07 3a90 	vmov	s15, r3
 800cb3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	dd51      	ble.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
						S5._Set_Peep = S5._Set_Peep;
 800cb48:	4b33      	ldr	r3, [pc, #204]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	4a32      	ldr	r2, [pc, #200]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb4e:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800cb50:	e04c      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
				else if ((S5._Peep_Avg_val_int >= (T1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (T1._PEEP_Val)))
 800cb52:	4b31      	ldr	r3, [pc, #196]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb56:	4b31      	ldr	r3, [pc, #196]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cb58:	78db      	ldrb	r3, [r3, #3]
 800cb5a:	3b02      	subs	r3, #2
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	db41      	blt.n	800cbe4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x934>
 800cb60:	4b2d      	ldr	r3, [pc, #180]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb64:	4a2d      	ldr	r2, [pc, #180]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cb66:	78d2      	ldrb	r2, [r2, #3]
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	da3b      	bge.n	800cbe4 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x934>
					S5.error_count2++;
 800cb6c:	4b2a      	ldr	r3, [pc, #168]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb70:	3301      	adds	r3, #1
 800cb72:	4a29      	ldr	r2, [pc, #164]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb74:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 800cb76:	4b28      	ldr	r3, [pc, #160]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	dd1e      	ble.n	800cbbc <Peep_E_Valve_Lock_delay_Pc_SIMV+0x90c>
						S5.Lock_delay = S5.Lock_delay - 10;
 800cb7e:	4b26      	ldr	r3, [pc, #152]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb82:	3b0a      	subs	r3, #10
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb88:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 800cb8a:	4b23      	ldr	r3, [pc, #140]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800cb90:	4b21      	ldr	r3, [pc, #132]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d004      	beq.n	800cba2 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x8f2>
 800cb98:	4b1f      	ldr	r3, [pc, #124]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cb9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb9c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800cba0:	d90c      	bls.n	800cbbc <Peep_E_Valve_Lock_delay_Pc_SIMV+0x90c>
							S5._Set_Peep = S5._Set_Peep + 0.5;
 800cba2:	4b1d      	ldr	r3, [pc, #116]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cba4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800cba8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cbac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbb0:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbb2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 800cbb6:	4b18      	ldr	r3, [pc, #96]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800cbbc:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbbe:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cbc2:	4b16      	ldr	r3, [pc, #88]	; (800cc1c <Peep_E_Valve_Lock_delay_Pc_SIMV+0x96c>)
 800cbc4:	78db      	ldrb	r3, [r3, #3]
 800cbc6:	330a      	adds	r3, #10
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd8:	dd08      	ble.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
						S5._Set_Peep = S5._Set_Peep;
 800cbda:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbde:	4a0e      	ldr	r2, [pc, #56]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbe0:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > T1._PEEP_Val + 10)
 800cbe2:	e003      	b.n	800cbec <Peep_E_Valve_Lock_delay_Pc_SIMV+0x93c>
					S5._Set_Peep = S5._Set_Peep;
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe8:	4a0b      	ldr	r2, [pc, #44]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbea:	6393      	str	r3, [r2, #56]	; 0x38
				S5._Peep_Avg_count = 0;
 800cbec:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	621a      	str	r2, [r3, #32]
				S5._Peep_Avg = 0;
 800cbf4:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	615a      	str	r2, [r3, #20]
				S5._Peep_Avg_trigger=0;
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cbfe:	f04f 0200 	mov.w	r2, #0
 800cc02:	619a      	str	r2, [r3, #24]
				S5._Peep_Avg_count_trigger=0;
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <Peep_E_Valve_Lock_delay_Pc_SIMV+0x968>)
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	61da      	str	r2, [r3, #28]
}
 800cc0c:	bf00      	nop
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	20016df4 	.word	0x20016df4
 800cc1c:	20016d10 	.word	0x20016d10

0800cc20 <PC_CMV_Task>:
extern uint8_t now_check_breath;
extern uint8_t Breath;


void PC_CMV_Task (void *argument)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 800cc28:	4b3a      	ldr	r3, [pc, #232]	; (800cd14 <PC_CMV_Task+0xf4>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d068      	beq.n	800cd02 <PC_CMV_Task+0xe2>
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	dc68      	bgt.n	800cd06 <PC_CMV_Task+0xe6>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <PC_CMV_Task+0x1e>
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d011      	beq.n	800cc60 <PC_CMV_Task+0x40>
							}
				break;
				case NoComputeState:
				break;
				default:
				break;
 800cc3c:	e063      	b.n	800cd06 <PC_CMV_Task+0xe6>
					ExpValve_CLOSE();
 800cc3e:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <PC_CMV_Task+0xf8>)
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	4a35      	ldr	r2, [pc, #212]	; (800cd18 <PC_CMV_Task+0xf8>)
 800cc44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc48:	6153      	str	r3, [r2, #20]
					Blower_Signal( S4._DAC_VAL0);
 800cc4a:	4b34      	ldr	r3, [pc, #208]	; (800cd1c <PC_CMV_Task+0xfc>)
 800cc4c:	889a      	ldrh	r2, [r3, #4]
 800cc4e:	4b34      	ldr	r3, [pc, #208]	; (800cd20 <PC_CMV_Task+0x100>)
 800cc50:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 800cc52:	4b34      	ldr	r3, [pc, #208]	; (800cd24 <PC_CMV_Task+0x104>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	64da      	str	r2, [r3, #76]	; 0x4c
					S5.lock=1;
 800cc58:	4b32      	ldr	r3, [pc, #200]	; (800cd24 <PC_CMV_Task+0x104>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	645a      	str	r2, [r3, #68]	; 0x44
				break;
 800cc5e:	e055      	b.n	800cd0c <PC_CMV_Task+0xec>
					S4._DAC_VAL0=0;
 800cc60:	4b2e      	ldr	r3, [pc, #184]	; (800cd1c <PC_CMV_Task+0xfc>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	809a      	strh	r2, [r3, #4]
					Blower_Signal( S4._DAC_VAL0);
 800cc66:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <PC_CMV_Task+0xfc>)
 800cc68:	889a      	ldrh	r2, [r3, #4]
 800cc6a:	4b2d      	ldr	r3, [pc, #180]	; (800cd20 <PC_CMV_Task+0x100>)
 800cc6c:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 800cc6e:	4b2d      	ldr	r3, [pc, #180]	; (800cd24 <PC_CMV_Task+0x104>)
 800cc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d116      	bne.n	800cca4 <PC_CMV_Task+0x84>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 800cc76:	4b2c      	ldr	r3, [pc, #176]	; (800cd28 <PC_CMV_Task+0x108>)
 800cc78:	791b      	ldrb	r3, [r3, #4]
 800cc7a:	ee07 3a90 	vmov	s15, r3
 800cc7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc82:	4b28      	ldr	r3, [pc, #160]	; (800cd24 <PC_CMV_Task+0x104>)
 800cc84:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800cc88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc90:	d504      	bpl.n	800cc9c <PC_CMV_Task+0x7c>
										Blower_Signal( S4._DAC_VAL0);
 800cc92:	4b22      	ldr	r3, [pc, #136]	; (800cd1c <PC_CMV_Task+0xfc>)
 800cc94:	889a      	ldrh	r2, [r3, #4]
 800cc96:	4b22      	ldr	r3, [pc, #136]	; (800cd20 <PC_CMV_Task+0x100>)
 800cc98:	609a      	str	r2, [r3, #8]
 800cc9a:	e003      	b.n	800cca4 <PC_CMV_Task+0x84>
										Blower_Signal( S4._DAC_VAL0);
 800cc9c:	4b1f      	ldr	r3, [pc, #124]	; (800cd1c <PC_CMV_Task+0xfc>)
 800cc9e:	889a      	ldrh	r2, [r3, #4]
 800cca0:	4b1f      	ldr	r3, [pc, #124]	; (800cd20 <PC_CMV_Task+0x100>)
 800cca2:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 800cca4:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <PC_CMV_Task+0x108>)
 800cca6:	791b      	ldrb	r3, [r3, #4]
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ccb0:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccb2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ccb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbe:	d815      	bhi.n	800ccec <PC_CMV_Task+0xcc>
								if(S5.lock==1)
 800ccc0:	4b18      	ldr	r3, [pc, #96]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d107      	bne.n	800ccd8 <PC_CMV_Task+0xb8>
									S5.lock=0;
 800ccc8:	4b16      	ldr	r3, [pc, #88]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	645a      	str	r2, [r3, #68]	; 0x44
									vTaskDelay(S5.Lock_delay);
 800ccce:	4b15      	ldr	r3, [pc, #84]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccd0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f012 fdca 	bl	801f86c <vTaskDelay>
								S5.peep_process_done=1;
 800ccd8:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	64da      	str	r2, [r3, #76]	; 0x4c
								ExpValve_CLOSE();
 800ccde:	4b0e      	ldr	r3, [pc, #56]	; (800cd18 <PC_CMV_Task+0xf8>)
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	4a0d      	ldr	r2, [pc, #52]	; (800cd18 <PC_CMV_Task+0xf8>)
 800cce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cce8:	6153      	str	r3, [r2, #20]
				break;
 800ccea:	e00e      	b.n	800cd0a <PC_CMV_Task+0xea>
							else if(S5.peep_process_done==0)
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <PC_CMV_Task+0x104>)
 800ccee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <PC_CMV_Task+0xea>
								ExpValve_OPEN();
 800ccf4:	4b08      	ldr	r3, [pc, #32]	; (800cd18 <PC_CMV_Task+0xf8>)
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	4a07      	ldr	r2, [pc, #28]	; (800cd18 <PC_CMV_Task+0xf8>)
 800ccfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccfe:	6153      	str	r3, [r2, #20]
				break;
 800cd00:	e003      	b.n	800cd0a <PC_CMV_Task+0xea>
				break;
 800cd02:	bf00      	nop
 800cd04:	e002      	b.n	800cd0c <PC_CMV_Task+0xec>
				break;
 800cd06:	bf00      	nop
 800cd08:	e000      	b.n	800cd0c <PC_CMV_Task+0xec>
				break;
 800cd0a:	bf00      	nop


		}

		vTaskDelay(2);
 800cd0c:	2002      	movs	r0, #2
 800cd0e:	f012 fdad 	bl	801f86c <vTaskDelay>
		switch (_CurrentComputationState)
 800cd12:	e789      	b.n	800cc28 <PC_CMV_Task+0x8>
 800cd14:	20016cc8 	.word	0x20016cc8
 800cd18:	40020400 	.word	0x40020400
 800cd1c:	200000d4 	.word	0x200000d4
 800cd20:	40007400 	.word	0x40007400
 800cd24:	20016df4 	.word	0x20016df4
 800cd28:	20016cfc 	.word	0x20016cfc

0800cd2c <PC_CMV_Pulse_I_Parameter>:
}



void PC_CMV_Pulse_I_Parameter()
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
	   now_check_breath=1;
 800cd30:	4b2f      	ldr	r3, [pc, #188]	; (800cdf0 <PC_CMV_Pulse_I_Parameter+0xc4>)
 800cd32:	2201      	movs	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
	   _Control_Byte &= (uint8_t) (~(0x80));
 800cd36:	4b2f      	ldr	r3, [pc, #188]	; (800cdf4 <PC_CMV_Pulse_I_Parameter+0xc8>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	4b2c      	ldr	r3, [pc, #176]	; (800cdf4 <PC_CMV_Pulse_I_Parameter+0xc8>)
 800cd42:	701a      	strb	r2, [r3, #0]
	   vol.Volume = 0;
 800cd44:	4b2c      	ldr	r3, [pc, #176]	; (800cdf8 <PC_CMV_Pulse_I_Parameter+0xcc>)
 800cd46:	f04f 0200 	mov.w	r2, #0
 800cd4a:	605a      	str	r2, [r3, #4]
	   V_max=0;
 800cd4c:	4b2b      	ldr	r3, [pc, #172]	; (800cdfc <PC_CMV_Pulse_I_Parameter+0xd0>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
		_I_TIMER_ACHEIVED = 0;
 800cd52:	4b2b      	ldr	r3, [pc, #172]	; (800ce00 <PC_CMV_Pulse_I_Parameter+0xd4>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 800cd58:	4b2a      	ldr	r3, [pc, #168]	; (800ce04 <PC_CMV_Pulse_I_Parameter+0xd8>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	64da      	str	r2, [r3, #76]	; 0x4c
		S4._DAC_VAL0 = S4.starting_DAC;
 800cd5e:	4b2a      	ldr	r3, [pc, #168]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd60:	edd3 7a00 	vldr	s15, [r3]
 800cd64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd68:	ee17 3a90 	vmov	r3, s15
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	4b26      	ldr	r3, [pc, #152]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd70:	809a      	strh	r2, [r3, #4]
	    S4.Last_DAC = S4._DAC_VAL0;
 800cd72:	4b25      	ldr	r3, [pc, #148]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd74:	889a      	ldrh	r2, [r3, #4]
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd78:	80da      	strh	r2, [r3, #6]
		S3.ok = 1;
 800cd7a:	4b24      	ldr	r3, [pc, #144]	; (800ce0c <PC_CMV_Pulse_I_Parameter+0xe0>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
		S3.cycle_done = 1;
 800cd80:	4b22      	ldr	r3, [pc, #136]	; (800ce0c <PC_CMV_Pulse_I_Parameter+0xe0>)
 800cd82:	2201      	movs	r2, #1
 800cd84:	605a      	str	r2, [r3, #4]
		S4.last_result1 = S4.result1;
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	4a1f      	ldr	r2, [pc, #124]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cd8c:	60d3      	str	r3, [r2, #12]
		Led_Alert();
 800cd8e:	f7f5 fda9 	bl	80028e4 <Led_Alert>
		DAC_Value_Correction();
 800cd92:	f000 f949 	bl	800d028 <DAC_Value_Correction>
		Ending_Dac_value_correction();
 800cd96:	f000 f875 	bl	800ce84 <Ending_Dac_value_correction>
		S5.P_Max = 0;
 800cd9a:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <PC_CMV_Pulse_I_Parameter+0xd8>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]
		S3.Pip_Acheived_Flag = 0;
 800cda0:	4b1a      	ldr	r3, [pc, #104]	; (800ce0c <PC_CMV_Pulse_I_Parameter+0xe0>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	609a      	str	r2, [r3, #8]
		S5.now_check = 0;
 800cda6:	4b17      	ldr	r3, [pc, #92]	; (800ce04 <PC_CMV_Pulse_I_Parameter+0xd8>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	649a      	str	r2, [r3, #72]	; 0x48
		S5.P_Min = 60;
 800cdac:	4b15      	ldr	r3, [pc, #84]	; (800ce04 <PC_CMV_Pulse_I_Parameter+0xd8>)
 800cdae:	223c      	movs	r2, #60	; 0x3c
 800cdb0:	605a      	str	r2, [r3, #4]
		S3.cycle_done = 1;
 800cdb2:	4b16      	ldr	r3, [pc, #88]	; (800ce0c <PC_CMV_Pulse_I_Parameter+0xe0>)
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	605a      	str	r2, [r3, #4]
		Peep_E_Valve_Lock_delay_Pc_cmv();
 800cdb8:	f000 fe4e 	bl	800da58 <Peep_E_Valve_Lock_delay_Pc_cmv>
		S4.ten_ms = 0;
 800cdbc:	4b12      	ldr	r3, [pc, #72]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	831a      	strh	r2, [r3, #24]
		S4.Acheived_ten_ms = 0;
 800cdc2:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <PC_CMV_Pulse_I_Parameter+0xdc>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	839a      	strh	r2, [r3, #28]
		Alert_I_Time_Parameter();
 800cdc8:	f7f5 fbda 	bl	8002580 <Alert_I_Time_Parameter>
		_I_TIMER = S2._I_TIMER_HOLD;
 800cdcc:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <PC_CMV_Pulse_I_Parameter+0xe4>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a10      	ldr	r2, [pc, #64]	; (800ce14 <PC_CMV_Pulse_I_Parameter+0xe8>)
 800cdd2:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 800cdd4:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <PC_CMV_Pulse_I_Parameter+0xec>)
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 800cdda:	4b10      	ldr	r3, [pc, #64]	; (800ce1c <PC_CMV_Pulse_I_Parameter+0xf0>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]


		vTaskDelay(S2._I_TIMER_HOLD);
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <PC_CMV_Pulse_I_Parameter+0xe4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f012 fd41 	bl	801f86c <vTaskDelay>
}
 800cdea:	bf00      	nop
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20000feb 	.word	0x20000feb
 800cdf4:	20016e59 	.word	0x20016e59
 800cdf8:	20016d44 	.word	0x20016d44
 800cdfc:	20016d60 	.word	0x20016d60
 800ce00:	20016af4 	.word	0x20016af4
 800ce04:	20016df4 	.word	0x20016df4
 800ce08:	200000d4 	.word	0x200000d4
 800ce0c:	2001686c 	.word	0x2001686c
 800ce10:	20016d64 	.word	0x20016d64
 800ce14:	20016df0 	.word	0x20016df0
 800ce18:	20016adc 	.word	0x20016adc
 800ce1c:	20016cc8 	.word	0x20016cc8

0800ce20 <PC_CMV_Pulse_E_Parameter>:



void PC_CMV_Pulse_E_Parameter()
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	af00      	add	r7, sp, #0

	 _Control_Byte |= (uint8_t) 0x80;
 800ce24:	4b10      	ldr	r3, [pc, #64]	; (800ce68 <PC_CMV_Pulse_E_Parameter+0x48>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	4b0e      	ldr	r3, [pc, #56]	; (800ce68 <PC_CMV_Pulse_E_Parameter+0x48>)
 800ce30:	701a      	strb	r2, [r3, #0]
	 _E_TIMER = S2._E_TIMER_HOLD;
 800ce32:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <PC_CMV_Pulse_E_Parameter+0x4c>)
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	4a0e      	ldr	r2, [pc, #56]	; (800ce70 <PC_CMV_Pulse_E_Parameter+0x50>)
 800ce38:	6013      	str	r3, [r2, #0]
	 _E_TIMER_ACHEIVED = 0;
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <PC_CMV_Pulse_E_Parameter+0x54>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	801a      	strh	r2, [r3, #0]
	 S5.lock = 1;
 800ce40:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <PC_CMV_Pulse_E_Parameter+0x58>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	645a      	str	r2, [r3, #68]	; 0x44
	 Alert_E_Time_Parameter();
 800ce46:	f7f5 fbe7 	bl	8002618 <Alert_E_Time_Parameter>
	 adjust_servo();
 800ce4a:	f7fd fd4d 	bl	800a8e8 <adjust_servo>
	_CurrentWaveFormState = Generate_I_Wave;
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <PC_CMV_Pulse_E_Parameter+0x5c>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 800ce54:	4b0a      	ldr	r3, [pc, #40]	; (800ce80 <PC_CMV_Pulse_E_Parameter+0x60>)
 800ce56:	2201      	movs	r2, #1
 800ce58:	701a      	strb	r2, [r3, #0]

	vTaskDelay(S2._E_TIMER_HOLD);
 800ce5a:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <PC_CMV_Pulse_E_Parameter+0x4c>)
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f012 fd04 	bl	801f86c <vTaskDelay>

}
 800ce64:	bf00      	nop
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20016e59 	.word	0x20016e59
 800ce6c:	20016d64 	.word	0x20016d64
 800ce70:	20016d74 	.word	0x20016d74
 800ce74:	20016eb4 	.word	0x20016eb4
 800ce78:	20016df4 	.word	0x20016df4
 800ce7c:	20016adc 	.word	0x20016adc
 800ce80:	20016cc8 	.word	0x20016cc8

0800ce84 <Ending_Dac_value_correction>:



void Ending_Dac_value_correction()
{
 800ce84:	b480      	push	{r7}
 800ce86:	af00      	add	r7, sp, #0

	if(S1.RR>=30 || S2.ramp_time>80 || (S1.E_Time>4))
 800ce88:	4b5f      	ldr	r3, [pc, #380]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800ce8a:	7c9b      	ldrb	r3, [r3, #18]
 800ce8c:	2b1d      	cmp	r3, #29
 800ce8e:	d807      	bhi.n	800cea0 <Ending_Dac_value_correction+0x1c>
 800ce90:	4b5e      	ldr	r3, [pc, #376]	; (800d00c <Ending_Dac_value_correction+0x188>)
 800ce92:	891b      	ldrh	r3, [r3, #8]
 800ce94:	2b50      	cmp	r3, #80	; 0x50
 800ce96:	d803      	bhi.n	800cea0 <Ending_Dac_value_correction+0x1c>
 800ce98:	4b5b      	ldr	r3, [pc, #364]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d961      	bls.n	800cf64 <Ending_Dac_value_correction+0xe0>
    {
		    if(S5.P_Max>(S1._PIP_Val))
 800cea0:	4b5b      	ldr	r3, [pc, #364]	; (800d010 <Ending_Dac_value_correction+0x18c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a58      	ldr	r2, [pc, #352]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800cea6:	7892      	ldrb	r2, [r2, #2]
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	dd28      	ble.n	800cefe <Ending_Dac_value_correction+0x7a>
			{
		    	S4.pmax_error1++;
 800ceac:	4b59      	ldr	r3, [pc, #356]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	4a58      	ldr	r2, [pc, #352]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800ceb4:	6253      	str	r3, [r2, #36]	; 0x24
		    	S4.pmax_error2=0;
 800ceb6:	4b57      	ldr	r3, [pc, #348]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	621a      	str	r2, [r3, #32]
		    	if(S4.pmax_error1>2)
 800cebc:	4b55      	ldr	r3, [pc, #340]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	f340 809a 	ble.w	800cffa <Ending_Dac_value_correction+0x176>
		    	{
		    	S4.Ending_Dac=S4.Ending_Dac-1;
 800cec6:	4b53      	ldr	r3, [pc, #332]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cec8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ced0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ced4:	4b4f      	ldr	r3, [pc, #316]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800ced6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				S4.pmax_error1=0;
 800ceda:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cedc:	2200      	movs	r2, #0
 800cede:	625a      	str	r2, [r3, #36]	; 0x24
					if(S4.Ending_Dac<=500)
 800cee0:	4b4c      	ldr	r3, [pc, #304]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cee2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cee6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d018 <Ending_Dac_value_correction+0x194>
 800ceea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ceee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef2:	d900      	bls.n	800cef6 <Ending_Dac_value_correction+0x72>
		    if(S5.P_Max>(S1._PIP_Val))
 800cef4:	e081      	b.n	800cffa <Ending_Dac_value_correction+0x176>
						S4.Ending_Dac=500;
 800cef6:	4b47      	ldr	r3, [pc, #284]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cef8:	4a48      	ldr	r2, [pc, #288]	; (800d01c <Ending_Dac_value_correction+0x198>)
 800cefa:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 800cefc:	e07d      	b.n	800cffa <Ending_Dac_value_correction+0x176>
		    	}
			}
			else if(S5.P_Max<(S1._PIP_Val))
 800cefe:	4b44      	ldr	r3, [pc, #272]	; (800d010 <Ending_Dac_value_correction+0x18c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a41      	ldr	r2, [pc, #260]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800cf04:	7892      	ldrb	r2, [r2, #2]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	da27      	bge.n	800cf5a <Ending_Dac_value_correction+0xd6>
			{
				S4.pmax_error2++;
 800cf0a:	4b42      	ldr	r3, [pc, #264]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	4a40      	ldr	r2, [pc, #256]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf12:	6213      	str	r3, [r2, #32]
				S4.pmax_error1=0;
 800cf14:	4b3f      	ldr	r3, [pc, #252]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	625a      	str	r2, [r3, #36]	; 0x24
				if(S4.pmax_error2>2)
 800cf1a:	4b3e      	ldr	r3, [pc, #248]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	dd6b      	ble.n	800cffa <Ending_Dac_value_correction+0x176>
				{
				S4.Ending_Dac=S4.Ending_Dac+1;
 800cf22:	4b3c      	ldr	r3, [pc, #240]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cf28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf30:	4b38      	ldr	r3, [pc, #224]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf32:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				S4.pmax_error2=0;
 800cf36:	4b37      	ldr	r3, [pc, #220]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	621a      	str	r2, [r3, #32]
				if(S4.Ending_Dac>=4095)
 800cf3c:	4b35      	ldr	r3, [pc, #212]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cf42:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d020 <Ending_Dac_value_correction+0x19c>
 800cf46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4e:	da00      	bge.n	800cf52 <Ending_Dac_value_correction+0xce>
		    if(S5.P_Max>(S1._PIP_Val))
 800cf50:	e053      	b.n	800cffa <Ending_Dac_value_correction+0x176>
					 S4.Ending_Dac=4095;
 800cf52:	4b30      	ldr	r3, [pc, #192]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf54:	4a33      	ldr	r2, [pc, #204]	; (800d024 <Ending_Dac_value_correction+0x1a0>)
 800cf56:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 800cf58:	e04f      	b.n	800cffa <Ending_Dac_value_correction+0x176>
				}
			}
			else
			{
				S4.Ending_Dac=S4.Ending_Dac;
 800cf5a:	4b2e      	ldr	r3, [pc, #184]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	4a2d      	ldr	r2, [pc, #180]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf60:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 800cf62:	e04a      	b.n	800cffa <Ending_Dac_value_correction+0x176>
			}
    }

 else if(S1.RR<30 || S2.ramp_time<=80)
 800cf64:	4b28      	ldr	r3, [pc, #160]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800cf66:	7c9b      	ldrb	r3, [r3, #18]
 800cf68:	2b1d      	cmp	r3, #29
 800cf6a:	d903      	bls.n	800cf74 <Ending_Dac_value_correction+0xf0>
 800cf6c:	4b27      	ldr	r3, [pc, #156]	; (800d00c <Ending_Dac_value_correction+0x188>)
 800cf6e:	891b      	ldrh	r3, [r3, #8]
 800cf70:	2b50      	cmp	r3, #80	; 0x50
 800cf72:	d843      	bhi.n	800cffc <Ending_Dac_value_correction+0x178>
 {
	if(S5._Pip_Avg_val_int>S1._PIP_Val)
 800cf74:	4b26      	ldr	r3, [pc, #152]	; (800d010 <Ending_Dac_value_correction+0x18c>)
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	4a23      	ldr	r2, [pc, #140]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800cf7a:	7892      	ldrb	r2, [r2, #2]
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	dd18      	ble.n	800cfb2 <Ending_Dac_value_correction+0x12e>
	{
		S4.Ending_Dac=S4.Ending_Dac-5;
 800cf80:	4b24      	ldr	r3, [pc, #144]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf82:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cf86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800cf8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf8e:	4b21      	ldr	r3, [pc, #132]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf90:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(S4.Ending_Dac<=500)
 800cf94:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cf96:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cf9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d018 <Ending_Dac_value_correction+0x194>
 800cf9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	d900      	bls.n	800cfaa <Ending_Dac_value_correction+0x126>
	{
		S4.Ending_Dac=S4.Ending_Dac;

	}
 }
}
 800cfa8:	e028      	b.n	800cffc <Ending_Dac_value_correction+0x178>
			S4.Ending_Dac=500;
 800cfaa:	4b1a      	ldr	r3, [pc, #104]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cfac:	4a1b      	ldr	r2, [pc, #108]	; (800d01c <Ending_Dac_value_correction+0x198>)
 800cfae:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cfb0:	e024      	b.n	800cffc <Ending_Dac_value_correction+0x178>
	else if(S5._Pip_Avg_val_int<S1._PIP_Val)
 800cfb2:	4b17      	ldr	r3, [pc, #92]	; (800d010 <Ending_Dac_value_correction+0x18c>)
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	4a14      	ldr	r2, [pc, #80]	; (800d008 <Ending_Dac_value_correction+0x184>)
 800cfb8:	7892      	ldrb	r2, [r2, #2]
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	da18      	bge.n	800cff0 <Ending_Dac_value_correction+0x16c>
		S4.Ending_Dac=S4.Ending_Dac+5;
 800cfbe:	4b15      	ldr	r3, [pc, #84]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cfc0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cfc4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800cfc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfcc:	4b11      	ldr	r3, [pc, #68]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cfce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(S4.Ending_Dac>=4095)
 800cfd2:	4b10      	ldr	r3, [pc, #64]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cfd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cfd8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d020 <Ending_Dac_value_correction+0x19c>
 800cfdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe4:	da00      	bge.n	800cfe8 <Ending_Dac_value_correction+0x164>
}
 800cfe6:	e009      	b.n	800cffc <Ending_Dac_value_correction+0x178>
			S4.Ending_Dac=4095;
 800cfe8:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cfea:	4a0e      	ldr	r2, [pc, #56]	; (800d024 <Ending_Dac_value_correction+0x1a0>)
 800cfec:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cfee:	e005      	b.n	800cffc <Ending_Dac_value_correction+0x178>
		S4.Ending_Dac=S4.Ending_Dac;
 800cff0:	4b08      	ldr	r3, [pc, #32]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff4:	4a07      	ldr	r2, [pc, #28]	; (800d014 <Ending_Dac_value_correction+0x190>)
 800cff6:	6293      	str	r3, [r2, #40]	; 0x28
}
 800cff8:	e000      	b.n	800cffc <Ending_Dac_value_correction+0x178>
		    if(S5.P_Max>(S1._PIP_Val))
 800cffa:	bf00      	nop
}
 800cffc:	bf00      	nop
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	20016ae0 	.word	0x20016ae0
 800d00c:	20016d64 	.word	0x20016d64
 800d010:	20016df4 	.word	0x20016df4
 800d014:	200000d4 	.word	0x200000d4
 800d018:	43fa0000 	.word	0x43fa0000
 800d01c:	43fa0000 	.word	0x43fa0000
 800d020:	457ff000 	.word	0x457ff000
 800d024:	457ff000 	.word	0x457ff000

0800d028 <DAC_Value_Correction>:

void DAC_Value_Correction()
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
		 if(S4.Acheived_ms < (S2.ramp_time_percentage -40))
 800d02c:	4b17      	ldr	r3, [pc, #92]	; (800d08c <DAC_Value_Correction+0x64>)
 800d02e:	8b5b      	ldrh	r3, [r3, #26]
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d038:	4b15      	ldr	r3, [pc, #84]	; (800d090 <DAC_Value_Correction+0x68>)
 800d03a:	edd3 7a03 	vldr	s15, [r3, #12]
 800d03e:	eddf 6a15 	vldr	s13, [pc, #84]	; 800d094 <DAC_Value_Correction+0x6c>
 800d042:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	d502      	bpl.n	800d056 <DAC_Value_Correction+0x2e>
	     {
			 Pip_Acheived_Early();
 800d050:	f000 faca 	bl	800d5e8 <Pip_Acheived_Early>
 800d054:	e016      	b.n	800d084 <DAC_Value_Correction+0x5c>

	     }
	     else if(S4.Acheived_ms > (S2.ramp_time_percentage +40))
 800d056:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <DAC_Value_Correction+0x64>)
 800d058:	8b5b      	ldrh	r3, [r3, #26]
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d062:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <DAC_Value_Correction+0x68>)
 800d064:	edd3 7a03 	vldr	s15, [r3, #12]
 800d068:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d094 <DAC_Value_Correction+0x6c>
 800d06c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d078:	dd02      	ble.n	800d080 <DAC_Value_Correction+0x58>
	     {
	    	  Pip_Acheived_Slowly();
 800d07a:	f000 fbf1 	bl	800d860 <Pip_Acheived_Slowly>
 800d07e:	e001      	b.n	800d084 <DAC_Value_Correction+0x5c>
	     }
	     else
	     {
	    	   Pip_Acheived_Normally();
 800d080:	f000 fcae 	bl	800d9e0 <Pip_Acheived_Normally>
	     }
		 Pip_Not_Acheived();
 800d084:	f000 fcba 	bl	800d9fc <Pip_Not_Acheived>
}
 800d088:	bf00      	nop
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	200000d4 	.word	0x200000d4
 800d090:	20016d64 	.word	0x20016d64
 800d094:	42200000 	.word	0x42200000

0800d098 <pip_value_correction>:

void pip_value_correction()
{
 800d098:	b480      	push	{r7}
 800d09a:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (S1._PIP_Val ))
 800d09c:	4b37      	ldr	r3, [pc, #220]	; (800d17c <pip_value_correction+0xe4>)
 800d09e:	791a      	ldrb	r2, [r3, #4]
 800d0a0:	4b37      	ldr	r3, [pc, #220]	; (800d180 <pip_value_correction+0xe8>)
 800d0a2:	789b      	ldrb	r3, [r3, #2]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d31e      	bcc.n	800d0e6 <pip_value_correction+0x4e>
	{
		S3.cycle_done = 0;
 800d0a8:	4b36      	ldr	r3, [pc, #216]	; (800d184 <pip_value_correction+0xec>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	605a      	str	r2, [r3, #4]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
		if(S3.ok==1)
 800d0ae:	4b35      	ldr	r3, [pc, #212]	; (800d184 <pip_value_correction+0xec>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d117      	bne.n	800d0e6 <pip_value_correction+0x4e>
		{
			S4.Acheived_ten_ms = S4.ten_ms;
 800d0b6:	4b34      	ldr	r3, [pc, #208]	; (800d188 <pip_value_correction+0xf0>)
 800d0b8:	8b1a      	ldrh	r2, [r3, #24]
 800d0ba:	4b33      	ldr	r3, [pc, #204]	; (800d188 <pip_value_correction+0xf0>)
 800d0bc:	839a      	strh	r2, [r3, #28]
			S4.Acheived_ms=(S4.Acheived_ten_ms*S4.PID_task_delay);
 800d0be:	4b32      	ldr	r3, [pc, #200]	; (800d188 <pip_value_correction+0xf0>)
 800d0c0:	8b9a      	ldrh	r2, [r3, #28]
 800d0c2:	4b31      	ldr	r3, [pc, #196]	; (800d188 <pip_value_correction+0xf0>)
 800d0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	fb12 f303 	smulbb	r3, r2, r3
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	4b2e      	ldr	r3, [pc, #184]	; (800d188 <pip_value_correction+0xf0>)
 800d0d0:	835a      	strh	r2, [r3, #26]
			S3.ok=0;
 800d0d2:	4b2c      	ldr	r3, [pc, #176]	; (800d184 <pip_value_correction+0xec>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
			S3.Pip_Acheived_Flag=1;
 800d0d8:	4b2a      	ldr	r3, [pc, #168]	; (800d184 <pip_value_correction+0xec>)
 800d0da:	2201      	movs	r2, #1
 800d0dc:	609a      	str	r2, [r3, #8]
			S4._DAC_VAL0 = S4.Last_DAC;
 800d0de:	4b2a      	ldr	r3, [pc, #168]	; (800d188 <pip_value_correction+0xf0>)
 800d0e0:	88da      	ldrh	r2, [r3, #6]
 800d0e2:	4b29      	ldr	r3, [pc, #164]	; (800d188 <pip_value_correction+0xf0>)
 800d0e4:	809a      	strh	r2, [r3, #4]
		}
	}
	if (S3.cycle_done == 1)
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <pip_value_correction+0xec>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d140      	bne.n	800d170 <pip_value_correction+0xd8>
	{
		if (S4.Last_DAC >= S4.Ending_Dac)
 800d0ee:	4b26      	ldr	r3, [pc, #152]	; (800d188 <pip_value_correction+0xf0>)
 800d0f0:	88db      	ldrh	r3, [r3, #6]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0fa:	4b23      	ldr	r3, [pc, #140]	; (800d188 <pip_value_correction+0xf0>)
 800d0fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d108:	db0d      	blt.n	800d126 <pip_value_correction+0x8e>
		{
			S4.Last_DAC = S4.Ending_Dac;
 800d10a:	4b1f      	ldr	r3, [pc, #124]	; (800d188 <pip_value_correction+0xf0>)
 800d10c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d114:	ee17 3a90 	vmov	r3, s15
 800d118:	b29a      	uxth	r2, r3
 800d11a:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <pip_value_correction+0xf0>)
 800d11c:	80da      	strh	r2, [r3, #6]
			S3.cycle_done = 0;
 800d11e:	4b19      	ldr	r3, [pc, #100]	; (800d184 <pip_value_correction+0xec>)
 800d120:	2200      	movs	r2, #0
 800d122:	605a      	str	r2, [r3, #4]
			S4.Last_DAC = S4._DAC_VAL0;
			S4._DAC_VAL0=S4.Last_DAC + (S4.incrementing_Dac_value_10ms );
		}
	}

}
 800d124:	e024      	b.n	800d170 <pip_value_correction+0xd8>
		else if (S4.Last_DAC < S4.Ending_Dac)
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <pip_value_correction+0xf0>)
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <pip_value_correction+0xf0>)
 800d134:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d140:	d400      	bmi.n	800d144 <pip_value_correction+0xac>
}
 800d142:	e015      	b.n	800d170 <pip_value_correction+0xd8>
			S4.Last_DAC = S4._DAC_VAL0;
 800d144:	4b10      	ldr	r3, [pc, #64]	; (800d188 <pip_value_correction+0xf0>)
 800d146:	889a      	ldrh	r2, [r3, #4]
 800d148:	4b0f      	ldr	r3, [pc, #60]	; (800d188 <pip_value_correction+0xf0>)
 800d14a:	80da      	strh	r2, [r3, #6]
			S4._DAC_VAL0=S4.Last_DAC + (S4.incrementing_Dac_value_10ms );
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <pip_value_correction+0xf0>)
 800d14e:	88db      	ldrh	r3, [r3, #6]
 800d150:	ee07 3a90 	vmov	s15, r3
 800d154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d158:	4b0b      	ldr	r3, [pc, #44]	; (800d188 <pip_value_correction+0xf0>)
 800d15a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d166:	ee17 3a90 	vmov	r3, s15
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	4b06      	ldr	r3, [pc, #24]	; (800d188 <pip_value_correction+0xf0>)
 800d16e:	809a      	strh	r2, [r3, #4]
}
 800d170:	bf00      	nop
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	20016cfc 	.word	0x20016cfc
 800d180:	20016ae0 	.word	0x20016ae0
 800d184:	2001686c 	.word	0x2001686c
 800d188:	200000d4 	.word	0x200000d4
 800d18c:	00000000 	.word	0x00000000

0800d190 <PC_CMV_PARAMETERS>:




void PC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800d190:	b5b0      	push	{r4, r5, r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

			S1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	791a      	ldrb	r2, [r3, #4]
 800d19c:	4bb0      	ldr	r3, [pc, #704]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d19e:	709a      	strb	r2, [r3, #2]
			S1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	795a      	ldrb	r2, [r3, #5]
 800d1a4:	4bae      	ldr	r3, [pc, #696]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1a6:	70da      	strb	r2, [r3, #3]
			S1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	7a5b      	ldrb	r3, [r3, #9]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d1b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	4ba9      	ldr	r3, [pc, #676]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1ba:	605a      	str	r2, [r3, #4]
			S1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	7a1b      	ldrb	r3, [r3, #8]
 800d1c0:	091b      	lsrs	r3, r3, #4
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4ba6      	ldr	r3, [pc, #664]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1c8:	609a      	str	r2, [r3, #8]
			S1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7a1b      	ldrb	r3, [r3, #8]
 800d1ce:	f003 030f 	and.w	r3, r3, #15
 800d1d2:	4aa3      	ldr	r2, [pc, #652]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1d4:	60d3      	str	r3, [r2, #12]
			S1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7adb      	ldrb	r3, [r3, #11]
 800d1da:	091b      	lsrs	r3, r3, #4
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	4b9f      	ldr	r3, [pc, #636]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1e2:	821a      	strh	r2, [r3, #16]
			S1.RR=RX_PARAM_CMD_PACKET->_RR;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7a5a      	ldrb	r2, [r3, #9]
 800d1e8:	4b9d      	ldr	r3, [pc, #628]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1ea:	749a      	strb	r2, [r3, #18]


			S2._I_TIMER_HOLD = (S1.I_Time * (S1.CycleTime / (S1.I_Time +S1.E_Time)));
 800d1ec:	4b9c      	ldr	r3, [pc, #624]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	4a9b      	ldr	r2, [pc, #620]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1f2:	6851      	ldr	r1, [r2, #4]
 800d1f4:	4a9a      	ldr	r2, [pc, #616]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1f6:	6890      	ldr	r0, [r2, #8]
 800d1f8:	4a99      	ldr	r2, [pc, #612]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d1fa:	68d2      	ldr	r2, [r2, #12]
 800d1fc:	4402      	add	r2, r0
 800d1fe:	fbb1 f2f2 	udiv	r2, r1, r2
 800d202:	fb02 f303 	mul.w	r3, r2, r3
 800d206:	4a97      	ldr	r2, [pc, #604]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d208:	6013      	str	r3, [r2, #0]
			S2._E_TIMER_HOLD = (S1.E_Time * (S1.CycleTime / (S1.I_Time + S1.E_Time)));
 800d20a:	4b95      	ldr	r3, [pc, #596]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	4a94      	ldr	r2, [pc, #592]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d210:	6851      	ldr	r1, [r2, #4]
 800d212:	4a93      	ldr	r2, [pc, #588]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d214:	6890      	ldr	r0, [r2, #8]
 800d216:	4a92      	ldr	r2, [pc, #584]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d218:	68d2      	ldr	r2, [r2, #12]
 800d21a:	4402      	add	r2, r0
 800d21c:	fbb1 f2f2 	udiv	r2, r1, r2
 800d220:	fb02 f303 	mul.w	r3, r2, r3
 800d224:	4a8f      	ldr	r2, [pc, #572]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d226:	6053      	str	r3, [r2, #4]
			S2.ramp_time=(S1.RT_Value*10);
 800d228:	4b8d      	ldr	r3, [pc, #564]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d22a:	8a1b      	ldrh	r3, [r3, #16]
 800d22c:	461a      	mov	r2, r3
 800d22e:	0092      	lsls	r2, r2, #2
 800d230:	4413      	add	r3, r2
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	b29a      	uxth	r2, r3
 800d236:	4b8b      	ldr	r3, [pc, #556]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d238:	811a      	strh	r2, [r3, #8]
			S2.ramp_time_percentage = ((float)S2.ramp_time/100.00)*(S2._I_TIMER_HOLD) ;
 800d23a:	4b8a      	ldr	r3, [pc, #552]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d23c:	891b      	ldrh	r3, [r3, #8]
 800d23e:	ee07 3a90 	vmov	s15, r3
 800d242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d246:	ee17 0a90 	vmov	r0, s15
 800d24a:	f7f3 f925 	bl	8000498 <__aeabi_f2d>
 800d24e:	f04f 0200 	mov.w	r2, #0
 800d252:	4b85      	ldr	r3, [pc, #532]	; (800d468 <PC_CMV_PARAMETERS+0x2d8>)
 800d254:	f7f3 faa2 	bl	800079c <__aeabi_ddiv>
 800d258:	4602      	mov	r2, r0
 800d25a:	460b      	mov	r3, r1
 800d25c:	4614      	mov	r4, r2
 800d25e:	461d      	mov	r5, r3
 800d260:	4b80      	ldr	r3, [pc, #512]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f7f3 f8f5 	bl	8000454 <__aeabi_ui2d>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 f969 	bl	8000548 <__aeabi_dmul>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	4610      	mov	r0, r2
 800d27c:	4619      	mov	r1, r3
 800d27e:	f7f3 fc45 	bl	8000b0c <__aeabi_d2f>
 800d282:	4603      	mov	r3, r0
 800d284:	4a77      	ldr	r2, [pc, #476]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d286:	60d3      	str	r3, [r2, #12]
			S4.Ending_Dac=17.1129 * (S1._PIP_Val) + 587.7390+((1/70)*200);
 800d288:	4b75      	ldr	r3, [pc, #468]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d28a:	789b      	ldrb	r3, [r3, #2]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f3 f8f1 	bl	8000474 <__aeabi_i2d>
 800d292:	a36f      	add	r3, pc, #444	; (adr r3, 800d450 <PC_CMV_PARAMETERS+0x2c0>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	f7f3 f956 	bl	8000548 <__aeabi_dmul>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	a36c      	add	r3, pc, #432	; (adr r3, 800d458 <PC_CMV_PARAMETERS+0x2c8>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f7f2 ff97 	bl	80001dc <__adddf3>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	f04f 0200 	mov.w	r2, #0
 800d2ba:	f04f 0300 	mov.w	r3, #0
 800d2be:	f7f2 ff8d 	bl	80001dc <__adddf3>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f7f3 fc1f 	bl	8000b0c <__aeabi_d2f>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	4a66      	ldr	r2, [pc, #408]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d2d2:	6293      	str	r3, [r2, #40]	; 0x28
			S4.incrementing_Dac_value_10ms=70;
 800d2d4:	4b65      	ldr	r3, [pc, #404]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d2d6:	4a66      	ldr	r2, [pc, #408]	; (800d470 <PC_CMV_PARAMETERS+0x2e0>)
 800d2d8:	62da      	str	r2, [r3, #44]	; 0x2c
			S4.Acheived_ms=(S2.ramp_time_percentage*2);
 800d2da:	4b62      	ldr	r3, [pc, #392]	; (800d464 <PC_CMV_PARAMETERS+0x2d4>)
 800d2dc:	edd3 7a03 	vldr	s15, [r3, #12]
 800d2e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2e8:	ee17 3a90 	vmov	r3, s15
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	4b5f      	ldr	r3, [pc, #380]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d2f0:	835a      	strh	r2, [r3, #26]

			S3.Pip_Acheived_Flag=0;
 800d2f2:	4b60      	ldr	r3, [pc, #384]	; (800d474 <PC_CMV_PARAMETERS+0x2e4>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	609a      	str	r2, [r3, #8]
			S4.nack=1;
 800d2f8:	4b5c      	ldr	r3, [pc, #368]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	631a      	str	r2, [r3, #48]	; 0x30
			S4.PID_task_delay=10;
 800d2fe:	4b5b      	ldr	r3, [pc, #364]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d300:	220a      	movs	r2, #10
 800d302:	635a      	str	r2, [r3, #52]	; 0x34
			S4.result1_error=0;
 800d304:	4b59      	ldr	r3, [pc, #356]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d306:	2200      	movs	r2, #0
 800d308:	63da      	str	r2, [r3, #60]	; 0x3c
			S4.last_result1=0;
 800d30a:	4b58      	ldr	r3, [pc, #352]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d30c:	f04f 0200 	mov.w	r2, #0
 800d310:	60da      	str	r2, [r3, #12]
			S4.PID_task_delay_lock=0;
 800d312:	4b56      	ldr	r3, [pc, #344]	; (800d46c <PC_CMV_PARAMETERS+0x2dc>)
 800d314:	2200      	movs	r2, #0
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=S1._PEEP_Val/2;
 800d318:	4b51      	ldr	r3, [pc, #324]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d31a:	78db      	ldrb	r3, [r3, #3]
 800d31c:	085b      	lsrs	r3, r3, #1
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	ee07 3a90 	vmov	s15, r3
 800d324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d328:	4b53      	ldr	r3, [pc, #332]	; (800d478 <PC_CMV_PARAMETERS+0x2e8>)
 800d32a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			S5.peep_process_done=0;
 800d32e:	4b52      	ldr	r3, [pc, #328]	; (800d478 <PC_CMV_PARAMETERS+0x2e8>)
 800d330:	2200      	movs	r2, #0
 800d332:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 800d334:	4b50      	ldr	r3, [pc, #320]	; (800d478 <PC_CMV_PARAMETERS+0x2e8>)
 800d336:	2201      	movs	r2, #1
 800d338:	645a      	str	r2, [r3, #68]	; 0x44

			A.PEEP_VAL=S1._PEEP_Val;
 800d33a:	4b49      	ldr	r3, [pc, #292]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d33c:	78da      	ldrb	r2, [r3, #3]
 800d33e:	4b4f      	ldr	r3, [pc, #316]	; (800d47c <PC_CMV_PARAMETERS+0x2ec>)
 800d340:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 800d342:	f7f5 f9cd 	bl	80026e0 <Alert_Receiving_Parameter>

			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7a9a      	ldrb	r2, [r3, #10]
 800d34a:	4b4d      	ldr	r3, [pc, #308]	; (800d480 <PC_CMV_PARAMETERS+0x2f0>)
 800d34c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._PIP_Val=S1._PIP_Val;
 800d350:	4b43      	ldr	r3, [pc, #268]	; (800d460 <PC_CMV_PARAMETERS+0x2d0>)
 800d352:	789a      	ldrb	r2, [r3, #2]
 800d354:	4b4a      	ldr	r3, [pc, #296]	; (800d480 <PC_CMV_PARAMETERS+0x2f0>)
 800d356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			O2._Pressure_Base=1;
 800d35a:	4b49      	ldr	r3, [pc, #292]	; (800d480 <PC_CMV_PARAMETERS+0x2f0>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=0;
 800d360:	4b47      	ldr	r3, [pc, #284]	; (800d480 <PC_CMV_PARAMETERS+0x2f0>)
 800d362:	2200      	movs	r2, #0
 800d364:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 800d366:	f7fd fb9b 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=0;
 800d36a:	4b46      	ldr	r3, [pc, #280]	; (800d484 <PC_CMV_PARAMETERS+0x2f4>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			S5.Lock_delay=300;
 800d372:	4b41      	ldr	r3, [pc, #260]	; (800d478 <PC_CMV_PARAMETERS+0x2e8>)
 800d374:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d378:	879a      	strh	r2, [r3, #60]	; 0x3c


			 _60_Seconds=60000;				//breath
 800d37a:	4b43      	ldr	r3, [pc, #268]	; (800d488 <PC_CMV_PARAMETERS+0x2f8>)
 800d37c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800d380:	801a      	strh	r2, [r3, #0]
			 now_check_breath=0;			//breath
 800d382:	4b42      	ldr	r3, [pc, #264]	; (800d48c <PC_CMV_PARAMETERS+0x2fc>)
 800d384:	2200      	movs	r2, #0
 800d386:	701a      	strb	r2, [r3, #0]
			 Breath=0;
 800d388:	4b41      	ldr	r3, [pc, #260]	; (800d490 <PC_CMV_PARAMETERS+0x300>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	701a      	strb	r2, [r3, #0]


			vTaskSuspend(Vc_mode_Handler);
 800d38e:	4b41      	ldr	r3, [pc, #260]	; (800d494 <PC_CMV_PARAMETERS+0x304>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4618      	mov	r0, r3
 800d394:	f012 fa9e 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 800d398:	4b3f      	ldr	r3, [pc, #252]	; (800d498 <PC_CMV_PARAMETERS+0x308>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f012 fa99 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Pc_simv_Mode_Handler);
 800d3a2:	4b3e      	ldr	r3, [pc, #248]	; (800d49c <PC_CMV_PARAMETERS+0x30c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f012 fa94 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 800d3ac:	4b3c      	ldr	r3, [pc, #240]	; (800d4a0 <PC_CMV_PARAMETERS+0x310>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f012 fa8f 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_simv_mode_Handler);
 800d3b6:	4b3b      	ldr	r3, [pc, #236]	; (800d4a4 <PC_CMV_PARAMETERS+0x314>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f012 fa8a 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_simv_Pid_Handler);
 800d3c0:	4b39      	ldr	r3, [pc, #228]	; (800d4a8 <PC_CMV_PARAMETERS+0x318>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f012 fa85 	bl	801f8d4 <vTaskSuspend>

			 vTaskSuspend(Psv_Handler);
 800d3ca:	4b38      	ldr	r3, [pc, #224]	; (800d4ac <PC_CMV_PARAMETERS+0x31c>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f012 fa80 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Psv_Pid_Handler);
 800d3d4:	4b36      	ldr	r3, [pc, #216]	; (800d4b0 <PC_CMV_PARAMETERS+0x320>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f012 fa7b 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Cpap_Handler);
 800d3de:	4b35      	ldr	r3, [pc, #212]	; (800d4b4 <PC_CMV_PARAMETERS+0x324>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f012 fa76 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(BiPap_Handler);
 800d3e8:	4b33      	ldr	r3, [pc, #204]	; (800d4b8 <PC_CMV_PARAMETERS+0x328>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f012 fa71 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(BiPap_Pid_Handler);
 800d3f2:	4b32      	ldr	r3, [pc, #200]	; (800d4bc <PC_CMV_PARAMETERS+0x32c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f012 fa6c 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(APRV_Handler);
 800d3fc:	4b30      	ldr	r3, [pc, #192]	; (800d4c0 <PC_CMV_PARAMETERS+0x330>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4618      	mov	r0, r3
 800d402:	f012 fa67 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(APRV_one_Handler);
 800d406:	4b2f      	ldr	r3, [pc, #188]	; (800d4c4 <PC_CMV_PARAMETERS+0x334>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f012 fa62 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800d410:	4b2d      	ldr	r3, [pc, #180]	; (800d4c8 <PC_CMV_PARAMETERS+0x338>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	f012 fa5d 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800d41a:	4b2c      	ldr	r3, [pc, #176]	; (800d4cc <PC_CMV_PARAMETERS+0x33c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4618      	mov	r0, r3
 800d420:	f012 fa58 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800d424:	4b2a      	ldr	r3, [pc, #168]	; (800d4d0 <PC_CMV_PARAMETERS+0x340>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4618      	mov	r0, r3
 800d42a:	f012 fa53 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800d42e:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <PC_CMV_PARAMETERS+0x344>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4618      	mov	r0, r3
 800d434:	f012 fa4e 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(HFNC_Handler);
 800d438:	4b27      	ldr	r3, [pc, #156]	; (800d4d8 <PC_CMV_PARAMETERS+0x348>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f012 fa49 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Suction_Handler);
 800d442:	4b26      	ldr	r3, [pc, #152]	; (800d4dc <PC_CMV_PARAMETERS+0x34c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4618      	mov	r0, r3
 800d448:	f012 fa44 	bl	801f8d4 <vTaskSuspend>
 800d44c:	e048      	b.n	800d4e0 <PC_CMV_PARAMETERS+0x350>
 800d44e:	bf00      	nop
 800d450:	03afb7e9 	.word	0x03afb7e9
 800d454:	40311ce7 	.word	0x40311ce7
 800d458:	78d4fdf4 	.word	0x78d4fdf4
 800d45c:	40825de9 	.word	0x40825de9
 800d460:	20016ae0 	.word	0x20016ae0
 800d464:	20016d64 	.word	0x20016d64
 800d468:	40590000 	.word	0x40590000
 800d46c:	200000d4 	.word	0x200000d4
 800d470:	428c0000 	.word	0x428c0000
 800d474:	2001686c 	.word	0x2001686c
 800d478:	20016df4 	.word	0x20016df4
 800d47c:	20016a2c 	.word	0x20016a2c
 800d480:	20000048 	.word	0x20000048
 800d484:	20016960 	.word	0x20016960
 800d488:	20000fe8 	.word	0x20000fe8
 800d48c:	20000feb 	.word	0x20000feb
 800d490:	20000fea 	.word	0x20000fea
 800d494:	20016d78 	.word	0x20016d78
 800d498:	2001695c 	.word	0x2001695c
 800d49c:	20016e60 	.word	0x20016e60
 800d4a0:	20016e8c 	.word	0x20016e8c
 800d4a4:	20016c44 	.word	0x20016c44
 800d4a8:	20016ad0 	.word	0x20016ad0
 800d4ac:	20016bf0 	.word	0x20016bf0
 800d4b0:	20016a74 	.word	0x20016a74
 800d4b4:	20016bb8 	.word	0x20016bb8
 800d4b8:	20016a24 	.word	0x20016a24
 800d4bc:	20016878 	.word	0x20016878
 800d4c0:	20016c00 	.word	0x20016c00
 800d4c4:	20016bc8 	.word	0x20016bc8
 800d4c8:	20016bcc 	.word	0x20016bcc
 800d4cc:	20016d3c 	.word	0x20016d3c
 800d4d0:	20016d7c 	.word	0x20016d7c
 800d4d4:	20016a7c 	.word	0x20016a7c
 800d4d8:	20016a20 	.word	0x20016a20
 800d4dc:	20016e5c 	.word	0x20016e5c

			vTaskResume(pc_mode_Handler);
 800d4e0:	4b1f      	ldr	r3, [pc, #124]	; (800d560 <PC_CMV_PARAMETERS+0x3d0>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f012 fab9 	bl	801fa5c <vTaskResume>
			vTaskResume(Pc_cmv_Pid_Handler);
 800d4ea:	4b1e      	ldr	r3, [pc, #120]	; (800d564 <PC_CMV_PARAMETERS+0x3d4>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f012 fab4 	bl	801fa5c <vTaskResume>
			vTaskResume(One_Time_Handler);
 800d4f4:	4b1c      	ldr	r3, [pc, #112]	; (800d568 <PC_CMV_PARAMETERS+0x3d8>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f012 faaf 	bl	801fa5c <vTaskResume>
			vTaskResume(alert_Handler);
 800d4fe:	4b1b      	ldr	r3, [pc, #108]	; (800d56c <PC_CMV_PARAMETERS+0x3dc>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4618      	mov	r0, r3
 800d504:	f012 faaa 	bl	801fa5c <vTaskResume>

			if(O2._FIO2_Val>21)
 800d508:	4b19      	ldr	r3, [pc, #100]	; (800d570 <PC_CMV_PARAMETERS+0x3e0>)
 800d50a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d50e:	2b15      	cmp	r3, #21
 800d510:	d905      	bls.n	800d51e <PC_CMV_PARAMETERS+0x38e>
			{
				vTaskResume(Oxygen_Handler);
 800d512:	4b18      	ldr	r3, [pc, #96]	; (800d574 <PC_CMV_PARAMETERS+0x3e4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4618      	mov	r0, r3
 800d518:	f012 faa0 	bl	801fa5c <vTaskResume>
 800d51c:	e00f      	b.n	800d53e <PC_CMV_PARAMETERS+0x3ae>
			}
			else if(O2._FIO2_Val<=21)
 800d51e:	4b14      	ldr	r3, [pc, #80]	; (800d570 <PC_CMV_PARAMETERS+0x3e0>)
 800d520:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d524:	2b15      	cmp	r3, #21
 800d526:	d80a      	bhi.n	800d53e <PC_CMV_PARAMETERS+0x3ae>
			{
				O2.O2_DAC=0;
 800d528:	4b11      	ldr	r3, [pc, #68]	; (800d570 <PC_CMV_PARAMETERS+0x3e0>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	811a      	strh	r2, [r3, #8]
				Parkar_valve_Signal(0);
 800d52e:	4b12      	ldr	r3, [pc, #72]	; (800d578 <PC_CMV_PARAMETERS+0x3e8>)
 800d530:	2200      	movs	r2, #0
 800d532:	615a      	str	r2, [r3, #20]
				vTaskSuspend(Oxygen_Handler);
 800d534:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <PC_CMV_PARAMETERS+0x3e4>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f012 f9cb 	bl	801f8d4 <vTaskSuspend>
			}
			_CurrentMode=PCCMV;
 800d53e:	4b0f      	ldr	r3, [pc, #60]	; (800d57c <PC_CMV_PARAMETERS+0x3ec>)
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
			_CurrentBackupMode = IdleState;
 800d544:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <PC_CMV_PARAMETERS+0x3f0>)
 800d546:	2202      	movs	r2, #2
 800d548:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 800d54a:	4b0e      	ldr	r3, [pc, #56]	; (800d584 <PC_CMV_PARAMETERS+0x3f4>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 800d550:	4b0d      	ldr	r3, [pc, #52]	; (800d588 <PC_CMV_PARAMETERS+0x3f8>)
 800d552:	2201      	movs	r2, #1
 800d554:	701a      	strb	r2, [r3, #0]




}
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bdb0      	pop	{r4, r5, r7, pc}
 800d55e:	bf00      	nop
 800d560:	20016a84 	.word	0x20016a84
 800d564:	20016a28 	.word	0x20016a28
 800d568:	20016d40 	.word	0x20016d40
 800d56c:	20016ad4 	.word	0x20016ad4
 800d570:	20000048 	.word	0x20000048
 800d574:	20016958 	.word	0x20016958
 800d578:	40007400 	.word	0x40007400
 800d57c:	20016c04 	.word	0x20016c04
 800d580:	2000012c 	.word	0x2000012c
 800d584:	20016adc 	.word	0x20016adc
 800d588:	20016cc8 	.word	0x20016cc8

0800d58c <PC_CMV_PID_Task>:



void PC_CMV_PID_Task(void *argument)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]

	while(1)
	{

		S4.ten_ms++;
 800d594:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <PC_CMV_PID_Task+0x48>)
 800d596:	8b1b      	ldrh	r3, [r3, #24]
 800d598:	3301      	adds	r3, #1
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	4b0d      	ldr	r3, [pc, #52]	; (800d5d4 <PC_CMV_PID_Task+0x48>)
 800d59e:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 1)
 800d5a0:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <PC_CMV_PID_Task+0x4c>)
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d10f      	bne.n	800d5c8 <PC_CMV_PID_Task+0x3c>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 800d5a8:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <PC_CMV_PID_Task+0x50>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10b      	bne.n	800d5c8 <PC_CMV_PID_Task+0x3c>
				{
					if(O2._FIO2_Val==100)
 800d5b0:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <PC_CMV_PID_Task+0x54>)
 800d5b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d5b6:	2b64      	cmp	r3, #100	; 0x64
 800d5b8:	d104      	bne.n	800d5c4 <PC_CMV_PID_Task+0x38>
					{
						S4._DAC_VAL0=400;
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <PC_CMV_PID_Task+0x48>)
 800d5bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d5c0:	809a      	strh	r2, [r3, #4]
 800d5c2:	e001      	b.n	800d5c8 <PC_CMV_PID_Task+0x3c>
					}
					else
					{
						pip_value_correction();
 800d5c4:	f7ff fd68 	bl	800d098 <pip_value_correction>

				}
			 }


		vTaskDelay(S4.PID_task_delay);
 800d5c8:	4b02      	ldr	r3, [pc, #8]	; (800d5d4 <PC_CMV_PID_Task+0x48>)
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f012 f94d 	bl	801f86c <vTaskDelay>
		S4.ten_ms++;
 800d5d2:	e7df      	b.n	800d594 <PC_CMV_PID_Task+0x8>
 800d5d4:	200000d4 	.word	0x200000d4
 800d5d8:	20016ae0 	.word	0x20016ae0
 800d5dc:	20016cc8 	.word	0x20016cc8
 800d5e0:	20000048 	.word	0x20000048
 800d5e4:	00000000 	.word	0x00000000

0800d5e8 <Pip_Acheived_Early>:




void Pip_Acheived_Early()
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	af00      	add	r7, sp, #0

		     if(S3.Pip_Acheived_Flag==0)
 800d5ec:	4b90      	ldr	r3, [pc, #576]	; (800d830 <Pip_Acheived_Early+0x248>)
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 8115 	beq.w	800d820 <Pip_Acheived_Early+0x238>

			 }
			 else
			 {

			    S4.result1=(S4.Acheived_ms/S2.ramp_time_percentage)*100;
 800d5f6:	4b8f      	ldr	r3, [pc, #572]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d5f8:	8b5b      	ldrh	r3, [r3, #26]
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d602:	4b8d      	ldr	r3, [pc, #564]	; (800d838 <Pip_Acheived_Early+0x250>)
 800d604:	ed93 7a03 	vldr	s14, [r3, #12]
 800d608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d60c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d83c <Pip_Acheived_Early+0x254>
 800d610:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d614:	4b87      	ldr	r3, [pc, #540]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d616:	edc3 7a02 	vstr	s15, [r3, #8]
			    if(S4.result1<=70)
 800d61a:	4b86      	ldr	r3, [pc, #536]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d61c:	edd3 7a02 	vldr	s15, [r3, #8]
 800d620:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800d840 <Pip_Acheived_Early+0x258>
 800d624:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	d81a      	bhi.n	800d664 <Pip_Acheived_Early+0x7c>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-5;
 800d62e:	4b81      	ldr	r3, [pc, #516]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d630:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d634:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800d638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d63c:	4b7d      	ldr	r3, [pc, #500]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d63e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 800d642:	4b7c      	ldr	r3, [pc, #496]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d644:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d648:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800d844 <Pip_Acheived_Early+0x25c>
 800d64c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d654:	d86c      	bhi.n	800d730 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 800d656:	4b77      	ldr	r3, [pc, #476]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d658:	4a7b      	ldr	r2, [pc, #492]	; (800d848 <Pip_Acheived_Early+0x260>)
 800d65a:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 800d65c:	4b75      	ldr	r3, [pc, #468]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d65e:	2200      	movs	r2, #0
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
 800d662:	e065      	b.n	800d730 <Pip_Acheived_Early+0x148>
			    	}
			    }

			    else if(S4.result1<=80 && S4.result1>70)
 800d664:	4b73      	ldr	r3, [pc, #460]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d666:	edd3 7a02 	vldr	s15, [r3, #8]
 800d66a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800d84c <Pip_Acheived_Early+0x264>
 800d66e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	d824      	bhi.n	800d6c2 <Pip_Acheived_Early+0xda>
 800d678:	4b6e      	ldr	r3, [pc, #440]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d67a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d67e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800d840 <Pip_Acheived_Early+0x258>
 800d682:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68a:	dd1a      	ble.n	800d6c2 <Pip_Acheived_Early+0xda>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-(0.5);
 800d68c:	4b69      	ldr	r3, [pc, #420]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d68e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d692:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d69a:	4b66      	ldr	r3, [pc, #408]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d69c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 800d6a0:	4b64      	ldr	r3, [pc, #400]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d6a6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d844 <Pip_Acheived_Early+0x25c>
 800d6aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b2:	d83d      	bhi.n	800d730 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 800d6b4:	4b5f      	ldr	r3, [pc, #380]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6b6:	4a64      	ldr	r2, [pc, #400]	; (800d848 <Pip_Acheived_Early+0x260>)
 800d6b8:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 800d6ba:	4b5e      	ldr	r3, [pc, #376]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	631a      	str	r2, [r3, #48]	; 0x30
			    	if(S4.incrementing_Dac_value_10ms<=50)
 800d6c0:	e036      	b.n	800d730 <Pip_Acheived_Early+0x148>
			    	}
			    }
			    else if(S4.result1<=90 && S4.result1>80)
 800d6c2:	4b5c      	ldr	r3, [pc, #368]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6c4:	edd3 7a02 	vldr	s15, [r3, #8]
 800d6c8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d850 <Pip_Acheived_Early+0x268>
 800d6cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	d82c      	bhi.n	800d730 <Pip_Acheived_Early+0x148>
 800d6d6:	4b57      	ldr	r3, [pc, #348]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6d8:	edd3 7a02 	vldr	s15, [r3, #8]
 800d6dc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800d84c <Pip_Acheived_Early+0x264>
 800d6e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e8:	dd22      	ble.n	800d730 <Pip_Acheived_Early+0x148>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-(0.1);
 800d6ea:	4b52      	ldr	r3, [pc, #328]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f2 fed2 	bl	8000498 <__aeabi_f2d>
 800d6f4:	a34c      	add	r3, pc, #304	; (adr r3, 800d828 <Pip_Acheived_Early+0x240>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 fd6d 	bl	80001d8 <__aeabi_dsub>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4610      	mov	r0, r2
 800d704:	4619      	mov	r1, r3
 800d706:	f7f3 fa01 	bl	8000b0c <__aeabi_d2f>
 800d70a:	4603      	mov	r3, r0
 800d70c:	4a49      	ldr	r2, [pc, #292]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d70e:	62d3      	str	r3, [r2, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 800d710:	4b48      	ldr	r3, [pc, #288]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d712:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d716:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d844 <Pip_Acheived_Early+0x25c>
 800d71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d722:	d805      	bhi.n	800d730 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 800d724:	4b43      	ldr	r3, [pc, #268]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d726:	4a48      	ldr	r2, [pc, #288]	; (800d848 <Pip_Acheived_Early+0x260>)
 800d728:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 800d72a:	4b42      	ldr	r3, [pc, #264]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	631a      	str	r2, [r3, #48]	; 0x30
			    	}
			    }


			    if(S4.nack==0)
 800d730:	4b40      	ldr	r3, [pc, #256]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d734:	2b00      	cmp	r3, #0
 800d736:	d173      	bne.n	800d820 <Pip_Acheived_Early+0x238>
			    {

			    	if(S5.P_Max<S1._PIP_Val)
 800d738:	4b46      	ldr	r3, [pc, #280]	; (800d854 <Pip_Acheived_Early+0x26c>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a46      	ldr	r2, [pc, #280]	; (800d858 <Pip_Acheived_Early+0x270>)
 800d73e:	7892      	ldrb	r2, [r2, #2]
 800d740:	4293      	cmp	r3, r2
 800d742:	da13      	bge.n	800d76c <Pip_Acheived_Early+0x184>
			    	{
			    		 S4.result1_error++;
 800d744:	4b3b      	ldr	r3, [pc, #236]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d748:	3301      	adds	r3, #1
 800d74a:	4a3a      	ldr	r2, [pc, #232]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d74c:	63d3      	str	r3, [r2, #60]	; 0x3c
			    		 if(S4.result1_error>=5)
 800d74e:	4b39      	ldr	r3, [pc, #228]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d752:	2b04      	cmp	r3, #4
 800d754:	dd64      	ble.n	800d820 <Pip_Acheived_Early+0x238>
			    		 {
			    			S4.PID_task_delay=S4.PID_task_delay;
 800d756:	4b37      	ldr	r3, [pc, #220]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	4a36      	ldr	r2, [pc, #216]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d75c:	6353      	str	r3, [r2, #52]	; 0x34
			    			S4.result1_error=6;
 800d75e:	4b35      	ldr	r3, [pc, #212]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d760:	2206      	movs	r2, #6
 800d762:	63da      	str	r2, [r3, #60]	; 0x3c
			    		    S4.PID_task_delay_lock=1;
 800d764:	4b33      	ldr	r3, [pc, #204]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d766:	2201      	movs	r2, #1
 800d768:	639a      	str	r2, [r3, #56]	; 0x38
			    	}

			    }
			 }

}
 800d76a:	e059      	b.n	800d820 <Pip_Acheived_Early+0x238>
			    	else if(S4.result1>S4.last_result1)
 800d76c:	4b31      	ldr	r3, [pc, #196]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d76e:	ed93 7a02 	vldr	s14, [r3, #8]
 800d772:	4b30      	ldr	r3, [pc, #192]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d774:	edd3 7a03 	vldr	s15, [r3, #12]
 800d778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	dc00      	bgt.n	800d784 <Pip_Acheived_Early+0x19c>
}
 800d782:	e04d      	b.n	800d820 <Pip_Acheived_Early+0x238>
			    		if(S4.PID_task_delay_lock==0)
 800d784:	4b2b      	ldr	r3, [pc, #172]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d149      	bne.n	800d820 <Pip_Acheived_Early+0x238>
			    		  if(S4.result1<60)
 800d78c:	4b29      	ldr	r3, [pc, #164]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d78e:	edd3 7a02 	vldr	s15, [r3, #8]
 800d792:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d85c <Pip_Acheived_Early+0x274>
 800d796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79e:	d505      	bpl.n	800d7ac <Pip_Acheived_Early+0x1c4>
			    			  S4.PID_task_delay=S4.PID_task_delay+10;
 800d7a0:	4b24      	ldr	r3, [pc, #144]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a4:	330a      	adds	r3, #10
 800d7a6:	4a23      	ldr	r2, [pc, #140]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7a8:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d7aa:	e039      	b.n	800d820 <Pip_Acheived_Early+0x238>
			    		  else if(S4.result1<70 && S4.result1>=60)
 800d7ac:	4b21      	ldr	r3, [pc, #132]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7ae:	edd3 7a02 	vldr	s15, [r3, #8]
 800d7b2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d840 <Pip_Acheived_Early+0x258>
 800d7b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7be:	d50f      	bpl.n	800d7e0 <Pip_Acheived_Early+0x1f8>
 800d7c0:	4b1c      	ldr	r3, [pc, #112]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7c2:	edd3 7a02 	vldr	s15, [r3, #8]
 800d7c6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800d85c <Pip_Acheived_Early+0x274>
 800d7ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d2:	db05      	blt.n	800d7e0 <Pip_Acheived_Early+0x1f8>
			    			  S4.PID_task_delay=S4.PID_task_delay+6;
 800d7d4:	4b17      	ldr	r3, [pc, #92]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	3306      	adds	r3, #6
 800d7da:	4a16      	ldr	r2, [pc, #88]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7dc:	6353      	str	r3, [r2, #52]	; 0x34
 800d7de:	e01f      	b.n	800d820 <Pip_Acheived_Early+0x238>
			    		  else if(S4.result1<=80 && S4.result1>=70)
 800d7e0:	4b14      	ldr	r3, [pc, #80]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7e2:	edd3 7a02 	vldr	s15, [r3, #8]
 800d7e6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d84c <Pip_Acheived_Early+0x264>
 800d7ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	d80f      	bhi.n	800d814 <Pip_Acheived_Early+0x22c>
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d7f6:	edd3 7a02 	vldr	s15, [r3, #8]
 800d7fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d840 <Pip_Acheived_Early+0x258>
 800d7fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	db05      	blt.n	800d814 <Pip_Acheived_Early+0x22c>
			    			  S4.PID_task_delay=S4.PID_task_delay+4;
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	3304      	adds	r3, #4
 800d80e:	4a09      	ldr	r2, [pc, #36]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d810:	6353      	str	r3, [r2, #52]	; 0x34
 800d812:	e005      	b.n	800d820 <Pip_Acheived_Early+0x238>
			    			  S4.PID_task_delay=S4.PID_task_delay+1;
 800d814:	4b07      	ldr	r3, [pc, #28]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d818:	3301      	adds	r3, #1
 800d81a:	4a06      	ldr	r2, [pc, #24]	; (800d834 <Pip_Acheived_Early+0x24c>)
 800d81c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d81e:	e7ff      	b.n	800d820 <Pip_Acheived_Early+0x238>
 800d820:	bf00      	nop
 800d822:	bd80      	pop	{r7, pc}
 800d824:	f3af 8000 	nop.w
 800d828:	9999999a 	.word	0x9999999a
 800d82c:	3fb99999 	.word	0x3fb99999
 800d830:	2001686c 	.word	0x2001686c
 800d834:	200000d4 	.word	0x200000d4
 800d838:	20016d64 	.word	0x20016d64
 800d83c:	42c80000 	.word	0x42c80000
 800d840:	428c0000 	.word	0x428c0000
 800d844:	42480000 	.word	0x42480000
 800d848:	42480000 	.word	0x42480000
 800d84c:	42a00000 	.word	0x42a00000
 800d850:	42b40000 	.word	0x42b40000
 800d854:	20016df4 	.word	0x20016df4
 800d858:	20016ae0 	.word	0x20016ae0
 800d85c:	42700000 	.word	0x42700000

0800d860 <Pip_Acheived_Slowly>:



void Pip_Acheived_Slowly()
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
	               S4.result2=(S4.Acheived_ms/S2.ramp_time_percentage)*100;
 800d864:	4b56      	ldr	r3, [pc, #344]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d866:	8b5b      	ldrh	r3, [r3, #26]
 800d868:	ee07 3a90 	vmov	s15, r3
 800d86c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d870:	4b54      	ldr	r3, [pc, #336]	; (800d9c4 <Pip_Acheived_Slowly+0x164>)
 800d872:	ed93 7a03 	vldr	s14, [r3, #12]
 800d876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d87a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800d9c8 <Pip_Acheived_Slowly+0x168>
 800d87e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d882:	4b4f      	ldr	r3, [pc, #316]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d884:	edc3 7a04 	vstr	s15, [r3, #16]
		    	   S4.last_result2=S4.result2;
 800d888:	4b4d      	ldr	r3, [pc, #308]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	4a4c      	ldr	r2, [pc, #304]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d88e:	6153      	str	r3, [r2, #20]

		    	   if(S4.result2 >= 130)
 800d890:	4b4b      	ldr	r3, [pc, #300]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d892:	edd3 7a04 	vldr	s15, [r3, #16]
 800d896:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d9cc <Pip_Acheived_Slowly+0x16c>
 800d89a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a2:	db1b      	blt.n	800d8dc <Pip_Acheived_Slowly+0x7c>
		    	   {
		    		    S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+5;
 800d8a4:	4b46      	ldr	r3, [pc, #280]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8a6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d8aa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800d8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8b2:	4b43      	ldr	r3, [pc, #268]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   	    if(S4.incrementing_Dac_value_10ms>=350)
 800d8b8:	4b41      	ldr	r3, [pc, #260]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d8be:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d9d0 <Pip_Acheived_Slowly+0x170>
 800d8c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ca:	da00      	bge.n	800d8ce <Pip_Acheived_Slowly+0x6e>
		    	   			   S4.nack=0;
		    	   		}
		    	   	}


}
 800d8cc:	e070      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   	    	 S4.incrementing_Dac_value_10ms=350;
 800d8ce:	4b3c      	ldr	r3, [pc, #240]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8d0:	4a40      	ldr	r2, [pc, #256]	; (800d9d4 <Pip_Acheived_Slowly+0x174>)
 800d8d2:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   	    	 S4.nack=0;
 800d8d4:	4b3a      	ldr	r3, [pc, #232]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d8da:	e069      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   else if(S4.result2 > 120 && S4.result2 <130)
 800d8dc:	4b38      	ldr	r3, [pc, #224]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8de:	edd3 7a04 	vldr	s15, [r3, #16]
 800d8e2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800d9d8 <Pip_Acheived_Slowly+0x178>
 800d8e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ee:	dd24      	ble.n	800d93a <Pip_Acheived_Slowly+0xda>
 800d8f0:	4b33      	ldr	r3, [pc, #204]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d8f2:	edd3 7a04 	vldr	s15, [r3, #16]
 800d8f6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d9cc <Pip_Acheived_Slowly+0x16c>
 800d8fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d902:	d51a      	bpl.n	800d93a <Pip_Acheived_Slowly+0xda>
		    		    S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+(0.5);
 800d904:	4b2e      	ldr	r3, [pc, #184]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d906:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d90a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d90e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d912:	4b2b      	ldr	r3, [pc, #172]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d914:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 800d918:	4b29      	ldr	r3, [pc, #164]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d91a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d91e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d9d0 <Pip_Acheived_Slowly+0x170>
 800d922:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92a:	db41      	blt.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   			  S4.incrementing_Dac_value_10ms=350;
 800d92c:	4b24      	ldr	r3, [pc, #144]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d92e:	4a29      	ldr	r2, [pc, #164]	; (800d9d4 <Pip_Acheived_Slowly+0x174>)
 800d930:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			  S4.nack=0;
 800d932:	4b23      	ldr	r3, [pc, #140]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d934:	2200      	movs	r2, #0
 800d936:	631a      	str	r2, [r3, #48]	; 0x30
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 800d938:	e03a      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   	else if(S4.result2<=120 && S4.result2>=110)
 800d93a:	4b21      	ldr	r3, [pc, #132]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d93c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d940:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800d9d8 <Pip_Acheived_Slowly+0x178>
 800d944:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94c:	d900      	bls.n	800d950 <Pip_Acheived_Slowly+0xf0>
}
 800d94e:	e02f      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   	else if(S4.result2<=120 && S4.result2>=110)
 800d950:	4b1b      	ldr	r3, [pc, #108]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d952:	edd3 7a04 	vldr	s15, [r3, #16]
 800d956:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d9dc <Pip_Acheived_Slowly+0x17c>
 800d95a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d962:	da00      	bge.n	800d966 <Pip_Acheived_Slowly+0x106>
}
 800d964:	e024      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   		S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+(0.1);
 800d966:	4b16      	ldr	r3, [pc, #88]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f2 fd94 	bl	8000498 <__aeabi_f2d>
 800d970:	a311      	add	r3, pc, #68	; (adr r3, 800d9b8 <Pip_Acheived_Slowly+0x158>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fc31 	bl	80001dc <__adddf3>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4610      	mov	r0, r2
 800d980:	4619      	mov	r1, r3
 800d982:	f7f3 f8c3 	bl	8000b0c <__aeabi_d2f>
 800d986:	4603      	mov	r3, r0
 800d988:	4a0d      	ldr	r2, [pc, #52]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d98a:	62d3      	str	r3, [r2, #44]	; 0x2c
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 800d98c:	4b0c      	ldr	r3, [pc, #48]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d98e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d992:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d9d0 <Pip_Acheived_Slowly+0x170>
 800d996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99e:	da00      	bge.n	800d9a2 <Pip_Acheived_Slowly+0x142>
}
 800d9a0:	e006      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
		    	   			   S4.incrementing_Dac_value_10ms=350;
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d9a4:	4a0b      	ldr	r2, [pc, #44]	; (800d9d4 <Pip_Acheived_Slowly+0x174>)
 800d9a6:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			   S4.nack=0;
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <Pip_Acheived_Slowly+0x160>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d9ae:	e7ff      	b.n	800d9b0 <Pip_Acheived_Slowly+0x150>
 800d9b0:	bf00      	nop
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	f3af 8000 	nop.w
 800d9b8:	9999999a 	.word	0x9999999a
 800d9bc:	3fb99999 	.word	0x3fb99999
 800d9c0:	200000d4 	.word	0x200000d4
 800d9c4:	20016d64 	.word	0x20016d64
 800d9c8:	42c80000 	.word	0x42c80000
 800d9cc:	43020000 	.word	0x43020000
 800d9d0:	43af0000 	.word	0x43af0000
 800d9d4:	43af0000 	.word	0x43af0000
 800d9d8:	42f00000 	.word	0x42f00000
 800d9dc:	42dc0000 	.word	0x42dc0000

0800d9e0 <Pip_Acheived_Normally>:
void Pip_Acheived_Normally()
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	af00      	add	r7, sp, #0
 	   S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms;
 800d9e4:	4b04      	ldr	r3, [pc, #16]	; (800d9f8 <Pip_Acheived_Normally+0x18>)
 800d9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e8:	4a03      	ldr	r2, [pc, #12]	; (800d9f8 <Pip_Acheived_Normally+0x18>)
 800d9ea:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800d9ec:	bf00      	nop
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	200000d4 	.word	0x200000d4

0800d9fc <Pip_Not_Acheived>:


void Pip_Not_Acheived()
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	af00      	add	r7, sp, #0
		   if(S3.Pip_Acheived_Flag==0)
 800da00:	4b11      	ldr	r3, [pc, #68]	; (800da48 <Pip_Not_Acheived+0x4c>)
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d11a      	bne.n	800da3e <Pip_Not_Acheived+0x42>
		   {
			   S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+1;
 800da08:	4b10      	ldr	r3, [pc, #64]	; (800da4c <Pip_Not_Acheived+0x50>)
 800da0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800da0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da16:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <Pip_Not_Acheived+0x50>)
 800da18:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			   if(S4.incrementing_Dac_value_10ms>=350)
 800da1c:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <Pip_Not_Acheived+0x50>)
 800da1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800da22:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800da50 <Pip_Not_Acheived+0x54>
 800da26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da2e:	da00      	bge.n	800da32 <Pip_Not_Acheived+0x36>
			   {
				   S4.incrementing_Dac_value_10ms=350;
				   S4.nack=0;
			   }
		   }
}
 800da30:	e005      	b.n	800da3e <Pip_Not_Acheived+0x42>
				   S4.incrementing_Dac_value_10ms=350;
 800da32:	4b06      	ldr	r3, [pc, #24]	; (800da4c <Pip_Not_Acheived+0x50>)
 800da34:	4a07      	ldr	r2, [pc, #28]	; (800da54 <Pip_Not_Acheived+0x58>)
 800da36:	62da      	str	r2, [r3, #44]	; 0x2c
				   S4.nack=0;
 800da38:	4b04      	ldr	r3, [pc, #16]	; (800da4c <Pip_Not_Acheived+0x50>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800da3e:	bf00      	nop
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	2001686c 	.word	0x2001686c
 800da4c:	200000d4 	.word	0x200000d4
 800da50:	43af0000 	.word	0x43af0000
 800da54:	43af0000 	.word	0x43af0000

0800da58 <Peep_E_Valve_Lock_delay_Pc_cmv>:




void Peep_E_Valve_Lock_delay_Pc_cmv()
{
 800da58:	b480      	push	{r7}
 800da5a:	af00      	add	r7, sp, #0


	// added one extra if condition and Remove error count value 2 to 0 in below RR value 30.

	if(S1.RR<30)
 800da5c:	4ba1      	ldr	r3, [pc, #644]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800da5e:	7c9b      	ldrb	r3, [r3, #18]
 800da60:	2b1d      	cmp	r3, #29
 800da62:	f200 822f 	bhi.w	800dec4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x46c>
	{

		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 800da66:	4ba0      	ldr	r3, [pc, #640]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da68:	edd3 6a02 	vldr	s13, [r3, #8]
 800da6c:	4b9e      	ldr	r3, [pc, #632]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da6e:	ed93 7a03 	vldr	s14, [r3, #12]
 800da72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da76:	4b9c      	ldr	r3, [pc, #624]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da78:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800da7c:	4b9a      	ldr	r3, [pc, #616]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da7e:	edd3 7a04 	vldr	s15, [r3, #16]
 800da82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da86:	ee17 2a90 	vmov	r2, s15
 800da8a:	4b97      	ldr	r3, [pc, #604]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da8c:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 800da8e:	4b96      	ldr	r3, [pc, #600]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da90:	f04f 0200 	mov.w	r2, #0
 800da94:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 800da96:	4b94      	ldr	r3, [pc, #592]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800da98:	f04f 0200 	mov.w	r2, #0
 800da9c:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 800da9e:	4b92      	ldr	r3, [pc, #584]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800daa0:	edd3 6a05 	vldr	s13, [r3, #20]
 800daa4:	4b90      	ldr	r3, [pc, #576]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800daa6:	ed93 7a08 	vldr	s14, [r3, #32]
 800daaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daae:	4b8e      	ldr	r3, [pc, #568]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dab0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800dab4:	4b8c      	ldr	r3, [pc, #560]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dab6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800daba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dabe:	ee17 2a90 	vmov	r2, s15
 800dac2:	4b89      	ldr	r3, [pc, #548]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dac4:	629a      	str	r2, [r3, #40]	; 0x28

		if (S1.RR >= 30 || S2._E_TIMER_HOLD < 700)
 800dac6:	4b87      	ldr	r3, [pc, #540]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800dac8:	7c9b      	ldrb	r3, [r3, #18]
 800daca:	2b1d      	cmp	r3, #29
 800dacc:	d804      	bhi.n	800dad8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x80>
 800dace:	4b87      	ldr	r3, [pc, #540]	; (800dcec <Peep_E_Valve_Lock_delay_Pc_cmv+0x294>)
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800dad6:	d203      	bcs.n	800dae0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x88>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 800dad8:	4b83      	ldr	r3, [pc, #524]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dadc:	4a82      	ldr	r2, [pc, #520]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dade:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 800dae0:	4b81      	ldr	r3, [pc, #516]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	641a      	str	r2, [r3, #64]	; 0x40



		if (S5._Peep_Avg_val_int > (S1._PEEP_Val +8) )
 800dae6:	4b80      	ldr	r3, [pc, #512]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800daea:	4b7e      	ldr	r3, [pc, #504]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800daec:	78db      	ldrb	r3, [r3, #3]
 800daee:	3308      	adds	r3, #8
 800daf0:	429a      	cmp	r2, r3
 800daf2:	dd33      	ble.n	800db5c <Peep_E_Valve_Lock_delay_Pc_cmv+0x104>
		{

			S5.error_count++;
 800daf4:	4b7c      	ldr	r3, [pc, #496]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800daf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf8:	3301      	adds	r3, #1
 800dafa:	4a7b      	ldr	r2, [pc, #492]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dafc:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800dafe:	4b7a      	ldr	r3, [pc, #488]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db02:	2b00      	cmp	r3, #0
 800db04:	dd1b      	ble.n	800db3e <Peep_E_Valve_Lock_delay_Pc_cmv+0xe6>
			{

				S5.Lock_delay = S5.Lock_delay + 100;
 800db06:	4b78      	ldr	r3, [pc, #480]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800db0a:	3364      	adds	r3, #100	; 0x64
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	4b76      	ldr	r3, [pc, #472]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db10:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800db12:	4b75      	ldr	r3, [pc, #468]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db14:	2200      	movs	r2, #0
 800db16:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800db18:	4b73      	ldr	r3, [pc, #460]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800db1c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800db20:	d90d      	bls.n	800db3e <Peep_E_Valve_Lock_delay_Pc_cmv+0xe6>
				{
					S5.Lock_delay = 700;
 800db22:	4b71      	ldr	r3, [pc, #452]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db24:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800db28:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800db2a:	4b6f      	ldr	r3, [pc, #444]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800db30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db38:	4b6b      	ldr	r3, [pc, #428]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800db3e:	4b6a      	ldr	r3, [pc, #424]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db40:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800db44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800db48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	f200 81ab 	bhi.w	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = 3;
 800db54:	4b64      	ldr	r3, [pc, #400]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db56:	4a66      	ldr	r2, [pc, #408]	; (800dcf0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x298>)
 800db58:	639a      	str	r2, [r3, #56]	; 0x38
 800db5a:	e1a6      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			}
		}



		else if( (S5._Peep_Avg_val_int > (S1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (S1._PEEP_Val+8)) )
 800db5c:	4b62      	ldr	r3, [pc, #392]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db60:	4b60      	ldr	r3, [pc, #384]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800db62:	78db      	ldrb	r3, [r3, #3]
 800db64:	3302      	adds	r3, #2
 800db66:	429a      	cmp	r2, r3
 800db68:	dd3a      	ble.n	800dbe0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x188>
 800db6a:	4b5f      	ldr	r3, [pc, #380]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db6e:	4b5d      	ldr	r3, [pc, #372]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800db70:	78db      	ldrb	r3, [r3, #3]
 800db72:	3308      	adds	r3, #8
 800db74:	429a      	cmp	r2, r3
 800db76:	dc33      	bgt.n	800dbe0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x188>
		{

			S5.error_count++;
 800db78:	4b5b      	ldr	r3, [pc, #364]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7c:	3301      	adds	r3, #1
 800db7e:	4a5a      	ldr	r2, [pc, #360]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db80:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800db82:	4b59      	ldr	r3, [pc, #356]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db86:	2b00      	cmp	r3, #0
 800db88:	dd1b      	ble.n	800dbc2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x16a>
			{
				S5.Lock_delay = S5.Lock_delay + 40;
 800db8a:	4b57      	ldr	r3, [pc, #348]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db8c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800db8e:	3328      	adds	r3, #40	; 0x28
 800db90:	b29a      	uxth	r2, r3
 800db92:	4b55      	ldr	r3, [pc, #340]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db94:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800db96:	4b54      	ldr	r3, [pc, #336]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db98:	2200      	movs	r2, #0
 800db9a:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800db9c:	4b52      	ldr	r3, [pc, #328]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800db9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dba0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800dba4:	d90d      	bls.n	800dbc2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x16a>
				{
					S5.Lock_delay = 700;
 800dba6:	4b50      	ldr	r3, [pc, #320]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dba8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800dbac:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800dbae:	4b4e      	ldr	r3, [pc, #312]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbb0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dbb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dbb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbbc:	4b4a      	ldr	r3, [pc, #296]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbbe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800dbc2:	4b49      	ldr	r3, [pc, #292]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbc4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dbc8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dbcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd4:	f200 8169 	bhi.w	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = 3;
 800dbd8:	4b43      	ldr	r3, [pc, #268]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbda:	4a45      	ldr	r2, [pc, #276]	; (800dcf0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x298>)
 800dbdc:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800dbde:	e164      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			}
		}


		else if( (S5._Peep_Avg_val_int > (S1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (S1._PEEP_Val+2)) )
 800dbe0:	4b41      	ldr	r3, [pc, #260]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe4:	4a3f      	ldr	r2, [pc, #252]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800dbe6:	78d2      	ldrb	r2, [r2, #3]
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	dd3a      	ble.n	800dc62 <Peep_E_Valve_Lock_delay_Pc_cmv+0x20a>
 800dbec:	4b3e      	ldr	r3, [pc, #248]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbf0:	4b3c      	ldr	r3, [pc, #240]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800dbf2:	78db      	ldrb	r3, [r3, #3]
 800dbf4:	3302      	adds	r3, #2
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	dc33      	bgt.n	800dc62 <Peep_E_Valve_Lock_delay_Pc_cmv+0x20a>
		{

			S5.error_count++;
 800dbfa:	4b3b      	ldr	r3, [pc, #236]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfe:	3301      	adds	r3, #1
 800dc00:	4a39      	ldr	r2, [pc, #228]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc02:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 800dc04:	4b38      	ldr	r3, [pc, #224]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dd1b      	ble.n	800dc44 <Peep_E_Valve_Lock_delay_Pc_cmv+0x1ec>
			{

				S5.Lock_delay = S5.Lock_delay + 10;
 800dc0c:	4b36      	ldr	r3, [pc, #216]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dc10:	330a      	adds	r3, #10
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	4b34      	ldr	r3, [pc, #208]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc16:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800dc18:	4b33      	ldr	r3, [pc, #204]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800dc1e:	4b32      	ldr	r3, [pc, #200]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dc22:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800dc26:	d90d      	bls.n	800dc44 <Peep_E_Valve_Lock_delay_Pc_cmv+0x1ec>
				{
					S5.Lock_delay = 700;
 800dc28:	4b2f      	ldr	r3, [pc, #188]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc2a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800dc2e:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800dc30:	4b2d      	ldr	r3, [pc, #180]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dc36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc3e:	4b2a      	ldr	r3, [pc, #168]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc40:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep <= 3)
 800dc44:	4b28      	ldr	r3, [pc, #160]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc46:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dc4a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dc4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc56:	f200 8128 	bhi.w	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = 3;
 800dc5a:	4b23      	ldr	r3, [pc, #140]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc5c:	4a24      	ldr	r2, [pc, #144]	; (800dcf0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x298>)
 800dc5e:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800dc60:	e123      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			}
		}


		else if ((S5._Peep_Avg_val_int == 0 ) )
 800dc62:	4b21      	ldr	r3, [pc, #132]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d144      	bne.n	800dcf4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x29c>
		{


			S5.error_count2++;
 800dc6a:	4b1f      	ldr	r3, [pc, #124]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6e:	3301      	adds	r3, #1
 800dc70:	4a1d      	ldr	r2, [pc, #116]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc72:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 0)
 800dc74:	4b1c      	ldr	r3, [pc, #112]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	dd1e      	ble.n	800dcba <Peep_E_Valve_Lock_delay_Pc_cmv+0x262>
			{
				S5._Set_Peep = S5._Set_Peep + 1;
 800dc7c:	4b1a      	ldr	r3, [pc, #104]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc7e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dc82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc8a:	4b17      	ldr	r3, [pc, #92]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				S5.Lock_delay = S5.Lock_delay - 10;
 800dc90:	4b15      	ldr	r3, [pc, #84]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dc94:	3b0a      	subs	r3, #10
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	4b13      	ldr	r3, [pc, #76]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc9a:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800dc9c:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800dca2:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dca4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x25c>
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dcac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dcae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800dcb2:	d902      	bls.n	800dcba <Peep_E_Valve_Lock_delay_Pc_cmv+0x262>
				{
					S5.Lock_delay = 1;
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	879a      	strh	r2, [r3, #60]	; 0x3c

				}
			}
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800dcba:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dcbc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800dcc0:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <Peep_E_Valve_Lock_delay_Pc_cmv+0x28c>)
 800dcc2:	78db      	ldrb	r3, [r3, #3]
 800dcc4:	330a      	adds	r3, #10
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd6:	f340 80e8 	ble.w	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = S5._Set_Peep;
 800dcda:	4b03      	ldr	r3, [pc, #12]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	4a02      	ldr	r2, [pc, #8]	; (800dce8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x290>)
 800dce0:	6393      	str	r3, [r2, #56]	; 0x38
 800dce2:	e0e2      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
 800dce4:	20016ae0 	.word	0x20016ae0
 800dce8:	20016df4 	.word	0x20016df4
 800dcec:	20016d64 	.word	0x20016d64
 800dcf0:	40400000 	.word	0x40400000
			}
		}



		else if ((S5._Peep_Avg_val_int < (S1._PEEP_Val -8)))
 800dcf4:	4b71      	ldr	r3, [pc, #452]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dcf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcf8:	4b71      	ldr	r3, [pc, #452]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800dcfa:	78db      	ldrb	r3, [r3, #3]
 800dcfc:	3b08      	subs	r3, #8
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	da3c      	bge.n	800dd7c <Peep_E_Valve_Lock_delay_Pc_cmv+0x324>
		{


			S5.error_count2++;
 800dd02:	4b6e      	ldr	r3, [pc, #440]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd06:	3301      	adds	r3, #1
 800dd08:	4a6c      	ldr	r2, [pc, #432]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd0a:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 0)
 800dd0c:	4b6b      	ldr	r3, [pc, #428]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dd1e      	ble.n	800dd52 <Peep_E_Valve_Lock_delay_Pc_cmv+0x2fa>
			{
				S5.Lock_delay = S5.Lock_delay - 50;
 800dd14:	4b69      	ldr	r3, [pc, #420]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dd18:	3b32      	subs	r3, #50	; 0x32
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	4b67      	ldr	r3, [pc, #412]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd1e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800dd20:	4b66      	ldr	r3, [pc, #408]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800dd26:	4b65      	ldr	r3, [pc, #404]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <Peep_E_Valve_Lock_delay_Pc_cmv+0x2e0>
 800dd2e:	4b63      	ldr	r3, [pc, #396]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dd32:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800dd36:	d90c      	bls.n	800dd52 <Peep_E_Valve_Lock_delay_Pc_cmv+0x2fa>
				{
					S5.Lock_delay = 1;
 800dd38:	4b60      	ldr	r3, [pc, #384]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800dd3e:	4b5f      	ldr	r3, [pc, #380]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd40:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dd44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd4c:	4b5b      	ldr	r3, [pc, #364]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd4e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800dd52:	4b5a      	ldr	r3, [pc, #360]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd54:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800dd58:	4b59      	ldr	r3, [pc, #356]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800dd5a:	78db      	ldrb	r3, [r3, #3]
 800dd5c:	330a      	adds	r3, #10
 800dd5e:	ee07 3a90 	vmov	s15, r3
 800dd62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6e:	f340 809c 	ble.w	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = S5._Set_Peep;
 800dd72:	4b52      	ldr	r3, [pc, #328]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd76:	4a51      	ldr	r2, [pc, #324]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd78:	6393      	str	r3, [r2, #56]	; 0x38
 800dd7a:	e096      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			}
		}



		else if ((S5._Peep_Avg_val_int >= (S1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (S1._PEEP_Val-2)))
 800dd7c:	4b4f      	ldr	r3, [pc, #316]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd80:	4b4f      	ldr	r3, [pc, #316]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800dd82:	78db      	ldrb	r3, [r3, #3]
 800dd84:	3b08      	subs	r3, #8
 800dd86:	429a      	cmp	r2, r3
 800dd88:	db42      	blt.n	800de10 <Peep_E_Valve_Lock_delay_Pc_cmv+0x3b8>
 800dd8a:	4b4c      	ldr	r3, [pc, #304]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd8e:	4b4c      	ldr	r3, [pc, #304]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800dd90:	78db      	ldrb	r3, [r3, #3]
 800dd92:	3b02      	subs	r3, #2
 800dd94:	429a      	cmp	r2, r3
 800dd96:	da3b      	bge.n	800de10 <Peep_E_Valve_Lock_delay_Pc_cmv+0x3b8>
		{


			S5.error_count2++;
 800dd98:	4b48      	ldr	r3, [pc, #288]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	4a47      	ldr	r2, [pc, #284]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dda0:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 0)
 800dda2:	4b46      	ldr	r3, [pc, #280]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	dd1e      	ble.n	800dde8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x390>
			{
				S5.Lock_delay = S5.Lock_delay - 30;
 800ddaa:	4b44      	ldr	r3, [pc, #272]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ddae:	3b1e      	subs	r3, #30
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	4b42      	ldr	r3, [pc, #264]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddb4:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800ddb6:	4b41      	ldr	r3, [pc, #260]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800ddbc:	4b3f      	ldr	r3, [pc, #252]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddbe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d004      	beq.n	800ddce <Peep_E_Valve_Lock_delay_Pc_cmv+0x376>
 800ddc4:	4b3d      	ldr	r3, [pc, #244]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddc6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ddc8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ddcc:	d90c      	bls.n	800dde8 <Peep_E_Valve_Lock_delay_Pc_cmv+0x390>
				{
					S5.Lock_delay = 1;
 800ddce:	4b3b      	ldr	r3, [pc, #236]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800ddd4:	4b39      	ldr	r3, [pc, #228]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddd6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ddda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ddde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dde2:	4b36      	ldr	r3, [pc, #216]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dde4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				}
			}
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800dde8:	4b34      	ldr	r3, [pc, #208]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800ddea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ddee:	4b34      	ldr	r3, [pc, #208]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800ddf0:	78db      	ldrb	r3, [r3, #3]
 800ddf2:	330a      	adds	r3, #10
 800ddf4:	ee07 3a90 	vmov	s15, r3
 800ddf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de04:	dd51      	ble.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = S5._Set_Peep;
 800de06:	4b2d      	ldr	r3, [pc, #180]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	4a2c      	ldr	r2, [pc, #176]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de0c:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800de0e:	e04c      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			}
		}


		else if ((S5._Peep_Avg_val_int >= (S1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (S1._PEEP_Val)))
 800de10:	4b2a      	ldr	r3, [pc, #168]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de14:	4b2a      	ldr	r3, [pc, #168]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800de16:	78db      	ldrb	r3, [r3, #3]
 800de18:	3b02      	subs	r3, #2
 800de1a:	429a      	cmp	r2, r3
 800de1c:	db41      	blt.n	800dea2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x44a>
 800de1e:	4b27      	ldr	r3, [pc, #156]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de22:	4a27      	ldr	r2, [pc, #156]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800de24:	78d2      	ldrb	r2, [r2, #3]
 800de26:	4293      	cmp	r3, r2
 800de28:	da3b      	bge.n	800dea2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x44a>
		{


			S5.error_count2++;
 800de2a:	4b24      	ldr	r3, [pc, #144]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2e:	3301      	adds	r3, #1
 800de30:	4a22      	ldr	r2, [pc, #136]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de32:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 0)
 800de34:	4b21      	ldr	r3, [pc, #132]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de38:	2b00      	cmp	r3, #0
 800de3a:	dd1e      	ble.n	800de7a <Peep_E_Valve_Lock_delay_Pc_cmv+0x422>
			{

				S5.Lock_delay = S5.Lock_delay - 10;
 800de3c:	4b1f      	ldr	r3, [pc, #124]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de3e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800de40:	3b0a      	subs	r3, #10
 800de42:	b29a      	uxth	r2, r3
 800de44:	4b1d      	ldr	r3, [pc, #116]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de46:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800de48:	4b1c      	ldr	r3, [pc, #112]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800de4e:	4b1b      	ldr	r3, [pc, #108]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800de52:	2b00      	cmp	r3, #0
 800de54:	d004      	beq.n	800de60 <Peep_E_Valve_Lock_delay_Pc_cmv+0x408>
 800de56:	4b19      	ldr	r3, [pc, #100]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800de5a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800de5e:	d90c      	bls.n	800de7a <Peep_E_Valve_Lock_delay_Pc_cmv+0x422>
				{
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800de60:	4b16      	ldr	r3, [pc, #88]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de62:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800de66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de6e:	4b13      	ldr	r3, [pc, #76]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de70:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.Lock_delay = 1;
 800de74:	4b11      	ldr	r3, [pc, #68]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de76:	2201      	movs	r2, #1
 800de78:	879a      	strh	r2, [r3, #60]	; 0x3c
				}
			}
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800de7a:	4b10      	ldr	r3, [pc, #64]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de7c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800de80:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x468>)
 800de82:	78db      	ldrb	r3, [r3, #3]
 800de84:	330a      	adds	r3, #10
 800de86:	ee07 3a90 	vmov	s15, r3
 800de8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de96:	dd08      	ble.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>
			{
				S5._Set_Peep = S5._Set_Peep;
 800de98:	4b08      	ldr	r3, [pc, #32]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	4a07      	ldr	r2, [pc, #28]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800de9e:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800dea0:	e003      	b.n	800deaa <Peep_E_Valve_Lock_delay_Pc_cmv+0x452>



		else
		{
			S5._Set_Peep = S5._Set_Peep;
 800dea2:	4b06      	ldr	r3, [pc, #24]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea6:	4a05      	ldr	r2, [pc, #20]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800dea8:	6393      	str	r3, [r2, #56]	; 0x38
		}
		S5._Peep_Avg_count = 0;
 800deaa:	4b04      	ldr	r3, [pc, #16]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800deac:	f04f 0200 	mov.w	r2, #0
 800deb0:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 800deb2:	4b02      	ldr	r3, [pc, #8]	; (800debc <Peep_E_Valve_Lock_delay_Pc_cmv+0x464>)
 800deb4:	f04f 0200 	mov.w	r2, #0
 800deb8:	615a      	str	r2, [r3, #20]
			S5._Set_Peep = S5._Set_Peep;
		}
		S5._Peep_Avg_count = 0;
		S5._Peep_Avg = 0;
	}
}
 800deba:	e22e      	b.n	800e31a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8c2>
 800debc:	20016df4 	.word	0x20016df4
 800dec0:	20016ae0 	.word	0x20016ae0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 800dec4:	4b9f      	ldr	r3, [pc, #636]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dec6:	edd3 6a02 	vldr	s13, [r3, #8]
 800deca:	4b9e      	ldr	r3, [pc, #632]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800decc:	ed93 7a03 	vldr	s14, [r3, #12]
 800ded0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ded4:	4b9b      	ldr	r3, [pc, #620]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800ded6:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 800deda:	4b9a      	ldr	r3, [pc, #616]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dedc:	edd3 7a04 	vldr	s15, [r3, #16]
 800dee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dee4:	ee17 2a90 	vmov	r2, s15
 800dee8:	4b96      	ldr	r3, [pc, #600]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800deea:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 800deec:	4b95      	ldr	r3, [pc, #596]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800deee:	f04f 0200 	mov.w	r2, #0
 800def2:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 800def4:	4b93      	ldr	r3, [pc, #588]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800def6:	f04f 0200 	mov.w	r2, #0
 800defa:	609a      	str	r2, [r3, #8]
		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 800defc:	4b91      	ldr	r3, [pc, #580]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800defe:	edd3 6a05 	vldr	s13, [r3, #20]
 800df02:	4b90      	ldr	r3, [pc, #576]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df04:	ed93 7a08 	vldr	s14, [r3, #32]
 800df08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df0c:	4b8d      	ldr	r3, [pc, #564]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 800df12:	4b8c      	ldr	r3, [pc, #560]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800df18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df1c:	ee17 2a90 	vmov	r2, s15
 800df20:	4b88      	ldr	r3, [pc, #544]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df22:	629a      	str	r2, [r3, #40]	; 0x28
		if (S1.RR >= 30 || S2._E_TIMER_HOLD < 700)
 800df24:	4b88      	ldr	r3, [pc, #544]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800df26:	7c9b      	ldrb	r3, [r3, #18]
 800df28:	2b1d      	cmp	r3, #29
 800df2a:	d804      	bhi.n	800df36 <Peep_E_Valve_Lock_delay_Pc_cmv+0x4de>
 800df2c:	4b87      	ldr	r3, [pc, #540]	; (800e14c <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f4>)
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800df34:	d203      	bcs.n	800df3e <Peep_E_Valve_Lock_delay_Pc_cmv+0x4e6>
			S5._Peep_Avg_val_int = S5.peep_max;
 800df36:	4b83      	ldr	r3, [pc, #524]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3a:	4a82      	ldr	r2, [pc, #520]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df3c:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 800df3e:	4b81      	ldr	r3, [pc, #516]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df40:	2200      	movs	r2, #0
 800df42:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (S1._PEEP_Val +8) )
 800df44:	4b7f      	ldr	r3, [pc, #508]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df48:	4b7f      	ldr	r3, [pc, #508]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800df4a:	78db      	ldrb	r3, [r3, #3]
 800df4c:	3308      	adds	r3, #8
 800df4e:	429a      	cmp	r2, r3
 800df50:	dd33      	ble.n	800dfba <Peep_E_Valve_Lock_delay_Pc_cmv+0x562>
			S5.error_count++;
 800df52:	4b7c      	ldr	r3, [pc, #496]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df56:	3301      	adds	r3, #1
 800df58:	4a7a      	ldr	r2, [pc, #488]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df5a:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800df5c:	4b79      	ldr	r3, [pc, #484]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df60:	2b02      	cmp	r3, #2
 800df62:	dd1b      	ble.n	800df9c <Peep_E_Valve_Lock_delay_Pc_cmv+0x544>
				S5.Lock_delay = S5.Lock_delay + 100;
 800df64:	4b77      	ldr	r3, [pc, #476]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df68:	3364      	adds	r3, #100	; 0x64
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	4b75      	ldr	r3, [pc, #468]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df6e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800df70:	4b74      	ldr	r3, [pc, #464]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df72:	2200      	movs	r2, #0
 800df74:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800df76:	4b73      	ldr	r3, [pc, #460]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800df7e:	d90d      	bls.n	800df9c <Peep_E_Valve_Lock_delay_Pc_cmv+0x544>
					S5.Lock_delay = 700;
 800df80:	4b70      	ldr	r3, [pc, #448]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df82:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800df86:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800df88:	4b6e      	ldr	r3, [pc, #440]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df8a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800df8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800df92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df96:	4b6b      	ldr	r3, [pc, #428]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df98:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800df9c:	4b69      	ldr	r3, [pc, #420]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800df9e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800dfa2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dfa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfae:	f200 81ac 	bhi.w	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = 3;
 800dfb2:	4b64      	ldr	r3, [pc, #400]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfb4:	4a66      	ldr	r2, [pc, #408]	; (800e150 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f8>)
 800dfb6:	639a      	str	r2, [r3, #56]	; 0x38
 800dfb8:	e1a7      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
		else if( (S5._Peep_Avg_val_int > (S1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (S1._PEEP_Val+8)) )
 800dfba:	4b62      	ldr	r3, [pc, #392]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfbe:	4b62      	ldr	r3, [pc, #392]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800dfc0:	78db      	ldrb	r3, [r3, #3]
 800dfc2:	3302      	adds	r3, #2
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	dd3a      	ble.n	800e03e <Peep_E_Valve_Lock_delay_Pc_cmv+0x5e6>
 800dfc8:	4b5e      	ldr	r3, [pc, #376]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfcc:	4b5e      	ldr	r3, [pc, #376]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800dfce:	78db      	ldrb	r3, [r3, #3]
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	dc33      	bgt.n	800e03e <Peep_E_Valve_Lock_delay_Pc_cmv+0x5e6>
			S5.error_count++;
 800dfd6:	4b5b      	ldr	r3, [pc, #364]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfda:	3301      	adds	r3, #1
 800dfdc:	4a59      	ldr	r2, [pc, #356]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfde:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800dfe0:	4b58      	ldr	r3, [pc, #352]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	dd1b      	ble.n	800e020 <Peep_E_Valve_Lock_delay_Pc_cmv+0x5c8>
				S5.Lock_delay = S5.Lock_delay + 40;
 800dfe8:	4b56      	ldr	r3, [pc, #344]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dfea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dfec:	3328      	adds	r3, #40	; 0x28
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	4b54      	ldr	r3, [pc, #336]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dff2:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800dff4:	4b53      	ldr	r3, [pc, #332]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800dffa:	4b52      	ldr	r3, [pc, #328]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800dffc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dffe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e002:	d90d      	bls.n	800e020 <Peep_E_Valve_Lock_delay_Pc_cmv+0x5c8>
					S5.Lock_delay = 700;
 800e004:	4b4f      	ldr	r3, [pc, #316]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e006:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800e00a:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800e00c:	4b4d      	ldr	r3, [pc, #308]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e00e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e012:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e01a:	4b4a      	ldr	r3, [pc, #296]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e01c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800e020:	4b48      	ldr	r3, [pc, #288]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e022:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e026:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e02a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e032:	f200 816a 	bhi.w	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = 3;
 800e036:	4b43      	ldr	r3, [pc, #268]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e038:	4a45      	ldr	r2, [pc, #276]	; (800e150 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f8>)
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800e03c:	e165      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
		else if( (S5._Peep_Avg_val_int > (S1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (S1._PEEP_Val+2)) )
 800e03e:	4b41      	ldr	r3, [pc, #260]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e042:	4a41      	ldr	r2, [pc, #260]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800e044:	78d2      	ldrb	r2, [r2, #3]
 800e046:	4293      	cmp	r3, r2
 800e048:	dd3a      	ble.n	800e0c0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x668>
 800e04a:	4b3e      	ldr	r3, [pc, #248]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e04e:	4b3e      	ldr	r3, [pc, #248]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800e050:	78db      	ldrb	r3, [r3, #3]
 800e052:	3302      	adds	r3, #2
 800e054:	429a      	cmp	r2, r3
 800e056:	dc33      	bgt.n	800e0c0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x668>
			S5.error_count++;
 800e058:	4b3a      	ldr	r3, [pc, #232]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05c:	3301      	adds	r3, #1
 800e05e:	4a39      	ldr	r2, [pc, #228]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e060:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 2)
 800e062:	4b38      	ldr	r3, [pc, #224]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e066:	2b02      	cmp	r3, #2
 800e068:	dd1b      	ble.n	800e0a2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x64a>
				S5.Lock_delay = S5.Lock_delay + 10;
 800e06a:	4b36      	ldr	r3, [pc, #216]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e06c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e06e:	330a      	adds	r3, #10
 800e070:	b29a      	uxth	r2, r3
 800e072:	4b34      	ldr	r3, [pc, #208]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e074:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 800e076:	4b33      	ldr	r3, [pc, #204]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e078:	2200      	movs	r2, #0
 800e07a:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 800e07c:	4b31      	ldr	r3, [pc, #196]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e07e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e080:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e084:	d90d      	bls.n	800e0a2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x64a>
					S5.Lock_delay = 700;
 800e086:	4b2f      	ldr	r3, [pc, #188]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e088:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800e08c:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep - 0.5;
 800e08e:	4b2d      	ldr	r3, [pc, #180]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e090:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e094:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e09c:	4b29      	ldr	r3, [pc, #164]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e09e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800e0a2:	4b28      	ldr	r3, [pc, #160]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e0a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e0ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	f200 8129 	bhi.w	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = 3;
 800e0b8:	4b22      	ldr	r3, [pc, #136]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0ba:	4a25      	ldr	r2, [pc, #148]	; (800e150 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f8>)
 800e0bc:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 800e0be:	e124      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
		else if ((S5._Peep_Avg_val_int == 0 ) )
 800e0c0:	4b20      	ldr	r3, [pc, #128]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d145      	bne.n	800e154 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6fc>
			S5.error_count2++;
 800e0c8:	4b1e      	ldr	r3, [pc, #120]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	4a1d      	ldr	r2, [pc, #116]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0d0:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 800e0d2:	4b1c      	ldr	r3, [pc, #112]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	dd1e      	ble.n	800e118 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6c0>
				S5._Set_Peep = S5._Set_Peep + 1;
 800e0da:	4b1a      	ldr	r3, [pc, #104]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0e8:	4b16      	ldr	r3, [pc, #88]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0ea:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				S5.Lock_delay = S5.Lock_delay - 10;
 800e0ee:	4b15      	ldr	r3, [pc, #84]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e0f2:	3b0a      	subs	r3, #10
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	4b13      	ldr	r3, [pc, #76]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0f8:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800e0fa:	4b12      	ldr	r3, [pc, #72]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800e100:	4b10      	ldr	r3, [pc, #64]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e102:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e104:	2b00      	cmp	r3, #0
 800e106:	d004      	beq.n	800e112 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ba>
 800e108:	4b0e      	ldr	r3, [pc, #56]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e10a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e10c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e110:	d902      	bls.n	800e118 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6c0>
					S5.Lock_delay = 1;
 800e112:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e114:	2201      	movs	r2, #1
 800e116:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e118:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e11a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e11e:	4b0a      	ldr	r3, [pc, #40]	; (800e148 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6f0>)
 800e120:	78db      	ldrb	r3, [r3, #3]
 800e122:	330a      	adds	r3, #10
 800e124:	ee07 3a90 	vmov	s15, r3
 800e128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e12c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e134:	f340 80e9 	ble.w	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = S5._Set_Peep;
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13c:	4a01      	ldr	r2, [pc, #4]	; (800e144 <Peep_E_Valve_Lock_delay_Pc_cmv+0x6ec>)
 800e13e:	6393      	str	r3, [r2, #56]	; 0x38
 800e140:	e0e3      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
 800e142:	bf00      	nop
 800e144:	20016df4 	.word	0x20016df4
 800e148:	20016ae0 	.word	0x20016ae0
 800e14c:	20016d64 	.word	0x20016d64
 800e150:	40400000 	.word	0x40400000
		else if ((S5._Peep_Avg_val_int < (S1._PEEP_Val -8)))
 800e154:	4b73      	ldr	r3, [pc, #460]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e158:	4b73      	ldr	r3, [pc, #460]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e15a:	78db      	ldrb	r3, [r3, #3]
 800e15c:	3b08      	subs	r3, #8
 800e15e:	429a      	cmp	r2, r3
 800e160:	da3c      	bge.n	800e1dc <Peep_E_Valve_Lock_delay_Pc_cmv+0x784>
			S5.error_count2++;
 800e162:	4b70      	ldr	r3, [pc, #448]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e166:	3301      	adds	r3, #1
 800e168:	4a6e      	ldr	r2, [pc, #440]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e16a:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 800e16c:	4b6d      	ldr	r3, [pc, #436]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e170:	2b02      	cmp	r3, #2
 800e172:	dd1e      	ble.n	800e1b2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x75a>
				S5.Lock_delay = S5.Lock_delay - 50;
 800e174:	4b6b      	ldr	r3, [pc, #428]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e176:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e178:	3b32      	subs	r3, #50	; 0x32
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	4b69      	ldr	r3, [pc, #420]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e17e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800e180:	4b68      	ldr	r3, [pc, #416]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e182:	2200      	movs	r2, #0
 800e184:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800e186:	4b67      	ldr	r3, [pc, #412]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e188:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d004      	beq.n	800e198 <Peep_E_Valve_Lock_delay_Pc_cmv+0x740>
 800e18e:	4b65      	ldr	r3, [pc, #404]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e190:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e192:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e196:	d90c      	bls.n	800e1b2 <Peep_E_Valve_Lock_delay_Pc_cmv+0x75a>
					S5.Lock_delay = 1;
 800e198:	4b62      	ldr	r3, [pc, #392]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e19a:	2201      	movs	r2, #1
 800e19c:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800e19e:	4b61      	ldr	r3, [pc, #388]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e1a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e1a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1ac:	4b5d      	ldr	r3, [pc, #372]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1ae:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e1b2:	4b5c      	ldr	r3, [pc, #368]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1b4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e1b8:	4b5b      	ldr	r3, [pc, #364]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e1ba:	78db      	ldrb	r3, [r3, #3]
 800e1bc:	330a      	adds	r3, #10
 800e1be:	ee07 3a90 	vmov	s15, r3
 800e1c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ce:	f340 809c 	ble.w	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = S5._Set_Peep;
 800e1d2:	4b54      	ldr	r3, [pc, #336]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d6:	4a53      	ldr	r2, [pc, #332]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1d8:	6393      	str	r3, [r2, #56]	; 0x38
 800e1da:	e096      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
		else if ((S5._Peep_Avg_val_int >= (S1._PEEP_Val -8)) && (S5._Peep_Avg_val_int < (S1._PEEP_Val-2)))
 800e1dc:	4b51      	ldr	r3, [pc, #324]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1e0:	4b51      	ldr	r3, [pc, #324]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e1e2:	78db      	ldrb	r3, [r3, #3]
 800e1e4:	3b08      	subs	r3, #8
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	db42      	blt.n	800e270 <Peep_E_Valve_Lock_delay_Pc_cmv+0x818>
 800e1ea:	4b4e      	ldr	r3, [pc, #312]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1ee:	4b4e      	ldr	r3, [pc, #312]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e1f0:	78db      	ldrb	r3, [r3, #3]
 800e1f2:	3b02      	subs	r3, #2
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	da3b      	bge.n	800e270 <Peep_E_Valve_Lock_delay_Pc_cmv+0x818>
			S5.error_count2++;
 800e1f8:	4b4a      	ldr	r3, [pc, #296]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	4a49      	ldr	r2, [pc, #292]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e200:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 800e202:	4b48      	ldr	r3, [pc, #288]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e206:	2b02      	cmp	r3, #2
 800e208:	dd1e      	ble.n	800e248 <Peep_E_Valve_Lock_delay_Pc_cmv+0x7f0>
				S5.Lock_delay = S5.Lock_delay - 30;
 800e20a:	4b46      	ldr	r3, [pc, #280]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e20c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e20e:	3b1e      	subs	r3, #30
 800e210:	b29a      	uxth	r2, r3
 800e212:	4b44      	ldr	r3, [pc, #272]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e214:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800e216:	4b43      	ldr	r3, [pc, #268]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e218:	2200      	movs	r2, #0
 800e21a:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800e21c:	4b41      	ldr	r3, [pc, #260]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e21e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <Peep_E_Valve_Lock_delay_Pc_cmv+0x7d6>
 800e224:	4b3f      	ldr	r3, [pc, #252]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e226:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e228:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e22c:	d90c      	bls.n	800e248 <Peep_E_Valve_Lock_delay_Pc_cmv+0x7f0>
					S5.Lock_delay = 1;
 800e22e:	4b3d      	ldr	r3, [pc, #244]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e230:	2201      	movs	r2, #1
 800e232:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800e234:	4b3b      	ldr	r3, [pc, #236]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e236:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e23a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e23e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e242:	4b38      	ldr	r3, [pc, #224]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e244:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e248:	4b36      	ldr	r3, [pc, #216]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e24a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e24e:	4b36      	ldr	r3, [pc, #216]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e250:	78db      	ldrb	r3, [r3, #3]
 800e252:	330a      	adds	r3, #10
 800e254:	ee07 3a90 	vmov	s15, r3
 800e258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e25c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e264:	dd51      	ble.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = S5._Set_Peep;
 800e266:	4b2f      	ldr	r3, [pc, #188]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	4a2e      	ldr	r2, [pc, #184]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e26c:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e26e:	e04c      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
		else if ((S5._Peep_Avg_val_int >= (S1._PEEP_Val -2)) && (S5._Peep_Avg_val_int < (S1._PEEP_Val)))
 800e270:	4b2c      	ldr	r3, [pc, #176]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e274:	4b2c      	ldr	r3, [pc, #176]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e276:	78db      	ldrb	r3, [r3, #3]
 800e278:	3b02      	subs	r3, #2
 800e27a:	429a      	cmp	r2, r3
 800e27c:	db41      	blt.n	800e302 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8aa>
 800e27e:	4b29      	ldr	r3, [pc, #164]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e282:	4a29      	ldr	r2, [pc, #164]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e284:	78d2      	ldrb	r2, [r2, #3]
 800e286:	4293      	cmp	r3, r2
 800e288:	da3b      	bge.n	800e302 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8aa>
			S5.error_count2++;
 800e28a:	4b26      	ldr	r3, [pc, #152]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	3301      	adds	r3, #1
 800e290:	4a24      	ldr	r2, [pc, #144]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e292:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 800e294:	4b23      	ldr	r3, [pc, #140]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e298:	2b02      	cmp	r3, #2
 800e29a:	dd1e      	ble.n	800e2da <Peep_E_Valve_Lock_delay_Pc_cmv+0x882>
				S5.Lock_delay = S5.Lock_delay - 10;
 800e29c:	4b21      	ldr	r3, [pc, #132]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e29e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e2a0:	3b0a      	subs	r3, #10
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	4b1f      	ldr	r3, [pc, #124]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2a6:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 800e2a8:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 800e2ae:	4b1d      	ldr	r3, [pc, #116]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d004      	beq.n	800e2c0 <Peep_E_Valve_Lock_delay_Pc_cmv+0x868>
 800e2b6:	4b1b      	ldr	r3, [pc, #108]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e2ba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800e2be:	d90c      	bls.n	800e2da <Peep_E_Valve_Lock_delay_Pc_cmv+0x882>
					S5._Set_Peep = S5._Set_Peep + 0.5;
 800e2c0:	4b18      	ldr	r3, [pc, #96]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e2c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e2ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ce:	4b15      	ldr	r3, [pc, #84]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2d0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.Lock_delay = 1;
 800e2d4:	4b13      	ldr	r3, [pc, #76]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e2da:	4b12      	ldr	r3, [pc, #72]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2dc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e2e0:	4b11      	ldr	r3, [pc, #68]	; (800e328 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8d0>)
 800e2e2:	78db      	ldrb	r3, [r3, #3]
 800e2e4:	330a      	adds	r3, #10
 800e2e6:	ee07 3a90 	vmov	s15, r3
 800e2ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f6:	dd08      	ble.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
				S5._Set_Peep = S5._Set_Peep;
 800e2f8:	4b0a      	ldr	r3, [pc, #40]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fc:	4a09      	ldr	r2, [pc, #36]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e2fe:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > S1._PEEP_Val + 10)
 800e300:	e003      	b.n	800e30a <Peep_E_Valve_Lock_delay_Pc_cmv+0x8b2>
			S5._Set_Peep = S5._Set_Peep;
 800e302:	4b08      	ldr	r3, [pc, #32]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e306:	4a07      	ldr	r2, [pc, #28]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e308:	6393      	str	r3, [r2, #56]	; 0x38
		S5._Peep_Avg_count = 0;
 800e30a:	4b06      	ldr	r3, [pc, #24]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e30c:	f04f 0200 	mov.w	r2, #0
 800e310:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 800e312:	4b04      	ldr	r3, [pc, #16]	; (800e324 <Peep_E_Valve_Lock_delay_Pc_cmv+0x8cc>)
 800e314:	f04f 0200 	mov.w	r2, #0
 800e318:	615a      	str	r2, [r3, #20]
}
 800e31a:	bf00      	nop
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	20016df4 	.word	0x20016df4
 800e328:	20016ae0 	.word	0x20016ae0

0800e32c <Pressure_Sensor_Mv>:

#include "Pressure_Sensors_Data.h"


uint16_t Pressure_Sensor_Mv(uint16_t P_value)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	4603      	mov	r3, r0
 800e334:	80fb      	strh	r3, [r7, #6]
 	  return (((P_value)*5000)/4095);
 800e336:	88fb      	ldrh	r3, [r7, #6]
 800e338:	f241 3288 	movw	r2, #5000	; 0x1388
 800e33c:	fb02 f303 	mul.w	r3, r2, r3
 800e340:	4a06      	ldr	r2, [pc, #24]	; (800e35c <Pressure_Sensor_Mv+0x30>)
 800e342:	fb82 1203 	smull	r1, r2, r2, r3
 800e346:	441a      	add	r2, r3
 800e348:	12d2      	asrs	r2, r2, #11
 800e34a:	17db      	asrs	r3, r3, #31
 800e34c:	1ad3      	subs	r3, r2, r3
 800e34e:	b29b      	uxth	r3, r3
}
 800e350:	4618      	mov	r0, r3
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	80080081 	.word	0x80080081

0800e360 <Pressure_Sensor_offset>:

void Pressure_Sensor_offset(void)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
  	for(int n=0;n<1000;n++)
 800e366:	2300      	movs	r3, #0
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	e00e      	b.n	800e38a <Pressure_Sensor_offset+0x2a>
  	{
  		  Pressure_sensor._Pressure_Sensor_Offset_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin);
 800e36c:	4b0b      	ldr	r3, [pc, #44]	; (800e39c <Pressure_Sensor_offset+0x3c>)
 800e36e:	889b      	ldrh	r3, [r3, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ffdb 	bl	800e32c <Pressure_Sensor_Mv>
 800e376:	4603      	mov	r3, r0
 800e378:	461a      	mov	r2, r3
 800e37a:	4b09      	ldr	r3, [pc, #36]	; (800e3a0 <Pressure_Sensor_offset+0x40>)
 800e37c:	801a      	strh	r2, [r3, #0]
  		  vTaskDelay(1);
 800e37e:	2001      	movs	r0, #1
 800e380:	f011 fa74 	bl	801f86c <vTaskDelay>
  	for(int n=0;n<1000;n++)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3301      	adds	r3, #1
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e390:	dbec      	blt.n	800e36c <Pressure_Sensor_offset+0xc>
  	}
}
 800e392:	bf00      	nop
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20016bbc 	.word	0x20016bbc
 800e3a0:	20016cfc 	.word	0x20016cfc

0800e3a4 <Pressure_Sensor_Value>:

void Pressure_Sensor_Value()
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
     const float gP_sensitivity=44.13;
 800e3aa:	4b18      	ldr	r3, [pc, #96]	; (800e40c <Pressure_Sensor_Value+0x68>)
 800e3ac:	60fb      	str	r3, [r7, #12]

     Pressure_sensor._Runtime_Pressure_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin);
 800e3ae:	4b18      	ldr	r3, [pc, #96]	; (800e410 <Pressure_Sensor_Value+0x6c>)
 800e3b0:	889b      	ldrh	r3, [r3, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff ffba 	bl	800e32c <Pressure_Sensor_Mv>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4b15      	ldr	r3, [pc, #84]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3be:	805a      	strh	r2, [r3, #2]

     Pressure_sensor._Pressure_Mv_Val_=(Pressure_sensor._Runtime_Pressure_Val-Pressure_sensor._Pressure_Sensor_Offset_Val);
 800e3c0:	4b14      	ldr	r3, [pc, #80]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3c2:	885b      	ldrh	r3, [r3, #2]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4b13      	ldr	r3, [pc, #76]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	ee07 3a90 	vmov	s15, r3
 800e3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3d4:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3d6:	edc3 7a02 	vstr	s15, [r3, #8]

     Pressure_sensor._P_cmh2o_Val=(Pressure_sensor._Pressure_Mv_Val_/gP_sensitivity);
 800e3da:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3dc:	edd3 6a02 	vldr	s13, [r3, #8]
 800e3e0:	ed97 7a03 	vldr	s14, [r7, #12]
 800e3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3ea:	edc3 7a03 	vstr	s15, [r3, #12]

     Pressure_sensor._Pressure_Val=Pressure_sensor._P_cmh2o_Val;
 800e3ee:	4b09      	ldr	r3, [pc, #36]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e3f0:	edd3 7a03 	vldr	s15, [r3, #12]
 800e3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3f8:	edc7 7a01 	vstr	s15, [r7, #4]
 800e3fc:	793b      	ldrb	r3, [r7, #4]
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	4b04      	ldr	r3, [pc, #16]	; (800e414 <Pressure_Sensor_Value+0x70>)
 800e402:	711a      	strb	r2, [r3, #4]


}
 800e404:	bf00      	nop
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	4230851f 	.word	0x4230851f
 800e410:	20016bbc 	.word	0x20016bbc
 800e414:	20016cfc 	.word	0x20016cfc

0800e418 <PSV_Mode_Task>:

int pressure_high_error_count=0;      //new
int pressure_high_error_count2=0;     //new

void PSV_Mode_Task (void *argument)
{
 800e418:	b5b0      	push	{r4, r5, r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af02      	add	r7, sp, #8
 800e41e:	6078      	str	r0, [r7, #4]
	while(1)
	{



		  if(Initial_open_valve==1)
 800e420:	4baa      	ldr	r3, [pc, #680]	; (800e6cc <PSV_Mode_Task+0x2b4>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b01      	cmp	r3, #1
 800e426:	f040 80c4 	bne.w	800e5b2 <PSV_Mode_Task+0x19a>





			  if(one_time_only==1)
 800e42a:	4ba9      	ldr	r3, [pc, #676]	; (800e6d0 <PSV_Mode_Task+0x2b8>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	f040 80b2 	bne.w	800e598 <PSV_Mode_Task+0x180>
			  {
				  //Initial_open_valve=1;
				 Alert_error_count=0;
 800e434:	4ba7      	ldr	r3, [pc, #668]	; (800e6d4 <PSV_Mode_Task+0x2bc>)
 800e436:	2200      	movs	r2, #0
 800e438:	601a      	str	r2, [r3, #0]
				 Alert_Status_count=0;
 800e43a:	4ba7      	ldr	r3, [pc, #668]	; (800e6d8 <PSV_Mode_Task+0x2c0>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]

				 Wait_Dac=1;
 800e440:	4ba6      	ldr	r3, [pc, #664]	; (800e6dc <PSV_Mode_Task+0x2c4>)
 800e442:	2201      	movs	r2, #1
 800e444:	601a      	str	r2, [r3, #0]
				 Apnea_counter_trigger_Flag=1;
 800e446:	4ba6      	ldr	r3, [pc, #664]	; (800e6e0 <PSV_Mode_Task+0x2c8>)
 800e448:	2201      	movs	r2, #1
 800e44a:	601a      	str	r2, [r3, #0]
				 now_update=1;
 800e44c:	4ba5      	ldr	r3, [pc, #660]	; (800e6e4 <PSV_Mode_Task+0x2cc>)
 800e44e:	2201      	movs	r2, #1
 800e450:	601a      	str	r2, [r3, #0]
				 Blower_Signal(0);
 800e452:	4ba5      	ldr	r3, [pc, #660]	; (800e6e8 <PSV_Mode_Task+0x2d0>)
 800e454:	2200      	movs	r2, #0
 800e456:	609a      	str	r2, [r3, #8]

				 initial_blower_trigger=1;
 800e458:	4ba4      	ldr	r3, [pc, #656]	; (800e6ec <PSV_Mode_Task+0x2d4>)
 800e45a:	2201      	movs	r2, #1
 800e45c:	601a      	str	r2, [r3, #0]
				 initial_blower_trigger2=1;
 800e45e:	4ba4      	ldr	r3, [pc, #656]	; (800e6f0 <PSV_Mode_Task+0x2d8>)
 800e460:	2201      	movs	r2, #1
 800e462:	601a      	str	r2, [r3, #0]
				 Start_check=0;
 800e464:	4ba3      	ldr	r3, [pc, #652]	; (800e6f4 <PSV_Mode_Task+0x2dc>)
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
				 Alert_Data_send_count=0;
 800e46a:	4ba3      	ldr	r3, [pc, #652]	; (800e6f8 <PSV_Mode_Task+0x2e0>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	601a      	str	r2, [r3, #0]
				 Alert_error_count=0;
 800e470:	4b98      	ldr	r3, [pc, #608]	; (800e6d4 <PSV_Mode_Task+0x2bc>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
				 Dac_control_count=0;
 800e476:	4ba1      	ldr	r3, [pc, #644]	; (800e6fc <PSV_Mode_Task+0x2e4>)
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
				 uwTick=0;
 800e47c:	4ba0      	ldr	r3, [pc, #640]	; (800e700 <PSV_Mode_Task+0x2e8>)
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]




				 Dac1=300;
 800e482:	4ba0      	ldr	r3, [pc, #640]	; (800e704 <PSV_Mode_Task+0x2ec>)
 800e484:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e488:	801a      	strh	r2, [r3, #0]
				 Dac2=2000;
 800e48a:	4b9f      	ldr	r3, [pc, #636]	; (800e708 <PSV_Mode_Task+0x2f0>)
 800e48c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e490:	801a      	strh	r2, [r3, #0]
				 kp=5;
 800e492:	4b9e      	ldr	r3, [pc, #632]	; (800e70c <PSV_Mode_Task+0x2f4>)
 800e494:	2205      	movs	r2, #5
 800e496:	701a      	strb	r2, [r3, #0]
				 ki=4;
 800e498:	4b9d      	ldr	r3, [pc, #628]	; (800e710 <PSV_Mode_Task+0x2f8>)
 800e49a:	2204      	movs	r2, #4
 800e49c:	701a      	strb	r2, [r3, #0]
				 kd=1;
 800e49e:	499d      	ldr	r1, [pc, #628]	; (800e714 <PSV_Mode_Task+0x2fc>)
 800e4a0:	f04f 0200 	mov.w	r2, #0
 800e4a4:	4b9c      	ldr	r3, [pc, #624]	; (800e718 <PSV_Mode_Task+0x300>)
 800e4a6:	e9c1 2300 	strd	r2, r3, [r1]
				 Time=10;
 800e4aa:	4b9c      	ldr	r3, [pc, #624]	; (800e71c <PSV_Mode_Task+0x304>)
 800e4ac:	220a      	movs	r2, #10
 800e4ae:	601a      	str	r2, [r3, #0]
				 Speed=30;
 800e4b0:	4b9b      	ldr	r3, [pc, #620]	; (800e720 <PSV_Mode_Task+0x308>)
 800e4b2:	221e      	movs	r2, #30
 800e4b4:	601a      	str	r2, [r3, #0]


				 Trigger_Count=0;
 800e4b6:	4b9b      	ldr	r3, [pc, #620]	; (800e724 <PSV_Mode_Task+0x30c>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]
				 _60_Seconds=60000;
 800e4bc:	4b9a      	ldr	r3, [pc, #616]	; (800e728 <PSV_Mode_Task+0x310>)
 800e4be:	f64e 2260 	movw	r2, #60000	; 0xea60
 800e4c2:	801a      	strh	r2, [r3, #0]
				 now_check_breath=0;
 800e4c4:	4b99      	ldr	r3, [pc, #612]	; (800e72c <PSV_Mode_Task+0x314>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	701a      	strb	r2, [r3, #0]
				 Breath=0;
 800e4ca:	4b99      	ldr	r3, [pc, #612]	; (800e730 <PSV_Mode_Task+0x318>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]


				 TempSetpoint = (P1.PEEP_PSV_Val );
 800e4d0:	4b98      	ldr	r3, [pc, #608]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e4d2:	789b      	ldrb	r3, [r3, #2]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7f1 ffbd 	bl	8000454 <__aeabi_ui2d>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4996      	ldr	r1, [pc, #600]	; (800e738 <PSV_Mode_Task+0x320>)
 800e4e0:	e9c1 2300 	strd	r2, r3, [r1]
				 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800e4e4:	4b89      	ldr	r3, [pc, #548]	; (800e70c <PSV_Mode_Task+0x2f4>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f1 ffb3 	bl	8000454 <__aeabi_ui2d>
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	4b87      	ldr	r3, [pc, #540]	; (800e710 <PSV_Mode_Task+0x2f8>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7f1 ffac 	bl	8000454 <__aeabi_ui2d>
 800e4fc:	4b85      	ldr	r3, [pc, #532]	; (800e714 <PSV_Mode_Task+0x2fc>)
 800e4fe:	ed93 7b00 	vldr	d7, [r3]
 800e502:	2300      	movs	r3, #0
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	2301      	movs	r3, #1
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	eeb0 2a47 	vmov.f32	s4, s14
 800e50e:	eef0 2a67 	vmov.f32	s5, s15
 800e512:	ec41 0b11 	vmov	d1, r0, r1
 800e516:	ec45 4b10 	vmov	d0, r4, r5
 800e51a:	4b87      	ldr	r3, [pc, #540]	; (800e738 <PSV_Mode_Task+0x320>)
 800e51c:	4a87      	ldr	r2, [pc, #540]	; (800e73c <PSV_Mode_Task+0x324>)
 800e51e:	4988      	ldr	r1, [pc, #544]	; (800e740 <PSV_Mode_Task+0x328>)
 800e520:	4888      	ldr	r0, [pc, #544]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e522:	f006 f93d 	bl	80147a0 <PID>
				 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800e526:	2101      	movs	r1, #1
 800e528:	4886      	ldr	r0, [pc, #536]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e52a:	f006 fa6f 	bl	8014a0c <PID_SetMode>

				 PID_SetSampleTime(&TPID, Time);
 800e52e:	4b7b      	ldr	r3, [pc, #492]	; (800e71c <PSV_Mode_Task+0x304>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4619      	mov	r1, r3
 800e534:	4883      	ldr	r0, [pc, #524]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e536:	f006 fbe5 	bl	8014d04 <PID_SetSampleTime>
				 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800e53a:	4b72      	ldr	r3, [pc, #456]	; (800e704 <PSV_Mode_Task+0x2ec>)
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7f1 ff88 	bl	8000454 <__aeabi_ui2d>
 800e544:	4604      	mov	r4, r0
 800e546:	460d      	mov	r5, r1
 800e548:	4b6f      	ldr	r3, [pc, #444]	; (800e708 <PSV_Mode_Task+0x2f0>)
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7f1 ff81 	bl	8000454 <__aeabi_ui2d>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	ec43 2b11 	vmov	d1, r2, r3
 800e55a:	ec45 4b10 	vmov	d0, r4, r5
 800e55e:	4879      	ldr	r0, [pc, #484]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e560:	f006 fa72 	bl	8014a48 <PID_SetOutputLimits>
				 pressure_acheived=1;
 800e564:	4b78      	ldr	r3, [pc, #480]	; (800e748 <PSV_Mode_Task+0x330>)
 800e566:	2201      	movs	r2, #1
 800e568:	601a      	str	r2, [r3, #0]


				 Parkar_valve_Signal(0);
 800e56a:	4b5f      	ldr	r3, [pc, #380]	; (800e6e8 <PSV_Mode_Task+0x2d0>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	615a      	str	r2, [r3, #20]
				  O2.O2_process = 0;
 800e570:	4b76      	ldr	r3, [pc, #472]	; (800e74c <PSV_Mode_Task+0x334>)
 800e572:	2200      	movs	r2, #0
 800e574:	60da      	str	r2, [r3, #12]
				  O2.Servo=45;
 800e576:	4b75      	ldr	r3, [pc, #468]	; (800e74c <PSV_Mode_Task+0x334>)
 800e578:	222d      	movs	r2, #45	; 0x2d
 800e57a:	605a      	str	r2, [r3, #4]
				  Servo_Angle(O2.Servo);
 800e57c:	4b73      	ldr	r3, [pc, #460]	; (800e74c <PSV_Mode_Task+0x334>)
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	4b73      	ldr	r3, [pc, #460]	; (800e750 <PSV_Mode_Task+0x338>)
 800e582:	635a      	str	r2, [r3, #52]	; 0x34

				  pressure_high_error_count=0;        //new
 800e584:	4b73      	ldr	r3, [pc, #460]	; (800e754 <PSV_Mode_Task+0x33c>)
 800e586:	2200      	movs	r2, #0
 800e588:	601a      	str	r2, [r3, #0]
				  pressure_high_error_count2=0;       //new
 800e58a:	4b73      	ldr	r3, [pc, #460]	; (800e758 <PSV_Mode_Task+0x340>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	601a      	str	r2, [r3, #0]



				 one_time_only=0;
 800e590:	4b4f      	ldr	r3, [pc, #316]	; (800e6d0 <PSV_Mode_Task+0x2b8>)
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	e00c      	b.n	800e5b2 <PSV_Mode_Task+0x19a>
		    }

			  else
			  {

				  Initial_open_valve=0;
 800e598:	4b4c      	ldr	r3, [pc, #304]	; (800e6cc <PSV_Mode_Task+0x2b4>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	601a      	str	r2, [r3, #0]
				  ExpValve_OPEN();
 800e59e:	4b6f      	ldr	r3, [pc, #444]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	4a6e      	ldr	r2, [pc, #440]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5a8:	6153      	str	r3, [r2, #20]
				  vTaskDelay(700);
 800e5aa:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800e5ae:	f011 f95d 	bl	801f86c <vTaskDelay>


		  }


		if(now_update==1)
 800e5b2:	4b4c      	ldr	r3, [pc, #304]	; (800e6e4 <PSV_Mode_Task+0x2cc>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	f040 80f8 	bne.w	800e7ac <PSV_Mode_Task+0x394>
		{

			if(Pressure_sensor._Pressure_Val<=(P1.PEEP_PSV_Val-4))
 800e5bc:	4b5d      	ldr	r3, [pc, #372]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e5be:	789b      	ldrb	r3, [r3, #2]
 800e5c0:	3b03      	subs	r3, #3
 800e5c2:	4a67      	ldr	r2, [pc, #412]	; (800e760 <PSV_Mode_Task+0x348>)
 800e5c4:	7912      	ldrb	r2, [r2, #4]
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	f340 80d0 	ble.w	800e76c <PSV_Mode_Task+0x354>
			{
				ExpValve_CLOSE();
 800e5cc:	4b63      	ldr	r3, [pc, #396]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	4a62      	ldr	r2, [pc, #392]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e5d6:	6153      	str	r3, [r2, #20]
				P1._Apnea_counter_trigger_check_time=2000;
 800e5d8:	4b56      	ldr	r3, [pc, #344]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e5da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e5de:	809a      	strh	r2, [r3, #4]
				P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 800e5e0:	4b54      	ldr	r3, [pc, #336]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e5e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	0152      	lsls	r2, r2, #5
 800e5e8:	1ad2      	subs	r2, r2, r3
 800e5ea:	0092      	lsls	r2, r2, #2
 800e5ec:	4413      	add	r3, r2
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	4b50      	ldr	r3, [pc, #320]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e5f4:	849a      	strh	r2, [r3, #36]	; 0x24
				ExpValve_CLOSE();
 800e5f6:	4b59      	ldr	r3, [pc, #356]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5f8:	695b      	ldr	r3, [r3, #20]
 800e5fa:	4a58      	ldr	r2, [pc, #352]	; (800e75c <PSV_Mode_Task+0x344>)
 800e5fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e600:	6153      	str	r3, [r2, #20]





				uwTick=0;
 800e602:	4b3f      	ldr	r3, [pc, #252]	; (800e700 <PSV_Mode_Task+0x2e8>)
 800e604:	2200      	movs	r2, #0
 800e606:	601a      	str	r2, [r3, #0]
				TPID.OutputSum=500;
 800e608:	494e      	ldr	r1, [pc, #312]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e60a:	f04f 0200 	mov.w	r2, #0
 800e60e:	4b55      	ldr	r3, [pc, #340]	; (800e764 <PSV_Mode_Task+0x34c>)
 800e610:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				Speed=30;
 800e614:	4b42      	ldr	r3, [pc, #264]	; (800e720 <PSV_Mode_Task+0x308>)
 800e616:	221e      	movs	r2, #30
 800e618:	601a      	str	r2, [r3, #0]

				kp=5;
 800e61a:	4b3c      	ldr	r3, [pc, #240]	; (800e70c <PSV_Mode_Task+0x2f4>)
 800e61c:	2205      	movs	r2, #5
 800e61e:	701a      	strb	r2, [r3, #0]
				ki=4;
 800e620:	4b3b      	ldr	r3, [pc, #236]	; (800e710 <PSV_Mode_Task+0x2f8>)
 800e622:	2204      	movs	r2, #4
 800e624:	701a      	strb	r2, [r3, #0]

				TempSetpoint = (P1.PEEP_PSV_Val );
 800e626:	4b43      	ldr	r3, [pc, #268]	; (800e734 <PSV_Mode_Task+0x31c>)
 800e628:	789b      	ldrb	r3, [r3, #2]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f1 ff12 	bl	8000454 <__aeabi_ui2d>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	4940      	ldr	r1, [pc, #256]	; (800e738 <PSV_Mode_Task+0x320>)
 800e636:	e9c1 2300 	strd	r2, r3, [r1]
				PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800e63a:	4b34      	ldr	r3, [pc, #208]	; (800e70c <PSV_Mode_Task+0x2f4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7f1 ff08 	bl	8000454 <__aeabi_ui2d>
 800e644:	4604      	mov	r4, r0
 800e646:	460d      	mov	r5, r1
 800e648:	4b31      	ldr	r3, [pc, #196]	; (800e710 <PSV_Mode_Task+0x2f8>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f1 ff01 	bl	8000454 <__aeabi_ui2d>
 800e652:	4b30      	ldr	r3, [pc, #192]	; (800e714 <PSV_Mode_Task+0x2fc>)
 800e654:	ed93 7b00 	vldr	d7, [r3]
 800e658:	2300      	movs	r3, #0
 800e65a:	9301      	str	r3, [sp, #4]
 800e65c:	2301      	movs	r3, #1
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	eeb0 2a47 	vmov.f32	s4, s14
 800e664:	eef0 2a67 	vmov.f32	s5, s15
 800e668:	ec41 0b11 	vmov	d1, r0, r1
 800e66c:	ec45 4b10 	vmov	d0, r4, r5
 800e670:	4b31      	ldr	r3, [pc, #196]	; (800e738 <PSV_Mode_Task+0x320>)
 800e672:	4a32      	ldr	r2, [pc, #200]	; (800e73c <PSV_Mode_Task+0x324>)
 800e674:	4932      	ldr	r1, [pc, #200]	; (800e740 <PSV_Mode_Task+0x328>)
 800e676:	4833      	ldr	r0, [pc, #204]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e678:	f006 f892 	bl	80147a0 <PID>
				PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800e67c:	2101      	movs	r1, #1
 800e67e:	4831      	ldr	r0, [pc, #196]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e680:	f006 f9c4 	bl	8014a0c <PID_SetMode>

				PID_SetSampleTime(&TPID, Time);
 800e684:	4b25      	ldr	r3, [pc, #148]	; (800e71c <PSV_Mode_Task+0x304>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4619      	mov	r1, r3
 800e68a:	482e      	ldr	r0, [pc, #184]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e68c:	f006 fb3a 	bl	8014d04 <PID_SetSampleTime>
				PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800e690:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <PSV_Mode_Task+0x2ec>)
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	4618      	mov	r0, r3
 800e696:	f7f1 fedd 	bl	8000454 <__aeabi_ui2d>
 800e69a:	4604      	mov	r4, r0
 800e69c:	460d      	mov	r5, r1
 800e69e:	4b1a      	ldr	r3, [pc, #104]	; (800e708 <PSV_Mode_Task+0x2f0>)
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f1 fed6 	bl	8000454 <__aeabi_ui2d>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	ec43 2b11 	vmov	d1, r2, r3
 800e6b0:	ec45 4b10 	vmov	d0, r4, r5
 800e6b4:	4823      	ldr	r0, [pc, #140]	; (800e744 <PSV_Mode_Task+0x32c>)
 800e6b6:	f006 f9c7 	bl	8014a48 <PID_SetOutputLimits>

				vol.Volume = 0;
 800e6ba:	4b2b      	ldr	r3, [pc, #172]	; (800e768 <PSV_Mode_Task+0x350>)
 800e6bc:	f04f 0200 	mov.w	r2, #0
 800e6c0:	605a      	str	r2, [r3, #4]
				now_update=0;
 800e6c2:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <PSV_Mode_Task+0x2cc>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	e070      	b.n	800e7ac <PSV_Mode_Task+0x394>
 800e6ca:	bf00      	nop
 800e6cc:	20000044 	.word	0x20000044
 800e6d0:	20000128 	.word	0x20000128
 800e6d4:	20000308 	.word	0x20000308
 800e6d8:	20000318 	.word	0x20000318
 800e6dc:	20000118 	.word	0x20000118
 800e6e0:	2000011c 	.word	0x2000011c
 800e6e4:	20016b28 	.word	0x20016b28
 800e6e8:	40007400 	.word	0x40007400
 800e6ec:	20000120 	.word	0x20000120
 800e6f0:	20000124 	.word	0x20000124
 800e6f4:	20000328 	.word	0x20000328
 800e6f8:	2000031c 	.word	0x2000031c
 800e6fc:	20000320 	.word	0x20000320
 800e700:	20017094 	.word	0x20017094
 800e704:	2000012e 	.word	0x2000012e
 800e708:	20000130 	.word	0x20000130
 800e70c:	20000136 	.word	0x20000136
 800e710:	20000137 	.word	0x20000137
 800e714:	20000138 	.word	0x20000138
 800e718:	3ff00000 	.word	0x3ff00000
 800e71c:	20000140 	.word	0x20000140
 800e720:	20000144 	.word	0x20000144
 800e724:	200168b4 	.word	0x200168b4
 800e728:	20000fe8 	.word	0x20000fe8
 800e72c:	20000feb 	.word	0x20000feb
 800e730:	20000fea 	.word	0x20000fea
 800e734:	20016960 	.word	0x20016960
 800e738:	20016e80 	.word	0x20016e80
 800e73c:	20016a18 	.word	0x20016a18
 800e740:	20016a98 	.word	0x20016a98
 800e744:	200169a0 	.word	0x200169a0
 800e748:	20000114 	.word	0x20000114
 800e74c:	20000048 	.word	0x20000048
 800e750:	40001800 	.word	0x40001800
 800e754:	2000032c 	.word	0x2000032c
 800e758:	20000330 	.word	0x20000330
 800e75c:	40020400 	.word	0x40020400
 800e760:	20016cfc 	.word	0x20016cfc
 800e764:	407f4000 	.word	0x407f4000
 800e768:	20016d44 	.word	0x20016d44
			}
			else if(Pressure_sensor._Pressure_Val>(P1.PEEP_PSV_Val-4))
 800e76c:	4b88      	ldr	r3, [pc, #544]	; (800e990 <PSV_Mode_Task+0x578>)
 800e76e:	789b      	ldrb	r3, [r3, #2]
 800e770:	3b03      	subs	r3, #3
 800e772:	4a88      	ldr	r2, [pc, #544]	; (800e994 <PSV_Mode_Task+0x57c>)
 800e774:	7912      	ldrb	r2, [r2, #4]
 800e776:	4293      	cmp	r3, r2
 800e778:	dc18      	bgt.n	800e7ac <PSV_Mode_Task+0x394>
			{
				ExpValve_OPEN();
 800e77a:	4b87      	ldr	r3, [pc, #540]	; (800e998 <PSV_Mode_Task+0x580>)
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	4a86      	ldr	r2, [pc, #536]	; (800e998 <PSV_Mode_Task+0x580>)
 800e780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e784:	6153      	str	r3, [r2, #20]
				vTaskDelay(600);
 800e786:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e78a:	f011 f86f 	bl	801f86c <vTaskDelay>
				vol.Volume = 0;
 800e78e:	4b83      	ldr	r3, [pc, #524]	; (800e99c <PSV_Mode_Task+0x584>)
 800e790:	f04f 0200 	mov.w	r2, #0
 800e794:	605a      	str	r2, [r3, #4]
				P1.PEEP_PSV_DAC_Val=0;
 800e796:	4b7e      	ldr	r3, [pc, #504]	; (800e990 <PSV_Mode_Task+0x578>)
 800e798:	2200      	movs	r2, #0
 800e79a:	839a      	strh	r2, [r3, #28]
				Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800e79c:	4b7c      	ldr	r3, [pc, #496]	; (800e990 <PSV_Mode_Task+0x578>)
 800e79e:	8b9a      	ldrh	r2, [r3, #28]
 800e7a0:	4b7f      	ldr	r3, [pc, #508]	; (800e9a0 <PSV_Mode_Task+0x588>)
 800e7a2:	609a      	str	r2, [r3, #8]
				P1._Apnea_counter_trigger_check_time=2000;
 800e7a4:	4b7a      	ldr	r3, [pc, #488]	; (800e990 <PSV_Mode_Task+0x578>)
 800e7a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e7aa:	809a      	strh	r2, [r3, #4]



/*****************************   air release    *****************************************/

		if(now_update==3)
 800e7ac:	4b7d      	ldr	r3, [pc, #500]	; (800e9a4 <PSV_Mode_Task+0x58c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	f040 8082 	bne.w	800e8ba <PSV_Mode_Task+0x4a2>
		{

			if(Pressure_sensor._Pressure_Val<=(P1.PEEP_PSV_Val-4))
 800e7b6:	4b76      	ldr	r3, [pc, #472]	; (800e990 <PSV_Mode_Task+0x578>)
 800e7b8:	789b      	ldrb	r3, [r3, #2]
 800e7ba:	3b03      	subs	r3, #3
 800e7bc:	4a75      	ldr	r2, [pc, #468]	; (800e994 <PSV_Mode_Task+0x57c>)
 800e7be:	7912      	ldrb	r2, [r2, #4]
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	dd69      	ble.n	800e898 <PSV_Mode_Task+0x480>
			{
				ExpValve_CLOSE();
 800e7c4:	4b74      	ldr	r3, [pc, #464]	; (800e998 <PSV_Mode_Task+0x580>)
 800e7c6:	695b      	ldr	r3, [r3, #20]
 800e7c8:	4a73      	ldr	r2, [pc, #460]	; (800e998 <PSV_Mode_Task+0x580>)
 800e7ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e7ce:	6153      	str	r3, [r2, #20]
				P1._Apnea_counter_trigger_check_time=2000;
 800e7d0:	4b6f      	ldr	r3, [pc, #444]	; (800e990 <PSV_Mode_Task+0x578>)
 800e7d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e7d6:	809a      	strh	r2, [r3, #4]

				uwTick=0;
 800e7d8:	4b73      	ldr	r3, [pc, #460]	; (800e9a8 <PSV_Mode_Task+0x590>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
				TPID.OutputSum=500;
 800e7de:	4973      	ldr	r1, [pc, #460]	; (800e9ac <PSV_Mode_Task+0x594>)
 800e7e0:	f04f 0200 	mov.w	r2, #0
 800e7e4:	4b72      	ldr	r3, [pc, #456]	; (800e9b0 <PSV_Mode_Task+0x598>)
 800e7e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				Speed=30;
 800e7ea:	4b72      	ldr	r3, [pc, #456]	; (800e9b4 <PSV_Mode_Task+0x59c>)
 800e7ec:	221e      	movs	r2, #30
 800e7ee:	601a      	str	r2, [r3, #0]

				kp=5;
 800e7f0:	4b71      	ldr	r3, [pc, #452]	; (800e9b8 <PSV_Mode_Task+0x5a0>)
 800e7f2:	2205      	movs	r2, #5
 800e7f4:	701a      	strb	r2, [r3, #0]
				ki=4;
 800e7f6:	4b71      	ldr	r3, [pc, #452]	; (800e9bc <PSV_Mode_Task+0x5a4>)
 800e7f8:	2204      	movs	r2, #4
 800e7fa:	701a      	strb	r2, [r3, #0]

				TempSetpoint = (P1.PEEP_PSV_Val );
 800e7fc:	4b64      	ldr	r3, [pc, #400]	; (800e990 <PSV_Mode_Task+0x578>)
 800e7fe:	789b      	ldrb	r3, [r3, #2]
 800e800:	4618      	mov	r0, r3
 800e802:	f7f1 fe27 	bl	8000454 <__aeabi_ui2d>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	496d      	ldr	r1, [pc, #436]	; (800e9c0 <PSV_Mode_Task+0x5a8>)
 800e80c:	e9c1 2300 	strd	r2, r3, [r1]
				PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800e810:	4b69      	ldr	r3, [pc, #420]	; (800e9b8 <PSV_Mode_Task+0x5a0>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	4618      	mov	r0, r3
 800e816:	f7f1 fe1d 	bl	8000454 <__aeabi_ui2d>
 800e81a:	4604      	mov	r4, r0
 800e81c:	460d      	mov	r5, r1
 800e81e:	4b67      	ldr	r3, [pc, #412]	; (800e9bc <PSV_Mode_Task+0x5a4>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	4618      	mov	r0, r3
 800e824:	f7f1 fe16 	bl	8000454 <__aeabi_ui2d>
 800e828:	4b66      	ldr	r3, [pc, #408]	; (800e9c4 <PSV_Mode_Task+0x5ac>)
 800e82a:	ed93 7b00 	vldr	d7, [r3]
 800e82e:	2300      	movs	r3, #0
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	2301      	movs	r3, #1
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	eeb0 2a47 	vmov.f32	s4, s14
 800e83a:	eef0 2a67 	vmov.f32	s5, s15
 800e83e:	ec41 0b11 	vmov	d1, r0, r1
 800e842:	ec45 4b10 	vmov	d0, r4, r5
 800e846:	4b5e      	ldr	r3, [pc, #376]	; (800e9c0 <PSV_Mode_Task+0x5a8>)
 800e848:	4a5f      	ldr	r2, [pc, #380]	; (800e9c8 <PSV_Mode_Task+0x5b0>)
 800e84a:	4960      	ldr	r1, [pc, #384]	; (800e9cc <PSV_Mode_Task+0x5b4>)
 800e84c:	4857      	ldr	r0, [pc, #348]	; (800e9ac <PSV_Mode_Task+0x594>)
 800e84e:	f005 ffa7 	bl	80147a0 <PID>
				PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800e852:	2101      	movs	r1, #1
 800e854:	4855      	ldr	r0, [pc, #340]	; (800e9ac <PSV_Mode_Task+0x594>)
 800e856:	f006 f8d9 	bl	8014a0c <PID_SetMode>

				PID_SetSampleTime(&TPID, Time);
 800e85a:	4b5d      	ldr	r3, [pc, #372]	; (800e9d0 <PSV_Mode_Task+0x5b8>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4619      	mov	r1, r3
 800e860:	4852      	ldr	r0, [pc, #328]	; (800e9ac <PSV_Mode_Task+0x594>)
 800e862:	f006 fa4f 	bl	8014d04 <PID_SetSampleTime>
				PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800e866:	4b5b      	ldr	r3, [pc, #364]	; (800e9d4 <PSV_Mode_Task+0x5bc>)
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f1 fdf2 	bl	8000454 <__aeabi_ui2d>
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	4b58      	ldr	r3, [pc, #352]	; (800e9d8 <PSV_Mode_Task+0x5c0>)
 800e876:	881b      	ldrh	r3, [r3, #0]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7f1 fdeb 	bl	8000454 <__aeabi_ui2d>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	ec43 2b11 	vmov	d1, r2, r3
 800e886:	ec45 4b10 	vmov	d0, r4, r5
 800e88a:	4848      	ldr	r0, [pc, #288]	; (800e9ac <PSV_Mode_Task+0x594>)
 800e88c:	f006 f8dc 	bl	8014a48 <PID_SetOutputLimits>

				now_update=0;
 800e890:	4b44      	ldr	r3, [pc, #272]	; (800e9a4 <PSV_Mode_Task+0x58c>)
 800e892:	2200      	movs	r2, #0
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	e010      	b.n	800e8ba <PSV_Mode_Task+0x4a2>
			}
			else if(Pressure_sensor._Pressure_Val>(P1.PEEP_PSV_Val-4))
 800e898:	4b3d      	ldr	r3, [pc, #244]	; (800e990 <PSV_Mode_Task+0x578>)
 800e89a:	789b      	ldrb	r3, [r3, #2]
 800e89c:	3b03      	subs	r3, #3
 800e89e:	4a3d      	ldr	r2, [pc, #244]	; (800e994 <PSV_Mode_Task+0x57c>)
 800e8a0:	7912      	ldrb	r2, [r2, #4]
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	dc09      	bgt.n	800e8ba <PSV_Mode_Task+0x4a2>
			{
				ExpValve_OPEN();
 800e8a6:	4b3c      	ldr	r3, [pc, #240]	; (800e998 <PSV_Mode_Task+0x580>)
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	4a3b      	ldr	r2, [pc, #236]	; (800e998 <PSV_Mode_Task+0x580>)
 800e8ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8b0:	6153      	str	r3, [r2, #20]
				vTaskDelay(600);
 800e8b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e8b6:	f010 ffd9 	bl	801f86c <vTaskDelay>
			}
	   }

/*********************************************************************/

		if((P1._APNEA_COUNTER >0) && (Trigger==0) && (now_update==0))
 800e8ba:	4b35      	ldr	r3, [pc, #212]	; (800e990 <PSV_Mode_Task+0x578>)
 800e8bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 84b6 	beq.w	800f230 <PSV_Mode_Task+0xe18>
 800e8c4:	4b45      	ldr	r3, [pc, #276]	; (800e9dc <PSV_Mode_Task+0x5c4>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f040 84b1 	bne.w	800f230 <PSV_Mode_Task+0xe18>
 800e8ce:	4b35      	ldr	r3, [pc, #212]	; (800e9a4 <PSV_Mode_Task+0x58c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f040 84ac 	bne.w	800f230 <PSV_Mode_Task+0xe18>
		{

			_Control_Byte |= (uint8_t) 0x80;
 800e8d8:	4b41      	ldr	r3, [pc, #260]	; (800e9e0 <PSV_Mode_Task+0x5c8>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	4b3f      	ldr	r3, [pc, #252]	; (800e9e0 <PSV_Mode_Task+0x5c8>)
 800e8e4:	701a      	strb	r2, [r3, #0]


			Alert_Data_send_count++;
 800e8e6:	4b3f      	ldr	r3, [pc, #252]	; (800e9e4 <PSV_Mode_Task+0x5cc>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	4a3d      	ldr	r2, [pc, #244]	; (800e9e4 <PSV_Mode_Task+0x5cc>)
 800e8ee:	6013      	str	r3, [r2, #0]
			if(Alert_Data_send_count>1500)
 800e8f0:	4b3c      	ldr	r3, [pc, #240]	; (800e9e4 <PSV_Mode_Task+0x5cc>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	dd05      	ble.n	800e908 <PSV_Mode_Task+0x4f0>
			{
				A.Alert_Now=1;
 800e8fc:	4b3a      	ldr	r3, [pc, #232]	; (800e9e8 <PSV_Mode_Task+0x5d0>)
 800e8fe:	2201      	movs	r2, #1
 800e900:	70da      	strb	r2, [r3, #3]
				Alert_Data_send_count=0;
 800e902:	4b38      	ldr	r3, [pc, #224]	; (800e9e4 <PSV_Mode_Task+0x5cc>)
 800e904:	2200      	movs	r2, #0
 800e906:	601a      	str	r2, [r3, #0]
			}

			if(pressure_acheived == 0)
 800e908:	4b38      	ldr	r3, [pc, #224]	; (800e9ec <PSV_Mode_Task+0x5d4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d111      	bne.n	800e934 <PSV_Mode_Task+0x51c>
			{
				Dac_control_count++;
 800e910:	4b37      	ldr	r3, [pc, #220]	; (800e9f0 <PSV_Mode_Task+0x5d8>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3301      	adds	r3, #1
 800e916:	4a36      	ldr	r2, [pc, #216]	; (800e9f0 <PSV_Mode_Task+0x5d8>)
 800e918:	6013      	str	r3, [r2, #0]
				if(Dac_control_count>250)
 800e91a:	4b35      	ldr	r3, [pc, #212]	; (800e9f0 <PSV_Mode_Task+0x5d8>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2bfa      	cmp	r3, #250	; 0xfa
 800e920:	dd08      	ble.n	800e934 <PSV_Mode_Task+0x51c>
				{
					pressure_acheived=1;
 800e922:	4b32      	ldr	r3, [pc, #200]	; (800e9ec <PSV_Mode_Task+0x5d4>)
 800e924:	2201      	movs	r2, #1
 800e926:	601a      	str	r2, [r3, #0]
					Dac_control_count=0;
 800e928:	4b31      	ldr	r3, [pc, #196]	; (800e9f0 <PSV_Mode_Task+0x5d8>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
					Wait_Dac=1;
 800e92e:	4b31      	ldr	r3, [pc, #196]	; (800e9f4 <PSV_Mode_Task+0x5dc>)
 800e930:	2201      	movs	r2, #1
 800e932:	601a      	str	r2, [r3, #0]

				}
			}

			Alert_error_count++;
 800e934:	4b30      	ldr	r3, [pc, #192]	; (800e9f8 <PSV_Mode_Task+0x5e0>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	3301      	adds	r3, #1
 800e93a:	4a2f      	ldr	r2, [pc, #188]	; (800e9f8 <PSV_Mode_Task+0x5e0>)
 800e93c:	6013      	str	r3, [r2, #0]

			Patient_Circuit_Disconnected_Alert_Func();
 800e93e:	f7f3 fd6f 	bl	8002420 <Patient_Circuit_Disconnected_Alert_Func>
			Main_Supply_or_Battery_Indication();
 800e942:	f7f3 fac3 	bl	8001ecc <Main_Supply_or_Battery_Indication>

			if( Alert_error_count >= 500)
 800e946:	4b2c      	ldr	r3, [pc, #176]	; (800e9f8 <PSV_Mode_Task+0x5e0>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e94e:	db67      	blt.n	800ea20 <PSV_Mode_Task+0x608>
			{
				if(Apnea_Patient_circuit_disconnected_Flag==1)
 800e950:	4b2a      	ldr	r3, [pc, #168]	; (800e9fc <PSV_Mode_Task+0x5e4>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d155      	bne.n	800ea04 <PSV_Mode_Task+0x5ec>
				{

						Alert_Status_count++;
 800e958:	4b29      	ldr	r3, [pc, #164]	; (800ea00 <PSV_Mode_Task+0x5e8>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3301      	adds	r3, #1
 800e95e:	4a28      	ldr	r2, [pc, #160]	; (800ea00 <PSV_Mode_Task+0x5e8>)
 800e960:	6013      	str	r3, [r2, #0]
						if(Alert_Status_count>1)
 800e962:	4b27      	ldr	r3, [pc, #156]	; (800ea00 <PSV_Mode_Task+0x5e8>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b01      	cmp	r3, #1
 800e968:	dd54      	ble.n	800ea14 <PSV_Mode_Task+0x5fc>
						{
							A.Alert_Now=1;
 800e96a:	4b1f      	ldr	r3, [pc, #124]	; (800e9e8 <PSV_Mode_Task+0x5d0>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	70da      	strb	r2, [r3, #3]
							Apnea_Patient_circuit_disconnected_Flag=0;
 800e970:	4b22      	ldr	r3, [pc, #136]	; (800e9fc <PSV_Mode_Task+0x5e4>)
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
							Alert_Status_count=0;
 800e976:	4b22      	ldr	r3, [pc, #136]	; (800ea00 <PSV_Mode_Task+0x5e8>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
							Alert_Data_send_count=0;
 800e97c:	4b19      	ldr	r3, [pc, #100]	; (800e9e4 <PSV_Mode_Task+0x5cc>)
 800e97e:	2200      	movs	r2, #0
 800e980:	601a      	str	r2, [r3, #0]
							Dac_control_count =0;
 800e982:	4b1b      	ldr	r3, [pc, #108]	; (800e9f0 <PSV_Mode_Task+0x5d8>)
 800e984:	2200      	movs	r2, #0
 800e986:	601a      	str	r2, [r3, #0]
							Alert_error_count=0;
 800e988:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <PSV_Mode_Task+0x5e0>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	e041      	b.n	800ea14 <PSV_Mode_Task+0x5fc>
 800e990:	20016960 	.word	0x20016960
 800e994:	20016cfc 	.word	0x20016cfc
 800e998:	40020400 	.word	0x40020400
 800e99c:	20016d44 	.word	0x20016d44
 800e9a0:	40007400 	.word	0x40007400
 800e9a4:	20016b28 	.word	0x20016b28
 800e9a8:	20017094 	.word	0x20017094
 800e9ac:	200169a0 	.word	0x200169a0
 800e9b0:	407f4000 	.word	0x407f4000
 800e9b4:	20000144 	.word	0x20000144
 800e9b8:	20000136 	.word	0x20000136
 800e9bc:	20000137 	.word	0x20000137
 800e9c0:	20016e80 	.word	0x20016e80
 800e9c4:	20000138 	.word	0x20000138
 800e9c8:	20016a18 	.word	0x20016a18
 800e9cc:	20016a98 	.word	0x20016a98
 800e9d0:	20000140 	.word	0x20000140
 800e9d4:	2000012e 	.word	0x2000012e
 800e9d8:	20000130 	.word	0x20000130
 800e9dc:	20016e50 	.word	0x20016e50
 800e9e0:	20016e59 	.word	0x20016e59
 800e9e4:	2000031c 	.word	0x2000031c
 800e9e8:	20016a2c 	.word	0x20016a2c
 800e9ec:	20000114 	.word	0x20000114
 800e9f0:	20000320 	.word	0x20000320
 800e9f4:	20000118 	.word	0x20000118
 800e9f8:	20000308 	.word	0x20000308
 800e9fc:	200002f4 	.word	0x200002f4
 800ea00:	20000318 	.word	0x20000318
						}

				}
				else
				{
					A.Alert_Now=1;
 800ea04:	4b6d      	ldr	r3, [pc, #436]	; (800ebbc <PSV_Mode_Task+0x7a4>)
 800ea06:	2201      	movs	r2, #1
 800ea08:	70da      	strb	r2, [r3, #3]
					CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 800ea0a:	4a6d      	ldr	r2, [pc, #436]	; (800ebc0 <PSV_Mode_Task+0x7a8>)
 800ea0c:	78d3      	ldrb	r3, [r2, #3]
 800ea0e:	f36f 03c3 	bfc	r3, #3, #1
 800ea12:	70d3      	strb	r3, [r2, #3]
				}
				now_open_valve=1;
 800ea14:	4b6b      	ldr	r3, [pc, #428]	; (800ebc4 <PSV_Mode_Task+0x7ac>)
 800ea16:	2201      	movs	r2, #1
 800ea18:	601a      	str	r2, [r3, #0]
				Alert_error_count=0;
 800ea1a:	4b6b      	ldr	r3, [pc, #428]	; (800ebc8 <PSV_Mode_Task+0x7b0>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]

/*********************************************************************/



        	if((pressure_acheived == 1) && (Wait_Dac == 1))
 800ea20:	4b6a      	ldr	r3, [pc, #424]	; (800ebcc <PSV_Mode_Task+0x7b4>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d116      	bne.n	800ea56 <PSV_Mode_Task+0x63e>
 800ea28:	4b69      	ldr	r3, [pc, #420]	; (800ebd0 <PSV_Mode_Task+0x7b8>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d112      	bne.n	800ea56 <PSV_Mode_Task+0x63e>
        	{
					PID_Compute(&TPID);
 800ea30:	4868      	ldr	r0, [pc, #416]	; (800ebd4 <PSV_Mode_Task+0x7bc>)
 800ea32:	f005 ff01 	bl	8014838 <PID_Compute>
					P1.PEEP_PSV_DAC_Val=(int16_t)PIDOut;
 800ea36:	4b68      	ldr	r3, [pc, #416]	; (800ebd8 <PSV_Mode_Task+0x7c0>)
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	4619      	mov	r1, r3
 800ea40:	f7f2 f81c 	bl	8000a7c <__aeabi_d2iz>
 800ea44:	4603      	mov	r3, r0
 800ea46:	b21b      	sxth	r3, r3
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	4b64      	ldr	r3, [pc, #400]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800ea4c:	839a      	strh	r2, [r3, #28]
					Blower_Signal( P1.PEEP_PSV_DAC_Val);
 800ea4e:	4b63      	ldr	r3, [pc, #396]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800ea50:	8b9a      	ldrh	r2, [r3, #28]
 800ea52:	4b63      	ldr	r3, [pc, #396]	; (800ebe0 <PSV_Mode_Task+0x7c8>)
 800ea54:	609a      	str	r2, [r3, #8]

        	}



        if((Flow_Sensor_cal._Flow_Val>0 )  &&  (pressure_acheived==0))
 800ea56:	4b63      	ldr	r3, [pc, #396]	; (800ebe4 <PSV_Mode_Task+0x7cc>)
 800ea58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	dd2e      	ble.n	800eabc <PSV_Mode_Task+0x6a4>
 800ea5e:	4b5b      	ldr	r3, [pc, #364]	; (800ebcc <PSV_Mode_Task+0x7b4>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d12a      	bne.n	800eabc <PSV_Mode_Task+0x6a4>
        {
        	if( P1._Apnea_counter_trigger_check_time==0)
 800ea66:	4b5d      	ldr	r3, [pc, #372]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800ea68:	889b      	ldrh	r3, [r3, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d126      	bne.n	800eabc <PSV_Mode_Task+0x6a4>
        	{
        	     if(pressure_acheived==0)
 800ea6e:	4b57      	ldr	r3, [pc, #348]	; (800ebcc <PSV_Mode_Task+0x7b4>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d122      	bne.n	800eabc <PSV_Mode_Task+0x6a4>
        	      {
        	    	 if( (Start_check_time==0) && (Start_check==1))
 800ea76:	4b5c      	ldr	r3, [pc, #368]	; (800ebe8 <PSV_Mode_Task+0x7d0>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d11e      	bne.n	800eabc <PSV_Mode_Task+0x6a4>
 800ea7e:	4b5b      	ldr	r3, [pc, #364]	; (800ebec <PSV_Mode_Task+0x7d4>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d11a      	bne.n	800eabc <PSV_Mode_Task+0x6a4>
        	    	 {
						 Blower_Signal(0);
 800ea86:	4b56      	ldr	r3, [pc, #344]	; (800ebe0 <PSV_Mode_Task+0x7c8>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	609a      	str	r2, [r3, #8]
						 Wait_Dac=0;
 800ea8c:	4b50      	ldr	r3, [pc, #320]	; (800ebd0 <PSV_Mode_Task+0x7b8>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	601a      	str	r2, [r3, #0]
						 uwTick=0;
 800ea92:	4b57      	ldr	r3, [pc, #348]	; (800ebf0 <PSV_Mode_Task+0x7d8>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	601a      	str	r2, [r3, #0]
						 TPID.OutputSum=500;
 800ea98:	494e      	ldr	r1, [pc, #312]	; (800ebd4 <PSV_Mode_Task+0x7bc>)
 800ea9a:	f04f 0200 	mov.w	r2, #0
 800ea9e:	4b55      	ldr	r3, [pc, #340]	; (800ebf4 <PSV_Mode_Task+0x7dc>)
 800eaa0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

						 Dac_control_count=0;
 800eaa4:	4b54      	ldr	r3, [pc, #336]	; (800ebf8 <PSV_Mode_Task+0x7e0>)
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	601a      	str	r2, [r3, #0]
						 Alert_Data_send_count=0;
 800eaaa:	4b54      	ldr	r3, [pc, #336]	; (800ebfc <PSV_Mode_Task+0x7e4>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	601a      	str	r2, [r3, #0]
						 Alert_Status_count=0;
 800eab0:	4b53      	ldr	r3, [pc, #332]	; (800ec00 <PSV_Mode_Task+0x7e8>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]
						 Alert_error_count=0;
 800eab6:	4b44      	ldr	r3, [pc, #272]	; (800ebc8 <PSV_Mode_Task+0x7b0>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
        	 }
        }



        if(Pressure_sensor._Pressure_Val >= (P1.PEEP_PSV_Val))
 800eabc:	4b51      	ldr	r3, [pc, #324]	; (800ec04 <PSV_Mode_Task+0x7ec>)
 800eabe:	791a      	ldrb	r2, [r3, #4]
 800eac0:	4b46      	ldr	r3, [pc, #280]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eac2:	789b      	ldrb	r3, [r3, #2]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d320      	bcc.n	800eb0a <PSV_Mode_Task+0x6f2>
        {
        	if((initial_blower_trigger==0))
 800eac8:	4b4f      	ldr	r3, [pc, #316]	; (800ec08 <PSV_Mode_Task+0x7f0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d112      	bne.n	800eaf6 <PSV_Mode_Task+0x6de>
        	{
        		if(Start_check_time==0)
 800ead0:	4b45      	ldr	r3, [pc, #276]	; (800ebe8 <PSV_Mode_Task+0x7d0>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d118      	bne.n	800eb0a <PSV_Mode_Task+0x6f2>
        		{
					pressure_acheived=0;
 800ead8:	4b3c      	ldr	r3, [pc, #240]	; (800ebcc <PSV_Mode_Task+0x7b4>)
 800eada:	2200      	movs	r2, #0
 800eadc:	601a      	str	r2, [r3, #0]
					if(Apnea_counter_trigger_Flag==1)
 800eade:	4b4b      	ldr	r3, [pc, #300]	; (800ec0c <PSV_Mode_Task+0x7f4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d111      	bne.n	800eb0a <PSV_Mode_Task+0x6f2>
					{
						if(Flow_Sensor_cal._Flow_Val==0)
 800eae6:	4b3f      	ldr	r3, [pc, #252]	; (800ebe4 <PSV_Mode_Task+0x7cc>)
 800eae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10d      	bne.n	800eb0a <PSV_Mode_Task+0x6f2>
						{
							Apnea_counter_trigger_Flag=0;
 800eaee:	4b47      	ldr	r3, [pc, #284]	; (800ec0c <PSV_Mode_Task+0x7f4>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	e009      	b.n	800eb0a <PSV_Mode_Task+0x6f2>
					}
        		}
        	}
			 else
			 {
				 initial_blower_trigger=0;
 800eaf6:	4b44      	ldr	r3, [pc, #272]	; (800ec08 <PSV_Mode_Task+0x7f0>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	601a      	str	r2, [r3, #0]
				 Start_check=1;
 800eafc:	4b3b      	ldr	r3, [pc, #236]	; (800ebec <PSV_Mode_Task+0x7d4>)
 800eafe:	2201      	movs	r2, #1
 800eb00:	601a      	str	r2, [r3, #0]
				 Start_check_time=500;
 800eb02:	4b39      	ldr	r3, [pc, #228]	; (800ebe8 <PSV_Mode_Task+0x7d0>)
 800eb04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800eb08:	601a      	str	r2, [r3, #0]
			 }

        }

/****************  psv air release   ******************************/
        if(Pressure_sensor._Pressure_Val >= (P1.PEEP_PSV_Val +5))
 800eb0a:	4b34      	ldr	r3, [pc, #208]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb0c:	789b      	ldrb	r3, [r3, #2]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4a3c      	ldr	r2, [pc, #240]	; (800ec04 <PSV_Mode_Task+0x7ec>)
 800eb12:	7912      	ldrb	r2, [r2, #4]
 800eb14:	4293      	cmp	r3, r2
 800eb16:	da14      	bge.n	800eb42 <PSV_Mode_Task+0x72a>
        {
        	pressure_high_error_count++;
 800eb18:	4b3d      	ldr	r3, [pc, #244]	; (800ec10 <PSV_Mode_Task+0x7f8>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	4a3c      	ldr	r2, [pc, #240]	; (800ec10 <PSV_Mode_Task+0x7f8>)
 800eb20:	6013      	str	r3, [r2, #0]
        	P1._Apnea_counter_trigger_check_time=1000;
 800eb22:	4b2e      	ldr	r3, [pc, #184]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb28:	809a      	strh	r2, [r3, #4]
        	if(pressure_high_error_count>1000)
 800eb2a:	4b39      	ldr	r3, [pc, #228]	; (800ec10 <PSV_Mode_Task+0x7f8>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb32:	dd1d      	ble.n	800eb70 <PSV_Mode_Task+0x758>
        	{
        		now_update=3;
 800eb34:	4b37      	ldr	r3, [pc, #220]	; (800ec14 <PSV_Mode_Task+0x7fc>)
 800eb36:	2203      	movs	r2, #3
 800eb38:	601a      	str	r2, [r3, #0]
        		pressure_high_error_count=0;
 800eb3a:	4b35      	ldr	r3, [pc, #212]	; (800ec10 <PSV_Mode_Task+0x7f8>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	e016      	b.n	800eb70 <PSV_Mode_Task+0x758>
        	}

        }

        else if(Pressure_sensor._Pressure_Val < (P1.PEEP_PSV_Val +5))
 800eb42:	4b26      	ldr	r3, [pc, #152]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb44:	789b      	ldrb	r3, [r3, #2]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4a2e      	ldr	r2, [pc, #184]	; (800ec04 <PSV_Mode_Task+0x7ec>)
 800eb4a:	7912      	ldrb	r2, [r2, #4]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	db0f      	blt.n	800eb70 <PSV_Mode_Task+0x758>
        {
        	pressure_high_error_count2++;
 800eb50:	4b31      	ldr	r3, [pc, #196]	; (800ec18 <PSV_Mode_Task+0x800>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	3301      	adds	r3, #1
 800eb56:	4a30      	ldr	r2, [pc, #192]	; (800ec18 <PSV_Mode_Task+0x800>)
 800eb58:	6013      	str	r3, [r2, #0]
        	if(pressure_high_error_count2>1000)
 800eb5a:	4b2f      	ldr	r3, [pc, #188]	; (800ec18 <PSV_Mode_Task+0x800>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb62:	dd05      	ble.n	800eb70 <PSV_Mode_Task+0x758>
        	{
        		pressure_high_error_count=0;
 800eb64:	4b2a      	ldr	r3, [pc, #168]	; (800ec10 <PSV_Mode_Task+0x7f8>)
 800eb66:	2200      	movs	r2, #0
 800eb68:	601a      	str	r2, [r3, #0]
        		pressure_high_error_count2=0;
 800eb6a:	4b2b      	ldr	r3, [pc, #172]	; (800ec18 <PSV_Mode_Task+0x800>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	601a      	str	r2, [r3, #0]
        }

/*********************************************************************/


			if( (P1._Apnea_counter_trigger_check_time==0) && (Apnea_counter_trigger_Flag==0))
 800eb70:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb72:	889b      	ldrh	r3, [r3, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f040 82f5 	bne.w	800f164 <PSV_Mode_Task+0xd4c>
 800eb7a:	4b24      	ldr	r3, [pc, #144]	; (800ec0c <PSV_Mode_Task+0x7f4>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f040 82f0 	bne.w	800f164 <PSV_Mode_Task+0xd4c>
			{
				if (P1._TRIG_TYPE == 1)
 800eb84:	4b15      	ldr	r3, [pc, #84]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb86:	88db      	ldrh	r3, [r3, #6]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	f040 8170 	bne.w	800ee6e <PSV_Mode_Task+0xa56>
			    {
			        if((Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 800eb8e:	4b1d      	ldr	r3, [pc, #116]	; (800ec04 <PSV_Mode_Task+0x7ec>)
 800eb90:	791b      	ldrb	r3, [r3, #4]
 800eb92:	ee07 3a90 	vmov	s15, r3
 800eb96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb9a:	4b10      	ldr	r3, [pc, #64]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eb9c:	edd3 6a05 	vldr	s13, [r3, #20]
 800eba0:	4b0e      	ldr	r3, [pc, #56]	; (800ebdc <PSV_Mode_Task+0x7c4>)
 800eba2:	891b      	ldrh	r3, [r3, #8]
 800eba4:	ee07 3a90 	vmov	s15, r3
 800eba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ebb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb8:	d430      	bmi.n	800ec1c <PSV_Mode_Task+0x804>
				if (P1._TRIG_TYPE == 1)
 800ebba:	e2f3      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>
 800ebbc:	20016a2c 	.word	0x20016a2c
 800ebc0:	20016ea8 	.word	0x20016ea8
 800ebc4:	2000030c 	.word	0x2000030c
 800ebc8:	20000308 	.word	0x20000308
 800ebcc:	20000114 	.word	0x20000114
 800ebd0:	20000118 	.word	0x20000118
 800ebd4:	200169a0 	.word	0x200169a0
 800ebd8:	20016a18 	.word	0x20016a18
 800ebdc:	20016960 	.word	0x20016960
 800ebe0:	40007400 	.word	0x40007400
 800ebe4:	20016c48 	.word	0x20016c48
 800ebe8:	20000324 	.word	0x20000324
 800ebec:	20000328 	.word	0x20000328
 800ebf0:	20017094 	.word	0x20017094
 800ebf4:	407f4000 	.word	0x407f4000
 800ebf8:	20000320 	.word	0x20000320
 800ebfc:	2000031c 	.word	0x2000031c
 800ec00:	20000318 	.word	0x20000318
 800ec04:	20016cfc 	.word	0x20016cfc
 800ec08:	20000120 	.word	0x20000120
 800ec0c:	2000011c 	.word	0x2000011c
 800ec10:	2000032c 	.word	0x2000032c
 800ec14:	20016b28 	.word	0x20016b28
 800ec18:	20000330 	.word	0x20000330
			        {


								if (_CurrentBackupMode == PCCMV_BACKUP)
 800ec1c:	4ba2      	ldr	r3, [pc, #648]	; (800eea8 <PSV_Mode_Task+0xa90>)
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	f040 8091 	bne.w	800ed48 <PSV_Mode_Task+0x930>
								{
									now_check_breath=1;
 800ec26:	4ba1      	ldr	r3, [pc, #644]	; (800eeac <PSV_Mode_Task+0xa94>)
 800ec28:	2201      	movs	r2, #1
 800ec2a:	701a      	strb	r2, [r3, #0]
									_Control_Byte &= (uint8_t) (~(0x80));
 800ec2c:	4ba0      	ldr	r3, [pc, #640]	; (800eeb0 <PSV_Mode_Task+0xa98>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	4b9e      	ldr	r3, [pc, #632]	; (800eeb0 <PSV_Mode_Task+0xa98>)
 800ec38:	701a      	strb	r2, [r3, #0]
									_I_TIMER = B2._I_TIMER_HOLD;
 800ec3a:	4b9e      	ldr	r3, [pc, #632]	; (800eeb4 <PSV_Mode_Task+0xa9c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a9e      	ldr	r2, [pc, #632]	; (800eeb8 <PSV_Mode_Task+0xaa0>)
 800ec40:	6013      	str	r3, [r2, #0]
									P1.PEEP_PSV_DAC_Val=0;
 800ec42:	4b9e      	ldr	r3, [pc, #632]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	839a      	strh	r2, [r3, #28]
									Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800ec48:	4b9c      	ldr	r3, [pc, #624]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ec4a:	8b9a      	ldrh	r2, [r3, #28]
 800ec4c:	4b9c      	ldr	r3, [pc, #624]	; (800eec0 <PSV_Mode_Task+0xaa8>)
 800ec4e:	609a      	str	r2, [r3, #8]
									vol.Volume = 0;
 800ec50:	4b9c      	ldr	r3, [pc, #624]	; (800eec4 <PSV_Mode_Task+0xaac>)
 800ec52:	f04f 0200 	mov.w	r2, #0
 800ec56:	605a      	str	r2, [r3, #4]
									ExpValve_CLOSE();
 800ec58:	4b9b      	ldr	r3, [pc, #620]	; (800eec8 <PSV_Mode_Task+0xab0>)
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	4a9a      	ldr	r2, [pc, #616]	; (800eec8 <PSV_Mode_Task+0xab0>)
 800ec5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ec62:	6153      	str	r3, [r2, #20]

									Trigger_Count++;
 800ec64:	4b99      	ldr	r3, [pc, #612]	; (800eecc <PSV_Mode_Task+0xab4>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	4a98      	ldr	r2, [pc, #608]	; (800eecc <PSV_Mode_Task+0xab4>)
 800ec6c:	6013      	str	r3, [r2, #0]

									A.Alert_Now=0;
 800ec6e:	4b98      	ldr	r3, [pc, #608]	; (800eed0 <PSV_Mode_Task+0xab8>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	70da      	strb	r2, [r3, #3]

									uwTick=0;
 800ec74:	4b97      	ldr	r3, [pc, #604]	; (800eed4 <PSV_Mode_Task+0xabc>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	601a      	str	r2, [r3, #0]
									TPID.OutputSum=300;
 800ec7a:	4997      	ldr	r1, [pc, #604]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ec7c:	a388      	add	r3, pc, #544	; (adr r3, 800eea0 <PSV_Mode_Task+0xa88>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
									Speed=40;
 800ec86:	4b95      	ldr	r3, [pc, #596]	; (800eedc <PSV_Mode_Task+0xac4>)
 800ec88:	2228      	movs	r2, #40	; 0x28
 800ec8a:	601a      	str	r2, [r3, #0]
									kp=5;
 800ec8c:	4b94      	ldr	r3, [pc, #592]	; (800eee0 <PSV_Mode_Task+0xac8>)
 800ec8e:	2205      	movs	r2, #5
 800ec90:	701a      	strb	r2, [r3, #0]
									ki=4;
 800ec92:	4b94      	ldr	r3, [pc, #592]	; (800eee4 <PSV_Mode_Task+0xacc>)
 800ec94:	2204      	movs	r2, #4
 800ec96:	701a      	strb	r2, [r3, #0]

									TempSetpoint = P1.PIP_PSV_Val;
 800ec98:	4b88      	ldr	r3, [pc, #544]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7f1 fbd9 	bl	8000454 <__aeabi_ui2d>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4990      	ldr	r1, [pc, #576]	; (800eee8 <PSV_Mode_Task+0xad0>)
 800eca8:	e9c1 2300 	strd	r2, r3, [r1]
									PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800ecac:	4b8c      	ldr	r3, [pc, #560]	; (800eee0 <PSV_Mode_Task+0xac8>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f1 fbcf 	bl	8000454 <__aeabi_ui2d>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	460d      	mov	r5, r1
 800ecba:	4b8a      	ldr	r3, [pc, #552]	; (800eee4 <PSV_Mode_Task+0xacc>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f1 fbc8 	bl	8000454 <__aeabi_ui2d>
 800ecc4:	4b89      	ldr	r3, [pc, #548]	; (800eeec <PSV_Mode_Task+0xad4>)
 800ecc6:	ed93 7b00 	vldr	d7, [r3]
 800ecca:	2300      	movs	r3, #0
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	2301      	movs	r3, #1
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	eeb0 2a47 	vmov.f32	s4, s14
 800ecd6:	eef0 2a67 	vmov.f32	s5, s15
 800ecda:	ec41 0b11 	vmov	d1, r0, r1
 800ecde:	ec45 4b10 	vmov	d0, r4, r5
 800ece2:	4b81      	ldr	r3, [pc, #516]	; (800eee8 <PSV_Mode_Task+0xad0>)
 800ece4:	4a82      	ldr	r2, [pc, #520]	; (800eef0 <PSV_Mode_Task+0xad8>)
 800ece6:	4983      	ldr	r1, [pc, #524]	; (800eef4 <PSV_Mode_Task+0xadc>)
 800ece8:	487b      	ldr	r0, [pc, #492]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ecea:	f005 fd59 	bl	80147a0 <PID>
									PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800ecee:	2101      	movs	r1, #1
 800ecf0:	4879      	ldr	r0, [pc, #484]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ecf2:	f005 fe8b 	bl	8014a0c <PID_SetMode>

									PID_SetSampleTime(&TPID, Time);
 800ecf6:	4b80      	ldr	r3, [pc, #512]	; (800eef8 <PSV_Mode_Task+0xae0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	4876      	ldr	r0, [pc, #472]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ecfe:	f006 f801 	bl	8014d04 <PID_SetSampleTime>
									PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800ed02:	4b7e      	ldr	r3, [pc, #504]	; (800eefc <PSV_Mode_Task+0xae4>)
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f1 fba4 	bl	8000454 <__aeabi_ui2d>
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	4b7b      	ldr	r3, [pc, #492]	; (800ef00 <PSV_Mode_Task+0xae8>)
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7f1 fb9d 	bl	8000454 <__aeabi_ui2d>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	ec43 2b11 	vmov	d1, r2, r3
 800ed22:	ec45 4b10 	vmov	d0, r4, r5
 800ed26:	486c      	ldr	r0, [pc, #432]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ed28:	f005 fe8e 	bl	8014a48 <PID_SetOutputLimits>

									Trigger=1;
 800ed2c:	4b75      	ldr	r3, [pc, #468]	; (800ef04 <PSV_Mode_Task+0xaec>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	601a      	str	r2, [r3, #0]
									vTaskResume(Psv_Pid_Handler);
 800ed32:	4b75      	ldr	r3, [pc, #468]	; (800ef08 <PSV_Mode_Task+0xaf0>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f010 fe90 	bl	801fa5c <vTaskResume>
									vTaskSuspend(Psv_Handler);
 800ed3c:	4b73      	ldr	r3, [pc, #460]	; (800ef0c <PSV_Mode_Task+0xaf4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f010 fdc7 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 800ed46:	e22d      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>

								 }
								else if (_CurrentBackupMode == VCCMV_BACKUP)
 800ed48:	4b57      	ldr	r3, [pc, #348]	; (800eea8 <PSV_Mode_Task+0xa90>)
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	f040 8229 	bne.w	800f1a4 <PSV_Mode_Task+0xd8c>
								{
									now_check_breath=1;
 800ed52:	4b56      	ldr	r3, [pc, #344]	; (800eeac <PSV_Mode_Task+0xa94>)
 800ed54:	2201      	movs	r2, #1
 800ed56:	701a      	strb	r2, [r3, #0]
									_Control_Byte &= (uint8_t) (~(0x80));
 800ed58:	4b55      	ldr	r3, [pc, #340]	; (800eeb0 <PSV_Mode_Task+0xa98>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	4b53      	ldr	r3, [pc, #332]	; (800eeb0 <PSV_Mode_Task+0xa98>)
 800ed64:	701a      	strb	r2, [r3, #0]
									_I_TIMER = D2._I_TIMER_HOLD;
 800ed66:	4b6a      	ldr	r3, [pc, #424]	; (800ef10 <PSV_Mode_Task+0xaf8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a53      	ldr	r2, [pc, #332]	; (800eeb8 <PSV_Mode_Task+0xaa0>)
 800ed6c:	6013      	str	r3, [r2, #0]
									P1.PEEP_PSV_DAC_Val=0;
 800ed6e:	4b53      	ldr	r3, [pc, #332]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	839a      	strh	r2, [r3, #28]
									Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800ed74:	4b51      	ldr	r3, [pc, #324]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ed76:	8b9a      	ldrh	r2, [r3, #28]
 800ed78:	4b51      	ldr	r3, [pc, #324]	; (800eec0 <PSV_Mode_Task+0xaa8>)
 800ed7a:	609a      	str	r2, [r3, #8]
									vol.Volume = 0;
 800ed7c:	4b51      	ldr	r3, [pc, #324]	; (800eec4 <PSV_Mode_Task+0xaac>)
 800ed7e:	f04f 0200 	mov.w	r2, #0
 800ed82:	605a      	str	r2, [r3, #4]
									ExpValve_CLOSE();
 800ed84:	4b50      	ldr	r3, [pc, #320]	; (800eec8 <PSV_Mode_Task+0xab0>)
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	4a4f      	ldr	r2, [pc, #316]	; (800eec8 <PSV_Mode_Task+0xab0>)
 800ed8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed8e:	6153      	str	r3, [r2, #20]

									Trigger_Count++;
 800ed90:	4b4e      	ldr	r3, [pc, #312]	; (800eecc <PSV_Mode_Task+0xab4>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3301      	adds	r3, #1
 800ed96:	4a4d      	ldr	r2, [pc, #308]	; (800eecc <PSV_Mode_Task+0xab4>)
 800ed98:	6013      	str	r3, [r2, #0]

									uwTick=0;
 800ed9a:	4b4e      	ldr	r3, [pc, #312]	; (800eed4 <PSV_Mode_Task+0xabc>)
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
									TPID.OutputSum=300;
 800eda0:	494d      	ldr	r1, [pc, #308]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800eda2:	a33f      	add	r3, pc, #252	; (adr r3, 800eea0 <PSV_Mode_Task+0xa88>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
									Speed=40;
 800edac:	4b4b      	ldr	r3, [pc, #300]	; (800eedc <PSV_Mode_Task+0xac4>)
 800edae:	2228      	movs	r2, #40	; 0x28
 800edb0:	601a      	str	r2, [r3, #0]
									kp=5;
 800edb2:	4b4b      	ldr	r3, [pc, #300]	; (800eee0 <PSV_Mode_Task+0xac8>)
 800edb4:	2205      	movs	r2, #5
 800edb6:	701a      	strb	r2, [r3, #0]
									ki=4;
 800edb8:	4b4a      	ldr	r3, [pc, #296]	; (800eee4 <PSV_Mode_Task+0xacc>)
 800edba:	2204      	movs	r2, #4
 800edbc:	701a      	strb	r2, [r3, #0]

									TempSetpoint = P1.PIP_PSV_Val;
 800edbe:	4b3f      	ldr	r3, [pc, #252]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7f1 fb46 	bl	8000454 <__aeabi_ui2d>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4946      	ldr	r1, [pc, #280]	; (800eee8 <PSV_Mode_Task+0xad0>)
 800edce:	e9c1 2300 	strd	r2, r3, [r1]
									PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800edd2:	4b43      	ldr	r3, [pc, #268]	; (800eee0 <PSV_Mode_Task+0xac8>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7f1 fb3c 	bl	8000454 <__aeabi_ui2d>
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	4b40      	ldr	r3, [pc, #256]	; (800eee4 <PSV_Mode_Task+0xacc>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7f1 fb35 	bl	8000454 <__aeabi_ui2d>
 800edea:	4b40      	ldr	r3, [pc, #256]	; (800eeec <PSV_Mode_Task+0xad4>)
 800edec:	ed93 7b00 	vldr	d7, [r3]
 800edf0:	2300      	movs	r3, #0
 800edf2:	9301      	str	r3, [sp, #4]
 800edf4:	2301      	movs	r3, #1
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	eeb0 2a47 	vmov.f32	s4, s14
 800edfc:	eef0 2a67 	vmov.f32	s5, s15
 800ee00:	ec41 0b11 	vmov	d1, r0, r1
 800ee04:	ec45 4b10 	vmov	d0, r4, r5
 800ee08:	4b37      	ldr	r3, [pc, #220]	; (800eee8 <PSV_Mode_Task+0xad0>)
 800ee0a:	4a39      	ldr	r2, [pc, #228]	; (800eef0 <PSV_Mode_Task+0xad8>)
 800ee0c:	4939      	ldr	r1, [pc, #228]	; (800eef4 <PSV_Mode_Task+0xadc>)
 800ee0e:	4832      	ldr	r0, [pc, #200]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ee10:	f005 fcc6 	bl	80147a0 <PID>
									PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800ee14:	2101      	movs	r1, #1
 800ee16:	4830      	ldr	r0, [pc, #192]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ee18:	f005 fdf8 	bl	8014a0c <PID_SetMode>
									PID_SetSampleTime(&TPID, Time);
 800ee1c:	4b36      	ldr	r3, [pc, #216]	; (800eef8 <PSV_Mode_Task+0xae0>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4619      	mov	r1, r3
 800ee22:	482d      	ldr	r0, [pc, #180]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ee24:	f005 ff6e 	bl	8014d04 <PID_SetSampleTime>
									PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800ee28:	4b34      	ldr	r3, [pc, #208]	; (800eefc <PSV_Mode_Task+0xae4>)
 800ee2a:	881b      	ldrh	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f1 fb11 	bl	8000454 <__aeabi_ui2d>
 800ee32:	4604      	mov	r4, r0
 800ee34:	460d      	mov	r5, r1
 800ee36:	4b32      	ldr	r3, [pc, #200]	; (800ef00 <PSV_Mode_Task+0xae8>)
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7f1 fb0a 	bl	8000454 <__aeabi_ui2d>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	ec43 2b11 	vmov	d1, r2, r3
 800ee48:	ec45 4b10 	vmov	d0, r4, r5
 800ee4c:	4822      	ldr	r0, [pc, #136]	; (800eed8 <PSV_Mode_Task+0xac0>)
 800ee4e:	f005 fdfb 	bl	8014a48 <PID_SetOutputLimits>

									Trigger=1;
 800ee52:	4b2c      	ldr	r3, [pc, #176]	; (800ef04 <PSV_Mode_Task+0xaec>)
 800ee54:	2201      	movs	r2, #1
 800ee56:	601a      	str	r2, [r3, #0]
									vTaskResume(Psv_Pid_Handler);
 800ee58:	4b2b      	ldr	r3, [pc, #172]	; (800ef08 <PSV_Mode_Task+0xaf0>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f010 fdfd 	bl	801fa5c <vTaskResume>
									vTaskSuspend(Psv_Handler);
 800ee62:	4b2a      	ldr	r3, [pc, #168]	; (800ef0c <PSV_Mode_Task+0xaf4>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f010 fd34 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 800ee6c:	e19a      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>
								}
					    }
					}
				  else
				  {
					 if((Flow_Sensor_cal._Flow_Val>(P1.simv_trigger_offset2+P1._TRIG_LMT)))
 800ee6e:	4b29      	ldr	r3, [pc, #164]	; (800ef14 <PSV_Mode_Task+0xafc>)
 800ee70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee72:	ee07 3a90 	vmov	s15, r3
 800ee76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee7a:	4b10      	ldr	r3, [pc, #64]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ee7c:	edd3 6a06 	vldr	s13, [r3, #24]
 800ee80:	4b0e      	ldr	r3, [pc, #56]	; (800eebc <PSV_Mode_Task+0xaa4>)
 800ee82:	891b      	ldrh	r3, [r3, #8]
 800ee84:	ee07 3a90 	vmov	s15, r3
 800ee88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee98:	dc3e      	bgt.n	800ef18 <PSV_Mode_Task+0xb00>
				if (P1._TRIG_TYPE == 1)
 800ee9a:	e183      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>
 800ee9c:	f3af 8000 	nop.w
 800eea0:	00000000 	.word	0x00000000
 800eea4:	4072c000 	.word	0x4072c000
 800eea8:	2000012c 	.word	0x2000012c
 800eeac:	20000feb 	.word	0x20000feb
 800eeb0:	20016e59 	.word	0x20016e59
 800eeb4:	20016cd4 	.word	0x20016cd4
 800eeb8:	20016df0 	.word	0x20016df0
 800eebc:	20016960 	.word	0x20016960
 800eec0:	40007400 	.word	0x40007400
 800eec4:	20016d44 	.word	0x20016d44
 800eec8:	40020400 	.word	0x40020400
 800eecc:	200168b4 	.word	0x200168b4
 800eed0:	20016a2c 	.word	0x20016a2c
 800eed4:	20017094 	.word	0x20017094
 800eed8:	200169a0 	.word	0x200169a0
 800eedc:	20000144 	.word	0x20000144
 800eee0:	20000136 	.word	0x20000136
 800eee4:	20000137 	.word	0x20000137
 800eee8:	20016e80 	.word	0x20016e80
 800eeec:	20000138 	.word	0x20000138
 800eef0:	20016a18 	.word	0x20016a18
 800eef4:	20016a98 	.word	0x20016a98
 800eef8:	20000140 	.word	0x20000140
 800eefc:	2000012e 	.word	0x2000012e
 800ef00:	20000130 	.word	0x20000130
 800ef04:	20016e50 	.word	0x20016e50
 800ef08:	20016a74 	.word	0x20016a74
 800ef0c:	20016bf0 	.word	0x20016bf0
 800ef10:	20016cc0 	.word	0x20016cc0
 800ef14:	20016c48 	.word	0x20016c48
					 {


						if (_CurrentBackupMode == PCCMV_BACKUP)
 800ef18:	4ba9      	ldr	r3, [pc, #676]	; (800f1c0 <PSV_Mode_Task+0xda8>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f040 808e 	bne.w	800f03e <PSV_Mode_Task+0xc26>
						{
							now_check_breath=1;
 800ef22:	4ba8      	ldr	r3, [pc, #672]	; (800f1c4 <PSV_Mode_Task+0xdac>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	701a      	strb	r2, [r3, #0]
							_Control_Byte &= (uint8_t) (~(0x80));
 800ef28:	4ba7      	ldr	r3, [pc, #668]	; (800f1c8 <PSV_Mode_Task+0xdb0>)
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	4ba5      	ldr	r3, [pc, #660]	; (800f1c8 <PSV_Mode_Task+0xdb0>)
 800ef34:	701a      	strb	r2, [r3, #0]
							_I_TIMER = B2._I_TIMER_HOLD;
 800ef36:	4ba5      	ldr	r3, [pc, #660]	; (800f1cc <PSV_Mode_Task+0xdb4>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4aa5      	ldr	r2, [pc, #660]	; (800f1d0 <PSV_Mode_Task+0xdb8>)
 800ef3c:	6013      	str	r3, [r2, #0]
							P1.PEEP_PSV_DAC_Val = 0;
 800ef3e:	4ba5      	ldr	r3, [pc, #660]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	839a      	strh	r2, [r3, #28]
							Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800ef44:	4ba3      	ldr	r3, [pc, #652]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800ef46:	8b9a      	ldrh	r2, [r3, #28]
 800ef48:	4ba3      	ldr	r3, [pc, #652]	; (800f1d8 <PSV_Mode_Task+0xdc0>)
 800ef4a:	609a      	str	r2, [r3, #8]

							 TempSetpoint = P1.PIP_PSV_Val;
 800ef4c:	4ba1      	ldr	r3, [pc, #644]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800ef4e:	881b      	ldrh	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f1 fa7f 	bl	8000454 <__aeabi_ui2d>
 800ef56:	4602      	mov	r2, r0
 800ef58:	460b      	mov	r3, r1
 800ef5a:	49a0      	ldr	r1, [pc, #640]	; (800f1dc <PSV_Mode_Task+0xdc4>)
 800ef5c:	e9c1 2300 	strd	r2, r3, [r1]
							 vol.Volume = 0;
 800ef60:	4b9f      	ldr	r3, [pc, #636]	; (800f1e0 <PSV_Mode_Task+0xdc8>)
 800ef62:	f04f 0200 	mov.w	r2, #0
 800ef66:	605a      	str	r2, [r3, #4]
							 ExpValve_CLOSE();
 800ef68:	4b9e      	ldr	r3, [pc, #632]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	4a9d      	ldr	r2, [pc, #628]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800ef6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ef72:	6153      	str	r3, [r2, #20]

							 Trigger_Count++;
 800ef74:	4b9c      	ldr	r3, [pc, #624]	; (800f1e8 <PSV_Mode_Task+0xdd0>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	4a9b      	ldr	r2, [pc, #620]	; (800f1e8 <PSV_Mode_Task+0xdd0>)
 800ef7c:	6013      	str	r3, [r2, #0]

							 uwTick=0;
 800ef7e:	4b9b      	ldr	r3, [pc, #620]	; (800f1ec <PSV_Mode_Task+0xdd4>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
							 TPID.OutputSum=300;
 800ef84:	499a      	ldr	r1, [pc, #616]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800ef86:	a38c      	add	r3, pc, #560	; (adr r3, 800f1b8 <PSV_Mode_Task+0xda0>)
 800ef88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							 Speed=40;
 800ef90:	4b98      	ldr	r3, [pc, #608]	; (800f1f4 <PSV_Mode_Task+0xddc>)
 800ef92:	2228      	movs	r2, #40	; 0x28
 800ef94:	601a      	str	r2, [r3, #0]
							 kp=5;
 800ef96:	4b98      	ldr	r3, [pc, #608]	; (800f1f8 <PSV_Mode_Task+0xde0>)
 800ef98:	2205      	movs	r2, #5
 800ef9a:	701a      	strb	r2, [r3, #0]
							 ki=4;
 800ef9c:	4b97      	ldr	r3, [pc, #604]	; (800f1fc <PSV_Mode_Task+0xde4>)
 800ef9e:	2204      	movs	r2, #4
 800efa0:	701a      	strb	r2, [r3, #0]

							 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800efa2:	4b95      	ldr	r3, [pc, #596]	; (800f1f8 <PSV_Mode_Task+0xde0>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7f1 fa54 	bl	8000454 <__aeabi_ui2d>
 800efac:	4604      	mov	r4, r0
 800efae:	460d      	mov	r5, r1
 800efb0:	4b92      	ldr	r3, [pc, #584]	; (800f1fc <PSV_Mode_Task+0xde4>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f1 fa4d 	bl	8000454 <__aeabi_ui2d>
 800efba:	4b91      	ldr	r3, [pc, #580]	; (800f200 <PSV_Mode_Task+0xde8>)
 800efbc:	ed93 7b00 	vldr	d7, [r3]
 800efc0:	2300      	movs	r3, #0
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	2301      	movs	r3, #1
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	eeb0 2a47 	vmov.f32	s4, s14
 800efcc:	eef0 2a67 	vmov.f32	s5, s15
 800efd0:	ec41 0b11 	vmov	d1, r0, r1
 800efd4:	ec45 4b10 	vmov	d0, r4, r5
 800efd8:	4b80      	ldr	r3, [pc, #512]	; (800f1dc <PSV_Mode_Task+0xdc4>)
 800efda:	4a8a      	ldr	r2, [pc, #552]	; (800f204 <PSV_Mode_Task+0xdec>)
 800efdc:	498a      	ldr	r1, [pc, #552]	; (800f208 <PSV_Mode_Task+0xdf0>)
 800efde:	4884      	ldr	r0, [pc, #528]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800efe0:	f005 fbde 	bl	80147a0 <PID>
							 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800efe4:	2101      	movs	r1, #1
 800efe6:	4882      	ldr	r0, [pc, #520]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800efe8:	f005 fd10 	bl	8014a0c <PID_SetMode>
							 PID_SetSampleTime(&TPID, Time);
 800efec:	4b87      	ldr	r3, [pc, #540]	; (800f20c <PSV_Mode_Task+0xdf4>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4619      	mov	r1, r3
 800eff2:	487f      	ldr	r0, [pc, #508]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800eff4:	f005 fe86 	bl	8014d04 <PID_SetSampleTime>
							 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800eff8:	4b85      	ldr	r3, [pc, #532]	; (800f210 <PSV_Mode_Task+0xdf8>)
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	4618      	mov	r0, r3
 800effe:	f7f1 fa29 	bl	8000454 <__aeabi_ui2d>
 800f002:	4604      	mov	r4, r0
 800f004:	460d      	mov	r5, r1
 800f006:	4b83      	ldr	r3, [pc, #524]	; (800f214 <PSV_Mode_Task+0xdfc>)
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f1 fa22 	bl	8000454 <__aeabi_ui2d>
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	ec43 2b11 	vmov	d1, r2, r3
 800f018:	ec45 4b10 	vmov	d0, r4, r5
 800f01c:	4874      	ldr	r0, [pc, #464]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f01e:	f005 fd13 	bl	8014a48 <PID_SetOutputLimits>

							Trigger = 1;
 800f022:	4b7d      	ldr	r3, [pc, #500]	; (800f218 <PSV_Mode_Task+0xe00>)
 800f024:	2201      	movs	r2, #1
 800f026:	601a      	str	r2, [r3, #0]
							vTaskResume(Psv_Pid_Handler);
 800f028:	4b7c      	ldr	r3, [pc, #496]	; (800f21c <PSV_Mode_Task+0xe04>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f010 fd15 	bl	801fa5c <vTaskResume>
							vTaskSuspend(Psv_Handler);
 800f032:	4b7b      	ldr	r3, [pc, #492]	; (800f220 <PSV_Mode_Task+0xe08>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f010 fc4c 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 800f03c:	e0b2      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>

						}
						else if (_CurrentBackupMode == VCCMV_BACKUP)
 800f03e:	4b60      	ldr	r3, [pc, #384]	; (800f1c0 <PSV_Mode_Task+0xda8>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	2b01      	cmp	r3, #1
 800f044:	f040 80ae 	bne.w	800f1a4 <PSV_Mode_Task+0xd8c>
						{
							now_check_breath=1;
 800f048:	4b5e      	ldr	r3, [pc, #376]	; (800f1c4 <PSV_Mode_Task+0xdac>)
 800f04a:	2201      	movs	r2, #1
 800f04c:	701a      	strb	r2, [r3, #0]
							_Control_Byte &= (uint8_t) (~(0x80));
 800f04e:	4b5e      	ldr	r3, [pc, #376]	; (800f1c8 <PSV_Mode_Task+0xdb0>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f056:	b2da      	uxtb	r2, r3
 800f058:	4b5b      	ldr	r3, [pc, #364]	; (800f1c8 <PSV_Mode_Task+0xdb0>)
 800f05a:	701a      	strb	r2, [r3, #0]
							_I_TIMER = D2._I_TIMER_HOLD;
 800f05c:	4b71      	ldr	r3, [pc, #452]	; (800f224 <PSV_Mode_Task+0xe0c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a5b      	ldr	r2, [pc, #364]	; (800f1d0 <PSV_Mode_Task+0xdb8>)
 800f062:	6013      	str	r3, [r2, #0]
							P1.PEEP_PSV_DAC_Val = 0;
 800f064:	4b5b      	ldr	r3, [pc, #364]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800f066:	2200      	movs	r2, #0
 800f068:	839a      	strh	r2, [r3, #28]
							Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800f06a:	4b5a      	ldr	r3, [pc, #360]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800f06c:	8b9a      	ldrh	r2, [r3, #28]
 800f06e:	4b5a      	ldr	r3, [pc, #360]	; (800f1d8 <PSV_Mode_Task+0xdc0>)
 800f070:	609a      	str	r2, [r3, #8]
							vol.Volume = 0;
 800f072:	4b5b      	ldr	r3, [pc, #364]	; (800f1e0 <PSV_Mode_Task+0xdc8>)
 800f074:	f04f 0200 	mov.w	r2, #0
 800f078:	605a      	str	r2, [r3, #4]

							ExpValve_CLOSE();
 800f07a:	4b5a      	ldr	r3, [pc, #360]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	4a59      	ldr	r2, [pc, #356]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800f080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f084:	6153      	str	r3, [r2, #20]
							Trigger_Count++;
 800f086:	4b58      	ldr	r3, [pc, #352]	; (800f1e8 <PSV_Mode_Task+0xdd0>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3301      	adds	r3, #1
 800f08c:	4a56      	ldr	r2, [pc, #344]	; (800f1e8 <PSV_Mode_Task+0xdd0>)
 800f08e:	6013      	str	r3, [r2, #0]

							uwTick=0;
 800f090:	4b56      	ldr	r3, [pc, #344]	; (800f1ec <PSV_Mode_Task+0xdd4>)
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
							TPID.OutputSum=300;
 800f096:	4956      	ldr	r1, [pc, #344]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f098:	a347      	add	r3, pc, #284	; (adr r3, 800f1b8 <PSV_Mode_Task+0xda0>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
							Speed=40;
 800f0a2:	4b54      	ldr	r3, [pc, #336]	; (800f1f4 <PSV_Mode_Task+0xddc>)
 800f0a4:	2228      	movs	r2, #40	; 0x28
 800f0a6:	601a      	str	r2, [r3, #0]
							kp=5;
 800f0a8:	4b53      	ldr	r3, [pc, #332]	; (800f1f8 <PSV_Mode_Task+0xde0>)
 800f0aa:	2205      	movs	r2, #5
 800f0ac:	701a      	strb	r2, [r3, #0]
							ki=4;
 800f0ae:	4b53      	ldr	r3, [pc, #332]	; (800f1fc <PSV_Mode_Task+0xde4>)
 800f0b0:	2204      	movs	r2, #4
 800f0b2:	701a      	strb	r2, [r3, #0]

							TempSetpoint = P1.PIP_PSV_Val;
 800f0b4:	4b47      	ldr	r3, [pc, #284]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7f1 f9cb 	bl	8000454 <__aeabi_ui2d>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4946      	ldr	r1, [pc, #280]	; (800f1dc <PSV_Mode_Task+0xdc4>)
 800f0c4:	e9c1 2300 	strd	r2, r3, [r1]
							PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800f0c8:	4b4b      	ldr	r3, [pc, #300]	; (800f1f8 <PSV_Mode_Task+0xde0>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7f1 f9c1 	bl	8000454 <__aeabi_ui2d>
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	4b49      	ldr	r3, [pc, #292]	; (800f1fc <PSV_Mode_Task+0xde4>)
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7f1 f9ba 	bl	8000454 <__aeabi_ui2d>
 800f0e0:	4b47      	ldr	r3, [pc, #284]	; (800f200 <PSV_Mode_Task+0xde8>)
 800f0e2:	ed93 7b00 	vldr	d7, [r3]
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	9301      	str	r3, [sp, #4]
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	eeb0 2a47 	vmov.f32	s4, s14
 800f0f2:	eef0 2a67 	vmov.f32	s5, s15
 800f0f6:	ec41 0b11 	vmov	d1, r0, r1
 800f0fa:	ec45 4b10 	vmov	d0, r4, r5
 800f0fe:	4b37      	ldr	r3, [pc, #220]	; (800f1dc <PSV_Mode_Task+0xdc4>)
 800f100:	4a40      	ldr	r2, [pc, #256]	; (800f204 <PSV_Mode_Task+0xdec>)
 800f102:	4941      	ldr	r1, [pc, #260]	; (800f208 <PSV_Mode_Task+0xdf0>)
 800f104:	483a      	ldr	r0, [pc, #232]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f106:	f005 fb4b 	bl	80147a0 <PID>
							PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800f10a:	2101      	movs	r1, #1
 800f10c:	4838      	ldr	r0, [pc, #224]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f10e:	f005 fc7d 	bl	8014a0c <PID_SetMode>
							PID_SetSampleTime(&TPID, Time);
 800f112:	4b3e      	ldr	r3, [pc, #248]	; (800f20c <PSV_Mode_Task+0xdf4>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4619      	mov	r1, r3
 800f118:	4835      	ldr	r0, [pc, #212]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f11a:	f005 fdf3 	bl	8014d04 <PID_SetSampleTime>
							PID_SetOutputLimits(&TPID, Dac1, Dac2);
 800f11e:	4b3c      	ldr	r3, [pc, #240]	; (800f210 <PSV_Mode_Task+0xdf8>)
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	4618      	mov	r0, r3
 800f124:	f7f1 f996 	bl	8000454 <__aeabi_ui2d>
 800f128:	4604      	mov	r4, r0
 800f12a:	460d      	mov	r5, r1
 800f12c:	4b39      	ldr	r3, [pc, #228]	; (800f214 <PSV_Mode_Task+0xdfc>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	4618      	mov	r0, r3
 800f132:	f7f1 f98f 	bl	8000454 <__aeabi_ui2d>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	ec43 2b11 	vmov	d1, r2, r3
 800f13e:	ec45 4b10 	vmov	d0, r4, r5
 800f142:	482b      	ldr	r0, [pc, #172]	; (800f1f0 <PSV_Mode_Task+0xdd8>)
 800f144:	f005 fc80 	bl	8014a48 <PID_SetOutputLimits>

							Trigger = 1;
 800f148:	4b33      	ldr	r3, [pc, #204]	; (800f218 <PSV_Mode_Task+0xe00>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	601a      	str	r2, [r3, #0]
							vTaskResume(Psv_Pid_Handler);
 800f14e:	4b33      	ldr	r3, [pc, #204]	; (800f21c <PSV_Mode_Task+0xe04>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4618      	mov	r0, r3
 800f154:	f010 fc82 	bl	801fa5c <vTaskResume>
							vTaskSuspend(Psv_Handler);
 800f158:	4b31      	ldr	r3, [pc, #196]	; (800f220 <PSV_Mode_Task+0xe08>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f010 fbb9 	bl	801f8d4 <vTaskSuspend>
				if (P1._TRIG_TYPE == 1)
 800f162:	e01f      	b.n	800f1a4 <PSV_Mode_Task+0xd8c>



			   else
			   {
				       if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<3))
 800f164:	4b30      	ldr	r3, [pc, #192]	; (800f228 <PSV_Mode_Task+0xe10>)
 800f166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d008      	beq.n	800f17e <PSV_Mode_Task+0xd66>
 800f16c:	4b2e      	ldr	r3, [pc, #184]	; (800f228 <PSV_Mode_Task+0xe10>)
 800f16e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f170:	f113 0f08 	cmn.w	r3, #8
 800f174:	db17      	blt.n	800f1a6 <PSV_Mode_Task+0xd8e>
 800f176:	4b2c      	ldr	r3, [pc, #176]	; (800f228 <PSV_Mode_Task+0xe10>)
 800f178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	dc13      	bgt.n	800f1a6 <PSV_Mode_Task+0xd8e>
			         	{
			         		 P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 800f17e:	4b2b      	ldr	r3, [pc, #172]	; (800f22c <PSV_Mode_Task+0xe14>)
 800f180:	791b      	ldrb	r3, [r3, #4]
 800f182:	ee07 3a90 	vmov	s15, r3
 800f186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f18a:	4b12      	ldr	r3, [pc, #72]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800f18c:	edc3 7a05 	vstr	s15, [r3, #20]
			         		 P1.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 800f190:	4b25      	ldr	r3, [pc, #148]	; (800f228 <PSV_Mode_Task+0xe10>)
 800f192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f194:	ee07 3a90 	vmov	s15, r3
 800f198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f19c:	4b0d      	ldr	r3, [pc, #52]	; (800f1d4 <PSV_Mode_Task+0xdbc>)
 800f19e:	edc3 7a06 	vstr	s15, [r3, #24]
 800f1a2:	e000      	b.n	800f1a6 <PSV_Mode_Task+0xd8e>
				if (P1._TRIG_TYPE == 1)
 800f1a4:	bf00      	nop
			         	}
			    }


			ExpValve_CLOSE();
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	4a0e      	ldr	r2, [pc, #56]	; (800f1e4 <PSV_Mode_Task+0xdcc>)
 800f1ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f1b0:	6153      	str	r3, [r2, #20]
 800f1b2:	e101      	b.n	800f3b8 <PSV_Mode_Task+0xfa0>
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	00000000 	.word	0x00000000
 800f1bc:	4072c000 	.word	0x4072c000
 800f1c0:	2000012c 	.word	0x2000012c
 800f1c4:	20000feb 	.word	0x20000feb
 800f1c8:	20016e59 	.word	0x20016e59
 800f1cc:	20016cd4 	.word	0x20016cd4
 800f1d0:	20016df0 	.word	0x20016df0
 800f1d4:	20016960 	.word	0x20016960
 800f1d8:	40007400 	.word	0x40007400
 800f1dc:	20016e80 	.word	0x20016e80
 800f1e0:	20016d44 	.word	0x20016d44
 800f1e4:	40020400 	.word	0x40020400
 800f1e8:	200168b4 	.word	0x200168b4
 800f1ec:	20017094 	.word	0x20017094
 800f1f0:	200169a0 	.word	0x200169a0
 800f1f4:	20000144 	.word	0x20000144
 800f1f8:	20000136 	.word	0x20000136
 800f1fc:	20000137 	.word	0x20000137
 800f200:	20000138 	.word	0x20000138
 800f204:	20016a18 	.word	0x20016a18
 800f208:	20016a98 	.word	0x20016a98
 800f20c:	20000140 	.word	0x20000140
 800f210:	2000012e 	.word	0x2000012e
 800f214:	20000130 	.word	0x20000130
 800f218:	20016e50 	.word	0x20016e50
 800f21c:	20016a74 	.word	0x20016a74
 800f220:	20016bf0 	.word	0x20016bf0
 800f224:	20016cc0 	.word	0x20016cc0
 800f228:	20016c48 	.word	0x20016c48
 800f22c:	20016cfc 	.word	0x20016cfc
/*********************************************************************/

		}


		else if(P1._APNEA_COUNTER == 0)
 800f230:	4b64      	ldr	r3, [pc, #400]	; (800f3c4 <PSV_Mode_Task+0xfac>)
 800f232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f234:	2b00      	cmp	r3, #0
 800f236:	f040 80bf 	bne.w	800f3b8 <PSV_Mode_Task+0xfa0>
		{
			Alert_Receiving_Parameter();
 800f23a:	f7f3 fa51 	bl	80026e0 <Alert_Receiving_Parameter>
			vTaskResume(alert_Handler);
 800f23e:	4b62      	ldr	r3, [pc, #392]	; (800f3c8 <PSV_Mode_Task+0xfb0>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4618      	mov	r0, r3
 800f244:	f010 fc0a 	bl	801fa5c <vTaskResume>
			Trigger=0;
 800f248:	4b60      	ldr	r3, [pc, #384]	; (800f3cc <PSV_Mode_Task+0xfb4>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	601a      	str	r2, [r3, #0]
			SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_APNEA);
 800f24e:	4a60      	ldr	r2, [pc, #384]	; (800f3d0 <PSV_Mode_Task+0xfb8>)
 800f250:	78d3      	ldrb	r3, [r2, #3]
 800f252:	f043 0320 	orr.w	r3, r3, #32
 800f256:	70d3      	strb	r3, [r2, #3]
			A.Alert_Now=1;
 800f258:	4b5e      	ldr	r3, [pc, #376]	; (800f3d4 <PSV_Mode_Task+0xfbc>)
 800f25a:	2201      	movs	r2, #1
 800f25c:	70da      	strb	r2, [r3, #3]
			A.Apnea_UART_alert=1;
 800f25e:	4b5d      	ldr	r3, [pc, #372]	; (800f3d4 <PSV_Mode_Task+0xfbc>)
 800f260:	2201      	movs	r2, #1
 800f262:	711a      	strb	r2, [r3, #4]
			A.Alert=1;
 800f264:	4b5b      	ldr	r3, [pc, #364]	; (800f3d4 <PSV_Mode_Task+0xfbc>)
 800f266:	2201      	movs	r2, #1
 800f268:	709a      	strb	r2, [r3, #2]
			A.Red_Led_Alert=1;
 800f26a:	4b5a      	ldr	r3, [pc, #360]	; (800f3d4 <PSV_Mode_Task+0xfbc>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			Led_Alert();
 800f272:	f7f3 fb37 	bl	80028e4 <Led_Alert>
			Trigger_Count=0;
 800f276:	4b58      	ldr	r3, [pc, #352]	; (800f3d8 <PSV_Mode_Task+0xfc0>)
 800f278:	2200      	movs	r2, #0
 800f27a:	601a      	str	r2, [r3, #0]
			P1.PEEP_PSV_DAC_Val=0;
 800f27c:	4b51      	ldr	r3, [pc, #324]	; (800f3c4 <PSV_Mode_Task+0xfac>)
 800f27e:	2200      	movs	r2, #0
 800f280:	839a      	strh	r2, [r3, #28]
			Blower_Signal(P1.PEEP_PSV_DAC_Val);
 800f282:	4b50      	ldr	r3, [pc, #320]	; (800f3c4 <PSV_Mode_Task+0xfac>)
 800f284:	8b9a      	ldrh	r2, [r3, #28]
 800f286:	4b55      	ldr	r3, [pc, #340]	; (800f3dc <PSV_Mode_Task+0xfc4>)
 800f288:	609a      	str	r2, [r3, #8]
			S5.peep_process_done=0;
 800f28a:	4b55      	ldr	r3, [pc, #340]	; (800f3e0 <PSV_Mode_Task+0xfc8>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 800f290:	4b53      	ldr	r3, [pc, #332]	; (800f3e0 <PSV_Mode_Task+0xfc8>)
 800f292:	2201      	movs	r2, #1
 800f294:	645a      	str	r2, [r3, #68]	; 0x44
			P1.Apnea_Mode=0;
 800f296:	4b4b      	ldr	r3, [pc, #300]	; (800f3c4 <PSV_Mode_Task+0xfac>)
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			O2_Parameter();
 800f29e:	f7fb fbff 	bl	800aaa0 <O2_Parameter>
			if(_CurrentBackupMode == PCCMV_BACKUP )
 800f2a2:	4b50      	ldr	r3, [pc, #320]	; (800f3e4 <PSV_Mode_Task+0xfcc>)
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d13c      	bne.n	800f324 <PSV_Mode_Task+0xf0c>
			{
				S5.Lock_delay=100;
 800f2aa:	4b4d      	ldr	r3, [pc, #308]	; (800f3e0 <PSV_Mode_Task+0xfc8>)
 800f2ac:	2264      	movs	r2, #100	; 0x64
 800f2ae:	879a      	strh	r2, [r3, #60]	; 0x3c
				_CurrentWaveFormState = Generate_E_Wave;
 800f2b0:	4b4d      	ldr	r3, [pc, #308]	; (800f3e8 <PSV_Mode_Task+0xfd0>)
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 800f2b6:	4b4d      	ldr	r3, [pc, #308]	; (800f3ec <PSV_Mode_Task+0xfd4>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 800f2bc:	4b4c      	ldr	r3, [pc, #304]	; (800f3f0 <PSV_Mode_Task+0xfd8>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f010 fbcb 	bl	801fa5c <vTaskResume>
			    vTaskResume(Back_Up_PC_CMV_Mode_Handler);
 800f2c6:	4b4b      	ldr	r3, [pc, #300]	; (800f3f4 <PSV_Mode_Task+0xfdc>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f010 fbc6 	bl	801fa5c <vTaskResume>
			    vTaskResume(PID_Back_Up_PC_CMV_Mode_Handler);
 800f2d0:	4b49      	ldr	r3, [pc, #292]	; (800f3f8 <PSV_Mode_Task+0xfe0>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f010 fbc1 	bl	801fa5c <vTaskResume>
			    if(O2._FIO2_Val>21)
 800f2da:	4b48      	ldr	r3, [pc, #288]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f2dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f2e0:	2b15      	cmp	r3, #21
 800f2e2:	d905      	bls.n	800f2f0 <PSV_Mode_Task+0xed8>
			    {
			    	vTaskResume(Oxygen_Handler);
 800f2e4:	4b46      	ldr	r3, [pc, #280]	; (800f400 <PSV_Mode_Task+0xfe8>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f010 fbb7 	bl	801fa5c <vTaskResume>
 800f2ee:	e00f      	b.n	800f310 <PSV_Mode_Task+0xef8>
			    }
			    else if(O2._FIO2_Val<=21)
 800f2f0:	4b42      	ldr	r3, [pc, #264]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f2f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f2f6:	2b15      	cmp	r3, #21
 800f2f8:	d80a      	bhi.n	800f310 <PSV_Mode_Task+0xef8>
			    {
			    	O2.O2_DAC=0;
 800f2fa:	4b40      	ldr	r3, [pc, #256]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	811a      	strh	r2, [r3, #8]
			    	Parkar_valve_Signal(0);
 800f300:	4b36      	ldr	r3, [pc, #216]	; (800f3dc <PSV_Mode_Task+0xfc4>)
 800f302:	2200      	movs	r2, #0
 800f304:	615a      	str	r2, [r3, #20]
			    	vTaskSuspend(Oxygen_Handler);
 800f306:	4b3e      	ldr	r3, [pc, #248]	; (800f400 <PSV_Mode_Task+0xfe8>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f010 fae2 	bl	801f8d4 <vTaskSuspend>
			    }

			    vTaskSuspend(Psv_Handler);
 800f310:	4b3c      	ldr	r3, [pc, #240]	; (800f404 <PSV_Mode_Task+0xfec>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4618      	mov	r0, r3
 800f316:	f010 fadd 	bl	801f8d4 <vTaskSuspend>
			    vTaskSuspend(Psv_Pid_Handler);
 800f31a:	4b3b      	ldr	r3, [pc, #236]	; (800f408 <PSV_Mode_Task+0xff0>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f010 fad8 	bl	801f8d4 <vTaskSuspend>
			}


			if(_CurrentBackupMode == VCCMV_BACKUP )
 800f324:	4b2f      	ldr	r3, [pc, #188]	; (800f3e4 <PSV_Mode_Task+0xfcc>)
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d145      	bne.n	800f3b8 <PSV_Mode_Task+0xfa0>
			{
				S5.Lock_delay=10;
 800f32c:	4b2c      	ldr	r3, [pc, #176]	; (800f3e0 <PSV_Mode_Task+0xfc8>)
 800f32e:	220a      	movs	r2, #10
 800f330:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5._Set_Peep=D1._PEEP_Val;
 800f332:	4b36      	ldr	r3, [pc, #216]	; (800f40c <PSV_Mode_Task+0xff4>)
 800f334:	785b      	ldrb	r3, [r3, #1]
 800f336:	ee07 3a90 	vmov	s15, r3
 800f33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f33e:	4b28      	ldr	r3, [pc, #160]	; (800f3e0 <PSV_Mode_Task+0xfc8>)
 800f340:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				_CurrentWaveFormState = Generate_E_Wave;
 800f344:	4b28      	ldr	r3, [pc, #160]	; (800f3e8 <PSV_Mode_Task+0xfd0>)
 800f346:	2201      	movs	r2, #1
 800f348:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 800f34a:	4b28      	ldr	r3, [pc, #160]	; (800f3ec <PSV_Mode_Task+0xfd4>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 800f350:	4b27      	ldr	r3, [pc, #156]	; (800f3f0 <PSV_Mode_Task+0xfd8>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4618      	mov	r0, r3
 800f356:	f010 fb81 	bl	801fa5c <vTaskResume>
				vTaskResume(Back_Up_VC_CMV_Mode_Handler);
 800f35a:	4b2d      	ldr	r3, [pc, #180]	; (800f410 <PSV_Mode_Task+0xff8>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4618      	mov	r0, r3
 800f360:	f010 fb7c 	bl	801fa5c <vTaskResume>
				vTaskResume(PID_Back_Up_VC_CMV_Mode_Handler);
 800f364:	4b2b      	ldr	r3, [pc, #172]	; (800f414 <PSV_Mode_Task+0xffc>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f010 fb77 	bl	801fa5c <vTaskResume>

				if(O2._FIO2_Val>21)
 800f36e:	4b23      	ldr	r3, [pc, #140]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f370:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f374:	2b15      	cmp	r3, #21
 800f376:	d905      	bls.n	800f384 <PSV_Mode_Task+0xf6c>
				{
					vTaskResume(Oxygen_Handler);
 800f378:	4b21      	ldr	r3, [pc, #132]	; (800f400 <PSV_Mode_Task+0xfe8>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f010 fb6d 	bl	801fa5c <vTaskResume>
 800f382:	e00f      	b.n	800f3a4 <PSV_Mode_Task+0xf8c>
				}
				else if(O2._FIO2_Val<=21)
 800f384:	4b1d      	ldr	r3, [pc, #116]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f386:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f38a:	2b15      	cmp	r3, #21
 800f38c:	d80a      	bhi.n	800f3a4 <PSV_Mode_Task+0xf8c>
				{
					O2.O2_DAC=0;
 800f38e:	4b1b      	ldr	r3, [pc, #108]	; (800f3fc <PSV_Mode_Task+0xfe4>)
 800f390:	2200      	movs	r2, #0
 800f392:	811a      	strh	r2, [r3, #8]
					Parkar_valve_Signal(0);
 800f394:	4b11      	ldr	r3, [pc, #68]	; (800f3dc <PSV_Mode_Task+0xfc4>)
 800f396:	2200      	movs	r2, #0
 800f398:	615a      	str	r2, [r3, #20]
					vTaskSuspend(Oxygen_Handler);
 800f39a:	4b19      	ldr	r3, [pc, #100]	; (800f400 <PSV_Mode_Task+0xfe8>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f010 fa98 	bl	801f8d4 <vTaskSuspend>
				}

				vTaskSuspend(Psv_Handler);
 800f3a4:	4b17      	ldr	r3, [pc, #92]	; (800f404 <PSV_Mode_Task+0xfec>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f010 fa93 	bl	801f8d4 <vTaskSuspend>
				vTaskSuspend(Psv_Pid_Handler);
 800f3ae:	4b16      	ldr	r3, [pc, #88]	; (800f408 <PSV_Mode_Task+0xff0>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f010 fa8e 	bl	801f8d4 <vTaskSuspend>
			}
		}
		vTaskDelay(2);
 800f3b8:	2002      	movs	r0, #2
 800f3ba:	f010 fa57 	bl	801f86c <vTaskDelay>
		  if(Initial_open_valve==1)
 800f3be:	f7ff b82f 	b.w	800e420 <PSV_Mode_Task+0x8>
 800f3c2:	bf00      	nop
 800f3c4:	20016960 	.word	0x20016960
 800f3c8:	20016ad4 	.word	0x20016ad4
 800f3cc:	20016e50 	.word	0x20016e50
 800f3d0:	20016ea8 	.word	0x20016ea8
 800f3d4:	20016a2c 	.word	0x20016a2c
 800f3d8:	200168b4 	.word	0x200168b4
 800f3dc:	40007400 	.word	0x40007400
 800f3e0:	20016df4 	.word	0x20016df4
 800f3e4:	2000012c 	.word	0x2000012c
 800f3e8:	20016adc 	.word	0x20016adc
 800f3ec:	20016cc8 	.word	0x20016cc8
 800f3f0:	20016d40 	.word	0x20016d40
 800f3f4:	20016bcc 	.word	0x20016bcc
 800f3f8:	20016d3c 	.word	0x20016d3c
 800f3fc:	20000048 	.word	0x20000048
 800f400:	20016958 	.word	0x20016958
 800f404:	20016bf0 	.word	0x20016bf0
 800f408:	20016a74 	.word	0x20016a74
 800f40c:	20016e90 	.word	0x20016e90
 800f410:	20016d7c 	.word	0x20016d7c
 800f414:	20016a7c 	.word	0x20016a7c

0800f418 <PSV_PARAMETERS>:
}



void PSV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800f418:	b5b0      	push	{r4, r5, r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
	//xSemaphoreTake(binarysem,portMAX_DELAY);
	     P1.PIP_PSV_Val = RX_PARAM_CMD_PACKET->_PIP;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	791b      	ldrb	r3, [r3, #4]
 800f424:	b29a      	uxth	r2, r3
 800f426:	4b88      	ldr	r3, [pc, #544]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f428:	801a      	strh	r2, [r3, #0]
	     P1.PEEP_PSV_Val = RX_PARAM_CMD_PACKET->_PEEP;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	795a      	ldrb	r2, [r3, #5]
 800f42e:	4b86      	ldr	r3, [pc, #536]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f430:	709a      	strb	r2, [r3, #2]
	     P1._Apnea_counter_trigger_check_time=2000;
 800f432:	4b85      	ldr	r3, [pc, #532]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f434:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f438:	809a      	strh	r2, [r3, #4]
		 P1._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT)>>4;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	7b9b      	ldrb	r3, [r3, #14]
 800f43e:	091b      	lsrs	r3, r3, #4
 800f440:	b2db      	uxtb	r3, r3
 800f442:	b29a      	uxth	r2, r3
 800f444:	4b80      	ldr	r3, [pc, #512]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f446:	80da      	strh	r2, [r3, #6]
		 P1._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	7b9b      	ldrb	r3, [r3, #14]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f003 030f 	and.w	r3, r3, #15
 800f452:	b29a      	uxth	r2, r3
 800f454:	4b7c      	ldr	r3, [pc, #496]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f456:	811a      	strh	r2, [r3, #8]
		 P1._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	7adb      	ldrb	r3, [r3, #11]
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	f003 030f 	and.w	r3, r3, #15
 800f462:	b29a      	uxth	r2, r3
 800f464:	4b78      	ldr	r3, [pc, #480]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f466:	815a      	strh	r2, [r3, #10]

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 800f468:	4b78      	ldr	r3, [pc, #480]	; (800f64c <PSV_PARAMETERS+0x234>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <PSV_PARAMETERS+0x6c>
		 {
			 P1._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 800f470:	4b77      	ldr	r3, [pc, #476]	; (800f650 <PSV_PARAMETERS+0x238>)
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	b29a      	uxth	r2, r3
 800f476:	4b74      	ldr	r3, [pc, #464]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f478:	899b      	ldrh	r3, [r3, #12]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	4b72      	ldr	r3, [pc, #456]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f480:	81da      	strh	r2, [r3, #14]
 800f482:	e00c      	b.n	800f49e <PSV_PARAMETERS+0x86>
		 }

		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 800f484:	4b71      	ldr	r3, [pc, #452]	; (800f64c <PSV_PARAMETERS+0x234>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d108      	bne.n	800f49e <PSV_PARAMETERS+0x86>
		 {

			 P1._TOLERANCE_EWAVE = D2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 800f48c:	4b71      	ldr	r3, [pc, #452]	; (800f654 <PSV_PARAMETERS+0x23c>)
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	b29a      	uxth	r2, r3
 800f492:	4b6d      	ldr	r3, [pc, #436]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f494:	899b      	ldrh	r3, [r3, #12]
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	b29a      	uxth	r2, r3
 800f49a:	4b6b      	ldr	r3, [pc, #428]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f49c:	81da      	strh	r2, [r3, #14]
		 }
		 P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 800f49e:	4b6a      	ldr	r3, [pc, #424]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f4a0:	89db      	ldrh	r3, [r3, #14]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f0 ffe6 	bl	8000474 <__aeabi_i2d>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4b66      	ldr	r3, [pc, #408]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f4ae:	895b      	ldrh	r3, [r3, #10]
 800f4b0:	ee07 3a90 	vmov	s15, r3
 800f4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4b8:	ee17 0a90 	vmov	r0, s15
 800f4bc:	f7f0 ffec 	bl	8000498 <__aeabi_f2d>
 800f4c0:	f04f 0200 	mov.w	r2, #0
 800f4c4:	4b64      	ldr	r3, [pc, #400]	; (800f658 <PSV_PARAMETERS+0x240>)
 800f4c6:	f7f1 f83f 	bl	8000548 <__aeabi_dmul>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	f04f 0200 	mov.w	r2, #0
 800f4d6:	4b61      	ldr	r3, [pc, #388]	; (800f65c <PSV_PARAMETERS+0x244>)
 800f4d8:	f7f1 f960 	bl	800079c <__aeabi_ddiv>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	460b      	mov	r3, r1
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	f7f1 f830 	bl	8000548 <__aeabi_dmul>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	f7f1 faec 	bl	8000acc <__aeabi_d2uiz>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	4b53      	ldr	r3, [pc, #332]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f4fa:	821a      	strh	r2, [r3, #16]
		 P1._APNEA_TIME = RX_PARAM_CMD_PACKET->_APNEA;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	7b5b      	ldrb	r3, [r3, #13]
 800f500:	b29a      	uxth	r2, r3
 800f502:	4b51      	ldr	r3, [pc, #324]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f504:	845a      	strh	r2, [r3, #34]	; 0x22
		 P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 800f506:	4b50      	ldr	r3, [pc, #320]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f508:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f50a:	461a      	mov	r2, r3
 800f50c:	0152      	lsls	r2, r2, #5
 800f50e:	1ad2      	subs	r2, r2, r3
 800f510:	0092      	lsls	r2, r2, #2
 800f512:	4413      	add	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	b29a      	uxth	r2, r3
 800f518:	4b4b      	ldr	r3, [pc, #300]	; (800f648 <PSV_PARAMETERS+0x230>)
 800f51a:	849a      	strh	r2, [r3, #36]	; 0x24

		 Initial_open_valve=1;
 800f51c:	4b50      	ldr	r3, [pc, #320]	; (800f660 <PSV_PARAMETERS+0x248>)
 800f51e:	2201      	movs	r2, #1
 800f520:	601a      	str	r2, [r3, #0]
		 one_time_only=1;
 800f522:	4b50      	ldr	r3, [pc, #320]	; (800f664 <PSV_PARAMETERS+0x24c>)
 800f524:	2201      	movs	r2, #1
 800f526:	601a      	str	r2, [r3, #0]
		 ExpValve_CLOSE();
 800f528:	4b4f      	ldr	r3, [pc, #316]	; (800f668 <PSV_PARAMETERS+0x250>)
 800f52a:	695b      	ldr	r3, [r3, #20]
 800f52c:	4a4e      	ldr	r2, [pc, #312]	; (800f668 <PSV_PARAMETERS+0x250>)
 800f52e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f532:	6153      	str	r3, [r2, #20]

		 vTaskSuspend(pc_mode_Handler);
 800f534:	4b4d      	ldr	r3, [pc, #308]	; (800f66c <PSV_PARAMETERS+0x254>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4618      	mov	r0, r3
 800f53a:	f010 f9cb 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_cmv_Pid_Handler);
 800f53e:	4b4c      	ldr	r3, [pc, #304]	; (800f670 <PSV_PARAMETERS+0x258>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4618      	mov	r0, r3
 800f544:	f010 f9c6 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Pc_simv_Mode_Handler);
 800f548:	4b4a      	ldr	r3, [pc, #296]	; (800f674 <PSV_PARAMETERS+0x25c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f010 f9c1 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 800f552:	4b49      	ldr	r3, [pc, #292]	; (800f678 <PSV_PARAMETERS+0x260>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4618      	mov	r0, r3
 800f558:	f010 f9bc 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_mode_Handler);
 800f55c:	4b47      	ldr	r3, [pc, #284]	; (800f67c <PSV_PARAMETERS+0x264>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4618      	mov	r0, r3
 800f562:	f010 f9b7 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_Pid_Handler);
 800f566:	4b46      	ldr	r3, [pc, #280]	; (800f680 <PSV_PARAMETERS+0x268>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f010 f9b2 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Vc_simv_mode_Handler);
 800f570:	4b44      	ldr	r3, [pc, #272]	; (800f684 <PSV_PARAMETERS+0x26c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4618      	mov	r0, r3
 800f576:	f010 f9ad 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Vc_simv_Pid_Handler);
 800f57a:	4b43      	ldr	r3, [pc, #268]	; (800f688 <PSV_PARAMETERS+0x270>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4618      	mov	r0, r3
 800f580:	f010 f9a8 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Cpap_Handler);
 800f584:	4b41      	ldr	r3, [pc, #260]	; (800f68c <PSV_PARAMETERS+0x274>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4618      	mov	r0, r3
 800f58a:	f010 f9a3 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(BiPap_Handler);
 800f58e:	4b40      	ldr	r3, [pc, #256]	; (800f690 <PSV_PARAMETERS+0x278>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4618      	mov	r0, r3
 800f594:	f010 f99e 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(BiPap_Pid_Handler);
 800f598:	4b3e      	ldr	r3, [pc, #248]	; (800f694 <PSV_PARAMETERS+0x27c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f010 f999 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(APRV_Handler);
 800f5a2:	4b3d      	ldr	r3, [pc, #244]	; (800f698 <PSV_PARAMETERS+0x280>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f010 f994 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(APRV_one_Handler);
 800f5ac:	4b3b      	ldr	r3, [pc, #236]	; (800f69c <PSV_PARAMETERS+0x284>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f010 f98f 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 800f5b6:	4b3a      	ldr	r3, [pc, #232]	; (800f6a0 <PSV_PARAMETERS+0x288>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f010 f98a 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 800f5c0:	4b38      	ldr	r3, [pc, #224]	; (800f6a4 <PSV_PARAMETERS+0x28c>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f010 f985 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 800f5ca:	4b37      	ldr	r3, [pc, #220]	; (800f6a8 <PSV_PARAMETERS+0x290>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f010 f980 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 800f5d4:	4b35      	ldr	r3, [pc, #212]	; (800f6ac <PSV_PARAMETERS+0x294>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f010 f97b 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(One_Time_Handler);
 800f5de:	4b34      	ldr	r3, [pc, #208]	; (800f6b0 <PSV_PARAMETERS+0x298>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f010 f976 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(Oxygen_Handler);
 800f5e8:	4b32      	ldr	r3, [pc, #200]	; (800f6b4 <PSV_PARAMETERS+0x29c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f010 f971 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(alert_Handler);
 800f5f2:	4b31      	ldr	r3, [pc, #196]	; (800f6b8 <PSV_PARAMETERS+0x2a0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f010 f96c 	bl	801f8d4 <vTaskSuspend>

		 vTaskSuspend(HFNC_Handler);
 800f5fc:	4b2f      	ldr	r3, [pc, #188]	; (800f6bc <PSV_PARAMETERS+0x2a4>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4618      	mov	r0, r3
 800f602:	f010 f967 	bl	801f8d4 <vTaskSuspend>
		 vTaskSuspend(Suction_Handler);
 800f606:	4b2e      	ldr	r3, [pc, #184]	; (800f6c0 <PSV_PARAMETERS+0x2a8>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f010 f962 	bl	801f8d4 <vTaskSuspend>


		 vTaskResume(Psv_Handler);
 800f610:	4b2c      	ldr	r3, [pc, #176]	; (800f6c4 <PSV_PARAMETERS+0x2ac>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f010 fa21 	bl	801fa5c <vTaskResume>



		 _CurrentMode = PSV;
 800f61a:	4b2b      	ldr	r3, [pc, #172]	; (800f6c8 <PSV_PARAMETERS+0x2b0>)
 800f61c:	2206      	movs	r2, #6
 800f61e:	701a      	strb	r2, [r3, #0]

		 if(_CurrentBackupMode == PCCMV_BACKUP)
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <PSV_PARAMETERS+0x234>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <PSV_PARAMETERS+0x218>
		 {
			 S1._Mode_Val=10;
 800f628:	4b28      	ldr	r3, [pc, #160]	; (800f6cc <PSV_PARAMETERS+0x2b4>)
 800f62a:	220a      	movs	r2, #10
 800f62c:	701a      	strb	r2, [r3, #0]
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
		 {
			 S1._Mode_Val=11;
		 }
		// xSemaphoreGive(binarysem);
}
 800f62e:	e006      	b.n	800f63e <PSV_PARAMETERS+0x226>
		 else if(_CurrentBackupMode == VCCMV_BACKUP)
 800f630:	4b06      	ldr	r3, [pc, #24]	; (800f64c <PSV_PARAMETERS+0x234>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d102      	bne.n	800f63e <PSV_PARAMETERS+0x226>
			 S1._Mode_Val=11;
 800f638:	4b24      	ldr	r3, [pc, #144]	; (800f6cc <PSV_PARAMETERS+0x2b4>)
 800f63a:	220b      	movs	r2, #11
 800f63c:	701a      	strb	r2, [r3, #0]
}
 800f63e:	bf00      	nop
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bdb0      	pop	{r4, r5, r7, pc}
 800f646:	bf00      	nop
 800f648:	20016960 	.word	0x20016960
 800f64c:	2000012c 	.word	0x2000012c
 800f650:	20016cd4 	.word	0x20016cd4
 800f654:	20016cc0 	.word	0x20016cc0
 800f658:	40240000 	.word	0x40240000
 800f65c:	40590000 	.word	0x40590000
 800f660:	20000044 	.word	0x20000044
 800f664:	20000128 	.word	0x20000128
 800f668:	40020400 	.word	0x40020400
 800f66c:	20016a84 	.word	0x20016a84
 800f670:	20016a28 	.word	0x20016a28
 800f674:	20016e60 	.word	0x20016e60
 800f678:	20016e8c 	.word	0x20016e8c
 800f67c:	20016d78 	.word	0x20016d78
 800f680:	2001695c 	.word	0x2001695c
 800f684:	20016c44 	.word	0x20016c44
 800f688:	20016ad0 	.word	0x20016ad0
 800f68c:	20016bb8 	.word	0x20016bb8
 800f690:	20016a24 	.word	0x20016a24
 800f694:	20016878 	.word	0x20016878
 800f698:	20016c00 	.word	0x20016c00
 800f69c:	20016bc8 	.word	0x20016bc8
 800f6a0:	20016bcc 	.word	0x20016bcc
 800f6a4:	20016d3c 	.word	0x20016d3c
 800f6a8:	20016d7c 	.word	0x20016d7c
 800f6ac:	20016a7c 	.word	0x20016a7c
 800f6b0:	20016d40 	.word	0x20016d40
 800f6b4:	20016958 	.word	0x20016958
 800f6b8:	20016ad4 	.word	0x20016ad4
 800f6bc:	20016a20 	.word	0x20016a20
 800f6c0:	20016e5c 	.word	0x20016e5c
 800f6c4:	20016bf0 	.word	0x20016bf0
 800f6c8:	20016c04 	.word	0x20016c04
 800f6cc:	20016ae0 	.word	0x20016ae0

0800f6d0 <PSV_PID_Task>:




void PSV_PID_Task (void *argument)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(_I_TIMER>0)
 800f6d8:	4b34      	ldr	r3, [pc, #208]	; (800f7ac <PSV_PID_Task+0xdc>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d022      	beq.n	800f726 <PSV_PID_Task+0x56>
		{
			ExpValve_CLOSE();
 800f6e0:	4b33      	ldr	r3, [pc, #204]	; (800f7b0 <PSV_PID_Task+0xe0>)
 800f6e2:	695b      	ldr	r3, [r3, #20]
 800f6e4:	4a32      	ldr	r2, [pc, #200]	; (800f7b0 <PSV_PID_Task+0xe0>)
 800f6e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f6ea:	6153      	str	r3, [r2, #20]
			PID_Compute(&TPID);
 800f6ec:	4831      	ldr	r0, [pc, #196]	; (800f7b4 <PSV_PID_Task+0xe4>)
 800f6ee:	f005 f8a3 	bl	8014838 <PID_Compute>
			P1.PIP_PSV_DAC_Val=(int16_t)PIDOut;
 800f6f2:	4b31      	ldr	r3, [pc, #196]	; (800f7b8 <PSV_PID_Task+0xe8>)
 800f6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	f7f1 f9be 	bl	8000a7c <__aeabi_d2iz>
 800f700:	4603      	mov	r3, r0
 800f702:	b21b      	sxth	r3, r3
 800f704:	b29a      	uxth	r2, r3
 800f706:	4b2d      	ldr	r3, [pc, #180]	; (800f7bc <PSV_PID_Task+0xec>)
 800f708:	83da      	strh	r2, [r3, #30]
			Blower_Signal( P1.PIP_PSV_DAC_Val);
 800f70a:	4b2c      	ldr	r3, [pc, #176]	; (800f7bc <PSV_PID_Task+0xec>)
 800f70c:	8bda      	ldrh	r2, [r3, #30]
 800f70e:	4b2c      	ldr	r3, [pc, #176]	; (800f7c0 <PSV_PID_Task+0xf0>)
 800f710:	609a      	str	r2, [r3, #8]
			pressure_acheived=1;
 800f712:	4b2c      	ldr	r3, [pc, #176]	; (800f7c4 <PSV_PID_Task+0xf4>)
 800f714:	2201      	movs	r2, #1
 800f716:	601a      	str	r2, [r3, #0]
			Wait_Dac=1;
 800f718:	4b2b      	ldr	r3, [pc, #172]	; (800f7c8 <PSV_PID_Task+0xf8>)
 800f71a:	2201      	movs	r2, #1
 800f71c:	601a      	str	r2, [r3, #0]
			Apnea_counter_trigger_Flag=1;
 800f71e:	4b2b      	ldr	r3, [pc, #172]	; (800f7cc <PSV_PID_Task+0xfc>)
 800f720:	2201      	movs	r2, #1
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	e03e      	b.n	800f7a4 <PSV_PID_Task+0xd4>
		}
		else if(_I_TIMER==0)
 800f726:	4b21      	ldr	r3, [pc, #132]	; (800f7ac <PSV_PID_Task+0xdc>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d13a      	bne.n	800f7a4 <PSV_PID_Task+0xd4>
		{

			P1.PIP_PSV_DAC_Val=0;
 800f72e:	4b23      	ldr	r3, [pc, #140]	; (800f7bc <PSV_PID_Task+0xec>)
 800f730:	2200      	movs	r2, #0
 800f732:	83da      	strh	r2, [r3, #30]
			Blower_Signal( P1.PIP_PSV_DAC_Val);
 800f734:	4b21      	ldr	r3, [pc, #132]	; (800f7bc <PSV_PID_Task+0xec>)
 800f736:	8bda      	ldrh	r2, [r3, #30]
 800f738:	4b21      	ldr	r3, [pc, #132]	; (800f7c0 <PSV_PID_Task+0xf0>)
 800f73a:	609a      	str	r2, [r3, #8]
			Trigger=0;
 800f73c:	4b24      	ldr	r3, [pc, #144]	; (800f7d0 <PSV_PID_Task+0x100>)
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
			now_update=1;
 800f742:	4b24      	ldr	r3, [pc, #144]	; (800f7d4 <PSV_PID_Task+0x104>)
 800f744:	2201      	movs	r2, #1
 800f746:	601a      	str	r2, [r3, #0]

			P1._Apnea_counter_trigger_check_time=2000;
 800f748:	4b1c      	ldr	r3, [pc, #112]	; (800f7bc <PSV_PID_Task+0xec>)
 800f74a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f74e:	809a      	strh	r2, [r3, #4]
			P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 800f750:	4b1a      	ldr	r3, [pc, #104]	; (800f7bc <PSV_PID_Task+0xec>)
 800f752:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f754:	461a      	mov	r2, r3
 800f756:	0152      	lsls	r2, r2, #5
 800f758:	1ad2      	subs	r2, r2, r3
 800f75a:	0092      	lsls	r2, r2, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	b29a      	uxth	r2, r3
 800f762:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <PSV_PID_Task+0xec>)
 800f764:	849a      	strh	r2, [r3, #36]	; 0x24

			Apnea_counter_trigger_Flag=1;
 800f766:	4b19      	ldr	r3, [pc, #100]	; (800f7cc <PSV_PID_Task+0xfc>)
 800f768:	2201      	movs	r2, #1
 800f76a:	601a      	str	r2, [r3, #0]
			Alert_Data_send_count=0;
 800f76c:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <PSV_PID_Task+0x108>)
 800f76e:	2200      	movs	r2, #0
 800f770:	601a      	str	r2, [r3, #0]
			Alert_error_count=0;
 800f772:	4b1a      	ldr	r3, [pc, #104]	; (800f7dc <PSV_PID_Task+0x10c>)
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
			Dac_control_count=0;
 800f778:	4b19      	ldr	r3, [pc, #100]	; (800f7e0 <PSV_PID_Task+0x110>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]
			Alert_error_count=0;
 800f77e:	4b17      	ldr	r3, [pc, #92]	; (800f7dc <PSV_PID_Task+0x10c>)
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]


			  pressure_high_error_count=0;    //new
 800f784:	4b17      	ldr	r3, [pc, #92]	; (800f7e4 <PSV_PID_Task+0x114>)
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
			  pressure_high_error_count2=0;   //new
 800f78a:	4b17      	ldr	r3, [pc, #92]	; (800f7e8 <PSV_PID_Task+0x118>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	601a      	str	r2, [r3, #0]

			vTaskResume(Psv_Handler);
 800f790:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <PSV_PID_Task+0x11c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4618      	mov	r0, r3
 800f796:	f010 f961 	bl	801fa5c <vTaskResume>
			vTaskSuspend(Psv_Pid_Handler);
 800f79a:	4b15      	ldr	r3, [pc, #84]	; (800f7f0 <PSV_PID_Task+0x120>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f010 f898 	bl	801f8d4 <vTaskSuspend>
		}


		vTaskDelay(2);
 800f7a4:	2002      	movs	r0, #2
 800f7a6:	f010 f861 	bl	801f86c <vTaskDelay>
		if(_I_TIMER>0)
 800f7aa:	e795      	b.n	800f6d8 <PSV_PID_Task+0x8>
 800f7ac:	20016df0 	.word	0x20016df0
 800f7b0:	40020400 	.word	0x40020400
 800f7b4:	200169a0 	.word	0x200169a0
 800f7b8:	20016a18 	.word	0x20016a18
 800f7bc:	20016960 	.word	0x20016960
 800f7c0:	40007400 	.word	0x40007400
 800f7c4:	20000114 	.word	0x20000114
 800f7c8:	20000118 	.word	0x20000118
 800f7cc:	2000011c 	.word	0x2000011c
 800f7d0:	20016e50 	.word	0x20016e50
 800f7d4:	20016b28 	.word	0x20016b28
 800f7d8:	2000031c 	.word	0x2000031c
 800f7dc:	20000308 	.word	0x20000308
 800f7e0:	20000320 	.word	0x20000320
 800f7e4:	2000032c 	.word	0x2000032c
 800f7e8:	20000330 	.word	0x20000330
 800f7ec:	20016bf0 	.word	0x20016bf0
 800f7f0:	20016a74 	.word	0x20016a74

0800f7f4 <SERVICE_COMMAND_HANDLER>:

int fault=0;


void SERVICE_COMMAND_HANDLER(REQUEST_SERVICE_PACKET_tst *RX_SERVICE_RANGE_PACKET)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]


		S.Blower= (RX_SERVICE_RANGE_PACKET->SERVICE_BLOWER);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	78da      	ldrb	r2, [r3, #3]
 800f800:	4b33      	ldr	r3, [pc, #204]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f802:	751a      	strb	r2, [r3, #20]
		S.ADS1115= (RX_SERVICE_RANGE_PACKET->SERVICE_ADS1115);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	791a      	ldrb	r2, [r3, #4]
 800f808:	4b31      	ldr	r3, [pc, #196]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f80a:	755a      	strb	r2, [r3, #21]
		S.Pressure_Sensor= (RX_SERVICE_RANGE_PACKET->SERVICE_PRESSURE_SENSOR);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	795a      	ldrb	r2, [r3, #5]
 800f810:	4b2f      	ldr	r3, [pc, #188]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f812:	759a      	strb	r2, [r3, #22]
		S.Flow_Sensor= (RX_SERVICE_RANGE_PACKET->SERVICE_FLOW_SENSOR);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	799a      	ldrb	r2, [r3, #6]
 800f818:	4b2d      	ldr	r3, [pc, #180]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f81a:	75da      	strb	r2, [r3, #23]
		S.Expiratory_Valve= (RX_SERVICE_RANGE_PACKET->SERVICE_EXPIRATORY_VALVE);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	79da      	ldrb	r2, [r3, #7]
 800f820:	4b2b      	ldr	r3, [pc, #172]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f822:	761a      	strb	r2, [r3, #24]
		S.E_Valve_use_hand= (RX_SERVICE_RANGE_PACKET->SERVICE_EXPIRATORY_VALVE);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	79da      	ldrb	r2, [r3, #7]
 800f828:	4b29      	ldr	r3, [pc, #164]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f82a:	765a      	strb	r2, [r3, #25]
		S.Connect_E_valve= (RX_SERVICE_RANGE_PACKET->SERVICE_EXPIRATORY_VALVE);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	79da      	ldrb	r2, [r3, #7]
 800f830:	4b27      	ldr	r3, [pc, #156]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f832:	769a      	strb	r2, [r3, #26]
		S.Service_Leak= (RX_SERVICE_RANGE_PACKET->SERVICE_LEAK);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7a1a      	ldrb	r2, [r3, #8]
 800f838:	4b25      	ldr	r3, [pc, #148]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f83a:	76da      	strb	r2, [r3, #27]
		S.Servo= (RX_SERVICE_RANGE_PACKET->SERVICE_SERVO_MOTOR);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	7a5a      	ldrb	r2, [r3, #9]
 800f840:	4b23      	ldr	r3, [pc, #140]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f842:	771a      	strb	r2, [r3, #28]
		S.O2= (RX_SERVICE_RANGE_PACKET->SERVICE_O2);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	7a9a      	ldrb	r2, [r3, #10]
 800f848:	4b21      	ldr	r3, [pc, #132]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f84a:	775a      	strb	r2, [r3, #29]
		S.Nebuliser= (RX_SERVICE_RANGE_PACKET->SERVICE_NEBULISER);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	7ada      	ldrb	r2, [r3, #11]
 800f850:	4b1f      	ldr	r3, [pc, #124]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f852:	779a      	strb	r2, [r3, #30]
		S.Remove_Test_Lung= (RX_SERVICE_RANGE_PACKET->REMOVE_TEST_LUNG);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	7b1a      	ldrb	r2, [r3, #12]
 800f858:	4b1d      	ldr	r3, [pc, #116]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f85a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		S.Hand_Lock=(RX_SERVICE_RANGE_PACKET->HAND_LOCK);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7b5a      	ldrb	r2, [r3, #13]
 800f862:	4b1b      	ldr	r3, [pc, #108]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f864:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		_RESPOND_SERVICE_PACKET._REPORT0_FLAGS=0;
 800f868:	4b1a      	ldr	r3, [pc, #104]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	70da      	strb	r2, [r3, #3]
		_RESPOND_SERVICE_PACKET._PRESSURE1=0;
 800f86e:	4b19      	ldr	r3, [pc, #100]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f870:	2200      	movs	r2, #0
 800f872:	711a      	strb	r2, [r3, #4]
		_RESPOND_SERVICE_PACKET._PRESSURE2=0;
 800f874:	4b17      	ldr	r3, [pc, #92]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f876:	2200      	movs	r2, #0
 800f878:	715a      	strb	r2, [r3, #5]
		_RESPOND_SERVICE_PACKET._FLOW=0;
 800f87a:	4b16      	ldr	r3, [pc, #88]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	719a      	strb	r2, [r3, #6]
		_RESPOND_SERVICE_PACKET._O2_PERCENTAGE=0;
 800f880:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f882:	2200      	movs	r2, #0
 800f884:	71da      	strb	r2, [r3, #7]
		_RESPOND_SERVICE_PACKET._RESULT=0;
 800f886:	4b13      	ldr	r3, [pc, #76]	; (800f8d4 <SERVICE_COMMAND_HANDLER+0xe0>)
 800f888:	2200      	movs	r2, #0
 800f88a:	721a      	strb	r2, [r3, #8]
 800f88c:	2200      	movs	r2, #0
 800f88e:	725a      	strb	r2, [r3, #9]

		S.Step_One=1;
 800f890:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f892:	2201      	movs	r2, #1
 800f894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		S.Step_Two=0;
 800f898:	4b0d      	ldr	r3, [pc, #52]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		S.dac_last=500;
 800f8a0:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f8a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f8a6:	851a      	strh	r2, [r3, #40]	; 0x28
		S.Leak_first_Test=1;
 800f8a8:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		S.servo_step_one=1;
 800f8b0:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <SERVICE_COMMAND_HANDLER+0xdc>)
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		fault=0;
 800f8b8:	4b07      	ldr	r3, [pc, #28]	; (800f8d8 <SERVICE_COMMAND_HANDLER+0xe4>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]

		vTaskResume(Service_Handler);
 800f8be:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <SERVICE_COMMAND_HANDLER+0xe8>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f010 f8ca 	bl	801fa5c <vTaskResume>



}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	20016af8 	.word	0x20016af8
 800f8d4:	20016b54 	.word	0x20016b54
 800f8d8:	20000334 	.word	0x20000334
 800f8dc:	200168c8 	.word	0x200168c8

0800f8e0 <SEND_SERVICE_PACKET>:




void SEND_SERVICE_PACKET()
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0

	_RESPOND_SERVICE_PACKET._header = 0x5055 ;
 800f8e4:	4b11      	ldr	r3, [pc, #68]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800f8ec:	701a      	strb	r2, [r3, #0]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800f8f4:	705a      	strb	r2, [r3, #1]
	_RESPOND_SERVICE_PACKET._length = 0x08 ;
 800f8f6:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f8f8:	2208      	movs	r2, #8
 800f8fa:	709a      	strb	r2, [r3, #2]
	_RESPOND_SERVICE_PACKET._CRC8   = chksum8((unsigned char*)&_RESPOND_SERVICE_PACKET._REPORT0_FLAGS,_RESPOND_SERVICE_PACKET._length);
 800f8fc:	4b0b      	ldr	r3, [pc, #44]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f8fe:	789b      	ldrb	r3, [r3, #2]
 800f900:	4619      	mov	r1, r3
 800f902:	480b      	ldr	r0, [pc, #44]	; (800f930 <SEND_SERVICE_PACKET+0x50>)
 800f904:	f000 ff4e 	bl	80107a4 <chksum8>
 800f908:	4603      	mov	r3, r0
 800f90a:	461a      	mov	r2, r3
 800f90c:	4b07      	ldr	r3, [pc, #28]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f90e:	72da      	strb	r2, [r3, #11]
#if UART==6
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&_RESPOND_SERVICE_PACKET,sizeof(_RESPOND_SERVICE_PACKET));
 800f910:	220c      	movs	r2, #12
 800f912:	4906      	ldr	r1, [pc, #24]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f914:	4807      	ldr	r0, [pc, #28]	; (800f934 <SEND_SERVICE_PACKET+0x54>)
 800f916:	f00b f877 	bl	801aa08 <HAL_UART_Transmit_IT>
#endif
#if UART==5
		  	HAL_UART_Transmit_IT(&huart5,(uint8_t*)&_RESPOND_SERVICE_PACKET,sizeof(_RESPOND_SERVICE_PACKET));
#endif
		  	CDC_Transmit_FS((uint8_t*)&_RESPOND_SERVICE_PACKET,sizeof(_RESPOND_SERVICE_PACKET));
 800f91a:	210c      	movs	r1, #12
 800f91c:	4803      	ldr	r0, [pc, #12]	; (800f92c <SEND_SERVICE_PACKET+0x4c>)
 800f91e:	f011 fe9d 	bl	802165c <CDC_Transmit_FS>
		  	S.Uart_Service=0;
 800f922:	4b05      	ldr	r3, [pc, #20]	; (800f938 <SEND_SERVICE_PACKET+0x58>)
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
}
 800f928:	bf00      	nop
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	20016b54 	.word	0x20016b54
 800f930:	20016b57 	.word	0x20016b57
 800f934:	20016dac 	.word	0x20016dac
 800f938:	20016af8 	.word	0x20016af8

0800f93c <SERVICE_Task>:


void SERVICE_Task(void *argument)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(S.Blower==1)
 800f944:	4b20      	ldr	r3, [pc, #128]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f946:	7d1b      	ldrb	r3, [r3, #20]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d102      	bne.n	800f952 <SERVICE_Task+0x16>
		{
			SERVICE_Blower();
 800f94c:	f000 f83e 	bl	800f9cc <SERVICE_Blower>
 800f950:	e036      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.ADS1115==1)
 800f952:	4b1d      	ldr	r3, [pc, #116]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f954:	7d5b      	ldrb	r3, [r3, #21]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d102      	bne.n	800f960 <SERVICE_Task+0x24>
		{
			SERVICE_ADS1115();
 800f95a:	f000 f90d 	bl	800fb78 <SERVICE_ADS1115>
 800f95e:	e02f      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Pressure_Sensor==1)
 800f960:	4b19      	ldr	r3, [pc, #100]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f962:	7d9b      	ldrb	r3, [r3, #22]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d102      	bne.n	800f96e <SERVICE_Task+0x32>
		{
			SERVICE_Pressure_Sensor();
 800f968:	f000 f946 	bl	800fbf8 <SERVICE_Pressure_Sensor>
 800f96c:	e028      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Flow_Sensor==1)
 800f96e:	4b16      	ldr	r3, [pc, #88]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f970:	7ddb      	ldrb	r3, [r3, #23]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d102      	bne.n	800f97c <SERVICE_Task+0x40>
		{
			SERVICE_Flow_Sensor();
 800f976:	f000 f9b5 	bl	800fce4 <SERVICE_Flow_Sensor>
 800f97a:	e021      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Expiratory_Valve==1)
 800f97c:	4b12      	ldr	r3, [pc, #72]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f97e:	7e1b      	ldrb	r3, [r3, #24]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d102      	bne.n	800f98a <SERVICE_Task+0x4e>
		{
			SERVICE_Expiratory_Valve();
 800f984:	f000 fa3c 	bl	800fe00 <SERVICE_Expiratory_Valve>
 800f988:	e01a      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Service_Leak==1)
 800f98a:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f98c:	7edb      	ldrb	r3, [r3, #27]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d102      	bne.n	800f998 <SERVICE_Task+0x5c>
		{
			SERVICE_Leak();
 800f992:	f000 fafd 	bl	800ff90 <SERVICE_Leak>
 800f996:	e013      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Servo==1)
 800f998:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f99a:	7f1b      	ldrb	r3, [r3, #28]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d102      	bne.n	800f9a6 <SERVICE_Task+0x6a>
		{
			SERVICE_Servo();
 800f9a0:	f000 fbce 	bl	8010140 <SERVICE_Servo>
 800f9a4:	e00c      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.O2==1)
 800f9a6:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f9a8:	7f5b      	ldrb	r3, [r3, #29]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d102      	bne.n	800f9b4 <SERVICE_Task+0x78>
		{
			SERVICE_O2();
 800f9ae:	f000 fc6b 	bl	8010288 <SERVICE_O2>
 800f9b2:	e005      	b.n	800f9c0 <SERVICE_Task+0x84>
		}
		else if(S.Nebuliser==1)
 800f9b4:	4b04      	ldr	r3, [pc, #16]	; (800f9c8 <SERVICE_Task+0x8c>)
 800f9b6:	7f9b      	ldrb	r3, [r3, #30]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d101      	bne.n	800f9c0 <SERVICE_Task+0x84>
		{
			SERVICE_Nebuliser();
 800f9bc:	f000 fd4e 	bl	801045c <SERVICE_Nebuliser>
		}
		vTaskDelay(1);
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f00f ff53 	bl	801f86c <vTaskDelay>
		if(S.Blower==1)
 800f9c6:	e7bd      	b.n	800f944 <SERVICE_Task+0x8>
 800f9c8:	20016af8 	.word	0x20016af8

0800f9cc <SERVICE_Blower>:
}



void SERVICE_Blower()
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	af00      	add	r7, sp, #0
	if(S.Step_One==1)
 800f9d0:	4b60      	ldr	r3, [pc, #384]	; (800fb54 <SERVICE_Blower+0x188>)
 800f9d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d14c      	bne.n	800fa74 <SERVICE_Blower+0xa8>
	{
		if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6))==0)
 800f9da:	2140      	movs	r1, #64	; 0x40
 800f9dc:	485e      	ldr	r0, [pc, #376]	; (800fb58 <SERVICE_Blower+0x18c>)
 800f9de:	f007 f949 	bl	8016c74 <HAL_GPIO_ReadPin>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d11c      	bne.n	800fa22 <SERVICE_Blower+0x56>
		{

		if(fault!=1)
 800f9e8:	4b5c      	ldr	r3, [pc, #368]	; (800fb5c <SERVICE_Blower+0x190>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	f000 80af 	beq.w	800fb50 <SERVICE_Blower+0x184>
		{
			S.error_count++;
 800f9f2:	4b58      	ldr	r3, [pc, #352]	; (800fb54 <SERVICE_Blower+0x188>)
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	4a56      	ldr	r2, [pc, #344]	; (800fb54 <SERVICE_Blower+0x188>)
 800f9fa:	6053      	str	r3, [r2, #4]
			if(S.error_count>=6000)
 800f9fc:	4b55      	ldr	r3, [pc, #340]	; (800fb54 <SERVICE_Blower+0x188>)
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	f241 726f 	movw	r2, #5999	; 0x176f
 800fa04:	4293      	cmp	r3, r2
 800fa06:	f340 80a3 	ble.w	800fb50 <SERVICE_Blower+0x184>
			{
				S.error_count=0;
 800fa0a:	4b52      	ldr	r3, [pc, #328]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	605a      	str	r2, [r3, #4]
				S.Step_One=0;
 800fa10:	4b50      	ldr	r3, [pc, #320]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				S.Step_Two=1;
 800fa18:	4b4e      	ldr	r3, [pc, #312]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				S.Step_One=1;
				vTaskSuspend(Service_Handler);
			 }
	}

}
 800fa20:	e096      	b.n	800fb50 <SERVICE_Blower+0x184>
		  if(fault==0)
 800fa22:	4b4e      	ldr	r3, [pc, #312]	; (800fb5c <SERVICE_Blower+0x190>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f040 8092 	bne.w	800fb50 <SERVICE_Blower+0x184>
			S.error_count_2++;
 800fa2c:	4b49      	ldr	r3, [pc, #292]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	3301      	adds	r3, #1
 800fa32:	4a48      	ldr	r2, [pc, #288]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa34:	6213      	str	r3, [r2, #32]
			if(S.error_count_2>=4000)
 800fa36:	4b47      	ldr	r3, [pc, #284]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800fa3e:	f2c0 8087 	blt.w	800fb50 <SERVICE_Blower+0x184>
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x80 ;
 800fa42:	4b47      	ldr	r3, [pc, #284]	; (800fb60 <SERVICE_Blower+0x194>)
 800fa44:	2280      	movs	r2, #128	; 0x80
 800fa46:	70da      	strb	r2, [r3, #3]
				S.Uart_Service=1;
 800fa48:	4b42      	ldr	r3, [pc, #264]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 800fa4e:	2014      	movs	r0, #20
 800fa50:	f00f ff0c 	bl	801f86c <vTaskDelay>
				S.Step_One=1;
 800fa54:	4b3f      	ldr	r3, [pc, #252]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				S.error_count_2=0;
 800fa5c:	4b3d      	ldr	r3, [pc, #244]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	621a      	str	r2, [r3, #32]
				fault=1;
 800fa62:	4b3e      	ldr	r3, [pc, #248]	; (800fb5c <SERVICE_Blower+0x190>)
 800fa64:	2201      	movs	r2, #1
 800fa66:	601a      	str	r2, [r3, #0]
				vTaskSuspend(Service_Handler);
 800fa68:	4b3e      	ldr	r3, [pc, #248]	; (800fb64 <SERVICE_Blower+0x198>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f00f ff31 	bl	801f8d4 <vTaskSuspend>
}
 800fa72:	e06d      	b.n	800fb50 <SERVICE_Blower+0x184>
	else if(S.Step_Two==1)
 800fa74:	4b37      	ldr	r3, [pc, #220]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa76:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d168      	bne.n	800fb50 <SERVICE_Blower+0x184>
		   if(Pressure_sensor._Pressure_Val<60)
 800fa7e:	4b3a      	ldr	r3, [pc, #232]	; (800fb68 <SERVICE_Blower+0x19c>)
 800fa80:	791b      	ldrb	r3, [r3, #4]
 800fa82:	2b3b      	cmp	r3, #59	; 0x3b
 800fa84:	d815      	bhi.n	800fab2 <SERVICE_Blower+0xe6>
				S.error_count++;
 800fa86:	4b33      	ldr	r3, [pc, #204]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	4a31      	ldr	r2, [pc, #196]	; (800fb54 <SERVICE_Blower+0x188>)
 800fa8e:	6053      	str	r3, [r2, #4]
				Blower_ON();
 800fa90:	4b31      	ldr	r3, [pc, #196]	; (800fb58 <SERVICE_Blower+0x18c>)
 800fa92:	695b      	ldr	r3, [r3, #20]
 800fa94:	4a30      	ldr	r2, [pc, #192]	; (800fb58 <SERVICE_Blower+0x18c>)
 800fa96:	f043 0320 	orr.w	r3, r3, #32
 800fa9a:	6153      	str	r3, [r2, #20]
				ExpValve_CLOSE();
 800fa9c:	4b33      	ldr	r3, [pc, #204]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800fa9e:	695b      	ldr	r3, [r3, #20]
 800faa0:	4a32      	ldr	r2, [pc, #200]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800faa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800faa6:	6153      	str	r3, [r2, #20]
				Blower_Signal(1800);
 800faa8:	4b31      	ldr	r3, [pc, #196]	; (800fb70 <SERVICE_Blower+0x1a4>)
 800faaa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800faae:	609a      	str	r2, [r3, #8]
 800fab0:	e024      	b.n	800fafc <SERVICE_Blower+0x130>
				Blower_Signal(0);
 800fab2:	4b2f      	ldr	r3, [pc, #188]	; (800fb70 <SERVICE_Blower+0x1a4>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 800fab8:	4b2c      	ldr	r3, [pc, #176]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800faba:	695b      	ldr	r3, [r3, #20]
 800fabc:	4a2b      	ldr	r2, [pc, #172]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800fabe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fac2:	6153      	str	r3, [r2, #20]
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 800fac4:	4b26      	ldr	r3, [pc, #152]	; (800fb60 <SERVICE_Blower+0x194>)
 800fac6:	2201      	movs	r2, #1
 800fac8:	70da      	strb	r2, [r3, #3]
				_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 800faca:	4b27      	ldr	r3, [pc, #156]	; (800fb68 <SERVICE_Blower+0x19c>)
 800facc:	791a      	ldrb	r2, [r3, #4]
 800face:	4b24      	ldr	r3, [pc, #144]	; (800fb60 <SERVICE_Blower+0x194>)
 800fad0:	711a      	strb	r2, [r3, #4]
				S.Uart_Service=1;
 800fad2:	4b20      	ldr	r3, [pc, #128]	; (800fb54 <SERVICE_Blower+0x188>)
 800fad4:	2201      	movs	r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 800fad8:	2014      	movs	r0, #20
 800fada:	f00f fec7 	bl	801f86c <vTaskDelay>
				S.error_count=0;
 800fade:	4b1d      	ldr	r3, [pc, #116]	; (800fb54 <SERVICE_Blower+0x188>)
 800fae0:	2200      	movs	r2, #0
 800fae2:	605a      	str	r2, [r3, #4]
				S.Blower=0;
 800fae4:	4b1b      	ldr	r3, [pc, #108]	; (800fb54 <SERVICE_Blower+0x188>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	751a      	strb	r2, [r3, #20]
				S.Step_One=1;
 800faea:	4b1a      	ldr	r3, [pc, #104]	; (800fb54 <SERVICE_Blower+0x188>)
 800faec:	2201      	movs	r2, #1
 800faee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				vTaskSuspend(Service_Handler);
 800faf2:	4b1c      	ldr	r3, [pc, #112]	; (800fb64 <SERVICE_Blower+0x198>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f00f feec 	bl	801f8d4 <vTaskSuspend>
			 if(C.error_count>4000)
 800fafc:	4b1d      	ldr	r3, [pc, #116]	; (800fb74 <SERVICE_Blower+0x1a8>)
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800fb04:	dd24      	ble.n	800fb50 <SERVICE_Blower+0x184>
				Blower_Signal(0);
 800fb06:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <SERVICE_Blower+0x1a4>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 800fb0c:	4b17      	ldr	r3, [pc, #92]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800fb0e:	695b      	ldr	r3, [r3, #20]
 800fb10:	4a16      	ldr	r2, [pc, #88]	; (800fb6c <SERVICE_Blower+0x1a0>)
 800fb12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb16:	6153      	str	r3, [r2, #20]
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x40 ;
 800fb18:	4b11      	ldr	r3, [pc, #68]	; (800fb60 <SERVICE_Blower+0x194>)
 800fb1a:	2240      	movs	r2, #64	; 0x40
 800fb1c:	70da      	strb	r2, [r3, #3]
				_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 800fb1e:	4b12      	ldr	r3, [pc, #72]	; (800fb68 <SERVICE_Blower+0x19c>)
 800fb20:	791a      	ldrb	r2, [r3, #4]
 800fb22:	4b0f      	ldr	r3, [pc, #60]	; (800fb60 <SERVICE_Blower+0x194>)
 800fb24:	711a      	strb	r2, [r3, #4]
				S.Uart_Service=1;
 800fb26:	4b0b      	ldr	r3, [pc, #44]	; (800fb54 <SERVICE_Blower+0x188>)
 800fb28:	2201      	movs	r2, #1
 800fb2a:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 800fb2c:	2014      	movs	r0, #20
 800fb2e:	f00f fe9d 	bl	801f86c <vTaskDelay>
				S.error_count=0;
 800fb32:	4b08      	ldr	r3, [pc, #32]	; (800fb54 <SERVICE_Blower+0x188>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	605a      	str	r2, [r3, #4]
				S.Blower=0;
 800fb38:	4b06      	ldr	r3, [pc, #24]	; (800fb54 <SERVICE_Blower+0x188>)
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	751a      	strb	r2, [r3, #20]
				S.Step_One=1;
 800fb3e:	4b05      	ldr	r3, [pc, #20]	; (800fb54 <SERVICE_Blower+0x188>)
 800fb40:	2201      	movs	r2, #1
 800fb42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				vTaskSuspend(Service_Handler);
 800fb46:	4b07      	ldr	r3, [pc, #28]	; (800fb64 <SERVICE_Blower+0x198>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f00f fec2 	bl	801f8d4 <vTaskSuspend>
}
 800fb50:	bf00      	nop
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20016af8 	.word	0x20016af8
 800fb58:	40021000 	.word	0x40021000
 800fb5c:	20000334 	.word	0x20000334
 800fb60:	20016b54 	.word	0x20016b54
 800fb64:	200168c8 	.word	0x200168c8
 800fb68:	20016cfc 	.word	0x20016cfc
 800fb6c:	40020400 	.word	0x40020400
 800fb70:	40007400 	.word	0x40007400
 800fb74:	20016bd8 	.word	0x20016bd8

0800fb78 <SERVICE_ADS1115>:



void SERVICE_ADS1115()
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af02      	add	r7, sp, #8
	if(HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1,(Flow_sensor.ADSwrite), 3, 10)!=HAL_OK)
 800fb7e:	230a      	movs	r3, #10
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	2303      	movs	r3, #3
 800fb84:	4a16      	ldr	r2, [pc, #88]	; (800fbe0 <SERVICE_ADS1115+0x68>)
 800fb86:	2190      	movs	r1, #144	; 0x90
 800fb88:	4816      	ldr	r0, [pc, #88]	; (800fbe4 <SERVICE_ADS1115+0x6c>)
 800fb8a:	f007 fa27 	bl	8016fdc <HAL_I2C_Master_Transmit>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d011      	beq.n	800fbb8 <SERVICE_ADS1115+0x40>
	{
	     Flow_sensor.fault=1;
 800fb94:	4b14      	ldr	r3, [pc, #80]	; (800fbe8 <SERVICE_ADS1115+0x70>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	749a      	strb	r2, [r3, #18]
	     _RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x20 ;
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <SERVICE_ADS1115+0x74>)
 800fb9c:	2220      	movs	r2, #32
 800fb9e:	70da      	strb	r2, [r3, #3]
	     S.Uart_Service=1;
 800fba0:	4b13      	ldr	r3, [pc, #76]	; (800fbf0 <SERVICE_ADS1115+0x78>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	601a      	str	r2, [r3, #0]
	     vTaskDelay(20);
 800fba6:	2014      	movs	r0, #20
 800fba8:	f00f fe60 	bl	801f86c <vTaskDelay>
	     vTaskSuspend(Service_Handler);
 800fbac:	4b11      	ldr	r3, [pc, #68]	; (800fbf4 <SERVICE_ADS1115+0x7c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f00f fe8f 	bl	801f8d4 <vTaskSuspend>
		_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
		S.Uart_Service=1;
		vTaskDelay(20);
		vTaskSuspend(Service_Handler);
	}
}
 800fbb6:	e010      	b.n	800fbda <SERVICE_ADS1115+0x62>
		Flow_sensor.fault=0;
 800fbb8:	4b0b      	ldr	r3, [pc, #44]	; (800fbe8 <SERVICE_ADS1115+0x70>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	749a      	strb	r2, [r3, #18]
		_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 800fbbe:	4b0b      	ldr	r3, [pc, #44]	; (800fbec <SERVICE_ADS1115+0x74>)
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	70da      	strb	r2, [r3, #3]
		S.Uart_Service=1;
 800fbc4:	4b0a      	ldr	r3, [pc, #40]	; (800fbf0 <SERVICE_ADS1115+0x78>)
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	601a      	str	r2, [r3, #0]
		vTaskDelay(20);
 800fbca:	2014      	movs	r0, #20
 800fbcc:	f00f fe4e 	bl	801f86c <vTaskDelay>
		vTaskSuspend(Service_Handler);
 800fbd0:	4b08      	ldr	r3, [pc, #32]	; (800fbf4 <SERVICE_ADS1115+0x7c>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f00f fe7d 	bl	801f8d4 <vTaskSuspend>
}
 800fbda:	bf00      	nop
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	2001691c 	.word	0x2001691c
 800fbe4:	20016efc 	.word	0x20016efc
 800fbe8:	20016914 	.word	0x20016914
 800fbec:	20016b54 	.word	0x20016b54
 800fbf0:	20016af8 	.word	0x20016af8
 800fbf4:	200168c8 	.word	0x200168c8

0800fbf8 <SERVICE_Pressure_Sensor>:

void SERVICE_Pressure_Sensor()
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
	     if(Pressure_sensor._Pressure_Val<60)
 800fbfc:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <SERVICE_Pressure_Sensor+0xcc>)
 800fbfe:	791b      	ldrb	r3, [r3, #4]
 800fc00:	2b3b      	cmp	r3, #59	; 0x3b
 800fc02:	d815      	bhi.n	800fc30 <SERVICE_Pressure_Sensor+0x38>
		 {
			S.error_count++;
 800fc04:	4b30      	ldr	r3, [pc, #192]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	4a2f      	ldr	r2, [pc, #188]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc0c:	6053      	str	r3, [r2, #4]
			Blower_ON();
 800fc0e:	4b2f      	ldr	r3, [pc, #188]	; (800fccc <SERVICE_Pressure_Sensor+0xd4>)
 800fc10:	695b      	ldr	r3, [r3, #20]
 800fc12:	4a2e      	ldr	r2, [pc, #184]	; (800fccc <SERVICE_Pressure_Sensor+0xd4>)
 800fc14:	f043 0320 	orr.w	r3, r3, #32
 800fc18:	6153      	str	r3, [r2, #20]
			ExpValve_CLOSE();
 800fc1a:	4b2d      	ldr	r3, [pc, #180]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	4a2c      	ldr	r2, [pc, #176]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fc24:	6153      	str	r3, [r2, #20]
			Blower_Signal(1800);
 800fc26:	4b2b      	ldr	r3, [pc, #172]	; (800fcd4 <SERVICE_Pressure_Sensor+0xdc>)
 800fc28:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800fc2c:	609a      	str	r2, [r3, #8]
 800fc2e:	e020      	b.n	800fc72 <SERVICE_Pressure_Sensor+0x7a>
		 }
		 else
		 {
			Blower_Signal(0);
 800fc30:	4b28      	ldr	r3, [pc, #160]	; (800fcd4 <SERVICE_Pressure_Sensor+0xdc>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 800fc36:	4b26      	ldr	r3, [pc, #152]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc38:	695b      	ldr	r3, [r3, #20]
 800fc3a:	4a25      	ldr	r2, [pc, #148]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc40:	6153      	str	r3, [r2, #20]
			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 800fc42:	4b25      	ldr	r3, [pc, #148]	; (800fcd8 <SERVICE_Pressure_Sensor+0xe0>)
 800fc44:	2201      	movs	r2, #1
 800fc46:	70da      	strb	r2, [r3, #3]
			_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 800fc48:	4b1e      	ldr	r3, [pc, #120]	; (800fcc4 <SERVICE_Pressure_Sensor+0xcc>)
 800fc4a:	791a      	ldrb	r2, [r3, #4]
 800fc4c:	4b22      	ldr	r3, [pc, #136]	; (800fcd8 <SERVICE_Pressure_Sensor+0xe0>)
 800fc4e:	711a      	strb	r2, [r3, #4]
			S.Uart_Service=1;
 800fc50:	4b1d      	ldr	r3, [pc, #116]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc52:	2201      	movs	r2, #1
 800fc54:	601a      	str	r2, [r3, #0]
			vTaskDelay(20);
 800fc56:	2014      	movs	r0, #20
 800fc58:	f00f fe08 	bl	801f86c <vTaskDelay>
			S.error_count=0;
 800fc5c:	4b1a      	ldr	r3, [pc, #104]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc5e:	2200      	movs	r2, #0
 800fc60:	605a      	str	r2, [r3, #4]
			S.Pressure_Sensor=0;
 800fc62:	4b19      	ldr	r3, [pc, #100]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	759a      	strb	r2, [r3, #22]
			vTaskSuspend(Service_Handler);
 800fc68:	4b1c      	ldr	r3, [pc, #112]	; (800fcdc <SERVICE_Pressure_Sensor+0xe4>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f00f fe31 	bl	801f8d4 <vTaskSuspend>
		 }
		 if(C.error_count>4000)
 800fc72:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <SERVICE_Pressure_Sensor+0xe8>)
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800fc7a:	dd20      	ble.n	800fcbe <SERVICE_Pressure_Sensor+0xc6>
		 {
			Blower_Signal(0);
 800fc7c:	4b15      	ldr	r3, [pc, #84]	; (800fcd4 <SERVICE_Pressure_Sensor+0xdc>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 800fc82:	4b13      	ldr	r3, [pc, #76]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc84:	695b      	ldr	r3, [r3, #20]
 800fc86:	4a12      	ldr	r2, [pc, #72]	; (800fcd0 <SERVICE_Pressure_Sensor+0xd8>)
 800fc88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc8c:	6153      	str	r3, [r2, #20]
			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00 ;
 800fc8e:	4b12      	ldr	r3, [pc, #72]	; (800fcd8 <SERVICE_Pressure_Sensor+0xe0>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	70da      	strb	r2, [r3, #3]
			_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 800fc94:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <SERVICE_Pressure_Sensor+0xcc>)
 800fc96:	791a      	ldrb	r2, [r3, #4]
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <SERVICE_Pressure_Sensor+0xe0>)
 800fc9a:	711a      	strb	r2, [r3, #4]
			S.Uart_Service=1;
 800fc9c:	4b0a      	ldr	r3, [pc, #40]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fc9e:	2201      	movs	r2, #1
 800fca0:	601a      	str	r2, [r3, #0]
			vTaskDelay(20);
 800fca2:	2014      	movs	r0, #20
 800fca4:	f00f fde2 	bl	801f86c <vTaskDelay>
			S.error_count=0;
 800fca8:	4b07      	ldr	r3, [pc, #28]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	605a      	str	r2, [r3, #4]
			S.Pressure_Sensor=0;
 800fcae:	4b06      	ldr	r3, [pc, #24]	; (800fcc8 <SERVICE_Pressure_Sensor+0xd0>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	759a      	strb	r2, [r3, #22]
			vTaskSuspend(Service_Handler);
 800fcb4:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <SERVICE_Pressure_Sensor+0xe4>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f00f fe0b 	bl	801f8d4 <vTaskSuspend>
		 }
}
 800fcbe:	bf00      	nop
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20016cfc 	.word	0x20016cfc
 800fcc8:	20016af8 	.word	0x20016af8
 800fccc:	40021000 	.word	0x40021000
 800fcd0:	40020400 	.word	0x40020400
 800fcd4:	40007400 	.word	0x40007400
 800fcd8:	20016b54 	.word	0x20016b54
 800fcdc:	200168c8 	.word	0x200168c8
 800fce0:	20016bd8 	.word	0x20016bd8

0800fce4 <SERVICE_Flow_Sensor>:
void SERVICE_Flow_Sensor()
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	af00      	add	r7, sp, #0

	if(S.Remove_Test_Lung==1)
 800fce8:	4b3d      	ldr	r3, [pc, #244]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fcea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d173      	bne.n	800fdda <SERVICE_Flow_Sensor+0xf6>
	{

	     if (Flow_Sensor_cal._Flow_Val < 100  )
 800fcf2:	4b3c      	ldr	r3, [pc, #240]	; (800fde4 <SERVICE_Flow_Sensor+0x100>)
 800fcf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcf6:	2b63      	cmp	r3, #99	; 0x63
 800fcf8:	dc1e      	bgt.n	800fd38 <SERVICE_Flow_Sensor+0x54>
		  {
		      S.error_count++;
 800fcfa:	4b39      	ldr	r3, [pc, #228]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	4a37      	ldr	r2, [pc, #220]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd02:	6053      	str	r3, [r2, #4]
			  Blower_ON();
 800fd04:	4b38      	ldr	r3, [pc, #224]	; (800fde8 <SERVICE_Flow_Sensor+0x104>)
 800fd06:	695b      	ldr	r3, [r3, #20]
 800fd08:	4a37      	ldr	r2, [pc, #220]	; (800fde8 <SERVICE_Flow_Sensor+0x104>)
 800fd0a:	f043 0320 	orr.w	r3, r3, #32
 800fd0e:	6153      	str	r3, [r2, #20]
			  ExpValve_CLOSE();
 800fd10:	4b36      	ldr	r3, [pc, #216]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd12:	695b      	ldr	r3, [r3, #20]
 800fd14:	4a35      	ldr	r2, [pc, #212]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd1a:	6153      	str	r3, [r2, #20]
			  S.dac_last=(S.dac_last+10);
 800fd1c:	4b30      	ldr	r3, [pc, #192]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd20:	330a      	adds	r3, #10
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	4b2e      	ldr	r3, [pc, #184]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd26:	851a      	strh	r2, [r3, #40]	; 0x28
			  Blower_Signal(S.dac_last);
 800fd28:	4b2d      	ldr	r3, [pc, #180]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd2c:	4b30      	ldr	r3, [pc, #192]	; (800fdf0 <SERVICE_Flow_Sensor+0x10c>)
 800fd2e:	609a      	str	r2, [r3, #8]
			  vTaskDelay(50);
 800fd30:	2032      	movs	r0, #50	; 0x32
 800fd32:	f00f fd9b 	bl	801f86c <vTaskDelay>
 800fd36:	e025      	b.n	800fd84 <SERVICE_Flow_Sensor+0xa0>
		  }
		  else
		  {
			   Blower_Signal(0);
 800fd38:	4b2d      	ldr	r3, [pc, #180]	; (800fdf0 <SERVICE_Flow_Sensor+0x10c>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	609a      	str	r2, [r3, #8]
			   ExpValve_OPEN();
 800fd3e:	4b2b      	ldr	r3, [pc, #172]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	4a2a      	ldr	r2, [pc, #168]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd48:	6153      	str	r3, [r2, #20]
			   _RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01;
 800fd4a:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <SERVICE_Flow_Sensor+0x110>)
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	70da      	strb	r2, [r3, #3]
			   _RESPOND_SERVICE_PACKET._FLOW = Flow_Sensor_cal._Flow_Val;
 800fd50:	4b24      	ldr	r3, [pc, #144]	; (800fde4 <SERVICE_Flow_Sensor+0x100>)
 800fd52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd54:	b2da      	uxtb	r2, r3
 800fd56:	4b27      	ldr	r3, [pc, #156]	; (800fdf4 <SERVICE_Flow_Sensor+0x110>)
 800fd58:	719a      	strb	r2, [r3, #6]
			   S.Uart_Service = 1;
 800fd5a:	4b21      	ldr	r3, [pc, #132]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	601a      	str	r2, [r3, #0]
			   vTaskDelay(20);
 800fd60:	2014      	movs	r0, #20
 800fd62:	f00f fd83 	bl	801f86c <vTaskDelay>
			   S.error_count=0;
 800fd66:	4b1e      	ldr	r3, [pc, #120]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd68:	2200      	movs	r2, #0
 800fd6a:	605a      	str	r2, [r3, #4]
			   S.Flow_Sensor=0;
 800fd6c:	4b1c      	ldr	r3, [pc, #112]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	75da      	strb	r2, [r3, #23]
			   S.Remove_Test_Lung=0;
 800fd72:	4b1b      	ldr	r3, [pc, #108]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			   vTaskSuspend(Service_Handler);
 800fd7a:	4b1f      	ldr	r3, [pc, #124]	; (800fdf8 <SERVICE_Flow_Sensor+0x114>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f00f fda8 	bl	801f8d4 <vTaskSuspend>
		   }
		   if (C.error_count > 4000)
 800fd84:	4b1d      	ldr	r3, [pc, #116]	; (800fdfc <SERVICE_Flow_Sensor+0x118>)
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800fd8c:	dd25      	ble.n	800fdda <SERVICE_Flow_Sensor+0xf6>
		   {
				Blower_Signal(0);
 800fd8e:	4b18      	ldr	r3, [pc, #96]	; (800fdf0 <SERVICE_Flow_Sensor+0x10c>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 800fd94:	4b15      	ldr	r3, [pc, #84]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd96:	695b      	ldr	r3, [r3, #20]
 800fd98:	4a14      	ldr	r2, [pc, #80]	; (800fdec <SERVICE_Flow_Sensor+0x108>)
 800fd9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd9e:	6153      	str	r3, [r2, #20]
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00;
 800fda0:	4b14      	ldr	r3, [pc, #80]	; (800fdf4 <SERVICE_Flow_Sensor+0x110>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	70da      	strb	r2, [r3, #3]
				_RESPOND_SERVICE_PACKET._FLOW = Flow_Sensor_cal._Flow_Val;
 800fda6:	4b0f      	ldr	r3, [pc, #60]	; (800fde4 <SERVICE_Flow_Sensor+0x100>)
 800fda8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	4b11      	ldr	r3, [pc, #68]	; (800fdf4 <SERVICE_Flow_Sensor+0x110>)
 800fdae:	719a      	strb	r2, [r3, #6]
				S.Uart_Service = 1;
 800fdb0:	4b0b      	ldr	r3, [pc, #44]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 800fdb6:	2014      	movs	r0, #20
 800fdb8:	f00f fd58 	bl	801f86c <vTaskDelay>
				S.error_count = 0;
 800fdbc:	4b08      	ldr	r3, [pc, #32]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	605a      	str	r2, [r3, #4]
				S.Flow_Sensor=0;
 800fdc2:	4b07      	ldr	r3, [pc, #28]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	75da      	strb	r2, [r3, #23]
				S.Remove_Test_Lung=0;
 800fdc8:	4b05      	ldr	r3, [pc, #20]	; (800fde0 <SERVICE_Flow_Sensor+0xfc>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				vTaskSuspend(Service_Handler);
 800fdd0:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <SERVICE_Flow_Sensor+0x114>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f00f fd7d 	bl	801f8d4 <vTaskSuspend>
			}
	}
}
 800fdda:	bf00      	nop
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	20016af8 	.word	0x20016af8
 800fde4:	20016c48 	.word	0x20016c48
 800fde8:	40021000 	.word	0x40021000
 800fdec:	40020400 	.word	0x40020400
 800fdf0:	40007400 	.word	0x40007400
 800fdf4:	20016b54 	.word	0x20016b54
 800fdf8:	200168c8 	.word	0x200168c8
 800fdfc:	20016bd8 	.word	0x20016bd8

0800fe00 <SERVICE_Expiratory_Valve>:

void SERVICE_Expiratory_Valve()
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
	if(S.Hand_Lock==1)
 800fe04:	4b5b      	ldr	r3, [pc, #364]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fe06:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d122      	bne.n	800fe54 <SERVICE_Expiratory_Valve+0x54>
	{
	    Blower_ON();
 800fe0e:	4b5a      	ldr	r3, [pc, #360]	; (800ff78 <SERVICE_Expiratory_Valve+0x178>)
 800fe10:	695b      	ldr	r3, [r3, #20]
 800fe12:	4a59      	ldr	r2, [pc, #356]	; (800ff78 <SERVICE_Expiratory_Valve+0x178>)
 800fe14:	f043 0320 	orr.w	r3, r3, #32
 800fe18:	6153      	str	r3, [r2, #20]
		Blower_Signal(1500);
 800fe1a:	4b58      	ldr	r3, [pc, #352]	; (800ff7c <SERVICE_Expiratory_Valve+0x17c>)
 800fe1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fe20:	609a      	str	r2, [r3, #8]
		vTaskDelay(2000);
 800fe22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fe26:	f00f fd21 	bl	801f86c <vTaskDelay>
		Blower_Signal(0);
 800fe2a:	4b54      	ldr	r3, [pc, #336]	; (800ff7c <SERVICE_Expiratory_Valve+0x17c>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	609a      	str	r2, [r3, #8]
		vTaskDelay(2000);
 800fe30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fe34:	f00f fd1a 	bl	801f86c <vTaskDelay>
		S.temp_Pressure_Val1=Pressure_sensor._Pressure_Val;
 800fe38:	4b51      	ldr	r3, [pc, #324]	; (800ff80 <SERVICE_Expiratory_Valve+0x180>)
 800fe3a:	791b      	ldrb	r3, [r3, #4]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4b4d      	ldr	r3, [pc, #308]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fe40:	609a      	str	r2, [r3, #8]
		vTaskDelay(1000);
 800fe42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fe46:	f00f fd11 	bl	801f86c <vTaskDelay>
		vTaskSuspend(Service_Handler);
 800fe4a:	4b4e      	ldr	r3, [pc, #312]	; (800ff84 <SERVICE_Expiratory_Valve+0x184>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f00f fd40 	bl	801f8d4 <vTaskSuspend>
	}
	if(S.Hand_Lock==2)
 800fe54:	4b47      	ldr	r3, [pc, #284]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fe56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d12b      	bne.n	800feb6 <SERVICE_Expiratory_Valve+0xb6>
	{
		ExpValve_CLOSE();
 800fe5e:	4b4a      	ldr	r3, [pc, #296]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800fe60:	695b      	ldr	r3, [r3, #20]
 800fe62:	4a49      	ldr	r2, [pc, #292]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800fe64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe68:	6153      	str	r3, [r2, #20]
		Blower_Signal(1500);
 800fe6a:	4b44      	ldr	r3, [pc, #272]	; (800ff7c <SERVICE_Expiratory_Valve+0x17c>)
 800fe6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fe70:	609a      	str	r2, [r3, #8]
		vTaskDelay(2000);
 800fe72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fe76:	f00f fcf9 	bl	801f86c <vTaskDelay>
		Blower_Signal(0);
 800fe7a:	4b40      	ldr	r3, [pc, #256]	; (800ff7c <SERVICE_Expiratory_Valve+0x17c>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	609a      	str	r2, [r3, #8]
		vTaskDelay(2000);
 800fe80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fe84:	f00f fcf2 	bl	801f86c <vTaskDelay>
		S.temp_Pressure_Val2=Pressure_sensor._Pressure_Val;
 800fe88:	4b3d      	ldr	r3, [pc, #244]	; (800ff80 <SERVICE_Expiratory_Valve+0x180>)
 800fe8a:	791b      	ldrb	r3, [r3, #4]
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4b39      	ldr	r3, [pc, #228]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fe90:	60da      	str	r2, [r3, #12]
		vTaskDelay(1000);
 800fe92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fe96:	f00f fce9 	bl	801f86c <vTaskDelay>
		S.Hand_Lock=0;
 800fe9a:	4b36      	ldr	r3, [pc, #216]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ExpValve_OPEN();
 800fea2:	4b39      	ldr	r3, [pc, #228]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800fea4:	695b      	ldr	r3, [r3, #20]
 800fea6:	4a38      	ldr	r2, [pc, #224]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800fea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800feac:	6153      	str	r3, [r2, #20]
		vTaskDelay(1000);
 800feae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800feb2:	f00f fcdb 	bl	801f86c <vTaskDelay>
	}
	if(S.Hand_Lock==0)
 800feb6:	4b2f      	ldr	r3, [pc, #188]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800feb8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800febc:	2b00      	cmp	r3, #0
 800febe:	d157      	bne.n	800ff70 <SERVICE_Expiratory_Valve+0x170>
	{

		S.total_temp_Pressure_Val=S.temp_Pressure_Val1-S.temp_Pressure_Val2;
 800fec0:	4b2c      	ldr	r3, [pc, #176]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fec2:	689a      	ldr	r2, [r3, #8]
 800fec4:	4b2b      	ldr	r3, [pc, #172]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	4a2a      	ldr	r2, [pc, #168]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fecc:	6113      	str	r3, [r2, #16]
		if(S.total_temp_Pressure_Val<=5)
 800fece:	4b29      	ldr	r3, [pc, #164]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	dc26      	bgt.n	800ff24 <SERVICE_Expiratory_Valve+0x124>
		{
			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 800fed6:	4b2d      	ldr	r3, [pc, #180]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800fed8:	2201      	movs	r2, #1
 800feda:	70da      	strb	r2, [r3, #3]
			_RESPOND_SERVICE_PACKET._PRESSURE1 = S.temp_Pressure_Val1 ;
 800fedc:	4b25      	ldr	r3, [pc, #148]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	b2da      	uxtb	r2, r3
 800fee2:	4b2a      	ldr	r3, [pc, #168]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800fee4:	711a      	strb	r2, [r3, #4]
			_RESPOND_SERVICE_PACKET._PRESSURE2 = S.temp_Pressure_Val2 ;
 800fee6:	4b23      	ldr	r3, [pc, #140]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	b2da      	uxtb	r2, r3
 800feec:	4b27      	ldr	r3, [pc, #156]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800feee:	715a      	strb	r2, [r3, #5]
			_RESPOND_SERVICE_PACKET._RESULT = S.total_temp_Pressure_Val;
 800fef0:	4b20      	ldr	r3, [pc, #128]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	4b25      	ldr	r3, [pc, #148]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800fef8:	811a      	strh	r2, [r3, #8]
			S.Uart_Service=1;
 800fefa:	4b1e      	ldr	r3, [pc, #120]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800fefc:	2201      	movs	r2, #1
 800fefe:	601a      	str	r2, [r3, #0]
			vTaskDelay(20);
 800ff00:	2014      	movs	r0, #20
 800ff02:	f00f fcb3 	bl	801f86c <vTaskDelay>
			S.Expiratory_Valve=0;
 800ff06:	4b1b      	ldr	r3, [pc, #108]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	761a      	strb	r2, [r3, #24]
			ExpValve_OPEN();
 800ff0c:	4b1e      	ldr	r3, [pc, #120]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800ff0e:	695b      	ldr	r3, [r3, #20]
 800ff10:	4a1d      	ldr	r2, [pc, #116]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800ff12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff16:	6153      	str	r3, [r2, #20]
			vTaskSuspend(Service_Handler);
 800ff18:	4b1a      	ldr	r3, [pc, #104]	; (800ff84 <SERVICE_Expiratory_Valve+0x184>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f00f fcd9 	bl	801f8d4 <vTaskSuspend>
			S.Expiratory_Valve=0;
			ExpValve_OPEN();
			vTaskSuspend(Service_Handler);
		}
	}
}
 800ff22:	e025      	b.n	800ff70 <SERVICE_Expiratory_Valve+0x170>
			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00 ;
 800ff24:	4b19      	ldr	r3, [pc, #100]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	70da      	strb	r2, [r3, #3]
			_RESPOND_SERVICE_PACKET._PRESSURE1 = S.temp_Pressure_Val1 ;
 800ff2a:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	b2da      	uxtb	r2, r3
 800ff30:	4b16      	ldr	r3, [pc, #88]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800ff32:	711a      	strb	r2, [r3, #4]
			_RESPOND_SERVICE_PACKET._PRESSURE2 = S.temp_Pressure_Val2 ;
 800ff34:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	4b14      	ldr	r3, [pc, #80]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800ff3c:	715a      	strb	r2, [r3, #5]
			_RESPOND_SERVICE_PACKET._RESULT = S.total_temp_Pressure_Val;
 800ff3e:	4b0d      	ldr	r3, [pc, #52]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <SERVICE_Expiratory_Valve+0x18c>)
 800ff46:	811a      	strh	r2, [r3, #8]
			S.Uart_Service=1;
 800ff48:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]
			vTaskDelay(20);
 800ff4e:	2014      	movs	r0, #20
 800ff50:	f00f fc8c 	bl	801f86c <vTaskDelay>
			S.Expiratory_Valve=0;
 800ff54:	4b07      	ldr	r3, [pc, #28]	; (800ff74 <SERVICE_Expiratory_Valve+0x174>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	761a      	strb	r2, [r3, #24]
			ExpValve_OPEN();
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	4a0a      	ldr	r2, [pc, #40]	; (800ff88 <SERVICE_Expiratory_Valve+0x188>)
 800ff60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff64:	6153      	str	r3, [r2, #20]
			vTaskSuspend(Service_Handler);
 800ff66:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <SERVICE_Expiratory_Valve+0x184>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f00f fcb2 	bl	801f8d4 <vTaskSuspend>
}
 800ff70:	bf00      	nop
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20016af8 	.word	0x20016af8
 800ff78:	40021000 	.word	0x40021000
 800ff7c:	40007400 	.word	0x40007400
 800ff80:	20016cfc 	.word	0x20016cfc
 800ff84:	200168c8 	.word	0x200168c8
 800ff88:	40020400 	.word	0x40020400
 800ff8c:	20016b54 	.word	0x20016b54

0800ff90 <SERVICE_Leak>:

void SERVICE_Leak()
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	af00      	add	r7, sp, #0
	    if(S.Leak_first_Test==1)
 800ff94:	4b63      	ldr	r3, [pc, #396]	; (8010124 <SERVICE_Leak+0x194>)
 800ff96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d12d      	bne.n	800fffa <SERVICE_Leak+0x6a>
		{
	    	ExpValve_CLOSE();
 800ff9e:	4b62      	ldr	r3, [pc, #392]	; (8010128 <SERVICE_Leak+0x198>)
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	4a61      	ldr	r2, [pc, #388]	; (8010128 <SERVICE_Leak+0x198>)
 800ffa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ffa8:	6153      	str	r3, [r2, #20]
		    Blower_ON();
 800ffaa:	4b60      	ldr	r3, [pc, #384]	; (801012c <SERVICE_Leak+0x19c>)
 800ffac:	695b      	ldr	r3, [r3, #20]
 800ffae:	4a5f      	ldr	r2, [pc, #380]	; (801012c <SERVICE_Leak+0x19c>)
 800ffb0:	f043 0320 	orr.w	r3, r3, #32
 800ffb4:	6153      	str	r3, [r2, #20]
			Blower_Signal(1500);
 800ffb6:	4b5e      	ldr	r3, [pc, #376]	; (8010130 <SERVICE_Leak+0x1a0>)
 800ffb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ffbc:	609a      	str	r2, [r3, #8]
			vTaskDelay(2000);
 800ffbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ffc2:	f00f fc53 	bl	801f86c <vTaskDelay>
			Blower_Signal(0);
 800ffc6:	4b5a      	ldr	r3, [pc, #360]	; (8010130 <SERVICE_Leak+0x1a0>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	609a      	str	r2, [r3, #8]
			vTaskDelay(2000);
 800ffcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ffd0:	f00f fc4c 	bl	801f86c <vTaskDelay>
			S.temp_Pressure_Val1=Pressure_sensor._Pressure_Val;
 800ffd4:	4b57      	ldr	r3, [pc, #348]	; (8010134 <SERVICE_Leak+0x1a4>)
 800ffd6:	791b      	ldrb	r3, [r3, #4]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4b52      	ldr	r3, [pc, #328]	; (8010124 <SERVICE_Leak+0x194>)
 800ffdc:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 800ffde:	4b52      	ldr	r3, [pc, #328]	; (8010128 <SERVICE_Leak+0x198>)
 800ffe0:	695b      	ldr	r3, [r3, #20]
 800ffe2:	4a51      	ldr	r2, [pc, #324]	; (8010128 <SERVICE_Leak+0x198>)
 800ffe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffe8:	6153      	str	r3, [r2, #20]
			vTaskDelay(1000);
 800ffea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ffee:	f00f fc3d 	bl	801f86c <vTaskDelay>
			S.Leak_first_Test=2;
 800fff2:	4b4c      	ldr	r3, [pc, #304]	; (8010124 <SERVICE_Leak+0x194>)
 800fff4:	2202      	movs	r2, #2
 800fff6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}
		if(S.Leak_first_Test==2)
 800fffa:	4b4a      	ldr	r3, [pc, #296]	; (8010124 <SERVICE_Leak+0x194>)
 800fffc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010000:	2b02      	cmp	r3, #2
 8010002:	d12f      	bne.n	8010064 <SERVICE_Leak+0xd4>
		{
			ExpValve_CLOSE();
 8010004:	4b48      	ldr	r3, [pc, #288]	; (8010128 <SERVICE_Leak+0x198>)
 8010006:	695b      	ldr	r3, [r3, #20]
 8010008:	4a47      	ldr	r2, [pc, #284]	; (8010128 <SERVICE_Leak+0x198>)
 801000a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801000e:	6153      	str	r3, [r2, #20]
			Blower_Signal(1500);
 8010010:	4b47      	ldr	r3, [pc, #284]	; (8010130 <SERVICE_Leak+0x1a0>)
 8010012:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010016:	609a      	str	r2, [r3, #8]
			vTaskDelay(2000);
 8010018:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801001c:	f00f fc26 	bl	801f86c <vTaskDelay>
			Blower_Signal(0);
 8010020:	4b43      	ldr	r3, [pc, #268]	; (8010130 <SERVICE_Leak+0x1a0>)
 8010022:	2200      	movs	r2, #0
 8010024:	609a      	str	r2, [r3, #8]
			vTaskDelay(4000);
 8010026:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 801002a:	f00f fc1f 	bl	801f86c <vTaskDelay>
			S.temp_Pressure_Val2=Pressure_sensor._Pressure_Val;
 801002e:	4b41      	ldr	r3, [pc, #260]	; (8010134 <SERVICE_Leak+0x1a4>)
 8010030:	791b      	ldrb	r3, [r3, #4]
 8010032:	461a      	mov	r2, r3
 8010034:	4b3b      	ldr	r3, [pc, #236]	; (8010124 <SERVICE_Leak+0x194>)
 8010036:	60da      	str	r2, [r3, #12]
			vTaskDelay(1000);
 8010038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801003c:	f00f fc16 	bl	801f86c <vTaskDelay>
			S.Leak_first_Test=0;
 8010040:	4b38      	ldr	r3, [pc, #224]	; (8010124 <SERVICE_Leak+0x194>)
 8010042:	2200      	movs	r2, #0
 8010044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			ExpValve_OPEN();
 8010048:	4b37      	ldr	r3, [pc, #220]	; (8010128 <SERVICE_Leak+0x198>)
 801004a:	695b      	ldr	r3, [r3, #20]
 801004c:	4a36      	ldr	r2, [pc, #216]	; (8010128 <SERVICE_Leak+0x198>)
 801004e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010052:	6153      	str	r3, [r2, #20]
			vTaskDelay(1000);
 8010054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010058:	f00f fc08 	bl	801f86c <vTaskDelay>
			S.Leak_first_Test=0;
 801005c:	4b31      	ldr	r3, [pc, #196]	; (8010124 <SERVICE_Leak+0x194>)
 801005e:	2200      	movs	r2, #0
 8010060:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}
		if(S.Leak_first_Test==0)
 8010064:	4b2f      	ldr	r3, [pc, #188]	; (8010124 <SERVICE_Leak+0x194>)
 8010066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801006a:	2b00      	cmp	r3, #0
 801006c:	d157      	bne.n	801011e <SERVICE_Leak+0x18e>
		{

			S.total_temp_Pressure_Val=S.temp_Pressure_Val1-S.temp_Pressure_Val2;
 801006e:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <SERVICE_Leak+0x194>)
 8010070:	689a      	ldr	r2, [r3, #8]
 8010072:	4b2c      	ldr	r3, [pc, #176]	; (8010124 <SERVICE_Leak+0x194>)
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	4a2a      	ldr	r2, [pc, #168]	; (8010124 <SERVICE_Leak+0x194>)
 801007a:	6113      	str	r3, [r2, #16]
			if(S.total_temp_Pressure_Val<=5)
 801007c:	4b29      	ldr	r3, [pc, #164]	; (8010124 <SERVICE_Leak+0x194>)
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	2b05      	cmp	r3, #5
 8010082:	dc26      	bgt.n	80100d2 <SERVICE_Leak+0x142>
			{
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 8010084:	4b2c      	ldr	r3, [pc, #176]	; (8010138 <SERVICE_Leak+0x1a8>)
 8010086:	2201      	movs	r2, #1
 8010088:	70da      	strb	r2, [r3, #3]
				_RESPOND_SERVICE_PACKET._PRESSURE1 = S.temp_Pressure_Val1 ;
 801008a:	4b26      	ldr	r3, [pc, #152]	; (8010124 <SERVICE_Leak+0x194>)
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	b2da      	uxtb	r2, r3
 8010090:	4b29      	ldr	r3, [pc, #164]	; (8010138 <SERVICE_Leak+0x1a8>)
 8010092:	711a      	strb	r2, [r3, #4]
				_RESPOND_SERVICE_PACKET._PRESSURE2 = S.temp_Pressure_Val2 ;
 8010094:	4b23      	ldr	r3, [pc, #140]	; (8010124 <SERVICE_Leak+0x194>)
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	b2da      	uxtb	r2, r3
 801009a:	4b27      	ldr	r3, [pc, #156]	; (8010138 <SERVICE_Leak+0x1a8>)
 801009c:	715a      	strb	r2, [r3, #5]
				_RESPOND_SERVICE_PACKET._RESULT = S.total_temp_Pressure_Val;
 801009e:	4b21      	ldr	r3, [pc, #132]	; (8010124 <SERVICE_Leak+0x194>)
 80100a0:	691b      	ldr	r3, [r3, #16]
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	4b24      	ldr	r3, [pc, #144]	; (8010138 <SERVICE_Leak+0x1a8>)
 80100a6:	811a      	strh	r2, [r3, #8]
				S.Uart_Service=1;
 80100a8:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <SERVICE_Leak+0x194>)
 80100aa:	2201      	movs	r2, #1
 80100ac:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 80100ae:	2014      	movs	r0, #20
 80100b0:	f00f fbdc 	bl	801f86c <vTaskDelay>
				S.Service_Leak=0;
 80100b4:	4b1b      	ldr	r3, [pc, #108]	; (8010124 <SERVICE_Leak+0x194>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	76da      	strb	r2, [r3, #27]
				ExpValve_OPEN();
 80100ba:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <SERVICE_Leak+0x198>)
 80100bc:	695b      	ldr	r3, [r3, #20]
 80100be:	4a1a      	ldr	r2, [pc, #104]	; (8010128 <SERVICE_Leak+0x198>)
 80100c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100c4:	6153      	str	r3, [r2, #20]
				vTaskSuspend(Service_Handler);
 80100c6:	4b1d      	ldr	r3, [pc, #116]	; (801013c <SERVICE_Leak+0x1ac>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f00f fc02 	bl	801f8d4 <vTaskSuspend>
				ExpValve_OPEN();
				vTaskSuspend(Service_Handler);
			}
		}

}
 80100d0:	e025      	b.n	801011e <SERVICE_Leak+0x18e>
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00 ;
 80100d2:	4b19      	ldr	r3, [pc, #100]	; (8010138 <SERVICE_Leak+0x1a8>)
 80100d4:	2200      	movs	r2, #0
 80100d6:	70da      	strb	r2, [r3, #3]
				_RESPOND_SERVICE_PACKET._PRESSURE1 = S.temp_Pressure_Val1 ;
 80100d8:	4b12      	ldr	r3, [pc, #72]	; (8010124 <SERVICE_Leak+0x194>)
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	4b16      	ldr	r3, [pc, #88]	; (8010138 <SERVICE_Leak+0x1a8>)
 80100e0:	711a      	strb	r2, [r3, #4]
				_RESPOND_SERVICE_PACKET._PRESSURE2 = S.temp_Pressure_Val2 ;
 80100e2:	4b10      	ldr	r3, [pc, #64]	; (8010124 <SERVICE_Leak+0x194>)
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	4b13      	ldr	r3, [pc, #76]	; (8010138 <SERVICE_Leak+0x1a8>)
 80100ea:	715a      	strb	r2, [r3, #5]
				_RESPOND_SERVICE_PACKET._RESULT = S.total_temp_Pressure_Val;
 80100ec:	4b0d      	ldr	r3, [pc, #52]	; (8010124 <SERVICE_Leak+0x194>)
 80100ee:	691b      	ldr	r3, [r3, #16]
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	4b11      	ldr	r3, [pc, #68]	; (8010138 <SERVICE_Leak+0x1a8>)
 80100f4:	811a      	strh	r2, [r3, #8]
				S.Uart_Service=1;
 80100f6:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <SERVICE_Leak+0x194>)
 80100f8:	2201      	movs	r2, #1
 80100fa:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 80100fc:	2014      	movs	r0, #20
 80100fe:	f00f fbb5 	bl	801f86c <vTaskDelay>
				S.Service_Leak=0;
 8010102:	4b08      	ldr	r3, [pc, #32]	; (8010124 <SERVICE_Leak+0x194>)
 8010104:	2200      	movs	r2, #0
 8010106:	76da      	strb	r2, [r3, #27]
				ExpValve_OPEN();
 8010108:	4b07      	ldr	r3, [pc, #28]	; (8010128 <SERVICE_Leak+0x198>)
 801010a:	695b      	ldr	r3, [r3, #20]
 801010c:	4a06      	ldr	r2, [pc, #24]	; (8010128 <SERVICE_Leak+0x198>)
 801010e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010112:	6153      	str	r3, [r2, #20]
				vTaskSuspend(Service_Handler);
 8010114:	4b09      	ldr	r3, [pc, #36]	; (801013c <SERVICE_Leak+0x1ac>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	f00f fbdb 	bl	801f8d4 <vTaskSuspend>
}
 801011e:	bf00      	nop
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	20016af8 	.word	0x20016af8
 8010128:	40020400 	.word	0x40020400
 801012c:	40021000 	.word	0x40021000
 8010130:	40007400 	.word	0x40007400
 8010134:	20016cfc 	.word	0x20016cfc
 8010138:	20016b54 	.word	0x20016b54
 801013c:	200168c8 	.word	0x200168c8

08010140 <SERVICE_Servo>:
void SERVICE_Servo()
{
 8010140:	b580      	push	{r7, lr}
 8010142:	af00      	add	r7, sp, #0
	if(S.servo_step_one==1)
 8010144:	4b47      	ldr	r3, [pc, #284]	; (8010264 <SERVICE_Servo+0x124>)
 8010146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801014a:	2b01      	cmp	r3, #1
 801014c:	d120      	bne.n	8010190 <SERVICE_Servo+0x50>
	{
		TIM12->CCR1=90;
 801014e:	4b46      	ldr	r3, [pc, #280]	; (8010268 <SERVICE_Servo+0x128>)
 8010150:	225a      	movs	r2, #90	; 0x5a
 8010152:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(2000);
 8010154:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010158:	f00f fb88 	bl	801f86c <vTaskDelay>
		TIM12->CCR1=65;
 801015c:	4b42      	ldr	r3, [pc, #264]	; (8010268 <SERVICE_Servo+0x128>)
 801015e:	2241      	movs	r2, #65	; 0x41
 8010160:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(2000);
 8010162:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010166:	f00f fb81 	bl	801f86c <vTaskDelay>
		TIM12->CCR1=45;
 801016a:	4b3f      	ldr	r3, [pc, #252]	; (8010268 <SERVICE_Servo+0x128>)
 801016c:	222d      	movs	r2, #45	; 0x2d
 801016e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(2000);
 8010170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010174:	f00f fb7a 	bl	801f86c <vTaskDelay>
		TIM12->CCR1=90;
 8010178:	4b3b      	ldr	r3, [pc, #236]	; (8010268 <SERVICE_Servo+0x128>)
 801017a:	225a      	movs	r2, #90	; 0x5a
 801017c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(2000);
 801017e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010182:	f00f fb73 	bl	801f86c <vTaskDelay>
		S.servo_step_one=0;
 8010186:	4b37      	ldr	r3, [pc, #220]	; (8010264 <SERVICE_Servo+0x124>)
 8010188:	2200      	movs	r2, #0
 801018a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    			S.Servo=0;
    			vTaskSuspend(Service_Handler);
    		 }

    }
}
 801018e:	e066      	b.n	801025e <SERVICE_Servo+0x11e>
             if(Pressure_sensor._Pressure_Val<20)
 8010190:	4b36      	ldr	r3, [pc, #216]	; (801026c <SERVICE_Servo+0x12c>)
 8010192:	791b      	ldrb	r3, [r3, #4]
 8010194:	2b13      	cmp	r3, #19
 8010196:	d815      	bhi.n	80101c4 <SERVICE_Servo+0x84>
    			S.error_count++;
 8010198:	4b32      	ldr	r3, [pc, #200]	; (8010264 <SERVICE_Servo+0x124>)
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	3301      	adds	r3, #1
 801019e:	4a31      	ldr	r2, [pc, #196]	; (8010264 <SERVICE_Servo+0x124>)
 80101a0:	6053      	str	r3, [r2, #4]
    			Blower_ON();
 80101a2:	4b33      	ldr	r3, [pc, #204]	; (8010270 <SERVICE_Servo+0x130>)
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	4a32      	ldr	r2, [pc, #200]	; (8010270 <SERVICE_Servo+0x130>)
 80101a8:	f043 0320 	orr.w	r3, r3, #32
 80101ac:	6153      	str	r3, [r2, #20]
    			ExpValve_CLOSE();
 80101ae:	4b31      	ldr	r3, [pc, #196]	; (8010274 <SERVICE_Servo+0x134>)
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	4a30      	ldr	r2, [pc, #192]	; (8010274 <SERVICE_Servo+0x134>)
 80101b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80101b8:	6153      	str	r3, [r2, #20]
    			Blower_Signal(1800);
 80101ba:	4b2f      	ldr	r3, [pc, #188]	; (8010278 <SERVICE_Servo+0x138>)
 80101bc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80101c0:	609a      	str	r2, [r3, #8]
 80101c2:	e023      	b.n	801020c <SERVICE_Servo+0xcc>
    			TIM12->CCR1=45;
 80101c4:	4b28      	ldr	r3, [pc, #160]	; (8010268 <SERVICE_Servo+0x128>)
 80101c6:	222d      	movs	r2, #45	; 0x2d
 80101c8:	635a      	str	r2, [r3, #52]	; 0x34
    			Blower_Signal(0);
 80101ca:	4b2b      	ldr	r3, [pc, #172]	; (8010278 <SERVICE_Servo+0x138>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	609a      	str	r2, [r3, #8]
    			ExpValve_OPEN();
 80101d0:	4b28      	ldr	r3, [pc, #160]	; (8010274 <SERVICE_Servo+0x134>)
 80101d2:	695b      	ldr	r3, [r3, #20]
 80101d4:	4a27      	ldr	r2, [pc, #156]	; (8010274 <SERVICE_Servo+0x134>)
 80101d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101da:	6153      	str	r3, [r2, #20]
    			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00 ;
 80101dc:	4b27      	ldr	r3, [pc, #156]	; (801027c <SERVICE_Servo+0x13c>)
 80101de:	2200      	movs	r2, #0
 80101e0:	70da      	strb	r2, [r3, #3]
    			_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 80101e2:	4b22      	ldr	r3, [pc, #136]	; (801026c <SERVICE_Servo+0x12c>)
 80101e4:	791a      	ldrb	r2, [r3, #4]
 80101e6:	4b25      	ldr	r3, [pc, #148]	; (801027c <SERVICE_Servo+0x13c>)
 80101e8:	711a      	strb	r2, [r3, #4]
    			S.Uart_Service=1;
 80101ea:	4b1e      	ldr	r3, [pc, #120]	; (8010264 <SERVICE_Servo+0x124>)
 80101ec:	2201      	movs	r2, #1
 80101ee:	601a      	str	r2, [r3, #0]
    			vTaskDelay(20);
 80101f0:	2014      	movs	r0, #20
 80101f2:	f00f fb3b 	bl	801f86c <vTaskDelay>
    			S.error_count=0;
 80101f6:	4b1b      	ldr	r3, [pc, #108]	; (8010264 <SERVICE_Servo+0x124>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	605a      	str	r2, [r3, #4]
    			S.Servo=0;
 80101fc:	4b19      	ldr	r3, [pc, #100]	; (8010264 <SERVICE_Servo+0x124>)
 80101fe:	2200      	movs	r2, #0
 8010200:	771a      	strb	r2, [r3, #28]
    			vTaskSuspend(Service_Handler);
 8010202:	4b1f      	ldr	r3, [pc, #124]	; (8010280 <SERVICE_Servo+0x140>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4618      	mov	r0, r3
 8010208:	f00f fb64 	bl	801f8d4 <vTaskSuspend>
    		 if(S.error_count>4000)
 801020c:	4b15      	ldr	r3, [pc, #84]	; (8010264 <SERVICE_Servo+0x124>)
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8010214:	dd23      	ble.n	801025e <SERVICE_Servo+0x11e>
    			TIM12->CCR1=45;
 8010216:	4b14      	ldr	r3, [pc, #80]	; (8010268 <SERVICE_Servo+0x128>)
 8010218:	222d      	movs	r2, #45	; 0x2d
 801021a:	635a      	str	r2, [r3, #52]	; 0x34
    			Blower_Signal(0);
 801021c:	4b16      	ldr	r3, [pc, #88]	; (8010278 <SERVICE_Servo+0x138>)
 801021e:	2200      	movs	r2, #0
 8010220:	609a      	str	r2, [r3, #8]
    			ExpValve_OPEN();
 8010222:	4b14      	ldr	r3, [pc, #80]	; (8010274 <SERVICE_Servo+0x134>)
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	4a13      	ldr	r2, [pc, #76]	; (8010274 <SERVICE_Servo+0x134>)
 8010228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801022c:	6153      	str	r3, [r2, #20]
    			_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 801022e:	4b13      	ldr	r3, [pc, #76]	; (801027c <SERVICE_Servo+0x13c>)
 8010230:	2201      	movs	r2, #1
 8010232:	70da      	strb	r2, [r3, #3]
    			_RESPOND_SERVICE_PACKET._PRESSURE1 =Pressure_sensor._Pressure_Val ;
 8010234:	4b0d      	ldr	r3, [pc, #52]	; (801026c <SERVICE_Servo+0x12c>)
 8010236:	791a      	ldrb	r2, [r3, #4]
 8010238:	4b10      	ldr	r3, [pc, #64]	; (801027c <SERVICE_Servo+0x13c>)
 801023a:	711a      	strb	r2, [r3, #4]
    			S.Uart_Service=1;
 801023c:	4b09      	ldr	r3, [pc, #36]	; (8010264 <SERVICE_Servo+0x124>)
 801023e:	2201      	movs	r2, #1
 8010240:	601a      	str	r2, [r3, #0]
    			vTaskDelay(20);
 8010242:	2014      	movs	r0, #20
 8010244:	f00f fb12 	bl	801f86c <vTaskDelay>
    			S.error_count=0;
 8010248:	4b06      	ldr	r3, [pc, #24]	; (8010264 <SERVICE_Servo+0x124>)
 801024a:	2200      	movs	r2, #0
 801024c:	605a      	str	r2, [r3, #4]
    			S.Servo=0;
 801024e:	4b05      	ldr	r3, [pc, #20]	; (8010264 <SERVICE_Servo+0x124>)
 8010250:	2200      	movs	r2, #0
 8010252:	771a      	strb	r2, [r3, #28]
    			vTaskSuspend(Service_Handler);
 8010254:	4b0a      	ldr	r3, [pc, #40]	; (8010280 <SERVICE_Servo+0x140>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4618      	mov	r0, r3
 801025a:	f00f fb3b 	bl	801f8d4 <vTaskSuspend>
}
 801025e:	bf00      	nop
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	20016af8 	.word	0x20016af8
 8010268:	40001800 	.word	0x40001800
 801026c:	20016cfc 	.word	0x20016cfc
 8010270:	40021000 	.word	0x40021000
 8010274:	40020400 	.word	0x40020400
 8010278:	40007400 	.word	0x40007400
 801027c:	20016b54 	.word	0x20016b54
 8010280:	200168c8 	.word	0x200168c8
 8010284:	00000000 	.word	0x00000000

08010288 <SERVICE_O2>:

void SERVICE_O2()
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
	TIM12->CCR1=90;
 801028e:	4b6a      	ldr	r3, [pc, #424]	; (8010438 <SERVICE_O2+0x1b0>)
 8010290:	225a      	movs	r2, #90	; 0x5a
 8010292:	635a      	str	r2, [r3, #52]	; 0x34
    if(S.O2_Acheived_Count<5)
 8010294:	4b69      	ldr	r3, [pc, #420]	; (801043c <SERVICE_O2+0x1b4>)
 8010296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010298:	2b04      	cmp	r3, #4
 801029a:	f200 8093 	bhi.w	80103c4 <SERVICE_O2+0x13c>
    {
		O2_Flow_Func();
 801029e:	f7fa fc89 	bl	800abb4 <O2_Flow_Func>
		if(O2_F.O2_kpa>5)
 80102a2:	4b67      	ldr	r3, [pc, #412]	; (8010440 <SERVICE_O2+0x1b8>)
 80102a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80102a8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80102ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b4:	dd17      	ble.n	80102e6 <SERVICE_O2+0x5e>
		{
			Blower_Signal(0);
 80102b6:	4b63      	ldr	r3, [pc, #396]	; (8010444 <SERVICE_O2+0x1bc>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(0);
 80102bc:	4b61      	ldr	r3, [pc, #388]	; (8010444 <SERVICE_O2+0x1bc>)
 80102be:	2200      	movs	r2, #0
 80102c0:	615a      	str	r2, [r3, #20]
			O2_F.O2_kpa=0;
 80102c2:	4b5f      	ldr	r3, [pc, #380]	; (8010440 <SERVICE_O2+0x1b8>)
 80102c4:	f04f 0200 	mov.w	r2, #0
 80102c8:	62da      	str	r2, [r3, #44]	; 0x2c
			S.error_count=0;
 80102ca:	4b5c      	ldr	r3, [pc, #368]	; (801043c <SERVICE_O2+0x1b4>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	605a      	str	r2, [r3, #4]
			S.O2_Acheived_Count++;
 80102d0:	4b5a      	ldr	r3, [pc, #360]	; (801043c <SERVICE_O2+0x1b4>)
 80102d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80102d4:	3301      	adds	r3, #1
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	4b58      	ldr	r3, [pc, #352]	; (801043c <SERVICE_O2+0x1b4>)
 80102da:	85da      	strh	r2, [r3, #46]	; 0x2e
			vTaskDelay(1000);
 80102dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80102e0:	f00f fac4 	bl	801f86c <vTaskDelay>
    	TIM12->CCR1=45;
    	S.O2=0;
    	vTaskSuspend(Service_Handler);
    }

}
 80102e4:	e09e      	b.n	8010424 <SERVICE_O2+0x19c>
			O2._AVG_CirusO2Sensor = (AdcData[1] * 3300) / 4095;
 80102e6:	4b58      	ldr	r3, [pc, #352]	; (8010448 <SERVICE_O2+0x1c0>)
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	461a      	mov	r2, r3
 80102ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80102f0:	fb03 f302 	mul.w	r3, r3, r2
 80102f4:	4a55      	ldr	r2, [pc, #340]	; (801044c <SERVICE_O2+0x1c4>)
 80102f6:	fb82 1203 	smull	r1, r2, r2, r3
 80102fa:	441a      	add	r2, r3
 80102fc:	12d2      	asrs	r2, r2, #11
 80102fe:	17db      	asrs	r3, r3, #31
 8010300:	1ad3      	subs	r3, r2, r3
 8010302:	ee07 3a90 	vmov	s15, r3
 8010306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801030a:	4b51      	ldr	r3, [pc, #324]	; (8010450 <SERVICE_O2+0x1c8>)
 801030c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			O2.O2_percentage_float=(O2._AVG_CirusO2Sensor/7.57);
 8010310:	4b4f      	ldr	r3, [pc, #316]	; (8010450 <SERVICE_O2+0x1c8>)
 8010312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010314:	4618      	mov	r0, r3
 8010316:	f7f0 f8bf 	bl	8000498 <__aeabi_f2d>
 801031a:	a345      	add	r3, pc, #276	; (adr r3, 8010430 <SERVICE_O2+0x1a8>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	f7f0 fa3c 	bl	800079c <__aeabi_ddiv>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4610      	mov	r0, r2
 801032a:	4619      	mov	r1, r3
 801032c:	f7f0 fbee 	bl	8000b0c <__aeabi_d2f>
 8010330:	4603      	mov	r3, r0
 8010332:	4a47      	ldr	r2, [pc, #284]	; (8010450 <SERVICE_O2+0x1c8>)
 8010334:	6213      	str	r3, [r2, #32]
			O2.O2_percentage=(int)O2.O2_percentage_float;
 8010336:	4b46      	ldr	r3, [pc, #280]	; (8010450 <SERVICE_O2+0x1c8>)
 8010338:	edd3 7a08 	vldr	s15, [r3, #32]
 801033c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010340:	edc7 7a01 	vstr	s15, [r7, #4]
 8010344:	793a      	ldrb	r2, [r7, #4]
 8010346:	4b42      	ldr	r3, [pc, #264]	; (8010450 <SERVICE_O2+0x1c8>)
 8010348:	741a      	strb	r2, [r3, #16]
			Blower_Signal(2000);
 801034a:	4b3e      	ldr	r3, [pc, #248]	; (8010444 <SERVICE_O2+0x1bc>)
 801034c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010350:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(2800);
 8010352:	4b3c      	ldr	r3, [pc, #240]	; (8010444 <SERVICE_O2+0x1bc>)
 8010354:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8010358:	615a      	str	r2, [r3, #20]
			S.error_count++;
 801035a:	4b38      	ldr	r3, [pc, #224]	; (801043c <SERVICE_O2+0x1b4>)
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	3301      	adds	r3, #1
 8010360:	4a36      	ldr	r2, [pc, #216]	; (801043c <SERVICE_O2+0x1b4>)
 8010362:	6053      	str	r3, [r2, #4]
			if(S.error_count>5000)
 8010364:	4b35      	ldr	r3, [pc, #212]	; (801043c <SERVICE_O2+0x1b4>)
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	f241 3288 	movw	r2, #5000	; 0x1388
 801036c:	4293      	cmp	r3, r2
 801036e:	dd59      	ble.n	8010424 <SERVICE_O2+0x19c>
				_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x00 ;
 8010370:	4b38      	ldr	r3, [pc, #224]	; (8010454 <SERVICE_O2+0x1cc>)
 8010372:	2200      	movs	r2, #0
 8010374:	70da      	strb	r2, [r3, #3]
			    _RESPOND_SERVICE_PACKET._FLOW =O2_F.O2_kpa ;
 8010376:	4b32      	ldr	r3, [pc, #200]	; (8010440 <SERVICE_O2+0x1b8>)
 8010378:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801037c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010380:	edc7 7a01 	vstr	s15, [r7, #4]
 8010384:	793b      	ldrb	r3, [r7, #4]
 8010386:	b2da      	uxtb	r2, r3
 8010388:	4b32      	ldr	r3, [pc, #200]	; (8010454 <SERVICE_O2+0x1cc>)
 801038a:	719a      	strb	r2, [r3, #6]
			    _RESPOND_SERVICE_PACKET._O2_PERCENTAGE=O2.O2_percentage;
 801038c:	4b30      	ldr	r3, [pc, #192]	; (8010450 <SERVICE_O2+0x1c8>)
 801038e:	7c1a      	ldrb	r2, [r3, #16]
 8010390:	4b30      	ldr	r3, [pc, #192]	; (8010454 <SERVICE_O2+0x1cc>)
 8010392:	71da      	strb	r2, [r3, #7]
				S.Uart_Service=1;
 8010394:	4b29      	ldr	r3, [pc, #164]	; (801043c <SERVICE_O2+0x1b4>)
 8010396:	2201      	movs	r2, #1
 8010398:	601a      	str	r2, [r3, #0]
				vTaskDelay(20);
 801039a:	2014      	movs	r0, #20
 801039c:	f00f fa66 	bl	801f86c <vTaskDelay>
				S.error_count=0;
 80103a0:	4b26      	ldr	r3, [pc, #152]	; (801043c <SERVICE_O2+0x1b4>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	605a      	str	r2, [r3, #4]
				S.O2_Acheived_Count=0;
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <SERVICE_O2+0x1b4>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	85da      	strh	r2, [r3, #46]	; 0x2e
				TIM12->CCR1=45;
 80103ac:	4b22      	ldr	r3, [pc, #136]	; (8010438 <SERVICE_O2+0x1b0>)
 80103ae:	222d      	movs	r2, #45	; 0x2d
 80103b0:	635a      	str	r2, [r3, #52]	; 0x34
				S.O2=0;
 80103b2:	4b22      	ldr	r3, [pc, #136]	; (801043c <SERVICE_O2+0x1b4>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	775a      	strb	r2, [r3, #29]
				vTaskSuspend(Service_Handler);
 80103b8:	4b27      	ldr	r3, [pc, #156]	; (8010458 <SERVICE_O2+0x1d0>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4618      	mov	r0, r3
 80103be:	f00f fa89 	bl	801f8d4 <vTaskSuspend>
}
 80103c2:	e02f      	b.n	8010424 <SERVICE_O2+0x19c>
    else if(S.O2_Acheived_Count>=5)
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <SERVICE_O2+0x1b4>)
 80103c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d92b      	bls.n	8010424 <SERVICE_O2+0x19c>
    	TIM12->CCR1=45;
 80103cc:	4b1a      	ldr	r3, [pc, #104]	; (8010438 <SERVICE_O2+0x1b0>)
 80103ce:	222d      	movs	r2, #45	; 0x2d
 80103d0:	635a      	str	r2, [r3, #52]	; 0x34
    	_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 80103d2:	4b20      	ldr	r3, [pc, #128]	; (8010454 <SERVICE_O2+0x1cc>)
 80103d4:	2201      	movs	r2, #1
 80103d6:	70da      	strb	r2, [r3, #3]
    	_RESPOND_SERVICE_PACKET._FLOW =O2_F.O2_kpa ;
 80103d8:	4b19      	ldr	r3, [pc, #100]	; (8010440 <SERVICE_O2+0x1b8>)
 80103da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80103de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80103e6:	793b      	ldrb	r3, [r7, #4]
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	4b1a      	ldr	r3, [pc, #104]	; (8010454 <SERVICE_O2+0x1cc>)
 80103ec:	719a      	strb	r2, [r3, #6]
    	_RESPOND_SERVICE_PACKET._O2_PERCENTAGE=O2.O2_percentage;
 80103ee:	4b18      	ldr	r3, [pc, #96]	; (8010450 <SERVICE_O2+0x1c8>)
 80103f0:	7c1a      	ldrb	r2, [r3, #16]
 80103f2:	4b18      	ldr	r3, [pc, #96]	; (8010454 <SERVICE_O2+0x1cc>)
 80103f4:	71da      	strb	r2, [r3, #7]
    	S.Uart_Service=1;
 80103f6:	4b11      	ldr	r3, [pc, #68]	; (801043c <SERVICE_O2+0x1b4>)
 80103f8:	2201      	movs	r2, #1
 80103fa:	601a      	str	r2, [r3, #0]
    	vTaskDelay(20);
 80103fc:	2014      	movs	r0, #20
 80103fe:	f00f fa35 	bl	801f86c <vTaskDelay>
    	S.error_count=0;
 8010402:	4b0e      	ldr	r3, [pc, #56]	; (801043c <SERVICE_O2+0x1b4>)
 8010404:	2200      	movs	r2, #0
 8010406:	605a      	str	r2, [r3, #4]
    	S.O2_Acheived_Count=0;
 8010408:	4b0c      	ldr	r3, [pc, #48]	; (801043c <SERVICE_O2+0x1b4>)
 801040a:	2200      	movs	r2, #0
 801040c:	85da      	strh	r2, [r3, #46]	; 0x2e
    	TIM12->CCR1=45;
 801040e:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <SERVICE_O2+0x1b0>)
 8010410:	222d      	movs	r2, #45	; 0x2d
 8010412:	635a      	str	r2, [r3, #52]	; 0x34
    	S.O2=0;
 8010414:	4b09      	ldr	r3, [pc, #36]	; (801043c <SERVICE_O2+0x1b4>)
 8010416:	2200      	movs	r2, #0
 8010418:	775a      	strb	r2, [r3, #29]
    	vTaskSuspend(Service_Handler);
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <SERVICE_O2+0x1d0>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4618      	mov	r0, r3
 8010420:	f00f fa58 	bl	801f8d4 <vTaskSuspend>
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	f3af 8000 	nop.w
 8010430:	147ae148 	.word	0x147ae148
 8010434:	401e47ae 	.word	0x401e47ae
 8010438:	40001800 	.word	0x40001800
 801043c:	20016af8 	.word	0x20016af8
 8010440:	200168cc 	.word	0x200168cc
 8010444:	40007400 	.word	0x40007400
 8010448:	20016bbc 	.word	0x20016bbc
 801044c:	80080081 	.word	0x80080081
 8010450:	20000048 	.word	0x20000048
 8010454:	20016b54 	.word	0x20016b54
 8010458:	200168c8 	.word	0x200168c8

0801045c <SERVICE_Nebuliser>:

void SERVICE_Nebuliser()
{
 801045c:	b580      	push	{r7, lr}
 801045e:	af00      	add	r7, sp, #0
	Nebuliser_ON();
 8010460:	4b27      	ldr	r3, [pc, #156]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 8010462:	695b      	ldr	r3, [r3, #20]
 8010464:	4a26      	ldr	r2, [pc, #152]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 8010466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801046a:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 801046c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010470:	f00f f9fc 	bl	801f86c <vTaskDelay>
	Nebuliser_OFF();
 8010474:	4b22      	ldr	r3, [pc, #136]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 8010476:	695b      	ldr	r3, [r3, #20]
 8010478:	4a21      	ldr	r2, [pc, #132]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 801047a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801047e:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 8010480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010484:	f00f f9f2 	bl	801f86c <vTaskDelay>
	Nebuliser_ON();
 8010488:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 801048a:	695b      	ldr	r3, [r3, #20]
 801048c:	4a1c      	ldr	r2, [pc, #112]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 801048e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010492:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 8010494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010498:	f00f f9e8 	bl	801f86c <vTaskDelay>
	Nebuliser_OFF();
 801049c:	4b18      	ldr	r3, [pc, #96]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	4a17      	ldr	r2, [pc, #92]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 80104a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80104a6:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 80104a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104ac:	f00f f9de 	bl	801f86c <vTaskDelay>
	Nebuliser_ON();
 80104b0:	4b13      	ldr	r3, [pc, #76]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	4a12      	ldr	r2, [pc, #72]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 80104b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ba:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 80104bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104c0:	f00f f9d4 	bl	801f86c <vTaskDelay>
	Nebuliser_OFF();
 80104c4:	4b0e      	ldr	r3, [pc, #56]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	4a0d      	ldr	r2, [pc, #52]	; (8010500 <SERVICE_Nebuliser+0xa4>)
 80104ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80104ce:	6153      	str	r3, [r2, #20]
	vTaskDelay(1000);
 80104d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80104d4:	f00f f9ca 	bl	801f86c <vTaskDelay>
	_RESPOND_SERVICE_PACKET._REPORT0_FLAGS = 0x01 ;
 80104d8:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <SERVICE_Nebuliser+0xa8>)
 80104da:	2201      	movs	r2, #1
 80104dc:	70da      	strb	r2, [r3, #3]
	S.Uart_Service=1;
 80104de:	4b0a      	ldr	r3, [pc, #40]	; (8010508 <SERVICE_Nebuliser+0xac>)
 80104e0:	2201      	movs	r2, #1
 80104e2:	601a      	str	r2, [r3, #0]
	vTaskDelay(20);
 80104e4:	2014      	movs	r0, #20
 80104e6:	f00f f9c1 	bl	801f86c <vTaskDelay>
	S.Nebuliser=0;
 80104ea:	4b07      	ldr	r3, [pc, #28]	; (8010508 <SERVICE_Nebuliser+0xac>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	779a      	strb	r2, [r3, #30]
	vTaskSuspend(Service_Handler);
 80104f0:	4b06      	ldr	r3, [pc, #24]	; (801050c <SERVICE_Nebuliser+0xb0>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f00f f9ed 	bl	801f8d4 <vTaskSuspend>
}
 80104fa:	bf00      	nop
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	40020400 	.word	0x40020400
 8010504:	20016b54 	.word	0x20016b54
 8010508:	20016af8 	.word	0x20016af8
 801050c:	200168c8 	.word	0x200168c8

08010510 <UART6_Init>:
extern uint8_t new_Breath;

int arrangecount;

void UART6_Init()
{
 8010510:	b580      	push	{r7, lr}
 8010512:	af00      	add	r7, sp, #0
	huart6.Instance = USART6;
 8010514:	4b11      	ldr	r3, [pc, #68]	; (801055c <UART6_Init+0x4c>)
 8010516:	4a12      	ldr	r2, [pc, #72]	; (8010560 <UART6_Init+0x50>)
 8010518:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 57600;
 801051a:	4b10      	ldr	r3, [pc, #64]	; (801055c <UART6_Init+0x4c>)
 801051c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8010520:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8010522:	4b0e      	ldr	r3, [pc, #56]	; (801055c <UART6_Init+0x4c>)
 8010524:	2200      	movs	r2, #0
 8010526:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8010528:	4b0c      	ldr	r3, [pc, #48]	; (801055c <UART6_Init+0x4c>)
 801052a:	2200      	movs	r2, #0
 801052c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 801052e:	4b0b      	ldr	r3, [pc, #44]	; (801055c <UART6_Init+0x4c>)
 8010530:	2200      	movs	r2, #0
 8010532:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8010534:	4b09      	ldr	r3, [pc, #36]	; (801055c <UART6_Init+0x4c>)
 8010536:	220c      	movs	r2, #12
 8010538:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801053a:	4b08      	ldr	r3, [pc, #32]	; (801055c <UART6_Init+0x4c>)
 801053c:	2200      	movs	r2, #0
 801053e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8010540:	4b06      	ldr	r3, [pc, #24]	; (801055c <UART6_Init+0x4c>)
 8010542:	2200      	movs	r2, #0
 8010544:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8010546:	4805      	ldr	r0, [pc, #20]	; (801055c <UART6_Init+0x4c>)
 8010548:	f00a f97f 	bl	801a84a <HAL_UART_Init>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <UART6_Init+0x46>
	{
		Error_Handler();
 8010552:	f004 f8e3 	bl	801471c <Error_Handler>
	}
}
 8010556:	bf00      	nop
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20016dac 	.word	0x20016dac
 8010560:	40011400 	.word	0x40011400

08010564 <Uart_Transmit_Task>:
	   Error_Handler();
	 }
}

void Uart_Transmit_Task (void *argument)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
	while (1)
	{

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);

	  if(T==2)
 801056c:	4b4a      	ldr	r3, [pc, #296]	; (8010698 <Uart_Transmit_Task+0x134>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b02      	cmp	r3, #2
 8010572:	d16d      	bne.n	8010650 <Uart_Transmit_Task+0xec>
	  {

		if(N._READ_SENSOR_OFFSET == 1)
 8010574:	4b49      	ldr	r3, [pc, #292]	; (801069c <Uart_Transmit_Task+0x138>)
 8010576:	7a9b      	ldrb	r3, [r3, #10]
 8010578:	2b01      	cmp	r3, #1
 801057a:	f000 8086 	beq.w	801068a <Uart_Transmit_Task+0x126>
     	{

		}

		else if(C.Uart_Calib==1)
 801057e:	4b48      	ldr	r3, [pc, #288]	; (80106a0 <Uart_Transmit_Task+0x13c>)
 8010580:	79db      	ldrb	r3, [r3, #7]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d102      	bne.n	801058c <Uart_Transmit_Task+0x28>
		{
			SEND_REPORT_PACKET();
 8010586:	f7f7 fc53 	bl	8007e30 <SEND_REPORT_PACKET>
 801058a:	e07e      	b.n	801068a <Uart_Transmit_Task+0x126>
		}
		else if(S.Uart_Service==1)
 801058c:	4b45      	ldr	r3, [pc, #276]	; (80106a4 <Uart_Transmit_Task+0x140>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d102      	bne.n	801059a <Uart_Transmit_Task+0x36>
		{
			SEND_SERVICE_PACKET();
 8010594:	f7ff f9a4 	bl	800f8e0 <SEND_SERVICE_PACKET>
 8010598:	e077      	b.n	801068a <Uart_Transmit_Task+0x126>
		}
		else if(C.Uart_Calib==0 && S.Uart_Service==0)
 801059a:	4b41      	ldr	r3, [pc, #260]	; (80106a0 <Uart_Transmit_Task+0x13c>)
 801059c:	79db      	ldrb	r3, [r3, #7]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d173      	bne.n	801068a <Uart_Transmit_Task+0x126>
 80105a2:	4b40      	ldr	r3, [pc, #256]	; (80106a4 <Uart_Transmit_Task+0x140>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d16f      	bne.n	801068a <Uart_Transmit_Task+0x126>
		{
			if(A.Alert_Now==0)
 80105aa:	4b3f      	ldr	r3, [pc, #252]	; (80106a8 <Uart_Transmit_Task+0x144>)
 80105ac:	78db      	ldrb	r3, [r3, #3]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d102      	bne.n	80105b8 <Uart_Transmit_Task+0x54>
			{
				UART_Transmit();
 80105b2:	f000 f915 	bl	80107e0 <UART_Transmit>
 80105b6:	e068      	b.n	801068a <Uart_Transmit_Task+0x126>
			}
			else if(A.Alert_Now==1)
 80105b8:	4b3b      	ldr	r3, [pc, #236]	; (80106a8 <Uart_Transmit_Task+0x144>)
 80105ba:	78db      	ldrb	r3, [r3, #3]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d164      	bne.n	801068a <Uart_Transmit_Task+0x126>
			{
				if(A.Apnea_UART_alert==1)
 80105c0:	4b39      	ldr	r3, [pc, #228]	; (80106a8 <Uart_Transmit_Task+0x144>)
 80105c2:	791b      	ldrb	r3, [r3, #4]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d10a      	bne.n	80105de <Uart_Transmit_Task+0x7a>
				{
					SEND_ALERT_PACKET();
 80105c8:	f7f1 fb5e 	bl	8001c88 <SEND_ALERT_PACKET>
					CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_APNEA);
 80105cc:	4a37      	ldr	r2, [pc, #220]	; (80106ac <Uart_Transmit_Task+0x148>)
 80105ce:	78d3      	ldrb	r3, [r2, #3]
 80105d0:	f36f 1345 	bfc	r3, #5, #1
 80105d4:	70d3      	strb	r3, [r2, #3]
					A.Apnea_UART_alert=0;
 80105d6:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <Uart_Transmit_Task+0x144>)
 80105d8:	2200      	movs	r2, #0
 80105da:	711a      	strb	r2, [r3, #4]
 80105dc:	e034      	b.n	8010648 <Uart_Transmit_Task+0xe4>
				}


				else if (S1._Mode_Val == 1  || S1._Mode_Val == 2 || S1._Mode_Val == 3 || S1._Mode_Val == 4 || _CurrentBackupMode == VCCMV_BACKUP ||_CurrentBackupMode == PCCMV_BACKUP  || _CurrentMode == 6 || _CurrentMode == 7 || _CurrentMode == 8 ||_CurrentMode == 5)
 80105de:	4b34      	ldr	r3, [pc, #208]	; (80106b0 <Uart_Transmit_Task+0x14c>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d023      	beq.n	801062e <Uart_Transmit_Task+0xca>
 80105e6:	4b32      	ldr	r3, [pc, #200]	; (80106b0 <Uart_Transmit_Task+0x14c>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d01f      	beq.n	801062e <Uart_Transmit_Task+0xca>
 80105ee:	4b30      	ldr	r3, [pc, #192]	; (80106b0 <Uart_Transmit_Task+0x14c>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b03      	cmp	r3, #3
 80105f4:	d01b      	beq.n	801062e <Uart_Transmit_Task+0xca>
 80105f6:	4b2e      	ldr	r3, [pc, #184]	; (80106b0 <Uart_Transmit_Task+0x14c>)
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	2b04      	cmp	r3, #4
 80105fc:	d017      	beq.n	801062e <Uart_Transmit_Task+0xca>
 80105fe:	4b2d      	ldr	r3, [pc, #180]	; (80106b4 <Uart_Transmit_Task+0x150>)
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d013      	beq.n	801062e <Uart_Transmit_Task+0xca>
 8010606:	4b2b      	ldr	r3, [pc, #172]	; (80106b4 <Uart_Transmit_Task+0x150>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00f      	beq.n	801062e <Uart_Transmit_Task+0xca>
 801060e:	4b2a      	ldr	r3, [pc, #168]	; (80106b8 <Uart_Transmit_Task+0x154>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	2b06      	cmp	r3, #6
 8010614:	d00b      	beq.n	801062e <Uart_Transmit_Task+0xca>
 8010616:	4b28      	ldr	r3, [pc, #160]	; (80106b8 <Uart_Transmit_Task+0x154>)
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	2b07      	cmp	r3, #7
 801061c:	d007      	beq.n	801062e <Uart_Transmit_Task+0xca>
 801061e:	4b26      	ldr	r3, [pc, #152]	; (80106b8 <Uart_Transmit_Task+0x154>)
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	2b08      	cmp	r3, #8
 8010624:	d003      	beq.n	801062e <Uart_Transmit_Task+0xca>
 8010626:	4b24      	ldr	r3, [pc, #144]	; (80106b8 <Uart_Transmit_Task+0x154>)
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	2b05      	cmp	r3, #5
 801062c:	d104      	bne.n	8010638 <Uart_Transmit_Task+0xd4>
				{
					SEND_ALERT_PACKET();
 801062e:	f7f1 fb2b 	bl	8001c88 <SEND_ALERT_PACKET>
					Clear_All_Alert_Bits();
 8010632:	f000 f849 	bl	80106c8 <Clear_All_Alert_Bits>
 8010636:	e007      	b.n	8010648 <Uart_Transmit_Task+0xe4>
				}

				else if(S1._Mode_Val==0)
 8010638:	4b1d      	ldr	r3, [pc, #116]	; (80106b0 <Uart_Transmit_Task+0x14c>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d103      	bne.n	8010648 <Uart_Transmit_Task+0xe4>
				{
					SEND_ALERT_PACKET();
 8010640:	f7f1 fb22 	bl	8001c88 <SEND_ALERT_PACKET>
					Clear_All_Alert_Bits();
 8010644:	f000 f840 	bl	80106c8 <Clear_All_Alert_Bits>
				}
				A.Alert_Now=0;
 8010648:	4b17      	ldr	r3, [pc, #92]	; (80106a8 <Uart_Transmit_Task+0x144>)
 801064a:	2200      	movs	r2, #0
 801064c:	70da      	strb	r2, [r3, #3]
 801064e:	e01c      	b.n	801068a <Uart_Transmit_Task+0x126>

			}
		}
	  }
		     else if(T==0)
 8010650:	4b11      	ldr	r3, [pc, #68]	; (8010698 <Uart_Transmit_Task+0x134>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d107      	bne.n	8010668 <Uart_Transmit_Task+0x104>
			 {
				Uart_Delay=4000;
 8010658:	4b18      	ldr	r3, [pc, #96]	; (80106bc <Uart_Transmit_Task+0x158>)
 801065a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801065e:	801a      	strh	r2, [r3, #0]
				T=1;
 8010660:	4b0d      	ldr	r3, [pc, #52]	; (8010698 <Uart_Transmit_Task+0x134>)
 8010662:	2201      	movs	r2, #1
 8010664:	701a      	strb	r2, [r3, #0]
 8010666:	e010      	b.n	801068a <Uart_Transmit_Task+0x126>
			 }
			 else if(T==1)
 8010668:	4b0b      	ldr	r3, [pc, #44]	; (8010698 <Uart_Transmit_Task+0x134>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d10c      	bne.n	801068a <Uart_Transmit_Task+0x126>
			 {
				 T=2;
 8010670:	4b09      	ldr	r3, [pc, #36]	; (8010698 <Uart_Transmit_Task+0x134>)
 8010672:	2202      	movs	r2, #2
 8010674:	701a      	strb	r2, [r3, #0]

#if UART==6
		 UART6_Init();
 8010676:	f7ff ff4b 	bl	8010510 <UART6_Init>
         HAL_UART_Receive_IT(&huart6,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
 801067a:	2211      	movs	r2, #17
 801067c:	4910      	ldr	r1, [pc, #64]	; (80106c0 <Uart_Transmit_Task+0x15c>)
 801067e:	4811      	ldr	r0, [pc, #68]	; (80106c4 <Uart_Transmit_Task+0x160>)
 8010680:	f00a fa07 	bl	801aa92 <HAL_UART_Receive_IT>
#endif
#if UART==5
         UART5_Init();
         HAL_UART_Receive_IT(&huart5,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
#endif
				Uart_Delay=20;
 8010684:	4b0d      	ldr	r3, [pc, #52]	; (80106bc <Uart_Transmit_Task+0x158>)
 8010686:	2214      	movs	r2, #20
 8010688:	801a      	strh	r2, [r3, #0]
			 }


	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
		vTaskDelay(Uart_Delay);
 801068a:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <Uart_Transmit_Task+0x158>)
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	4618      	mov	r0, r3
 8010690:	f00f f8ec 	bl	801f86c <vTaskDelay>
	  if(T==2)
 8010694:	e76a      	b.n	801056c <Uart_Transmit_Task+0x8>
 8010696:	bf00      	nop
 8010698:	20000338 	.word	0x20000338
 801069c:	2001687c 	.word	0x2001687c
 80106a0:	20016bd8 	.word	0x20016bd8
 80106a4:	20016af8 	.word	0x20016af8
 80106a8:	20016a2c 	.word	0x20016a2c
 80106ac:	20016ea8 	.word	0x20016ea8
 80106b0:	20016ae0 	.word	0x20016ae0
 80106b4:	2000012c 	.word	0x2000012c
 80106b8:	20016c04 	.word	0x20016c04
 80106bc:	20016edc 	.word	0x20016edc
 80106c0:	20016d28 	.word	0x20016d28
 80106c4:	20016dac 	.word	0x20016dac

080106c8 <Clear_All_Alert_Bits>:
    }
}


void Clear_All_Alert_Bits()
{
 80106c8:	b480      	push	{r7}
 80106ca:	af00      	add	r7, sp, #0
	    CLEAR_ALERT_BIT(SECOND_FRAME_UN,_ALERT_PIP_HL);
 80106cc:	4a34      	ldr	r2, [pc, #208]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 80106ce:	7913      	ldrb	r3, [r2, #4]
 80106d0:	f36f 0382 	bfc	r3, #2, #1
 80106d4:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_PIP_YN);
 80106d6:	4a32      	ldr	r2, [pc, #200]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 80106d8:	7913      	ldrb	r3, [r2, #4]
 80106da:	f36f 03c3 	bfc	r3, #3, #1
 80106de:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_PEEP_HL);
 80106e0:	4a2f      	ldr	r2, [pc, #188]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 80106e2:	7953      	ldrb	r3, [r2, #5]
 80106e4:	f36f 0382 	bfc	r3, #2, #1
 80106e8:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_PEEP_YN);
 80106ea:	4a2d      	ldr	r2, [pc, #180]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 80106ec:	7953      	ldrb	r3, [r2, #5]
 80106ee:	f36f 03c3 	bfc	r3, #3, #1
 80106f2:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(SECOND_FRAME_UN,_ALERT_MINT_VOLUME_HL);
 80106f4:	4a2a      	ldr	r2, [pc, #168]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 80106f6:	7913      	ldrb	r3, [r2, #4]
 80106f8:	f36f 1386 	bfc	r3, #6, #1
 80106fc:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_MINT_VOLUME_YN);
 80106fe:	4a28      	ldr	r2, [pc, #160]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010700:	7913      	ldrb	r3, [r2, #4]
 8010702:	f36f 13c7 	bfc	r3, #7, #1
 8010706:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_HL);
 8010708:	4a25      	ldr	r2, [pc, #148]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801070a:	7953      	ldrb	r3, [r2, #5]
 801070c:	f36f 1304 	bfc	r3, #4, #1
 8010710:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_VT_YN);
 8010712:	4a23      	ldr	r2, [pc, #140]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010714:	7953      	ldrb	r3, [r2, #5]
 8010716:	f36f 1345 	bfc	r3, #5, #1
 801071a:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_HL);
 801071c:	4a20      	ldr	r2, [pc, #128]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801071e:	7953      	ldrb	r3, [r2, #5]
 8010720:	f36f 1386 	bfc	r3, #6, #1
 8010724:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_T_RR_YN);
 8010726:	4a1e      	ldr	r2, [pc, #120]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010728:	7953      	ldrb	r3, [r2, #5]
 801072a:	f36f 13c7 	bfc	r3, #7, #1
 801072e:	7153      	strb	r3, [r2, #5]
		CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_FLOW_SENSOR_REVERSED);
 8010730:	4a1b      	ldr	r2, [pc, #108]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010732:	7993      	ldrb	r3, [r2, #6]
 8010734:	f36f 0341 	bfc	r3, #1, #1
 8010738:	7193      	strb	r3, [r2, #6]
		CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT);
 801073a:	4a19      	ldr	r2, [pc, #100]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801073c:	78d3      	ldrb	r3, [r2, #3]
 801073e:	f36f 03c3 	bfc	r3, #3, #1
 8010742:	70d3      	strb	r3, [r2, #3]
		CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY);
 8010744:	4a16      	ldr	r2, [pc, #88]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010746:	78d3      	ldrb	r3, [r2, #3]
 8010748:	f36f 0382 	bfc	r3, #2, #1
 801074c:	70d3      	strb	r3, [r2, #3]
		CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_HL);
 801074e:	4a14      	ldr	r2, [pc, #80]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010750:	7913      	ldrb	r3, [r2, #4]
 8010752:	f36f 1304 	bfc	r3, #4, #1
 8010756:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_OXY_YN);
 8010758:	4a11      	ldr	r2, [pc, #68]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801075a:	7913      	ldrb	r3, [r2, #4]
 801075c:	f36f 1345 	bfc	r3, #5, #1
 8010760:	7113      	strb	r3, [r2, #4]
		CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LEAK_HL);
 8010762:	4a0f      	ldr	r2, [pc, #60]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010764:	7993      	ldrb	r3, [r2, #6]
 8010766:	f36f 1345 	bfc	r3, #5, #1
 801076a:	7193      	strb	r3, [r2, #6]
		CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_BAT_DRAIN_50_PERC);
 801076c:	4a0c      	ldr	r2, [pc, #48]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801076e:	7993      	ldrb	r3, [r2, #6]
 8010770:	f36f 0300 	bfc	r3, #0, #1
 8010774:	7193      	strb	r3, [r2, #6]
		CLEAR_ALERT_BIT(EIGHT_FRAME_UN,ALERT);
 8010776:	4a0a      	ldr	r2, [pc, #40]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010778:	7a93      	ldrb	r3, [r2, #10]
 801077a:	f36f 1345 	bfc	r3, #5, #1
 801077e:	7293      	strb	r3, [r2, #10]
		CLEAR_ALERT_BIT(EIGHT_FRAME_UN,BKUPMODE);
 8010780:	4a07      	ldr	r2, [pc, #28]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 8010782:	7a93      	ldrb	r3, [r2, #10]
 8010784:	f36f 1386 	bfc	r3, #6, #1
 8010788:	7293      	strb	r3, [r2, #10]
		CLEAR_ALERT_BIT(EIGHT_FRAME_UN,MODE);
 801078a:	4a05      	ldr	r2, [pc, #20]	; (80107a0 <Clear_All_Alert_Bits+0xd8>)
 801078c:	7a93      	ldrb	r3, [r2, #10]
 801078e:	f36f 13c7 	bfc	r3, #7, #1
 8010792:	7293      	strb	r3, [r2, #10]
}
 8010794:	bf00      	nop
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	20016ea8 	.word	0x20016ea8

080107a4 <chksum8>:

uint8_t chksum8(const unsigned char *buff, size_t len)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 80107ae:	2300      	movs	r3, #0
 80107b0:	60fb      	str	r3, [r7, #12]
 80107b2:	e00a      	b.n	80107ca <chksum8+0x26>
        sum += *(buff++);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	607a      	str	r2, [r7, #4]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	461a      	mov	r2, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	4413      	add	r3, r2
 80107c2:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	603b      	str	r3, [r7, #0]
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1f1      	bne.n	80107b4 <chksum8+0x10>
    return (uint8_t)sum;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	b2db      	uxtb	r3, r3
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <UART_Transmit>:

void UART_Transmit()
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	af00      	add	r7, sp, #0


	               if(cpap_volume_flag_set==1)
 80107e4:	4b26      	ldr	r3, [pc, #152]	; (8010880 <UART_Transmit+0xa0>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d10d      	bne.n	8010808 <UART_Transmit+0x28>
			  		{
	            	   vol.Volume = 0;
 80107ec:	4b25      	ldr	r3, [pc, #148]	; (8010884 <UART_Transmit+0xa4>)
 80107ee:	f04f 0200 	mov.w	r2, #0
 80107f2:	605a      	str	r2, [r3, #4]
			  		   _Control_Byte &= (uint8_t) (~(0x80));
 80107f4:	4b24      	ldr	r3, [pc, #144]	; (8010888 <UART_Transmit+0xa8>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b22      	ldr	r3, [pc, #136]	; (8010888 <UART_Transmit+0xa8>)
 8010800:	701a      	strb	r2, [r3, #0]
			  			cpap_volume_flag_set=0;
 8010802:	4b1f      	ldr	r3, [pc, #124]	; (8010880 <UART_Transmit+0xa0>)
 8010804:	2200      	movs	r2, #0
 8010806:	701a      	strb	r2, [r3, #0]
			  		}

	            _CYCLIC_TRANSMIT_PKT._header          = 0x5052 ;
 8010808:	4b20      	ldr	r3, [pc, #128]	; (801088c <UART_Transmit+0xac>)
 801080a:	2200      	movs	r2, #0
 801080c:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 8010810:	701a      	strb	r2, [r3, #0]
 8010812:	2200      	movs	r2, #0
 8010814:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8010818:	705a      	strb	r2, [r3, #1]
		  		_CYCLIC_TRANSMIT_PKT._length          = sizeof(_CYCLIC_TRANSMIT_PKT)-4 ;
 801081a:	4b1c      	ldr	r3, [pc, #112]	; (801088c <UART_Transmit+0xac>)
 801081c:	2208      	movs	r2, #8
 801081e:	709a      	strb	r2, [r3, #2]
		  		_CYCLIC_TRANSMIT_PKT._Pressure_Val    = Pressure_sensor._Pressure_Val ;
 8010820:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <UART_Transmit+0xb0>)
 8010822:	791a      	ldrb	r2, [r3, #4]
 8010824:	4b19      	ldr	r3, [pc, #100]	; (801088c <UART_Transmit+0xac>)
 8010826:	70da      	strb	r2, [r3, #3]
		  		_CYCLIC_TRANSMIT_PKT._Flow_Val        = Flow_Sensor_cal._Flow_Val ;
 8010828:	4b1a      	ldr	r3, [pc, #104]	; (8010894 <UART_Transmit+0xb4>)
 801082a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801082c:	b21a      	sxth	r2, r3
 801082e:	4b17      	ldr	r3, [pc, #92]	; (801088c <UART_Transmit+0xac>)
 8010830:	809a      	strh	r2, [r3, #4]
		  		_CYCLIC_TRANSMIT_PKT._Volume_Val      = vol.Volume_Val ;
 8010832:	4b14      	ldr	r3, [pc, #80]	; (8010884 <UART_Transmit+0xa4>)
 8010834:	689b      	ldr	r3, [r3, #8]
 8010836:	b21a      	sxth	r2, r3
 8010838:	4b14      	ldr	r3, [pc, #80]	; (801088c <UART_Transmit+0xac>)
 801083a:	80da      	strh	r2, [r3, #6]
		  		_CYCLIC_TRANSMIT_PKT._Control_Byte    = _Control_Byte ;
 801083c:	4b12      	ldr	r3, [pc, #72]	; (8010888 <UART_Transmit+0xa8>)
 801083e:	781a      	ldrb	r2, [r3, #0]
 8010840:	4b12      	ldr	r3, [pc, #72]	; (801088c <UART_Transmit+0xac>)
 8010842:	721a      	strb	r2, [r3, #8]
		  		_CYCLIC_TRANSMIT_PKT._SPO2            = O2.O2_percentage;
 8010844:	4b14      	ldr	r3, [pc, #80]	; (8010898 <UART_Transmit+0xb8>)
 8010846:	7c1a      	ldrb	r2, [r3, #16]
 8010848:	4b10      	ldr	r3, [pc, #64]	; (801088c <UART_Transmit+0xac>)
 801084a:	725a      	strb	r2, [r3, #9]
		  		_CYCLIC_TRANSMIT_PKT._Heart_BPM       = new_Breath ;
 801084c:	4b13      	ldr	r3, [pc, #76]	; (801089c <UART_Transmit+0xbc>)
 801084e:	781a      	ldrb	r2, [r3, #0]
 8010850:	4b0e      	ldr	r3, [pc, #56]	; (801088c <UART_Transmit+0xac>)
 8010852:	729a      	strb	r2, [r3, #10]
		  		_CYCLIC_TRANSMIT_PKT._CRC8            = chksum8(&_CYCLIC_TRANSMIT_PKT._Pressure_Val,_CYCLIC_TRANSMIT_PKT._length);
 8010854:	4b0d      	ldr	r3, [pc, #52]	; (801088c <UART_Transmit+0xac>)
 8010856:	789b      	ldrb	r3, [r3, #2]
 8010858:	4619      	mov	r1, r3
 801085a:	4811      	ldr	r0, [pc, #68]	; (80108a0 <UART_Transmit+0xc0>)
 801085c:	f7ff ffa2 	bl	80107a4 <chksum8>
 8010860:	4603      	mov	r3, r0
 8010862:	461a      	mov	r2, r3
 8010864:	4b09      	ldr	r3, [pc, #36]	; (801088c <UART_Transmit+0xac>)
 8010866:	72da      	strb	r2, [r3, #11]
#if UART==6
		  	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&_CYCLIC_TRANSMIT_PKT,sizeof(_CYCLIC_TRANSMIT_PKT));
 8010868:	220c      	movs	r2, #12
 801086a:	4908      	ldr	r1, [pc, #32]	; (801088c <UART_Transmit+0xac>)
 801086c:	480d      	ldr	r0, [pc, #52]	; (80108a4 <UART_Transmit+0xc4>)
 801086e:	f00a f8cb 	bl	801aa08 <HAL_UART_Transmit_IT>
#endif
#if UART==5
		  	HAL_UART_Transmit_IT(&huart5,(uint8_t*)&_CYCLIC_TRANSMIT_PKT,sizeof(_CYCLIC_TRANSMIT_PKT));
#endif
		  	CDC_Transmit_FS((uint8_t*)&_CYCLIC_TRANSMIT_PKT,sizeof(_CYCLIC_TRANSMIT_PKT));
 8010872:	210c      	movs	r1, #12
 8010874:	4805      	ldr	r0, [pc, #20]	; (801088c <UART_Transmit+0xac>)
 8010876:	f010 fef1 	bl	802165c <CDC_Transmit_FS>

}
 801087a:	bf00      	nop
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20016a80 	.word	0x20016a80
 8010884:	20016d44 	.word	0x20016d44
 8010888:	20016e59 	.word	0x20016e59
 801088c:	20016860 	.word	0x20016860
 8010890:	20016cfc 	.word	0x20016cfc
 8010894:	20016c48 	.word	0x20016c48
 8010898:	20000048 	.word	0x20000048
 801089c:	20000fec 	.word	0x20000fec
 80108a0:	20016863 	.word	0x20016863
 80108a4:	20016dac 	.word	0x20016dac

080108a8 <COMMAND_HANDLER_GRAPH>:




void COMMAND_HANDLER_GRAPH(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]

	       S1._Mode_Val =( 0x0F & (RX_PARAM_CMD_PACKET->_mode) ) ;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	78db      	ldrb	r3, [r3, #3]
 80108b4:	f003 030f 	and.w	r3, r3, #15
 80108b8:	b2da      	uxtb	r2, r3
 80108ba:	4b86      	ldr	r3, [pc, #536]	; (8010ad4 <COMMAND_HANDLER_GRAPH+0x22c>)
 80108bc:	701a      	strb	r2, [r3, #0]
	       S1._Pause = (0x10 & (RX_PARAM_CMD_PACKET->_mode))>>4;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	78db      	ldrb	r3, [r3, #3]
 80108c2:	091b      	lsrs	r3, r3, #4
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	f003 0301 	and.w	r3, r3, #1
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	4b81      	ldr	r3, [pc, #516]	; (8010ad4 <COMMAND_HANDLER_GRAPH+0x22c>)
 80108ce:	705a      	strb	r2, [r3, #1]
	       if(S1._Pause==1)
 80108d0:	4b80      	ldr	r3, [pc, #512]	; (8010ad4 <COMMAND_HANDLER_GRAPH+0x22c>)
 80108d2:	785b      	ldrb	r3, [r3, #1]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	f040 80a5 	bne.w	8010a24 <COMMAND_HANDLER_GRAPH+0x17c>
	       {
	    	   vTaskSuspend(pc_mode_Handler);
 80108da:	4b7f      	ldr	r3, [pc, #508]	; (8010ad8 <COMMAND_HANDLER_GRAPH+0x230>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4618      	mov	r0, r3
 80108e0:	f00e fff8 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Pc_cmv_Pid_Handler);
 80108e4:	4b7d      	ldr	r3, [pc, #500]	; (8010adc <COMMAND_HANDLER_GRAPH+0x234>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f00e fff3 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Vc_mode_Handler);
 80108ee:	4b7c      	ldr	r3, [pc, #496]	; (8010ae0 <COMMAND_HANDLER_GRAPH+0x238>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f00e ffee 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Vc_cmv_Pid_Handler);
 80108f8:	4b7a      	ldr	r3, [pc, #488]	; (8010ae4 <COMMAND_HANDLER_GRAPH+0x23c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f00e ffe9 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Pc_simv_Mode_Handler);
 8010902:	4b79      	ldr	r3, [pc, #484]	; (8010ae8 <COMMAND_HANDLER_GRAPH+0x240>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4618      	mov	r0, r3
 8010908:	f00e ffe4 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 801090c:	4b77      	ldr	r3, [pc, #476]	; (8010aec <COMMAND_HANDLER_GRAPH+0x244>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	f00e ffdf 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Vc_simv_mode_Handler);
 8010916:	4b76      	ldr	r3, [pc, #472]	; (8010af0 <COMMAND_HANDLER_GRAPH+0x248>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4618      	mov	r0, r3
 801091c:	f00e ffda 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Vc_simv_Pid_Handler);
 8010920:	4b74      	ldr	r3, [pc, #464]	; (8010af4 <COMMAND_HANDLER_GRAPH+0x24c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4618      	mov	r0, r3
 8010926:	f00e ffd5 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Psv_Handler);
 801092a:	4b73      	ldr	r3, [pc, #460]	; (8010af8 <COMMAND_HANDLER_GRAPH+0x250>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4618      	mov	r0, r3
 8010930:	f00e ffd0 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Psv_Pid_Handler);
 8010934:	4b71      	ldr	r3, [pc, #452]	; (8010afc <COMMAND_HANDLER_GRAPH+0x254>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	f00e ffcb 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Cpap_Handler);
 801093e:	4b70      	ldr	r3, [pc, #448]	; (8010b00 <COMMAND_HANDLER_GRAPH+0x258>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f00e ffc6 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(BiPap_Handler);
 8010948:	4b6e      	ldr	r3, [pc, #440]	; (8010b04 <COMMAND_HANDLER_GRAPH+0x25c>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4618      	mov	r0, r3
 801094e:	f00e ffc1 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(BiPap_Pid_Handler);
 8010952:	4b6d      	ldr	r3, [pc, #436]	; (8010b08 <COMMAND_HANDLER_GRAPH+0x260>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4618      	mov	r0, r3
 8010958:	f00e ffbc 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(APRV_Handler);
 801095c:	4b6b      	ldr	r3, [pc, #428]	; (8010b0c <COMMAND_HANDLER_GRAPH+0x264>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4618      	mov	r0, r3
 8010962:	f00e ffb7 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(APRV_one_Handler);
 8010966:	4b6a      	ldr	r3, [pc, #424]	; (8010b10 <COMMAND_HANDLER_GRAPH+0x268>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4618      	mov	r0, r3
 801096c:	f00e ffb2 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8010970:	4b68      	ldr	r3, [pc, #416]	; (8010b14 <COMMAND_HANDLER_GRAPH+0x26c>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f00e ffad 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 801097a:	4b67      	ldr	r3, [pc, #412]	; (8010b18 <COMMAND_HANDLER_GRAPH+0x270>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4618      	mov	r0, r3
 8010980:	f00e ffa8 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8010984:	4b65      	ldr	r3, [pc, #404]	; (8010b1c <COMMAND_HANDLER_GRAPH+0x274>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f00e ffa3 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 801098e:	4b64      	ldr	r3, [pc, #400]	; (8010b20 <COMMAND_HANDLER_GRAPH+0x278>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4618      	mov	r0, r3
 8010994:	f00e ff9e 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(alert_Handler);
 8010998:	4b62      	ldr	r3, [pc, #392]	; (8010b24 <COMMAND_HANDLER_GRAPH+0x27c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4618      	mov	r0, r3
 801099e:	f00e ff99 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(HFNC_Handler);
 80109a2:	4b61      	ldr	r3, [pc, #388]	; (8010b28 <COMMAND_HANDLER_GRAPH+0x280>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f00e ff94 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Suction_Handler);
 80109ac:	4b5f      	ldr	r3, [pc, #380]	; (8010b2c <COMMAND_HANDLER_GRAPH+0x284>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f00e ff8f 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Oxygen_Handler);
 80109b6:	4b5e      	ldr	r3, [pc, #376]	; (8010b30 <COMMAND_HANDLER_GRAPH+0x288>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f00e ff8a 	bl	801f8d4 <vTaskSuspend>
	    	   vTaskSuspend(Nebuliser_Handler);
 80109c0:	4b5c      	ldr	r3, [pc, #368]	; (8010b34 <COMMAND_HANDLER_GRAPH+0x28c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f00e ff85 	bl	801f8d4 <vTaskSuspend>
	    	   ExpValve_OPEN();
 80109ca:	4b5b      	ldr	r3, [pc, #364]	; (8010b38 <COMMAND_HANDLER_GRAPH+0x290>)
 80109cc:	695b      	ldr	r3, [r3, #20]
 80109ce:	4a5a      	ldr	r2, [pc, #360]	; (8010b38 <COMMAND_HANDLER_GRAPH+0x290>)
 80109d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80109d4:	6153      	str	r3, [r2, #20]
	    	   Blower_Signal( 0);
 80109d6:	4b59      	ldr	r3, [pc, #356]	; (8010b3c <COMMAND_HANDLER_GRAPH+0x294>)
 80109d8:	2200      	movs	r2, #0
 80109da:	609a      	str	r2, [r3, #8]
	    	   Parkar_valve_Signal(0);
 80109dc:	4b57      	ldr	r3, [pc, #348]	; (8010b3c <COMMAND_HANDLER_GRAPH+0x294>)
 80109de:	2200      	movs	r2, #0
 80109e0:	615a      	str	r2, [r3, #20]
	    	   Nebuliser_OFF();
 80109e2:	4b55      	ldr	r3, [pc, #340]	; (8010b38 <COMMAND_HANDLER_GRAPH+0x290>)
 80109e4:	695b      	ldr	r3, [r3, #20]
 80109e6:	4a54      	ldr	r2, [pc, #336]	; (8010b38 <COMMAND_HANDLER_GRAPH+0x290>)
 80109e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80109ec:	6153      	str	r3, [r2, #20]
			   vol.Volume=0;
 80109ee:	4b54      	ldr	r3, [pc, #336]	; (8010b40 <COMMAND_HANDLER_GRAPH+0x298>)
 80109f0:	f04f 0200 	mov.w	r2, #0
 80109f4:	605a      	str	r2, [r3, #4]
			   A.Red_Led_Alert=0;
 80109f6:	4b53      	ldr	r3, [pc, #332]	; (8010b44 <COMMAND_HANDLER_GRAPH+0x29c>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			   Blue_Led_ON();
 80109fe:	4b52      	ldr	r3, [pc, #328]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a00:	695b      	ldr	r3, [r3, #20]
 8010a02:	4a51      	ldr	r2, [pc, #324]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a04:	f043 0308 	orr.w	r3, r3, #8
 8010a08:	6153      	str	r3, [r2, #20]
			   Red_Led_OFF();
 8010a0a:	4b4f      	ldr	r3, [pc, #316]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	4a4e      	ldr	r2, [pc, #312]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a10:	f023 0310 	bic.w	r3, r3, #16
 8010a14:	6153      	str	r3, [r2, #20]
			   Green_Led_OFF();
 8010a16:	4b4c      	ldr	r3, [pc, #304]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	4a4b      	ldr	r2, [pc, #300]	; (8010b48 <COMMAND_HANDLER_GRAPH+0x2a0>)
 8010a1c:	f023 0320 	bic.w	r3, r3, #32
 8010a20:	6153      	str	r3, [r2, #20]
						break;
				}
	       }


}
 8010a22:	e052      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
				switch(S1._Mode_Val)
 8010a24:	4b2b      	ldr	r3, [pc, #172]	; (8010ad4 <COMMAND_HANDLER_GRAPH+0x22c>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	2b0c      	cmp	r3, #12
 8010a2c:	d84c      	bhi.n	8010ac8 <COMMAND_HANDLER_GRAPH+0x220>
 8010a2e:	a201      	add	r2, pc, #4	; (adr r2, 8010a34 <COMMAND_HANDLER_GRAPH+0x18c>)
 8010a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a34:	08010a69 	.word	0x08010a69
 8010a38:	08010a71 	.word	0x08010a71
 8010a3c:	08010a79 	.word	0x08010a79
 8010a40:	08010a81 	.word	0x08010a81
 8010a44:	08010a89 	.word	0x08010a89
 8010a48:	08010a91 	.word	0x08010a91
 8010a4c:	08010a99 	.word	0x08010a99
 8010a50:	08010aa1 	.word	0x08010aa1
 8010a54:	08010ac9 	.word	0x08010ac9
 8010a58:	08010aa9 	.word	0x08010aa9
 8010a5c:	08010ab1 	.word	0x08010ab1
 8010a60:	08010ab9 	.word	0x08010ab9
 8010a64:	08010ac1 	.word	0x08010ac1
						PC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a68:	4838      	ldr	r0, [pc, #224]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a6a:	f7fc fb91 	bl	800d190 <PC_CMV_PARAMETERS>
						break;
 8010a6e:	e02c      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						VC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a70:	4836      	ldr	r0, [pc, #216]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a72:	f001 ff53 	bl	801291c <VC_CMV_PARAMETERS>
						break;
 8010a76:	e028      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						PC_SIMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a78:	4834      	ldr	r0, [pc, #208]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a7a:	f7fa fe6d 	bl	800b758 <PC_SIMV_PARAMETERS>
						break;
 8010a7e:	e024      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						VC_SIMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a80:	4832      	ldr	r0, [pc, #200]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a82:	f000 fe8d 	bl	80117a0 <VC_SIMV_PARAMETERS>
						break;
 8010a86:	e020      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						APRV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a88:	4830      	ldr	r0, [pc, #192]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a8a:	f7f0 fc97 	bl	80013bc <APRV_PARAMETERS>
						break;
 8010a8e:	e01c      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						PSV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a90:	482e      	ldr	r0, [pc, #184]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a92:	f7fe fcc1 	bl	800f418 <PSV_PARAMETERS>
						break;
 8010a96:	e018      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						CPAP_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010a98:	482c      	ldr	r0, [pc, #176]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010a9a:	f7f8 fc17 	bl	80092cc <CPAP_PARAMETERS>
						break;
 8010a9e:	e014      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						BIPAP_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010aa0:	482a      	ldr	r0, [pc, #168]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010aa2:	f7f2 ff63 	bl	800396c <BIPAP_PARAMETERS>
						break;
 8010aa6:	e010      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						BACKUP_PC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010aa8:	4828      	ldr	r0, [pc, #160]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010aaa:	f7f4 fa19 	bl	8004ee0 <BACKUP_PC_CMV_PARAMETERS>
						break;
 8010aae:	e00c      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						BACKUP_VC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010ab0:	4826      	ldr	r0, [pc, #152]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010ab2:	f7f7 f80d 	bl	8007ad0 <BACKUP_VC_CMV_PARAMETERS>
						break;
 8010ab6:	e008      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						HFNC_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010ab8:	4824      	ldr	r0, [pc, #144]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010aba:	f7f9 f8d3 	bl	8009c64 <HFNC_PARAMETERS>
						break;
 8010abe:	e004      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						SUCTION_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010ac0:	4822      	ldr	r0, [pc, #136]	; (8010b4c <COMMAND_HANDLER_GRAPH+0x2a4>)
 8010ac2:	f7f9 fa4f 	bl	8009f64 <SUCTION_PARAMETERS>
						break;
 8010ac6:	e000      	b.n	8010aca <COMMAND_HANDLER_GRAPH+0x222>
						break;
 8010ac8:	bf00      	nop
}
 8010aca:	bf00      	nop
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	20016ae0 	.word	0x20016ae0
 8010ad8:	20016a84 	.word	0x20016a84
 8010adc:	20016a28 	.word	0x20016a28
 8010ae0:	20016d78 	.word	0x20016d78
 8010ae4:	2001695c 	.word	0x2001695c
 8010ae8:	20016e60 	.word	0x20016e60
 8010aec:	20016e8c 	.word	0x20016e8c
 8010af0:	20016c44 	.word	0x20016c44
 8010af4:	20016ad0 	.word	0x20016ad0
 8010af8:	20016bf0 	.word	0x20016bf0
 8010afc:	20016a74 	.word	0x20016a74
 8010b00:	20016bb8 	.word	0x20016bb8
 8010b04:	20016a24 	.word	0x20016a24
 8010b08:	20016878 	.word	0x20016878
 8010b0c:	20016c00 	.word	0x20016c00
 8010b10:	20016bc8 	.word	0x20016bc8
 8010b14:	20016bcc 	.word	0x20016bcc
 8010b18:	20016d3c 	.word	0x20016d3c
 8010b1c:	20016d7c 	.word	0x20016d7c
 8010b20:	20016a7c 	.word	0x20016a7c
 8010b24:	20016ad4 	.word	0x20016ad4
 8010b28:	20016a20 	.word	0x20016a20
 8010b2c:	20016e5c 	.word	0x20016e5c
 8010b30:	20016958 	.word	0x20016958
 8010b34:	20016a94 	.word	0x20016a94
 8010b38:	40020400 	.word	0x40020400
 8010b3c:	40007400 	.word	0x40007400
 8010b40:	20016d44 	.word	0x20016d44
 8010b44:	20016a2c 	.word	0x20016a2c
 8010b48:	40020c00 	.word	0x40020c00
 8010b4c:	20016d28 	.word	0x20016d28

08010b50 <COMMAND_HANDLER>:

void COMMAND_HANDLER(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]

	Uart_Receive_Debug_Toggle_Led();
 8010b58:	4b50      	ldr	r3, [pc, #320]	; (8010c9c <COMMAND_HANDLER+0x14c>)
 8010b5a:	695b      	ldr	r3, [r3, #20]
 8010b5c:	4a4f      	ldr	r2, [pc, #316]	; (8010c9c <COMMAND_HANDLER+0x14c>)
 8010b5e:	f083 0302 	eor.w	r3, r3, #2
 8010b62:	6153      	str	r3, [r2, #20]
	_RX_CRC8 = chksum8(&UART_RX_BUF[3],((((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_length)));
 8010b64:	4b4e      	ldr	r3, [pc, #312]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010b66:	789b      	ldrb	r3, [r3, #2]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	484e      	ldr	r0, [pc, #312]	; (8010ca4 <COMMAND_HANDLER+0x154>)
 8010b6c:	f7ff fe1a 	bl	80107a4 <chksum8>
 8010b70:	4603      	mov	r3, r0
 8010b72:	461a      	mov	r2, r3
 8010b74:	4b4c      	ldr	r3, [pc, #304]	; (8010ca8 <COMMAND_HANDLER+0x158>)
 8010b76:	701a      	strb	r2, [r3, #0]
	if(_RX_CRC8 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_CRC8)
 8010b78:	4b49      	ldr	r3, [pc, #292]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010b7a:	7c1a      	ldrb	r2, [r3, #16]
 8010b7c:	4b4a      	ldr	r3, [pc, #296]	; (8010ca8 <COMMAND_HANDLER+0x158>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d13c      	bne.n	8010bfe <COMMAND_HANDLER+0xae>
	{
		Mode_data_error=0;
 8010b84:	4b49      	ldr	r3, [pc, #292]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010b86:	2200      	movs	r2, #0
 8010b88:	601a      	str	r2, [r3, #0]
		if ((0x5053 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010b8a:	4b45      	ldr	r3, [pc, #276]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	f245 0253 	movw	r2, #20563	; 0x5053
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d106      	bne.n	8010ba6 <COMMAND_HANDLER+0x56>
		{
			 Mode_Not_Start=1;
 8010b98:	4b45      	ldr	r3, [pc, #276]	; (8010cb0 <COMMAND_HANDLER+0x160>)
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	701a      	strb	r2, [r3, #0]
			 COMMAND_HANDLER_GRAPH((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010b9e:	4840      	ldr	r0, [pc, #256]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010ba0:	f7ff fe82 	bl	80108a8 <COMMAND_HANDLER_GRAPH>
					Mode_data_error=0;
				}

	}

}
 8010ba4:	e075      	b.n	8010c92 <COMMAND_HANDLER+0x142>
		else if((0x5054 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010ba6:	4b3e      	ldr	r3, [pc, #248]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	f245 0254 	movw	r2, #20564	; 0x5054
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d103      	bne.n	8010bbc <COMMAND_HANDLER+0x6c>
			COMMAND_HANDLER_ALERT((ALERT_RANGE_PACKET*) (UART_RX_BUF));
 8010bb4:	483a      	ldr	r0, [pc, #232]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bb6:	f7f0 ffc7 	bl	8001b48 <COMMAND_HANDLER_ALERT>
}
 8010bba:	e06a      	b.n	8010c92 <COMMAND_HANDLER+0x142>
		else if((0x5052 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010bbc:	4b38      	ldr	r3, [pc, #224]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bbe:	881b      	ldrh	r3, [r3, #0]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	f245 0252 	movw	r2, #20562	; 0x5052
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d103      	bne.n	8010bd2 <COMMAND_HANDLER+0x82>
			CALIBRATION_COMMAND_HANDLER((REQUEST_CALIBRATION_PACKET_tst*) (UART_RX_BUF));
 8010bca:	4835      	ldr	r0, [pc, #212]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bcc:	f7f7 f8d0 	bl	8007d70 <CALIBRATION_COMMAND_HANDLER>
}
 8010bd0:	e05f      	b.n	8010c92 <COMMAND_HANDLER+0x142>
		else if((0x5055 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010bd2:	4b33      	ldr	r3, [pc, #204]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	f245 0255 	movw	r2, #20565	; 0x5055
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d103      	bne.n	8010be8 <COMMAND_HANDLER+0x98>
			SERVICE_COMMAND_HANDLER((REQUEST_SERVICE_PACKET_tst*) (UART_RX_BUF));
 8010be0:	482f      	ldr	r0, [pc, #188]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010be2:	f7fe fe07 	bl	800f7f4 <SERVICE_COMMAND_HANDLER>
}
 8010be6:	e054      	b.n	8010c92 <COMMAND_HANDLER+0x142>
		else if((0x5057 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010be8:	4b2d      	ldr	r3, [pc, #180]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bea:	881b      	ldrh	r3, [r3, #0]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	f245 0257 	movw	r2, #20567	; 0x5057
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d14d      	bne.n	8010c92 <COMMAND_HANDLER+0x142>
			NEBULISER_COMMAND_HANDLER((NEBULISER_RANGE_PACKET*) (UART_RX_BUF));
 8010bf6:	482a      	ldr	r0, [pc, #168]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010bf8:	f7f9 fa86 	bl	800a108 <NEBULISER_COMMAND_HANDLER>
}
 8010bfc:	e049      	b.n	8010c92 <COMMAND_HANDLER+0x142>
		Mode_data_error=1;
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c00:	2201      	movs	r2, #1
 8010c02:	601a      	str	r2, [r3, #0]
		alter_uart_data();
 8010c04:	f000 f856 	bl	8010cb4 <alter_uart_data>
		        if ((0x5053 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010c08:	4b25      	ldr	r3, [pc, #148]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	f245 0253 	movw	r2, #20563	; 0x5053
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d106      	bne.n	8010c24 <COMMAND_HANDLER+0xd4>
					 COMMAND_HANDLER_GRAPH((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010c16:	4822      	ldr	r0, [pc, #136]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c18:	f7ff fe46 	bl	80108a8 <COMMAND_HANDLER_GRAPH>
					 Mode_data_error=0;
 8010c1c:	4b23      	ldr	r3, [pc, #140]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
}
 8010c22:	e036      	b.n	8010c92 <COMMAND_HANDLER+0x142>
				else if((0x5054 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010c24:	4b1e      	ldr	r3, [pc, #120]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	f245 0254 	movw	r2, #20564	; 0x5054
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d106      	bne.n	8010c40 <COMMAND_HANDLER+0xf0>
					COMMAND_HANDLER_ALERT((ALERT_RANGE_PACKET*) (UART_RX_BUF));
 8010c32:	481b      	ldr	r0, [pc, #108]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c34:	f7f0 ff88 	bl	8001b48 <COMMAND_HANDLER_ALERT>
					Mode_data_error=0;
 8010c38:	4b1c      	ldr	r3, [pc, #112]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	601a      	str	r2, [r3, #0]
}
 8010c3e:	e028      	b.n	8010c92 <COMMAND_HANDLER+0x142>
				else if((0x5052 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010c40:	4b17      	ldr	r3, [pc, #92]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f245 0252 	movw	r2, #20562	; 0x5052
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d106      	bne.n	8010c5c <COMMAND_HANDLER+0x10c>
					CALIBRATION_COMMAND_HANDLER((REQUEST_CALIBRATION_PACKET_tst*) (UART_RX_BUF));
 8010c4e:	4814      	ldr	r0, [pc, #80]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c50:	f7f7 f88e 	bl	8007d70 <CALIBRATION_COMMAND_HANDLER>
					Mode_data_error=0;
 8010c54:	4b15      	ldr	r3, [pc, #84]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c56:	2200      	movs	r2, #0
 8010c58:	601a      	str	r2, [r3, #0]
}
 8010c5a:	e01a      	b.n	8010c92 <COMMAND_HANDLER+0x142>
				else if((0x5055 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010c5c:	4b10      	ldr	r3, [pc, #64]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	f245 0255 	movw	r2, #20565	; 0x5055
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d106      	bne.n	8010c78 <COMMAND_HANDLER+0x128>
					SERVICE_COMMAND_HANDLER((REQUEST_SERVICE_PACKET_tst*) (UART_RX_BUF));
 8010c6a:	480d      	ldr	r0, [pc, #52]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c6c:	f7fe fdc2 	bl	800f7f4 <SERVICE_COMMAND_HANDLER>
					Mode_data_error=0;
 8010c70:	4b0e      	ldr	r3, [pc, #56]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	601a      	str	r2, [r3, #0]
}
 8010c76:	e00c      	b.n	8010c92 <COMMAND_HANDLER+0x142>
				else if((0x5057 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8010c78:	4b09      	ldr	r3, [pc, #36]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	f245 0257 	movw	r2, #20567	; 0x5057
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d105      	bne.n	8010c92 <COMMAND_HANDLER+0x142>
					NEBULISER_COMMAND_HANDLER((NEBULISER_RANGE_PACKET*) (UART_RX_BUF));
 8010c86:	4806      	ldr	r0, [pc, #24]	; (8010ca0 <COMMAND_HANDLER+0x150>)
 8010c88:	f7f9 fa3e 	bl	800a108 <NEBULISER_COMMAND_HANDLER>
					Mode_data_error=0;
 8010c8c:	4b07      	ldr	r3, [pc, #28]	; (8010cac <COMMAND_HANDLER+0x15c>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
}
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	40020c00 	.word	0x40020c00
 8010ca0:	20016d28 	.word	0x20016d28
 8010ca4:	20016d2b 	.word	0x20016d2b
 8010ca8:	20016ef0 	.word	0x20016ef0
 8010cac:	20016a8c 	.word	0x20016a8c
 8010cb0:	20016ce4 	.word	0x20016ce4

08010cb4 <alter_uart_data>:




void alter_uart_data()
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	af00      	add	r7, sp, #0

	Received_APP_data_found=0;
 8010cb8:	4b38      	ldr	r3, [pc, #224]	; (8010d9c <alter_uart_data+0xe8>)
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
	Received_index_Number=0;
 8010cbe:	4b38      	ldr	r3, [pc, #224]	; (8010da0 <alter_uart_data+0xec>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	601a      	str	r2, [r3, #0]


	for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010cc4:	4b37      	ldr	r3, [pc, #220]	; (8010da4 <alter_uart_data+0xf0>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	601a      	str	r2, [r3, #0]
 8010cca:	e019      	b.n	8010d00 <alter_uart_data+0x4c>
	{
		if(UART_RX_BUF[arrangecount]==83)
 8010ccc:	4b35      	ldr	r3, [pc, #212]	; (8010da4 <alter_uart_data+0xf0>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4a35      	ldr	r2, [pc, #212]	; (8010da8 <alter_uart_data+0xf4>)
 8010cd2:	5cd3      	ldrb	r3, [r2, r3]
 8010cd4:	2b53      	cmp	r3, #83	; 0x53
 8010cd6:	d10e      	bne.n	8010cf6 <alter_uart_data+0x42>
		{
			if(UART_RX_BUF[arrangecount+1]==80)
 8010cd8:	4b32      	ldr	r3, [pc, #200]	; (8010da4 <alter_uart_data+0xf0>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	4a32      	ldr	r2, [pc, #200]	; (8010da8 <alter_uart_data+0xf4>)
 8010ce0:	5cd3      	ldrb	r3, [r2, r3]
 8010ce2:	2b50      	cmp	r3, #80	; 0x50
 8010ce4:	d107      	bne.n	8010cf6 <alter_uart_data+0x42>
			{
				Received_index_Number=arrangecount;
 8010ce6:	4b2f      	ldr	r3, [pc, #188]	; (8010da4 <alter_uart_data+0xf0>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a2d      	ldr	r2, [pc, #180]	; (8010da0 <alter_uart_data+0xec>)
 8010cec:	6013      	str	r3, [r2, #0]
				Received_APP_data_found=1;
 8010cee:	4b2b      	ldr	r3, [pc, #172]	; (8010d9c <alter_uart_data+0xe8>)
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]
				break;
 8010cf4:	e008      	b.n	8010d08 <alter_uart_data+0x54>
	for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010cf6:	4b2b      	ldr	r3, [pc, #172]	; (8010da4 <alter_uart_data+0xf0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	4a29      	ldr	r2, [pc, #164]	; (8010da4 <alter_uart_data+0xf0>)
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	4b28      	ldr	r3, [pc, #160]	; (8010da4 <alter_uart_data+0xf0>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2b10      	cmp	r3, #16
 8010d06:	dde1      	ble.n	8010ccc <alter_uart_data+0x18>
			}
		}
	}

	if(Received_APP_data_found==1)
 8010d08:	4b24      	ldr	r3, [pc, #144]	; (8010d9c <alter_uart_data+0xe8>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d13f      	bne.n	8010d90 <alter_uart_data+0xdc>
	{
		for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010d10:	4b24      	ldr	r3, [pc, #144]	; (8010da4 <alter_uart_data+0xf0>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	e022      	b.n	8010d5e <alter_uart_data+0xaa>
		{
			Received_index_number2  = Received_index_Number + arrangecount;
 8010d18:	4b21      	ldr	r3, [pc, #132]	; (8010da0 <alter_uart_data+0xec>)
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	4b21      	ldr	r3, [pc, #132]	; (8010da4 <alter_uart_data+0xf0>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4413      	add	r3, r2
 8010d22:	4a22      	ldr	r2, [pc, #136]	; (8010dac <alter_uart_data+0xf8>)
 8010d24:	6013      	str	r3, [r2, #0]

			if(Received_index_number2>16)
 8010d26:	4b21      	ldr	r3, [pc, #132]	; (8010dac <alter_uart_data+0xf8>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b10      	cmp	r3, #16
 8010d2c:	dd0a      	ble.n	8010d44 <alter_uart_data+0x90>
			{
				UART_RX_BUF_CURR[arrangecount]=UART_RX_BUF[Received_index_number2-17];
 8010d2e:	4b1f      	ldr	r3, [pc, #124]	; (8010dac <alter_uart_data+0xf8>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f1a3 0211 	sub.w	r2, r3, #17
 8010d36:	4b1b      	ldr	r3, [pc, #108]	; (8010da4 <alter_uart_data+0xf0>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	491b      	ldr	r1, [pc, #108]	; (8010da8 <alter_uart_data+0xf4>)
 8010d3c:	5c89      	ldrb	r1, [r1, r2]
 8010d3e:	4a1c      	ldr	r2, [pc, #112]	; (8010db0 <alter_uart_data+0xfc>)
 8010d40:	54d1      	strb	r1, [r2, r3]
 8010d42:	e007      	b.n	8010d54 <alter_uart_data+0xa0>
			}
			else
			{
				UART_RX_BUF_CURR[arrangecount]=UART_RX_BUF[Received_index_number2];
 8010d44:	4b19      	ldr	r3, [pc, #100]	; (8010dac <alter_uart_data+0xf8>)
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	4b16      	ldr	r3, [pc, #88]	; (8010da4 <alter_uart_data+0xf0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4916      	ldr	r1, [pc, #88]	; (8010da8 <alter_uart_data+0xf4>)
 8010d4e:	5c89      	ldrb	r1, [r1, r2]
 8010d50:	4a17      	ldr	r2, [pc, #92]	; (8010db0 <alter_uart_data+0xfc>)
 8010d52:	54d1      	strb	r1, [r2, r3]
		for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010d54:	4b13      	ldr	r3, [pc, #76]	; (8010da4 <alter_uart_data+0xf0>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	4a12      	ldr	r2, [pc, #72]	; (8010da4 <alter_uart_data+0xf0>)
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	4b11      	ldr	r3, [pc, #68]	; (8010da4 <alter_uart_data+0xf0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b10      	cmp	r3, #16
 8010d64:	ddd8      	ble.n	8010d18 <alter_uart_data+0x64>
			}

		}


		for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010d66:	4b0f      	ldr	r3, [pc, #60]	; (8010da4 <alter_uart_data+0xf0>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	e00c      	b.n	8010d88 <alter_uart_data+0xd4>
		{
			UART_RX_BUF[arrangecount]  =  UART_RX_BUF_CURR[arrangecount];
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	; (8010da4 <alter_uart_data+0xf0>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	4b0c      	ldr	r3, [pc, #48]	; (8010da4 <alter_uart_data+0xf0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	490e      	ldr	r1, [pc, #56]	; (8010db0 <alter_uart_data+0xfc>)
 8010d78:	5c89      	ldrb	r1, [r1, r2]
 8010d7a:	4a0b      	ldr	r2, [pc, #44]	; (8010da8 <alter_uart_data+0xf4>)
 8010d7c:	54d1      	strb	r1, [r2, r3]
		for(arrangecount=0;arrangecount<=16;arrangecount++)
 8010d7e:	4b09      	ldr	r3, [pc, #36]	; (8010da4 <alter_uart_data+0xf0>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	3301      	adds	r3, #1
 8010d84:	4a07      	ldr	r2, [pc, #28]	; (8010da4 <alter_uart_data+0xf0>)
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <alter_uart_data+0xf0>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b10      	cmp	r3, #16
 8010d8e:	ddee      	ble.n	8010d6e <alter_uart_data+0xba>
		}
	}

}
 8010d90:	bf00      	nop
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	20016eec 	.word	0x20016eec
 8010da0:	20016ee0 	.word	0x20016ee0
 8010da4:	20016ee4 	.word	0x20016ee4
 8010da8:	20016d28 	.word	0x20016d28
 8010dac:	20016ee8 	.word	0x20016ee8
 8010db0:	20016ce8 	.word	0x20016ce8

08010db4 <Receiver_Task>:


void Receiver_Task (void *argument)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
	while (1)
	{

		if (xQueueReceive(Uart_Receive, &UART_RX_BUF, portMAX_DELAY) == pdTRUE)
 8010dbc:	4b07      	ldr	r3, [pc, #28]	; (8010ddc <Receiver_Task+0x28>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	4906      	ldr	r1, [pc, #24]	; (8010de0 <Receiver_Task+0x2c>)
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f00e f8de 	bl	801ef88 <xQueueReceive>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d1f4      	bne.n	8010dbc <Receiver_Task+0x8>
		{
			COMMAND_HANDLER((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8010dd2:	4803      	ldr	r0, [pc, #12]	; (8010de0 <Receiver_Task+0x2c>)
 8010dd4:	f7ff febc 	bl	8010b50 <COMMAND_HANDLER>
		if (xQueueReceive(Uart_Receive, &UART_RX_BUF, portMAX_DELAY) == pdTRUE)
 8010dd8:	e7f0      	b.n	8010dbc <Receiver_Task+0x8>
 8010dda:	bf00      	nop
 8010ddc:	20016da8 	.word	0x20016da8
 8010de0:	20016d28 	.word	0x20016d28

08010de4 <HAL_UART_RxCpltCallback>:


   }
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
#if UART==6
	HAL_UART_Receive_IT(&huart6,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
 8010dec:	2211      	movs	r2, #17
 8010dee:	490e      	ldr	r1, [pc, #56]	; (8010e28 <HAL_UART_RxCpltCallback+0x44>)
 8010df0:	480e      	ldr	r0, [pc, #56]	; (8010e2c <HAL_UART_RxCpltCallback+0x48>)
 8010df2:	f009 fe4e 	bl	801aa92 <HAL_UART_Receive_IT>
#endif
#if UART==5
	HAL_UART_Receive_IT(&huart5,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
#endif
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	60fb      	str	r3, [r7, #12]
	xQueueSendToFrontFromISR(Uart_Receive, &UART_RX_BUF, &xHigherPriorityTaskWoken);
 8010dfa:	4b0d      	ldr	r3, [pc, #52]	; (8010e30 <HAL_UART_RxCpltCallback+0x4c>)
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	f107 020c 	add.w	r2, r7, #12
 8010e02:	2301      	movs	r3, #1
 8010e04:	4908      	ldr	r1, [pc, #32]	; (8010e28 <HAL_UART_RxCpltCallback+0x44>)
 8010e06:	f00e f823 	bl	801ee50 <xQueueGenericSendFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d007      	beq.n	8010e20 <HAL_UART_RxCpltCallback+0x3c>
 8010e10:	4b08      	ldr	r3, [pc, #32]	; (8010e34 <HAL_UART_RxCpltCallback+0x50>)
 8010e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	f3bf 8f4f 	dsb	sy
 8010e1c:	f3bf 8f6f 	isb	sy
}
 8010e20:	bf00      	nop
 8010e22:	3710      	adds	r7, #16
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	20016d28 	.word	0x20016d28
 8010e2c:	20016dac 	.word	0x20016dac
 8010e30:	20016da8 	.word	0x20016da8
 8010e34:	e000ed04 	.word	0xe000ed04

08010e38 <VC_SIMV_Task>:


extern int trigger_valve_modification;

void VC_SIMV_Task(void *argument)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]


	while (1)
	{
		        switch (_CurrentComputationState)
 8010e40:	4ba7      	ldr	r3, [pc, #668]	; (80110e0 <VC_SIMV_Task+0x2a8>)
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	f000 81a1 	beq.w	801118c <VC_SIMV_Task+0x354>
 8010e4a:	2b02      	cmp	r3, #2
 8010e4c:	f300 81a0 	bgt.w	8011190 <VC_SIMV_Task+0x358>
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <VC_SIMV_Task+0x22>
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d014      	beq.n	8010e82 <VC_SIMV_Task+0x4a>

						break;
						case NoComputeState:
						break;
						default:
						break;
 8010e58:	e19a      	b.n	8011190 <VC_SIMV_Task+0x358>
							ExpValve_CLOSE();
 8010e5a:	4ba2      	ldr	r3, [pc, #648]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	4aa1      	ldr	r2, [pc, #644]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010e64:	6153      	str	r3, [r2, #20]
							Blower_Signal( R4._DAC_VAL0);
 8010e66:	4ba0      	ldr	r3, [pc, #640]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010e68:	891a      	ldrh	r2, [r3, #8]
 8010e6a:	4ba0      	ldr	r3, [pc, #640]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010e6c:	609a      	str	r2, [r3, #8]
							S5.peep_process_done=0;
 8010e6e:	4ba0      	ldr	r3, [pc, #640]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	64da      	str	r2, [r3, #76]	; 0x4c
							S5.lock=1;
 8010e74:	4b9e      	ldr	r3, [pc, #632]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010e76:	2201      	movs	r2, #1
 8010e78:	645a      	str	r2, [r3, #68]	; 0x44
							pressure_acheived = 1;
 8010e7a:	4b9e      	ldr	r3, [pc, #632]	; (80110f4 <VC_SIMV_Task+0x2bc>)
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	601a      	str	r2, [r3, #0]
						break;
 8010e80:	e189      	b.n	8011196 <VC_SIMV_Task+0x35e>
							Blower_Signal( R4._DAC_VAL0);
 8010e82:	4b99      	ldr	r3, [pc, #612]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010e84:	891a      	ldrh	r2, [r3, #8]
 8010e86:	4b99      	ldr	r3, [pc, #612]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010e88:	609a      	str	r2, [r3, #8]
									if(S5.peep_process_done==1)
 8010e8a:	4b99      	ldr	r3, [pc, #612]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d146      	bne.n	8010f20 <VC_SIMV_Task+0xe8>
										if(R1.Assist_mode2==0 )
 8010e92:	4b99      	ldr	r3, [pc, #612]	; (80110f8 <VC_SIMV_Task+0x2c0>)
 8010e94:	7d9b      	ldrb	r3, [r3, #22]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d117      	bne.n	8010eca <VC_SIMV_Task+0x92>
											if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8010e9a:	4b98      	ldr	r3, [pc, #608]	; (80110fc <VC_SIMV_Task+0x2c4>)
 8010e9c:	791b      	ldrb	r3, [r3, #4]
 8010e9e:	ee07 3a90 	vmov	s15, r3
 8010ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010ea6:	4b92      	ldr	r3, [pc, #584]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010ea8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb4:	d504      	bpl.n	8010ec0 <VC_SIMV_Task+0x88>
												Blower_Signal( R4._DAC_VAL0);
 8010eb6:	4b8c      	ldr	r3, [pc, #560]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010eb8:	891a      	ldrh	r2, [r3, #8]
 8010eba:	4b8c      	ldr	r3, [pc, #560]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010ebc:	609a      	str	r2, [r3, #8]
 8010ebe:	e01f      	b.n	8010f00 <VC_SIMV_Task+0xc8>
												Blower_Signal( R4._DAC_VAL0);
 8010ec0:	4b89      	ldr	r3, [pc, #548]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010ec2:	891a      	ldrh	r2, [r3, #8]
 8010ec4:	4b89      	ldr	r3, [pc, #548]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010ec6:	609a      	str	r2, [r3, #8]
 8010ec8:	e01a      	b.n	8010f00 <VC_SIMV_Task+0xc8>
										else if(R1.Assist_mode2==1 )
 8010eca:	4b8b      	ldr	r3, [pc, #556]	; (80110f8 <VC_SIMV_Task+0x2c0>)
 8010ecc:	7d9b      	ldrb	r3, [r3, #22]
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d116      	bne.n	8010f00 <VC_SIMV_Task+0xc8>
											if(pressure_acheived == 1)
 8010ed2:	4b88      	ldr	r3, [pc, #544]	; (80110f4 <VC_SIMV_Task+0x2bc>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d112      	bne.n	8010f00 <VC_SIMV_Task+0xc8>
												PID_Compute(&TPID);
 8010eda:	4889      	ldr	r0, [pc, #548]	; (8011100 <VC_SIMV_Task+0x2c8>)
 8010edc:	f003 fcac 	bl	8014838 <PID_Compute>
												R4._DAC_VAL0=(int16_t)PIDOut;
 8010ee0:	4b88      	ldr	r3, [pc, #544]	; (8011104 <VC_SIMV_Task+0x2cc>)
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	4619      	mov	r1, r3
 8010eea:	f7ef fdc7 	bl	8000a7c <__aeabi_d2iz>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b21b      	sxth	r3, r3
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	4b7c      	ldr	r3, [pc, #496]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010ef6:	811a      	strh	r2, [r3, #8]
												Blower_Signal( R4._DAC_VAL0);
 8010ef8:	4b7b      	ldr	r3, [pc, #492]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010efa:	891a      	ldrh	r2, [r3, #8]
 8010efc:	4b7b      	ldr	r3, [pc, #492]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010efe:	609a      	str	r2, [r3, #8]
										if(Pressure_sensor._Pressure_Val > (R1._PEEP_Val))
 8010f00:	4b7e      	ldr	r3, [pc, #504]	; (80110fc <VC_SIMV_Task+0x2c4>)
 8010f02:	791a      	ldrb	r2, [r3, #4]
 8010f04:	4b7c      	ldr	r3, [pc, #496]	; (80110f8 <VC_SIMV_Task+0x2c0>)
 8010f06:	785b      	ldrb	r3, [r3, #1]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d909      	bls.n	8010f20 <VC_SIMV_Task+0xe8>
											pressure_acheived=0;
 8010f0c:	4b79      	ldr	r3, [pc, #484]	; (80110f4 <VC_SIMV_Task+0x2bc>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	601a      	str	r2, [r3, #0]
											R4._DAC_VAL0=0;
 8010f12:	4b75      	ldr	r3, [pc, #468]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	811a      	strh	r2, [r3, #8]
											Blower_Signal( R4._DAC_VAL0);
 8010f18:	4b73      	ldr	r3, [pc, #460]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010f1a:	891a      	ldrh	r2, [r3, #8]
 8010f1c:	4b73      	ldr	r3, [pc, #460]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010f1e:	609a      	str	r2, [r3, #8]
									if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8010f20:	4b76      	ldr	r3, [pc, #472]	; (80110fc <VC_SIMV_Task+0x2c4>)
 8010f22:	791b      	ldrb	r3, [r3, #4]
 8010f24:	ee07 3a90 	vmov	s15, r3
 8010f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010f2c:	4b70      	ldr	r3, [pc, #448]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f2e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3a:	d815      	bhi.n	8010f68 <VC_SIMV_Task+0x130>
										if(S5.lock==1)
 8010f3c:	4b6c      	ldr	r3, [pc, #432]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d107      	bne.n	8010f54 <VC_SIMV_Task+0x11c>
											S5.lock=0;
 8010f44:	4b6a      	ldr	r3, [pc, #424]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	645a      	str	r2, [r3, #68]	; 0x44
											vTaskDelay(S5.Lock_delay);
 8010f4a:	4b69      	ldr	r3, [pc, #420]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f00e fc8c 	bl	801f86c <vTaskDelay>
										S5.peep_process_done=1;
 8010f54:	4b66      	ldr	r3, [pc, #408]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f56:	2201      	movs	r2, #1
 8010f58:	64da      	str	r2, [r3, #76]	; 0x4c
										ExpValve_CLOSE();
 8010f5a:	4b62      	ldr	r3, [pc, #392]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010f5c:	695b      	ldr	r3, [r3, #20]
 8010f5e:	4a61      	ldr	r2, [pc, #388]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010f64:	6153      	str	r3, [r2, #20]
 8010f66:	e012      	b.n	8010f8e <VC_SIMV_Task+0x156>
									else if(S5.peep_process_done==0)
 8010f68:	4b61      	ldr	r3, [pc, #388]	; (80110f0 <VC_SIMV_Task+0x2b8>)
 8010f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10e      	bne.n	8010f8e <VC_SIMV_Task+0x156>
										ExpValve_OPEN();
 8010f70:	4b5c      	ldr	r3, [pc, #368]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010f72:	695b      	ldr	r3, [r3, #20]
 8010f74:	4a5b      	ldr	r2, [pc, #364]	; (80110e4 <VC_SIMV_Task+0x2ac>)
 8010f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010f7a:	6153      	str	r3, [r2, #20]
										uwTick=0;
 8010f7c:	4b62      	ldr	r3, [pc, #392]	; (8011108 <VC_SIMV_Task+0x2d0>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	601a      	str	r2, [r3, #0]
										TPID.OutputSum=300;
 8010f82:	495f      	ldr	r1, [pc, #380]	; (8011100 <VC_SIMV_Task+0x2c8>)
 8010f84:	a354      	add	r3, pc, #336	; (adr r3, 80110d8 <VC_SIMV_Task+0x2a0>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
									if (_E_TIMER <= (R6._TRIG_WINDOW) && _E_TIMER != 0)
 8010f8e:	4b5f      	ldr	r3, [pc, #380]	; (801110c <VC_SIMV_Task+0x2d4>)
 8010f90:	895b      	ldrh	r3, [r3, #10]
 8010f92:	461a      	mov	r2, r3
 8010f94:	4b5e      	ldr	r3, [pc, #376]	; (8011110 <VC_SIMV_Task+0x2d8>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	f0c0 80c1 	bcc.w	8011120 <VC_SIMV_Task+0x2e8>
 8010f9e:	4b5c      	ldr	r3, [pc, #368]	; (8011110 <VC_SIMV_Task+0x2d8>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f000 80bc 	beq.w	8011120 <VC_SIMV_Task+0x2e8>
										pressure_acheived =0;
 8010fa8:	4b52      	ldr	r3, [pc, #328]	; (80110f4 <VC_SIMV_Task+0x2bc>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	601a      	str	r2, [r3, #0]
										R4._DAC_VAL0=0;
 8010fae:	4b4e      	ldr	r3, [pc, #312]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	811a      	strh	r2, [r3, #8]
										Blower_Signal( R4._DAC_VAL0);
 8010fb4:	4b4c      	ldr	r3, [pc, #304]	; (80110e8 <VC_SIMV_Task+0x2b0>)
 8010fb6:	891a      	ldrh	r2, [r3, #8]
 8010fb8:	4b4c      	ldr	r3, [pc, #304]	; (80110ec <VC_SIMV_Task+0x2b4>)
 8010fba:	609a      	str	r2, [r3, #8]
										if(R1.Assist_mode2==0 )
 8010fbc:	4b4e      	ldr	r3, [pc, #312]	; (80110f8 <VC_SIMV_Task+0x2c0>)
 8010fbe:	7d9b      	ldrb	r3, [r3, #22]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d13d      	bne.n	8011040 <VC_SIMV_Task+0x208>
											if (R6._TRIG_TYPE == 1)
 8010fc4:	4b51      	ldr	r3, [pc, #324]	; (801110c <VC_SIMV_Task+0x2d4>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d11c      	bne.n	8011006 <VC_SIMV_Task+0x1ce>
												if ((Pressure_sensor._Pressure_Val< (R6.simv_trigger_offset - R6._TRIG_LMT)))
 8010fcc:	4b4b      	ldr	r3, [pc, #300]	; (80110fc <VC_SIMV_Task+0x2c4>)
 8010fce:	791b      	ldrb	r3, [r3, #4]
 8010fd0:	ee07 3a90 	vmov	s15, r3
 8010fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fd8:	4b4c      	ldr	r3, [pc, #304]	; (801110c <VC_SIMV_Task+0x2d4>)
 8010fda:	edd3 6a03 	vldr	s13, [r3, #12]
 8010fde:	4b4b      	ldr	r3, [pc, #300]	; (801110c <VC_SIMV_Task+0x2d4>)
 8010fe0:	885b      	ldrh	r3, [r3, #2]
 8010fe2:	ee07 3a90 	vmov	s15, r3
 8010fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff6:	d400      	bmi.n	8010ffa <VC_SIMV_Task+0x1c2>
										if(R1.Assist_mode2==0 )
 8010ff8:	e0b2      	b.n	8011160 <VC_SIMV_Task+0x328>
													trigger_valve_modification=1;
 8010ffa:	4b46      	ldr	r3, [pc, #280]	; (8011114 <VC_SIMV_Task+0x2dc>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	601a      	str	r2, [r3, #0]
													Switch_TASK_I_CYCLE();
 8011000:	f7fa f898 	bl	800b134 <Switch_TASK_I_CYCLE>
										if(R1.Assist_mode2==0 )
 8011004:	e0ac      	b.n	8011160 <VC_SIMV_Task+0x328>
												if ((Flow_Sensor_cal._Flow_Val > (R6.simv_trigger_offset2+R6._TRIG_LMT)))
 8011006:	4b44      	ldr	r3, [pc, #272]	; (8011118 <VC_SIMV_Task+0x2e0>)
 8011008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801100a:	ee07 3a90 	vmov	s15, r3
 801100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011012:	4b3e      	ldr	r3, [pc, #248]	; (801110c <VC_SIMV_Task+0x2d4>)
 8011014:	edd3 6a04 	vldr	s13, [r3, #16]
 8011018:	4b3c      	ldr	r3, [pc, #240]	; (801110c <VC_SIMV_Task+0x2d4>)
 801101a:	885b      	ldrh	r3, [r3, #2]
 801101c:	ee07 3a90 	vmov	s15, r3
 8011020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	dc00      	bgt.n	8011034 <VC_SIMV_Task+0x1fc>
										if(R1.Assist_mode2==0 )
 8011032:	e095      	b.n	8011160 <VC_SIMV_Task+0x328>
													trigger_valve_modification=1;
 8011034:	4b37      	ldr	r3, [pc, #220]	; (8011114 <VC_SIMV_Task+0x2dc>)
 8011036:	2201      	movs	r2, #1
 8011038:	601a      	str	r2, [r3, #0]
													Switch_TASK_I_CYCLE();
 801103a:	f7fa f87b 	bl	800b134 <Switch_TASK_I_CYCLE>
										if(R1.Assist_mode2==0 )
 801103e:	e08f      	b.n	8011160 <VC_SIMV_Task+0x328>
										else if(R1.Assist_mode2==1 )
 8011040:	4b2d      	ldr	r3, [pc, #180]	; (80110f8 <VC_SIMV_Task+0x2c0>)
 8011042:	7d9b      	ldrb	r3, [r3, #22]
 8011044:	2b01      	cmp	r3, #1
 8011046:	f040 808b 	bne.w	8011160 <VC_SIMV_Task+0x328>
											if (R6._TRIG_TYPE == 1)
 801104a:	4b30      	ldr	r3, [pc, #192]	; (801110c <VC_SIMV_Task+0x2d4>)
 801104c:	881b      	ldrh	r3, [r3, #0]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d11f      	bne.n	8011092 <VC_SIMV_Task+0x25a>
												if ((Pressure_sensor._Pressure_Val< (R6.simv_trigger_offset - R6._TRIG_LMT)))
 8011052:	4b2a      	ldr	r3, [pc, #168]	; (80110fc <VC_SIMV_Task+0x2c4>)
 8011054:	791b      	ldrb	r3, [r3, #4]
 8011056:	ee07 3a90 	vmov	s15, r3
 801105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801105e:	4b2b      	ldr	r3, [pc, #172]	; (801110c <VC_SIMV_Task+0x2d4>)
 8011060:	edd3 6a03 	vldr	s13, [r3, #12]
 8011064:	4b29      	ldr	r3, [pc, #164]	; (801110c <VC_SIMV_Task+0x2d4>)
 8011066:	885b      	ldrh	r3, [r3, #2]
 8011068:	ee07 3a90 	vmov	s15, r3
 801106c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011070:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107c:	d400      	bmi.n	8011080 <VC_SIMV_Task+0x248>
										if(R1.Assist_mode2==0 )
 801107e:	e06f      	b.n	8011160 <VC_SIMV_Task+0x328>
													trigger_valve_modification=1;
 8011080:	4b24      	ldr	r3, [pc, #144]	; (8011114 <VC_SIMV_Task+0x2dc>)
 8011082:	2201      	movs	r2, #1
 8011084:	601a      	str	r2, [r3, #0]
													Trigger_Flag2=1;
 8011086:	4b25      	ldr	r3, [pc, #148]	; (801111c <VC_SIMV_Task+0x2e4>)
 8011088:	2201      	movs	r2, #1
 801108a:	701a      	strb	r2, [r3, #0]
													Switch_TASK_I_CYCLE();
 801108c:	f7fa f852 	bl	800b134 <Switch_TASK_I_CYCLE>
										if(R1.Assist_mode2==0 )
 8011090:	e066      	b.n	8011160 <VC_SIMV_Task+0x328>
												if ((Flow_Sensor_cal._Flow_Val > (R6.simv_trigger_offset2+R6._TRIG_LMT)))
 8011092:	4b21      	ldr	r3, [pc, #132]	; (8011118 <VC_SIMV_Task+0x2e0>)
 8011094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011096:	ee07 3a90 	vmov	s15, r3
 801109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801109e:	4b1b      	ldr	r3, [pc, #108]	; (801110c <VC_SIMV_Task+0x2d4>)
 80110a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80110a4:	4b19      	ldr	r3, [pc, #100]	; (801110c <VC_SIMV_Task+0x2d4>)
 80110a6:	885b      	ldrh	r3, [r3, #2]
 80110a8:	ee07 3a90 	vmov	s15, r3
 80110ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110bc:	dc00      	bgt.n	80110c0 <VC_SIMV_Task+0x288>
										if(R1.Assist_mode2==0 )
 80110be:	e04f      	b.n	8011160 <VC_SIMV_Task+0x328>
													trigger_valve_modification=1;
 80110c0:	4b14      	ldr	r3, [pc, #80]	; (8011114 <VC_SIMV_Task+0x2dc>)
 80110c2:	2201      	movs	r2, #1
 80110c4:	601a      	str	r2, [r3, #0]
													Trigger_Flag2=1;
 80110c6:	4b15      	ldr	r3, [pc, #84]	; (801111c <VC_SIMV_Task+0x2e4>)
 80110c8:	2201      	movs	r2, #1
 80110ca:	701a      	strb	r2, [r3, #0]
													Switch_TASK_I_CYCLE();
 80110cc:	f7fa f832 	bl	800b134 <Switch_TASK_I_CYCLE>
										if(R1.Assist_mode2==0 )
 80110d0:	e046      	b.n	8011160 <VC_SIMV_Task+0x328>
 80110d2:	bf00      	nop
 80110d4:	f3af 8000 	nop.w
 80110d8:	00000000 	.word	0x00000000
 80110dc:	4072c000 	.word	0x4072c000
 80110e0:	20016cc8 	.word	0x20016cc8
 80110e4:	40020400 	.word	0x40020400
 80110e8:	20016b64 	.word	0x20016b64
 80110ec:	40007400 	.word	0x40007400
 80110f0:	20016df4 	.word	0x20016df4
 80110f4:	20000114 	.word	0x20000114
 80110f8:	20016c08 	.word	0x20016c08
 80110fc:	20016cfc 	.word	0x20016cfc
 8011100:	200169a0 	.word	0x200169a0
 8011104:	20016a18 	.word	0x20016a18
 8011108:	20017094 	.word	0x20017094
 801110c:	20016b3c 	.word	0x20016b3c
 8011110:	20016d74 	.word	0x20016d74
 8011114:	20000314 	.word	0x20000314
 8011118:	20016c48 	.word	0x20016c48
 801111c:	20016d0c 	.word	0x20016d0c
											if(Flow_Sensor_cal._Flow_Val==0 || (Flow_Sensor_cal._Flow_Val>=(-8) && Flow_Sensor_cal._Flow_Val<0))
 8011120:	4b1f      	ldr	r3, [pc, #124]	; (80111a0 <VC_SIMV_Task+0x368>)
 8011122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011124:	2b00      	cmp	r3, #0
 8011126:	d008      	beq.n	801113a <VC_SIMV_Task+0x302>
 8011128:	4b1d      	ldr	r3, [pc, #116]	; (80111a0 <VC_SIMV_Task+0x368>)
 801112a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801112c:	f113 0f08 	cmn.w	r3, #8
 8011130:	db17      	blt.n	8011162 <VC_SIMV_Task+0x32a>
 8011132:	4b1b      	ldr	r3, [pc, #108]	; (80111a0 <VC_SIMV_Task+0x368>)
 8011134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011136:	2b00      	cmp	r3, #0
 8011138:	da13      	bge.n	8011162 <VC_SIMV_Task+0x32a>
												R6.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 801113a:	4b1a      	ldr	r3, [pc, #104]	; (80111a4 <VC_SIMV_Task+0x36c>)
 801113c:	791b      	ldrb	r3, [r3, #4]
 801113e:	ee07 3a90 	vmov	s15, r3
 8011142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011146:	4b18      	ldr	r3, [pc, #96]	; (80111a8 <VC_SIMV_Task+0x370>)
 8011148:	edc3 7a03 	vstr	s15, [r3, #12]
												R6.simv_trigger_offset2=Flow_Sensor_cal._Flow_Val;
 801114c:	4b14      	ldr	r3, [pc, #80]	; (80111a0 <VC_SIMV_Task+0x368>)
 801114e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011150:	ee07 3a90 	vmov	s15, r3
 8011154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011158:	4b13      	ldr	r3, [pc, #76]	; (80111a8 <VC_SIMV_Task+0x370>)
 801115a:	edc3 7a04 	vstr	s15, [r3, #16]
 801115e:	e000      	b.n	8011162 <VC_SIMV_Task+0x32a>
										if(R1.Assist_mode2==0 )
 8011160:	bf00      	nop
			if(  (Pressure_sensor._Pressure_Val > (R1._PEEP_Val))   &&  (S5.peep_process_done==1))
 8011162:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <VC_SIMV_Task+0x36c>)
 8011164:	791a      	ldrb	r2, [r3, #4]
 8011166:	4b11      	ldr	r3, [pc, #68]	; (80111ac <VC_SIMV_Task+0x374>)
 8011168:	785b      	ldrb	r3, [r3, #1]
 801116a:	429a      	cmp	r2, r3
 801116c:	d912      	bls.n	8011194 <VC_SIMV_Task+0x35c>
 801116e:	4b10      	ldr	r3, [pc, #64]	; (80111b0 <VC_SIMV_Task+0x378>)
 8011170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011172:	2b01      	cmp	r3, #1
 8011174:	d10e      	bne.n	8011194 <VC_SIMV_Task+0x35c>
				pressure_acheived=0;
 8011176:	4b0f      	ldr	r3, [pc, #60]	; (80111b4 <VC_SIMV_Task+0x37c>)
 8011178:	2200      	movs	r2, #0
 801117a:	601a      	str	r2, [r3, #0]
				R4._DAC_VAL0=0;
 801117c:	4b0e      	ldr	r3, [pc, #56]	; (80111b8 <VC_SIMV_Task+0x380>)
 801117e:	2200      	movs	r2, #0
 8011180:	811a      	strh	r2, [r3, #8]
				Blower_Signal( R4._DAC_VAL0);
 8011182:	4b0d      	ldr	r3, [pc, #52]	; (80111b8 <VC_SIMV_Task+0x380>)
 8011184:	891a      	ldrh	r2, [r3, #8]
 8011186:	4b0d      	ldr	r3, [pc, #52]	; (80111bc <VC_SIMV_Task+0x384>)
 8011188:	609a      	str	r2, [r3, #8]
						break;
 801118a:	e003      	b.n	8011194 <VC_SIMV_Task+0x35c>
						break;
 801118c:	bf00      	nop
 801118e:	e002      	b.n	8011196 <VC_SIMV_Task+0x35e>
						break;
 8011190:	bf00      	nop
 8011192:	e000      	b.n	8011196 <VC_SIMV_Task+0x35e>
						break;
 8011194:	bf00      	nop


				}
		   vTaskDelay(2);
 8011196:	2002      	movs	r0, #2
 8011198:	f00e fb68 	bl	801f86c <vTaskDelay>
		        switch (_CurrentComputationState)
 801119c:	e650      	b.n	8010e40 <VC_SIMV_Task+0x8>
 801119e:	bf00      	nop
 80111a0:	20016c48 	.word	0x20016c48
 80111a4:	20016cfc 	.word	0x20016cfc
 80111a8:	20016b3c 	.word	0x20016b3c
 80111ac:	20016c08 	.word	0x20016c08
 80111b0:	20016df4 	.word	0x20016df4
 80111b4:	20000114 	.word	0x20000114
 80111b8:	20016b64 	.word	0x20016b64
 80111bc:	40007400 	.word	0x40007400

080111c0 <VC_SIMV_PID_Task>:




void VC_SIMV_PID_Task(void *argument)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]


	while (1)
	{
		if(S1._Mode_Val == 4 )
 80111c8:	4b1d      	ldr	r3, [pc, #116]	; (8011240 <VC_SIMV_PID_Task+0x80>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d130      	bne.n	8011232 <VC_SIMV_PID_Task+0x72>
		{
			if(_CurrentComputationState==Compute_I_Wave && Trigger_Flag2==0)
 80111d0:	4b1c      	ldr	r3, [pc, #112]	; (8011244 <VC_SIMV_PID_Task+0x84>)
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d110      	bne.n	80111fa <VC_SIMV_PID_Task+0x3a>
 80111d8:	4b1b      	ldr	r3, [pc, #108]	; (8011248 <VC_SIMV_PID_Task+0x88>)
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d10c      	bne.n	80111fa <VC_SIMV_PID_Task+0x3a>
			{
				if(O2._FIO2_Val==100)
 80111e0:	4b1a      	ldr	r3, [pc, #104]	; (801124c <VC_SIMV_PID_Task+0x8c>)
 80111e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111e6:	2b64      	cmp	r3, #100	; 0x64
 80111e8:	d104      	bne.n	80111f4 <VC_SIMV_PID_Task+0x34>
				{
					R4._DAC_VAL0=400;
 80111ea:	4b19      	ldr	r3, [pc, #100]	; (8011250 <VC_SIMV_PID_Task+0x90>)
 80111ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80111f0:	811a      	strh	r2, [r3, #8]
				if(O2._FIO2_Val==100)
 80111f2:	e01e      	b.n	8011232 <VC_SIMV_PID_Task+0x72>
				}
				else
				{
					volume_task_SIMV();
 80111f4:	f000 fd1a 	bl	8011c2c <volume_task_SIMV>
				if(O2._FIO2_Val==100)
 80111f8:	e01b      	b.n	8011232 <VC_SIMV_PID_Task+0x72>
				}

			}
			else if(_CurrentComputationState==Compute_E_Wave )
 80111fa:	4b12      	ldr	r3, [pc, #72]	; (8011244 <VC_SIMV_PID_Task+0x84>)
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d117      	bne.n	8011232 <VC_SIMV_PID_Task+0x72>
			{
				if(Ach_vol==1)
 8011202:	4b14      	ldr	r3, [pc, #80]	; (8011254 <VC_SIMV_PID_Task+0x94>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b01      	cmp	r3, #1
 8011208:	d10c      	bne.n	8011224 <VC_SIMV_PID_Task+0x64>
				{
					Acheived_Volume=vol.Volume;
 801120a:	4b13      	ldr	r3, [pc, #76]	; (8011258 <VC_SIMV_PID_Task+0x98>)
 801120c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011214:	ee17 3a90 	vmov	r3, s15
 8011218:	b29a      	uxth	r2, r3
 801121a:	4b10      	ldr	r3, [pc, #64]	; (801125c <VC_SIMV_PID_Task+0x9c>)
 801121c:	801a      	strh	r2, [r3, #0]
					Ach_vol=0;
 801121e:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <VC_SIMV_PID_Task+0x94>)
 8011220:	2200      	movs	r2, #0
 8011222:	601a      	str	r2, [r3, #0]
				}
				if(Dac_set==1)
 8011224:	4b0e      	ldr	r3, [pc, #56]	; (8011260 <VC_SIMV_PID_Task+0xa0>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2b01      	cmp	r3, #1
 801122a:	d102      	bne.n	8011232 <VC_SIMV_PID_Task+0x72>
				{
					R4._DAC_VAL0=0;
 801122c:	4b08      	ldr	r3, [pc, #32]	; (8011250 <VC_SIMV_PID_Task+0x90>)
 801122e:	2200      	movs	r2, #0
 8011230:	811a      	strh	r2, [r3, #8]
					Blower_Signal( R4._DAC_VAL0);

				}*/
			}
		}
		vTaskDelay(R4.PID_task_delay);
 8011232:	4b07      	ldr	r3, [pc, #28]	; (8011250 <VC_SIMV_PID_Task+0x90>)
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	4618      	mov	r0, r3
 8011238:	f00e fb18 	bl	801f86c <vTaskDelay>
		if(S1._Mode_Val == 4 )
 801123c:	e7c4      	b.n	80111c8 <VC_SIMV_PID_Task+0x8>
 801123e:	bf00      	nop
 8011240:	20016ae0 	.word	0x20016ae0
 8011244:	20016cc8 	.word	0x20016cc8
 8011248:	20016d0c 	.word	0x20016d0c
 801124c:	20000048 	.word	0x20000048
 8011250:	20016b64 	.word	0x20016b64
 8011254:	20016ed8 	.word	0x20016ed8
 8011258:	20016d44 	.word	0x20016d44
 801125c:	20016ad8 	.word	0x20016ad8
 8011260:	2000033c 	.word	0x2000033c

08011264 <VC_SIMV_Pulse_I_Parameter>:




void VC_SIMV_Pulse_I_Parameter()
{
 8011264:	b5b0      	push	{r4, r5, r7, lr}
 8011266:	af00      	add	r7, sp, #0

	if(Trigger_Flag2==0)
 8011268:	4b8b      	ldr	r3, [pc, #556]	; (8011498 <VC_SIMV_Pulse_I_Parameter+0x234>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 813f 	bne.w	80114f0 <VC_SIMV_Pulse_I_Parameter+0x28c>
	{

		R6._TOLERANCE_EWAVE = R2._E_TIMER_HOLD - S5.Lock_delay;
 8011272:	4b8a      	ldr	r3, [pc, #552]	; (801149c <VC_SIMV_Pulse_I_Parameter+0x238>)
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	b29a      	uxth	r2, r3
 8011278:	4b89      	ldr	r3, [pc, #548]	; (80114a0 <VC_SIMV_Pulse_I_Parameter+0x23c>)
 801127a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	b29a      	uxth	r2, r3
 8011280:	4b88      	ldr	r3, [pc, #544]	; (80114a4 <VC_SIMV_Pulse_I_Parameter+0x240>)
 8011282:	811a      	strh	r2, [r3, #8]
		R6._TRIG_WINDOW = R6._TOLERANCE_EWAVE* (((float) R6._TRIG_TIME * 10.00) / 100.00);
 8011284:	4b87      	ldr	r3, [pc, #540]	; (80114a4 <VC_SIMV_Pulse_I_Parameter+0x240>)
 8011286:	891b      	ldrh	r3, [r3, #8]
 8011288:	4618      	mov	r0, r3
 801128a:	f7ef f8f3 	bl	8000474 <__aeabi_i2d>
 801128e:	4604      	mov	r4, r0
 8011290:	460d      	mov	r5, r1
 8011292:	4b84      	ldr	r3, [pc, #528]	; (80114a4 <VC_SIMV_Pulse_I_Parameter+0x240>)
 8011294:	889b      	ldrh	r3, [r3, #4]
 8011296:	ee07 3a90 	vmov	s15, r3
 801129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801129e:	ee17 0a90 	vmov	r0, s15
 80112a2:	f7ef f8f9 	bl	8000498 <__aeabi_f2d>
 80112a6:	f04f 0200 	mov.w	r2, #0
 80112aa:	4b7f      	ldr	r3, [pc, #508]	; (80114a8 <VC_SIMV_Pulse_I_Parameter+0x244>)
 80112ac:	f7ef f94c 	bl	8000548 <__aeabi_dmul>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	4610      	mov	r0, r2
 80112b6:	4619      	mov	r1, r3
 80112b8:	f04f 0200 	mov.w	r2, #0
 80112bc:	4b7b      	ldr	r3, [pc, #492]	; (80114ac <VC_SIMV_Pulse_I_Parameter+0x248>)
 80112be:	f7ef fa6d 	bl	800079c <__aeabi_ddiv>
 80112c2:	4602      	mov	r2, r0
 80112c4:	460b      	mov	r3, r1
 80112c6:	4620      	mov	r0, r4
 80112c8:	4629      	mov	r1, r5
 80112ca:	f7ef f93d 	bl	8000548 <__aeabi_dmul>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4610      	mov	r0, r2
 80112d4:	4619      	mov	r1, r3
 80112d6:	f7ef fbf9 	bl	8000acc <__aeabi_d2uiz>
 80112da:	4603      	mov	r3, r0
 80112dc:	b29a      	uxth	r2, r3
 80112de:	4b71      	ldr	r3, [pc, #452]	; (80114a4 <VC_SIMV_Pulse_I_Parameter+0x240>)
 80112e0:	815a      	strh	r2, [r3, #10]

		now_check_breath=1;
 80112e2:	4b73      	ldr	r3, [pc, #460]	; (80114b0 <VC_SIMV_Pulse_I_Parameter+0x24c>)
 80112e4:	2201      	movs	r2, #1
 80112e6:	701a      	strb	r2, [r3, #0]
			 _Control_Byte &= (uint8_t) (~(0x80));
 80112e8:	4b72      	ldr	r3, [pc, #456]	; (80114b4 <VC_SIMV_Pulse_I_Parameter+0x250>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	4b70      	ldr	r3, [pc, #448]	; (80114b4 <VC_SIMV_Pulse_I_Parameter+0x250>)
 80112f4:	701a      	strb	r2, [r3, #0]
			 vol.Volume = 0;
 80112f6:	4b70      	ldr	r3, [pc, #448]	; (80114b8 <VC_SIMV_Pulse_I_Parameter+0x254>)
 80112f8:	f04f 0200 	mov.w	r2, #0
 80112fc:	605a      	str	r2, [r3, #4]
			 V_max=0;
 80112fe:	4b6f      	ldr	r3, [pc, #444]	; (80114bc <VC_SIMV_Pulse_I_Parameter+0x258>)
 8011300:	2200      	movs	r2, #0
 8011302:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8011304:	2201      	movs	r2, #1
 8011306:	f44f 7100 	mov.w	r1, #512	; 0x200
 801130a:	486d      	ldr	r0, [pc, #436]	; (80114c0 <VC_SIMV_Pulse_I_Parameter+0x25c>)
 801130c:	f005 fcca 	bl	8016ca4 <HAL_GPIO_WritePin>
			 _I_TIMER_ACHEIVED = 0;
 8011310:	4b6c      	ldr	r3, [pc, #432]	; (80114c4 <VC_SIMV_Pulse_I_Parameter+0x260>)
 8011312:	2200      	movs	r2, #0
 8011314:	801a      	strh	r2, [r3, #0]
			 Led_Alert();
 8011316:	f7f1 fae5 	bl	80028e4 <Led_Alert>
						   if (R4.F_max > (R1._Flow_Rate +10))
 801131a:	4b6b      	ldr	r3, [pc, #428]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	4b6b      	ldr	r3, [pc, #428]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 8011320:	8a1b      	ldrh	r3, [r3, #16]
 8011322:	330a      	adds	r3, #10
 8011324:	429a      	cmp	r2, r3
 8011326:	dd46      	ble.n	80113b6 <VC_SIMV_Pulse_I_Parameter+0x152>
							{
								if (R4.F_max > (R1._Flow_Rate + 20))
 8011328:	4b67      	ldr	r3, [pc, #412]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	4b67      	ldr	r3, [pc, #412]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 801132e:	8a1b      	ldrh	r3, [r3, #16]
 8011330:	3314      	adds	r3, #20
 8011332:	429a      	cmp	r2, r3
 8011334:	dd06      	ble.n	8011344 <VC_SIMV_Pulse_I_Parameter+0xe0>
								{
									R4.temp_dac = R4.temp_dac_new - 20;
 8011336:	4b64      	ldr	r3, [pc, #400]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011338:	88db      	ldrh	r3, [r3, #6]
 801133a:	3b14      	subs	r3, #20
 801133c:	b29a      	uxth	r2, r3
 801133e:	4b62      	ldr	r3, [pc, #392]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011340:	809a      	strh	r2, [r3, #4]
 8011342:	e02a      	b.n	801139a <VC_SIMV_Pulse_I_Parameter+0x136>
								}
								else if ((R4.F_max <= (R1._Flow_Rate + 20))&& (R4.F_max >= (R1._Flow_Rate + 10)))
 8011344:	4b60      	ldr	r3, [pc, #384]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	4b60      	ldr	r3, [pc, #384]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 801134a:	8a1b      	ldrh	r3, [r3, #16]
 801134c:	3314      	adds	r3, #20
 801134e:	429a      	cmp	r2, r3
 8011350:	dc0e      	bgt.n	8011370 <VC_SIMV_Pulse_I_Parameter+0x10c>
 8011352:	4b5e      	ldr	r3, [pc, #376]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 8011354:	8a1b      	ldrh	r3, [r3, #16]
 8011356:	f103 0209 	add.w	r2, r3, #9
 801135a:	4b5b      	ldr	r3, [pc, #364]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	429a      	cmp	r2, r3
 8011360:	da06      	bge.n	8011370 <VC_SIMV_Pulse_I_Parameter+0x10c>
								{
									R4.temp_dac = R4.temp_dac_new - 5;
 8011362:	4b59      	ldr	r3, [pc, #356]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011364:	88db      	ldrh	r3, [r3, #6]
 8011366:	3b05      	subs	r3, #5
 8011368:	b29a      	uxth	r2, r3
 801136a:	4b57      	ldr	r3, [pc, #348]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801136c:	809a      	strh	r2, [r3, #4]
 801136e:	e014      	b.n	801139a <VC_SIMV_Pulse_I_Parameter+0x136>
								}
								else if ((R4.F_max < (R1._Flow_Rate + 10)) && (R4.F_max >= (R1._Flow_Rate + 5)))
 8011370:	4b56      	ldr	r3, [pc, #344]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 8011372:	8a1b      	ldrh	r3, [r3, #16]
 8011374:	f103 0209 	add.w	r2, r3, #9
 8011378:	4b53      	ldr	r3, [pc, #332]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	429a      	cmp	r2, r3
 801137e:	db0c      	blt.n	801139a <VC_SIMV_Pulse_I_Parameter+0x136>
 8011380:	4b52      	ldr	r3, [pc, #328]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 8011382:	8a1b      	ldrh	r3, [r3, #16]
 8011384:	1d1a      	adds	r2, r3, #4
 8011386:	4b50      	ldr	r3, [pc, #320]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	da05      	bge.n	801139a <VC_SIMV_Pulse_I_Parameter+0x136>
								{
									R4.temp_dac = R4.temp_dac_new - 1;
 801138e:	4b4e      	ldr	r3, [pc, #312]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011390:	88db      	ldrh	r3, [r3, #6]
 8011392:	3b01      	subs	r3, #1
 8011394:	b29a      	uxth	r2, r3
 8011396:	4b4c      	ldr	r3, [pc, #304]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011398:	809a      	strh	r2, [r3, #4]
								}

								R4.temp_dac_new = R4.temp_dac;
 801139a:	4b4b      	ldr	r3, [pc, #300]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801139c:	889a      	ldrh	r2, [r3, #4]
 801139e:	4b4a      	ldr	r3, [pc, #296]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113a0:	80da      	strh	r2, [r3, #6]
								if (R4.temp_dac_new < 500)
 80113a2:	4b49      	ldr	r3, [pc, #292]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113a4:	88db      	ldrh	r3, [r3, #6]
 80113a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80113aa:	d22c      	bcs.n	8011406 <VC_SIMV_Pulse_I_Parameter+0x1a2>
								{
									R4.temp_dac_new = 500;
 80113ac:	4b46      	ldr	r3, [pc, #280]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80113b2:	80da      	strh	r2, [r3, #6]
 80113b4:	e027      	b.n	8011406 <VC_SIMV_Pulse_I_Parameter+0x1a2>
								}
							}
							else if (R4.F_max < (R1._Flow_Rate- 5))
 80113b6:	4b44      	ldr	r3, [pc, #272]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	4b44      	ldr	r3, [pc, #272]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 80113bc:	8a1b      	ldrh	r3, [r3, #16]
 80113be:	3b05      	subs	r3, #5
 80113c0:	429a      	cmp	r2, r3
 80113c2:	da18      	bge.n	80113f6 <VC_SIMV_Pulse_I_Parameter+0x192>
							{
								if (R3.max_flow_acheived == 0)
 80113c4:	4b42      	ldr	r3, [pc, #264]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d11c      	bne.n	8011406 <VC_SIMV_Pulse_I_Parameter+0x1a2>
								{
									R4.temp_dac = R4.temp_dac_new + 30;
 80113cc:	4b3e      	ldr	r3, [pc, #248]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113ce:	88db      	ldrh	r3, [r3, #6]
 80113d0:	331e      	adds	r3, #30
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	4b3c      	ldr	r3, [pc, #240]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113d6:	809a      	strh	r2, [r3, #4]
									R4.temp_dac_new = R4.temp_dac;
 80113d8:	4b3b      	ldr	r3, [pc, #236]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113da:	889a      	ldrh	r2, [r3, #4]
 80113dc:	4b3a      	ldr	r3, [pc, #232]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113de:	80da      	strh	r2, [r3, #6]

										if (R4.temp_dac_new > 3500)
 80113e0:	4b39      	ldr	r3, [pc, #228]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113e2:	88db      	ldrh	r3, [r3, #6]
 80113e4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d90c      	bls.n	8011406 <VC_SIMV_Pulse_I_Parameter+0x1a2>
										{
											R4.temp_dac_new = 3500;
 80113ec:	4b36      	ldr	r3, [pc, #216]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113ee:	f640 52ac 	movw	r2, #3500	; 0xdac
 80113f2:	80da      	strh	r2, [r3, #6]
 80113f4:	e007      	b.n	8011406 <VC_SIMV_Pulse_I_Parameter+0x1a2>
								}

							}
							else
							{
								R4.temp_dac = R4.temp_dac_new;
 80113f6:	4b34      	ldr	r3, [pc, #208]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113f8:	88da      	ldrh	r2, [r3, #6]
 80113fa:	4b33      	ldr	r3, [pc, #204]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 80113fc:	809a      	strh	r2, [r3, #4]
								R4.temp_dac_new = R4.temp_dac;
 80113fe:	4b32      	ldr	r3, [pc, #200]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011400:	889a      	ldrh	r2, [r3, #4]
 8011402:	4b31      	ldr	r3, [pc, #196]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 8011404:	80da      	strh	r2, [r3, #6]
							}


						   R3.max_flow_acheived = 0;
 8011406:	4b32      	ldr	r3, [pc, #200]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 8011408:	2200      	movs	r2, #0
 801140a:	601a      	str	r2, [r3, #0]
						   R3.constant_dac_done = 1;
 801140c:	4b30      	ldr	r3, [pc, #192]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 801140e:	2201      	movs	r2, #1
 8011410:	605a      	str	r2, [r3, #4]
						   R3.Reached_flow_val = 0;
 8011412:	4b2f      	ldr	r3, [pc, #188]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 8011414:	2200      	movs	r2, #0
 8011416:	609a      	str	r2, [r3, #8]
						   R4.F_max = 0;
 8011418:	4b2b      	ldr	r3, [pc, #172]	; (80114c8 <VC_SIMV_Pulse_I_Parameter+0x264>)
 801141a:	2200      	movs	r2, #0
 801141c:	601a      	str	r2, [r3, #0]
						   R3.sensordata_done = 1;
 801141e:	4b2c      	ldr	r3, [pc, #176]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 8011420:	2201      	movs	r2, #1
 8011422:	60da      	str	r2, [r3, #12]
						   R3.Volume_acheived = 1;
 8011424:	4b2a      	ldr	r3, [pc, #168]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 8011426:	2201      	movs	r2, #1
 8011428:	611a      	str	r2, [r3, #16]
						   R3.volume_reached = 0;
 801142a:	4b29      	ldr	r3, [pc, #164]	; (80114d0 <VC_SIMV_Pulse_I_Parameter+0x26c>)
 801142c:	2200      	movs	r2, #0
 801142e:	615a      	str	r2, [r3, #20]


						   Peep_E_Valve_Lock_delay_Vc_simv();
 8011430:	f000 fc78 	bl	8011d24 <Peep_E_Valve_Lock_delay_Vc_simv>

						   Ach_vol=1;
 8011434:	4b27      	ldr	r3, [pc, #156]	; (80114d4 <VC_SIMV_Pulse_I_Parameter+0x270>)
 8011436:	2201      	movs	r2, #1
 8011438:	601a      	str	r2, [r3, #0]
						   if(Acheived_Volume>(R1._VT_Val+20))
 801143a:	4b27      	ldr	r3, [pc, #156]	; (80114d8 <VC_SIMV_Pulse_I_Parameter+0x274>)
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	461a      	mov	r2, r3
 8011440:	4b22      	ldr	r3, [pc, #136]	; (80114cc <VC_SIMV_Pulse_I_Parameter+0x268>)
 8011442:	8a9b      	ldrh	r3, [r3, #20]
 8011444:	3314      	adds	r3, #20
 8011446:	429a      	cmp	r2, r3
 8011448:	dd11      	ble.n	801146e <VC_SIMV_Pulse_I_Parameter+0x20a>
						   {
								check_count++;
 801144a:	4b24      	ldr	r3, [pc, #144]	; (80114dc <VC_SIMV_Pulse_I_Parameter+0x278>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3301      	adds	r3, #1
 8011450:	4a22      	ldr	r2, [pc, #136]	; (80114dc <VC_SIMV_Pulse_I_Parameter+0x278>)
 8011452:	6013      	str	r3, [r2, #0]
								if (check_count >= 3)
 8011454:	4b21      	ldr	r3, [pc, #132]	; (80114dc <VC_SIMV_Pulse_I_Parameter+0x278>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b02      	cmp	r3, #2
 801145a:	dd08      	ble.n	801146e <VC_SIMV_Pulse_I_Parameter+0x20a>
								{
									check_dev = check_dev + 5;
 801145c:	4b20      	ldr	r3, [pc, #128]	; (80114e0 <VC_SIMV_Pulse_I_Parameter+0x27c>)
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	3305      	adds	r3, #5
 8011462:	b29a      	uxth	r2, r3
 8011464:	4b1e      	ldr	r3, [pc, #120]	; (80114e0 <VC_SIMV_Pulse_I_Parameter+0x27c>)
 8011466:	801a      	strh	r2, [r3, #0]
									check_count = 0;
 8011468:	4b1c      	ldr	r3, [pc, #112]	; (80114dc <VC_SIMV_Pulse_I_Parameter+0x278>)
 801146a:	2200      	movs	r2, #0
 801146c:	601a      	str	r2, [r3, #0]
								}
							}
						   S5.P_Max = 0;
 801146e:	4b0c      	ldr	r3, [pc, #48]	; (80114a0 <VC_SIMV_Pulse_I_Parameter+0x23c>)
 8011470:	2200      	movs	r2, #0
 8011472:	601a      	str	r2, [r3, #0]
			 Alert_I_Time_Parameter();
 8011474:	f7f1 f884 	bl	8002580 <Alert_I_Time_Parameter>
			 _I_TIMER = R2._I_TIMER_HOLD;
 8011478:	4b08      	ldr	r3, [pc, #32]	; (801149c <VC_SIMV_Pulse_I_Parameter+0x238>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a19      	ldr	r2, [pc, #100]	; (80114e4 <VC_SIMV_Pulse_I_Parameter+0x280>)
 801147e:	6013      	str	r3, [r2, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8011480:	4b19      	ldr	r3, [pc, #100]	; (80114e8 <VC_SIMV_Pulse_I_Parameter+0x284>)
 8011482:	2201      	movs	r2, #1
 8011484:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_I_Wave ;
 8011486:	4b19      	ldr	r3, [pc, #100]	; (80114ec <VC_SIMV_Pulse_I_Parameter+0x288>)
 8011488:	2200      	movs	r2, #0
 801148a:	701a      	strb	r2, [r3, #0]
			vTaskDelay(R2._I_TIMER_HOLD);
 801148c:	4b03      	ldr	r3, [pc, #12]	; (801149c <VC_SIMV_Pulse_I_Parameter+0x238>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4618      	mov	r0, r3
 8011492:	f00e f9eb 	bl	801f86c <vTaskDelay>
			 _I_TIMER = R2._I_TIMER_HOLD;
			_CurrentWaveFormState = Generate_E_Wave;
			_CurrentComputationState = Compute_I_Wave ;
			vTaskDelay(R2._I_TIMER_HOLD);
	}
}
 8011496:	e097      	b.n	80115c8 <VC_SIMV_Pulse_I_Parameter+0x364>
 8011498:	20016d0c 	.word	0x20016d0c
 801149c:	20016d94 	.word	0x20016d94
 80114a0:	20016df4 	.word	0x20016df4
 80114a4:	20016b3c 	.word	0x20016b3c
 80114a8:	40240000 	.word	0x40240000
 80114ac:	40590000 	.word	0x40590000
 80114b0:	20000feb 	.word	0x20000feb
 80114b4:	20016e59 	.word	0x20016e59
 80114b8:	20016d44 	.word	0x20016d44
 80114bc:	20016d60 	.word	0x20016d60
 80114c0:	40020400 	.word	0x40020400
 80114c4:	20016af4 	.word	0x20016af4
 80114c8:	20016b64 	.word	0x20016b64
 80114cc:	20016c08 	.word	0x20016c08
 80114d0:	20016928 	.word	0x20016928
 80114d4:	20016ed8 	.word	0x20016ed8
 80114d8:	20016ad8 	.word	0x20016ad8
 80114dc:	20016ec8 	.word	0x20016ec8
 80114e0:	20016bd4 	.word	0x20016bd4
 80114e4:	20016df0 	.word	0x20016df0
 80114e8:	20016adc 	.word	0x20016adc
 80114ec:	20016cc8 	.word	0x20016cc8
	else if(Trigger_Flag2==1)
 80114f0:	4b36      	ldr	r3, [pc, #216]	; (80115cc <VC_SIMV_Pulse_I_Parameter+0x368>)
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d167      	bne.n	80115c8 <VC_SIMV_Pulse_I_Parameter+0x364>
		R6._TOLERANCE_EWAVE = R2._E_TIMER_HOLD - S5.Lock_delay;
 80114f8:	4b35      	ldr	r3, [pc, #212]	; (80115d0 <VC_SIMV_Pulse_I_Parameter+0x36c>)
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	4b35      	ldr	r3, [pc, #212]	; (80115d4 <VC_SIMV_Pulse_I_Parameter+0x370>)
 8011500:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	b29a      	uxth	r2, r3
 8011506:	4b34      	ldr	r3, [pc, #208]	; (80115d8 <VC_SIMV_Pulse_I_Parameter+0x374>)
 8011508:	811a      	strh	r2, [r3, #8]
		R6._TRIG_WINDOW = R6._TOLERANCE_EWAVE* (((float) R6._TRIG_TIME * 10.00) / 100.00);
 801150a:	4b33      	ldr	r3, [pc, #204]	; (80115d8 <VC_SIMV_Pulse_I_Parameter+0x374>)
 801150c:	891b      	ldrh	r3, [r3, #8]
 801150e:	4618      	mov	r0, r3
 8011510:	f7ee ffb0 	bl	8000474 <__aeabi_i2d>
 8011514:	4604      	mov	r4, r0
 8011516:	460d      	mov	r5, r1
 8011518:	4b2f      	ldr	r3, [pc, #188]	; (80115d8 <VC_SIMV_Pulse_I_Parameter+0x374>)
 801151a:	889b      	ldrh	r3, [r3, #4]
 801151c:	ee07 3a90 	vmov	s15, r3
 8011520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011524:	ee17 0a90 	vmov	r0, s15
 8011528:	f7ee ffb6 	bl	8000498 <__aeabi_f2d>
 801152c:	f04f 0200 	mov.w	r2, #0
 8011530:	4b2a      	ldr	r3, [pc, #168]	; (80115dc <VC_SIMV_Pulse_I_Parameter+0x378>)
 8011532:	f7ef f809 	bl	8000548 <__aeabi_dmul>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	4610      	mov	r0, r2
 801153c:	4619      	mov	r1, r3
 801153e:	f04f 0200 	mov.w	r2, #0
 8011542:	4b27      	ldr	r3, [pc, #156]	; (80115e0 <VC_SIMV_Pulse_I_Parameter+0x37c>)
 8011544:	f7ef f92a 	bl	800079c <__aeabi_ddiv>
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	4620      	mov	r0, r4
 801154e:	4629      	mov	r1, r5
 8011550:	f7ee fffa 	bl	8000548 <__aeabi_dmul>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4610      	mov	r0, r2
 801155a:	4619      	mov	r1, r3
 801155c:	f7ef fab6 	bl	8000acc <__aeabi_d2uiz>
 8011560:	4603      	mov	r3, r0
 8011562:	b29a      	uxth	r2, r3
 8011564:	4b1c      	ldr	r3, [pc, #112]	; (80115d8 <VC_SIMV_Pulse_I_Parameter+0x374>)
 8011566:	815a      	strh	r2, [r3, #10]
		now_check_breath=1;
 8011568:	4b1e      	ldr	r3, [pc, #120]	; (80115e4 <VC_SIMV_Pulse_I_Parameter+0x380>)
 801156a:	2201      	movs	r2, #1
 801156c:	701a      	strb	r2, [r3, #0]
			 _Control_Byte &= (uint8_t) (~(0x80));
 801156e:	4b1e      	ldr	r3, [pc, #120]	; (80115e8 <VC_SIMV_Pulse_I_Parameter+0x384>)
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011576:	b2da      	uxtb	r2, r3
 8011578:	4b1b      	ldr	r3, [pc, #108]	; (80115e8 <VC_SIMV_Pulse_I_Parameter+0x384>)
 801157a:	701a      	strb	r2, [r3, #0]
			 vol.Volume = 0;
 801157c:	4b1b      	ldr	r3, [pc, #108]	; (80115ec <VC_SIMV_Pulse_I_Parameter+0x388>)
 801157e:	f04f 0200 	mov.w	r2, #0
 8011582:	605a      	str	r2, [r3, #4]
			 V_max=0;
 8011584:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <VC_SIMV_Pulse_I_Parameter+0x38c>)
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 801158a:	2201      	movs	r2, #1
 801158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011590:	4818      	ldr	r0, [pc, #96]	; (80115f4 <VC_SIMV_Pulse_I_Parameter+0x390>)
 8011592:	f005 fb87 	bl	8016ca4 <HAL_GPIO_WritePin>
			 _I_TIMER_ACHEIVED = 0;
 8011596:	4b18      	ldr	r3, [pc, #96]	; (80115f8 <VC_SIMV_Pulse_I_Parameter+0x394>)
 8011598:	2200      	movs	r2, #0
 801159a:	801a      	strh	r2, [r3, #0]
			 Led_Alert();
 801159c:	f7f1 f9a2 	bl	80028e4 <Led_Alert>
			 R4._DAC_VAL0=0;
 80115a0:	4b16      	ldr	r3, [pc, #88]	; (80115fc <VC_SIMV_Pulse_I_Parameter+0x398>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	811a      	strh	r2, [r3, #8]
			 Peep_E_Valve_Lock_delay_Vc_simv();
 80115a6:	f000 fbbd 	bl	8011d24 <Peep_E_Valve_Lock_delay_Vc_simv>
			 _I_TIMER = R2._I_TIMER_HOLD;
 80115aa:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <VC_SIMV_Pulse_I_Parameter+0x36c>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4a14      	ldr	r2, [pc, #80]	; (8011600 <VC_SIMV_Pulse_I_Parameter+0x39c>)
 80115b0:	6013      	str	r3, [r2, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 80115b2:	4b14      	ldr	r3, [pc, #80]	; (8011604 <VC_SIMV_Pulse_I_Parameter+0x3a0>)
 80115b4:	2201      	movs	r2, #1
 80115b6:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_I_Wave ;
 80115b8:	4b13      	ldr	r3, [pc, #76]	; (8011608 <VC_SIMV_Pulse_I_Parameter+0x3a4>)
 80115ba:	2200      	movs	r2, #0
 80115bc:	701a      	strb	r2, [r3, #0]
			vTaskDelay(R2._I_TIMER_HOLD);
 80115be:	4b04      	ldr	r3, [pc, #16]	; (80115d0 <VC_SIMV_Pulse_I_Parameter+0x36c>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f00e f952 	bl	801f86c <vTaskDelay>
}
 80115c8:	bf00      	nop
 80115ca:	bdb0      	pop	{r4, r5, r7, pc}
 80115cc:	20016d0c 	.word	0x20016d0c
 80115d0:	20016d94 	.word	0x20016d94
 80115d4:	20016df4 	.word	0x20016df4
 80115d8:	20016b3c 	.word	0x20016b3c
 80115dc:	40240000 	.word	0x40240000
 80115e0:	40590000 	.word	0x40590000
 80115e4:	20000feb 	.word	0x20000feb
 80115e8:	20016e59 	.word	0x20016e59
 80115ec:	20016d44 	.word	0x20016d44
 80115f0:	20016d60 	.word	0x20016d60
 80115f4:	40020400 	.word	0x40020400
 80115f8:	20016af4 	.word	0x20016af4
 80115fc:	20016b64 	.word	0x20016b64
 8011600:	20016df0 	.word	0x20016df0
 8011604:	20016adc 	.word	0x20016adc
 8011608:	20016cc8 	.word	0x20016cc8

0801160c <VC_SIMV_Pulse_E_Parameter>:


void VC_SIMV_Pulse_E_Parameter()
{
 801160c:	b5b0      	push	{r4, r5, r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af02      	add	r7, sp, #8
	if(Trigger_Flag2==0)
 8011612:	4b4e      	ldr	r3, [pc, #312]	; (801174c <VC_SIMV_Pulse_E_Parameter+0x140>)
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d123      	bne.n	8011662 <VC_SIMV_Pulse_E_Parameter+0x56>
	{
		_Control_Byte |= (uint8_t) 0x80;
 801161a:	4b4d      	ldr	r3, [pc, #308]	; (8011750 <VC_SIMV_Pulse_E_Parameter+0x144>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011622:	b2da      	uxtb	r2, r3
 8011624:	4b4a      	ldr	r3, [pc, #296]	; (8011750 <VC_SIMV_Pulse_E_Parameter+0x144>)
 8011626:	701a      	strb	r2, [r3, #0]
		Dac_set=1;
 8011628:	4b4a      	ldr	r3, [pc, #296]	; (8011754 <VC_SIMV_Pulse_E_Parameter+0x148>)
 801162a:	2201      	movs	r2, #1
 801162c:	601a      	str	r2, [r3, #0]
		R4._DAC_VAL0=0;
 801162e:	4b4a      	ldr	r3, [pc, #296]	; (8011758 <VC_SIMV_Pulse_E_Parameter+0x14c>)
 8011630:	2200      	movs	r2, #0
 8011632:	811a      	strh	r2, [r3, #8]
		_E_TIMER_ACHEIVED = 0;
 8011634:	4b49      	ldr	r3, [pc, #292]	; (801175c <VC_SIMV_Pulse_E_Parameter+0x150>)
 8011636:	2200      	movs	r2, #0
 8011638:	801a      	strh	r2, [r3, #0]
		_E_TIMER = R2._E_TIMER_HOLD;
 801163a:	4b49      	ldr	r3, [pc, #292]	; (8011760 <VC_SIMV_Pulse_E_Parameter+0x154>)
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	4a49      	ldr	r2, [pc, #292]	; (8011764 <VC_SIMV_Pulse_E_Parameter+0x158>)
 8011640:	6013      	str	r3, [r2, #0]
		Alert_E_Time_Parameter();
 8011642:	f7f0 ffe9 	bl	8002618 <Alert_E_Time_Parameter>
		 adjust_servo();
 8011646:	f7f9 f94f 	bl	800a8e8 <adjust_servo>
		_CurrentWaveFormState = Generate_I_Wave;
 801164a:	4b47      	ldr	r3, [pc, #284]	; (8011768 <VC_SIMV_Pulse_E_Parameter+0x15c>)
 801164c:	2200      	movs	r2, #0
 801164e:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_E_Wave ;
 8011650:	4b46      	ldr	r3, [pc, #280]	; (801176c <VC_SIMV_Pulse_E_Parameter+0x160>)
 8011652:	2201      	movs	r2, #1
 8011654:	701a      	strb	r2, [r3, #0]
		vTaskDelay(R2._E_TIMER_HOLD);
 8011656:	4b42      	ldr	r3, [pc, #264]	; (8011760 <VC_SIMV_Pulse_E_Parameter+0x154>)
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	4618      	mov	r0, r3
 801165c:	f00e f906 	bl	801f86c <vTaskDelay>
		 adjust_servo();
		_CurrentWaveFormState = Generate_I_Wave;
		_CurrentComputationState = Compute_E_Wave ;
		vTaskDelay(R2._E_TIMER_HOLD);
	}
}
 8011660:	e070      	b.n	8011744 <VC_SIMV_Pulse_E_Parameter+0x138>
	else if(Trigger_Flag2==1)
 8011662:	4b3a      	ldr	r3, [pc, #232]	; (801174c <VC_SIMV_Pulse_E_Parameter+0x140>)
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	2b01      	cmp	r3, #1
 8011668:	d16c      	bne.n	8011744 <VC_SIMV_Pulse_E_Parameter+0x138>
		_Control_Byte |= (uint8_t) 0x80;
 801166a:	4b39      	ldr	r3, [pc, #228]	; (8011750 <VC_SIMV_Pulse_E_Parameter+0x144>)
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011672:	b2da      	uxtb	r2, r3
 8011674:	4b36      	ldr	r3, [pc, #216]	; (8011750 <VC_SIMV_Pulse_E_Parameter+0x144>)
 8011676:	701a      	strb	r2, [r3, #0]
		Dac_set=0;
 8011678:	4b36      	ldr	r3, [pc, #216]	; (8011754 <VC_SIMV_Pulse_E_Parameter+0x148>)
 801167a:	2200      	movs	r2, #0
 801167c:	601a      	str	r2, [r3, #0]
		Trigger_Flag2=0;
 801167e:	4b33      	ldr	r3, [pc, #204]	; (801174c <VC_SIMV_Pulse_E_Parameter+0x140>)
 8011680:	2200      	movs	r2, #0
 8011682:	701a      	strb	r2, [r3, #0]
		_E_TIMER_ACHEIVED = 0;
 8011684:	4b35      	ldr	r3, [pc, #212]	; (801175c <VC_SIMV_Pulse_E_Parameter+0x150>)
 8011686:	2200      	movs	r2, #0
 8011688:	801a      	strh	r2, [r3, #0]
		 TempSetpoint = R1._PEEP_Val;
 801168a:	4b39      	ldr	r3, [pc, #228]	; (8011770 <VC_SIMV_Pulse_E_Parameter+0x164>)
 801168c:	785b      	ldrb	r3, [r3, #1]
 801168e:	4618      	mov	r0, r3
 8011690:	f7ee fee0 	bl	8000454 <__aeabi_ui2d>
 8011694:	4602      	mov	r2, r0
 8011696:	460b      	mov	r3, r1
 8011698:	4936      	ldr	r1, [pc, #216]	; (8011774 <VC_SIMV_Pulse_E_Parameter+0x168>)
 801169a:	e9c1 2300 	strd	r2, r3, [r1]
		 PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 801169e:	4b36      	ldr	r3, [pc, #216]	; (8011778 <VC_SIMV_Pulse_E_Parameter+0x16c>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ee fed6 	bl	8000454 <__aeabi_ui2d>
 80116a8:	4604      	mov	r4, r0
 80116aa:	460d      	mov	r5, r1
 80116ac:	4b33      	ldr	r3, [pc, #204]	; (801177c <VC_SIMV_Pulse_E_Parameter+0x170>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ee fecf 	bl	8000454 <__aeabi_ui2d>
 80116b6:	4b32      	ldr	r3, [pc, #200]	; (8011780 <VC_SIMV_Pulse_E_Parameter+0x174>)
 80116b8:	ed93 7b00 	vldr	d7, [r3]
 80116bc:	2300      	movs	r3, #0
 80116be:	9301      	str	r3, [sp, #4]
 80116c0:	2301      	movs	r3, #1
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	eeb0 2a47 	vmov.f32	s4, s14
 80116c8:	eef0 2a67 	vmov.f32	s5, s15
 80116cc:	ec41 0b11 	vmov	d1, r0, r1
 80116d0:	ec45 4b10 	vmov	d0, r4, r5
 80116d4:	4b27      	ldr	r3, [pc, #156]	; (8011774 <VC_SIMV_Pulse_E_Parameter+0x168>)
 80116d6:	4a2b      	ldr	r2, [pc, #172]	; (8011784 <VC_SIMV_Pulse_E_Parameter+0x178>)
 80116d8:	492b      	ldr	r1, [pc, #172]	; (8011788 <VC_SIMV_Pulse_E_Parameter+0x17c>)
 80116da:	482c      	ldr	r0, [pc, #176]	; (801178c <VC_SIMV_Pulse_E_Parameter+0x180>)
 80116dc:	f003 f860 	bl	80147a0 <PID>
		 PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80116e0:	2101      	movs	r1, #1
 80116e2:	482a      	ldr	r0, [pc, #168]	; (801178c <VC_SIMV_Pulse_E_Parameter+0x180>)
 80116e4:	f003 f992 	bl	8014a0c <PID_SetMode>
		 PID_SetSampleTime(&TPID, Time);
 80116e8:	4b29      	ldr	r3, [pc, #164]	; (8011790 <VC_SIMV_Pulse_E_Parameter+0x184>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4619      	mov	r1, r3
 80116ee:	4827      	ldr	r0, [pc, #156]	; (801178c <VC_SIMV_Pulse_E_Parameter+0x180>)
 80116f0:	f003 fb08 	bl	8014d04 <PID_SetSampleTime>
		 PID_SetOutputLimits(&TPID, Dac1, Dac2);
 80116f4:	4b27      	ldr	r3, [pc, #156]	; (8011794 <VC_SIMV_Pulse_E_Parameter+0x188>)
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7ee feab 	bl	8000454 <__aeabi_ui2d>
 80116fe:	4604      	mov	r4, r0
 8011700:	460d      	mov	r5, r1
 8011702:	4b25      	ldr	r3, [pc, #148]	; (8011798 <VC_SIMV_Pulse_E_Parameter+0x18c>)
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	4618      	mov	r0, r3
 8011708:	f7ee fea4 	bl	8000454 <__aeabi_ui2d>
 801170c:	4602      	mov	r2, r0
 801170e:	460b      	mov	r3, r1
 8011710:	ec43 2b11 	vmov	d1, r2, r3
 8011714:	ec45 4b10 	vmov	d0, r4, r5
 8011718:	481c      	ldr	r0, [pc, #112]	; (801178c <VC_SIMV_Pulse_E_Parameter+0x180>)
 801171a:	f003 f995 	bl	8014a48 <PID_SetOutputLimits>
		_E_TIMER = R2._E_TIMER_HOLD;
 801171e:	4b10      	ldr	r3, [pc, #64]	; (8011760 <VC_SIMV_Pulse_E_Parameter+0x154>)
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	4a10      	ldr	r2, [pc, #64]	; (8011764 <VC_SIMV_Pulse_E_Parameter+0x158>)
 8011724:	6013      	str	r3, [r2, #0]
		Alert_E_Time_Parameter();
 8011726:	f7f0 ff77 	bl	8002618 <Alert_E_Time_Parameter>
		 adjust_servo();
 801172a:	f7f9 f8dd 	bl	800a8e8 <adjust_servo>
		_CurrentWaveFormState = Generate_I_Wave;
 801172e:	4b0e      	ldr	r3, [pc, #56]	; (8011768 <VC_SIMV_Pulse_E_Parameter+0x15c>)
 8011730:	2200      	movs	r2, #0
 8011732:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_E_Wave ;
 8011734:	4b0d      	ldr	r3, [pc, #52]	; (801176c <VC_SIMV_Pulse_E_Parameter+0x160>)
 8011736:	2201      	movs	r2, #1
 8011738:	701a      	strb	r2, [r3, #0]
		vTaskDelay(R2._E_TIMER_HOLD);
 801173a:	4b09      	ldr	r3, [pc, #36]	; (8011760 <VC_SIMV_Pulse_E_Parameter+0x154>)
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	4618      	mov	r0, r3
 8011740:	f00e f894 	bl	801f86c <vTaskDelay>
}
 8011744:	bf00      	nop
 8011746:	46bd      	mov	sp, r7
 8011748:	bdb0      	pop	{r4, r5, r7, pc}
 801174a:	bf00      	nop
 801174c:	20016d0c 	.word	0x20016d0c
 8011750:	20016e59 	.word	0x20016e59
 8011754:	2000033c 	.word	0x2000033c
 8011758:	20016b64 	.word	0x20016b64
 801175c:	20016eb4 	.word	0x20016eb4
 8011760:	20016d94 	.word	0x20016d94
 8011764:	20016d74 	.word	0x20016d74
 8011768:	20016adc 	.word	0x20016adc
 801176c:	20016cc8 	.word	0x20016cc8
 8011770:	20016c08 	.word	0x20016c08
 8011774:	20016e80 	.word	0x20016e80
 8011778:	20000136 	.word	0x20000136
 801177c:	20000137 	.word	0x20000137
 8011780:	20000138 	.word	0x20000138
 8011784:	20016a18 	.word	0x20016a18
 8011788:	20016a98 	.word	0x20016a98
 801178c:	200169a0 	.word	0x200169a0
 8011790:	20000140 	.word	0x20000140
 8011794:	2000012e 	.word	0x2000012e
 8011798:	20000130 	.word	0x20000130
 801179c:	00000000 	.word	0x00000000

080117a0 <VC_SIMV_PARAMETERS>:

void VC_SIMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80117a0:	b5b0      	push	{r4, r5, r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]


			R1._VT_Val = RX_PARAM_CMD_PACKET->_VTI;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	88db      	ldrh	r3, [r3, #6]
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	4b72      	ldr	r3, [pc, #456]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117b0:	829a      	strh	r2, [r3, #20]
			R1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	795a      	ldrb	r2, [r3, #5]
 80117b6:	4b70      	ldr	r3, [pc, #448]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117b8:	705a      	strb	r2, [r3, #1]
			R1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7a5b      	ldrb	r3, [r3, #9]
 80117be:	461a      	mov	r2, r3
 80117c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80117c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80117c8:	461a      	mov	r2, r3
 80117ca:	4b6b      	ldr	r3, [pc, #428]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117cc:	605a      	str	r2, [r3, #4]
			R1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	7a1b      	ldrb	r3, [r3, #8]
 80117d2:	091b      	lsrs	r3, r3, #4
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	461a      	mov	r2, r3
 80117d8:	4b67      	ldr	r3, [pc, #412]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117da:	609a      	str	r2, [r3, #8]
			R1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7a1b      	ldrb	r3, [r3, #8]
 80117e0:	f003 030f 	and.w	r3, r3, #15
 80117e4:	4a64      	ldr	r2, [pc, #400]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117e6:	60d3      	str	r3, [r2, #12]
			R1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	7b1b      	ldrb	r3, [r3, #12]
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	4b62      	ldr	r3, [pc, #392]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117f0:	821a      	strh	r2, [r3, #16]
			R1.RR=RX_PARAM_CMD_PACKET->_RR;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	7a5a      	ldrb	r2, [r3, #9]
 80117f6:	4b60      	ldr	r3, [pc, #384]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 80117f8:	749a      	strb	r2, [r3, #18]
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	7a9a      	ldrb	r2, [r3, #10]
 80117fe:	4b5f      	ldr	r3, [pc, #380]	; (801197c <VC_SIMV_PARAMETERS+0x1dc>)
 8011800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


			R6._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT) >> 4;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	7b9b      	ldrb	r3, [r3, #14]
 8011808:	091b      	lsrs	r3, r3, #4
 801180a:	b2db      	uxtb	r3, r3
 801180c:	b29a      	uxth	r2, r3
 801180e:	4b5c      	ldr	r3, [pc, #368]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 8011810:	801a      	strh	r2, [r3, #0]
			R6._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	7b9b      	ldrb	r3, [r3, #14]
 8011816:	b29b      	uxth	r3, r3
 8011818:	f003 030f 	and.w	r3, r3, #15
 801181c:	b29a      	uxth	r2, r3
 801181e:	4b58      	ldr	r3, [pc, #352]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 8011820:	805a      	strh	r2, [r3, #2]
			R6._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7adb      	ldrb	r3, [r3, #11]
 8011826:	b29b      	uxth	r3, r3
 8011828:	f003 030f 	and.w	r3, r3, #15
 801182c:	b29a      	uxth	r2, r3
 801182e:	4b54      	ldr	r3, [pc, #336]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 8011830:	809a      	strh	r2, [r3, #4]

			R1.Assist_mode2 = 0x0F & (RX_PARAM_CMD_PACKET->_T_HIGH);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	7bdb      	ldrb	r3, [r3, #15]
 8011836:	f003 030f 	and.w	r3, r3, #15
 801183a:	b2da      	uxtb	r2, r3
 801183c:	4b4e      	ldr	r3, [pc, #312]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 801183e:	759a      	strb	r2, [r3, #22]

			R2._I_TIMER_HOLD = (R1.I_Time * (R1.CycleTime / (R1.I_Time +R1.E_Time)));
 8011840:	4b4d      	ldr	r3, [pc, #308]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	4a4c      	ldr	r2, [pc, #304]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011846:	6851      	ldr	r1, [r2, #4]
 8011848:	4a4b      	ldr	r2, [pc, #300]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 801184a:	6890      	ldr	r0, [r2, #8]
 801184c:	4a4a      	ldr	r2, [pc, #296]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 801184e:	68d2      	ldr	r2, [r2, #12]
 8011850:	4402      	add	r2, r0
 8011852:	fbb1 f2f2 	udiv	r2, r1, r2
 8011856:	fb02 f303 	mul.w	r3, r2, r3
 801185a:	4a4a      	ldr	r2, [pc, #296]	; (8011984 <VC_SIMV_PARAMETERS+0x1e4>)
 801185c:	6013      	str	r3, [r2, #0]
			R2._E_TIMER_HOLD = (R1.E_Time * (R1.CycleTime / (R1.I_Time + R1.E_Time)));
 801185e:	4b46      	ldr	r3, [pc, #280]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	4a45      	ldr	r2, [pc, #276]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011864:	6851      	ldr	r1, [r2, #4]
 8011866:	4a44      	ldr	r2, [pc, #272]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011868:	6890      	ldr	r0, [r2, #8]
 801186a:	4a43      	ldr	r2, [pc, #268]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 801186c:	68d2      	ldr	r2, [r2, #12]
 801186e:	4402      	add	r2, r0
 8011870:	fbb1 f2f2 	udiv	r2, r1, r2
 8011874:	fb02 f303 	mul.w	r3, r2, r3
 8011878:	4a42      	ldr	r2, [pc, #264]	; (8011984 <VC_SIMV_PARAMETERS+0x1e4>)
 801187a:	6053      	str	r3, [r2, #4]
			R4.PID_task_delay=10;
 801187c:	4b42      	ldr	r3, [pc, #264]	; (8011988 <VC_SIMV_PARAMETERS+0x1e8>)
 801187e:	220a      	movs	r2, #10
 8011880:	60da      	str	r2, [r3, #12]


			R6._CALC_TRIG_VAL = ((float) E_TIME_TOLERANCE / 100.00)* (R2._E_TIMER_HOLD);
 8011882:	4b40      	ldr	r3, [pc, #256]	; (8011984 <VC_SIMV_PARAMETERS+0x1e4>)
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	4618      	mov	r0, r3
 8011888:	f7ee fde4 	bl	8000454 <__aeabi_ui2d>
 801188c:	a338      	add	r3, pc, #224	; (adr r3, 8011970 <VC_SIMV_PARAMETERS+0x1d0>)
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	f7ee fe59 	bl	8000548 <__aeabi_dmul>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	4610      	mov	r0, r2
 801189c:	4619      	mov	r1, r3
 801189e:	f7ef f915 	bl	8000acc <__aeabi_d2uiz>
 80118a2:	4603      	mov	r3, r0
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	4b36      	ldr	r3, [pc, #216]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 80118a8:	80da      	strh	r2, [r3, #6]
			R6._TOLERANCE_EWAVE = R2._E_TIMER_HOLD - R6._CALC_TRIG_VAL;
 80118aa:	4b36      	ldr	r3, [pc, #216]	; (8011984 <VC_SIMV_PARAMETERS+0x1e4>)
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	4b33      	ldr	r3, [pc, #204]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 80118b2:	88db      	ldrh	r3, [r3, #6]
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	4b31      	ldr	r3, [pc, #196]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 80118ba:	811a      	strh	r2, [r3, #8]
			R6._TRIG_WINDOW = R6._TOLERANCE_EWAVE* (((float) R6._TRIG_TIME * 10.00) / 100.00);
 80118bc:	4b30      	ldr	r3, [pc, #192]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 80118be:	891b      	ldrh	r3, [r3, #8]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7ee fdd7 	bl	8000474 <__aeabi_i2d>
 80118c6:	4604      	mov	r4, r0
 80118c8:	460d      	mov	r5, r1
 80118ca:	4b2d      	ldr	r3, [pc, #180]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 80118cc:	889b      	ldrh	r3, [r3, #4]
 80118ce:	ee07 3a90 	vmov	s15, r3
 80118d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118d6:	ee17 0a90 	vmov	r0, s15
 80118da:	f7ee fddd 	bl	8000498 <__aeabi_f2d>
 80118de:	f04f 0200 	mov.w	r2, #0
 80118e2:	4b2a      	ldr	r3, [pc, #168]	; (801198c <VC_SIMV_PARAMETERS+0x1ec>)
 80118e4:	f7ee fe30 	bl	8000548 <__aeabi_dmul>
 80118e8:	4602      	mov	r2, r0
 80118ea:	460b      	mov	r3, r1
 80118ec:	4610      	mov	r0, r2
 80118ee:	4619      	mov	r1, r3
 80118f0:	f04f 0200 	mov.w	r2, #0
 80118f4:	4b26      	ldr	r3, [pc, #152]	; (8011990 <VC_SIMV_PARAMETERS+0x1f0>)
 80118f6:	f7ee ff51 	bl	800079c <__aeabi_ddiv>
 80118fa:	4602      	mov	r2, r0
 80118fc:	460b      	mov	r3, r1
 80118fe:	4620      	mov	r0, r4
 8011900:	4629      	mov	r1, r5
 8011902:	f7ee fe21 	bl	8000548 <__aeabi_dmul>
 8011906:	4602      	mov	r2, r0
 8011908:	460b      	mov	r3, r1
 801190a:	4610      	mov	r0, r2
 801190c:	4619      	mov	r1, r3
 801190e:	f7ef f8dd 	bl	8000acc <__aeabi_d2uiz>
 8011912:	4603      	mov	r3, r0
 8011914:	b29a      	uxth	r2, r3
 8011916:	4b1a      	ldr	r3, [pc, #104]	; (8011980 <VC_SIMV_PARAMETERS+0x1e0>)
 8011918:	815a      	strh	r2, [r3, #10]

			S5.Lock_delay=10;
 801191a:	4b1e      	ldr	r3, [pc, #120]	; (8011994 <VC_SIMV_PARAMETERS+0x1f4>)
 801191c:	220a      	movs	r2, #10
 801191e:	879a      	strh	r2, [r3, #60]	; 0x3c
			S5._Set_Peep=R1._PEEP_Val;
 8011920:	4b15      	ldr	r3, [pc, #84]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011922:	785b      	ldrb	r3, [r3, #1]
 8011924:	ee07 3a90 	vmov	s15, r3
 8011928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801192c:	4b19      	ldr	r3, [pc, #100]	; (8011994 <VC_SIMV_PARAMETERS+0x1f4>)
 801192e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			check_dev=0;
 8011932:	4b19      	ldr	r3, [pc, #100]	; (8011998 <VC_SIMV_PARAMETERS+0x1f8>)
 8011934:	2200      	movs	r2, #0
 8011936:	801a      	strh	r2, [r3, #0]

			S5.peep_process_done=0;
 8011938:	4b16      	ldr	r3, [pc, #88]	; (8011994 <VC_SIMV_PARAMETERS+0x1f4>)
 801193a:	2200      	movs	r2, #0
 801193c:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 801193e:	4b15      	ldr	r3, [pc, #84]	; (8011994 <VC_SIMV_PARAMETERS+0x1f4>)
 8011940:	2201      	movs	r2, #1
 8011942:	645a      	str	r2, [r3, #68]	; 0x44

			if(R1._Flow_Rate>=60)
 8011944:	4b0c      	ldr	r3, [pc, #48]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011946:	8a1b      	ldrh	r3, [r3, #16]
 8011948:	2b3b      	cmp	r3, #59	; 0x3b
 801194a:	d904      	bls.n	8011956 <VC_SIMV_PARAMETERS+0x1b6>
				R4.temp_dac_new = 900;
 801194c:	4b0e      	ldr	r3, [pc, #56]	; (8011988 <VC_SIMV_PARAMETERS+0x1e8>)
 801194e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8011952:	80da      	strh	r2, [r3, #6]
 8011954:	e02e      	b.n	80119b4 <VC_SIMV_PARAMETERS+0x214>
			else if(R1._Flow_Rate<60 && R1._Flow_Rate>=40 )
 8011956:	4b08      	ldr	r3, [pc, #32]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011958:	8a1b      	ldrh	r3, [r3, #16]
 801195a:	2b3b      	cmp	r3, #59	; 0x3b
 801195c:	d81e      	bhi.n	801199c <VC_SIMV_PARAMETERS+0x1fc>
 801195e:	4b06      	ldr	r3, [pc, #24]	; (8011978 <VC_SIMV_PARAMETERS+0x1d8>)
 8011960:	8a1b      	ldrh	r3, [r3, #16]
 8011962:	2b27      	cmp	r3, #39	; 0x27
 8011964:	d91a      	bls.n	801199c <VC_SIMV_PARAMETERS+0x1fc>
				R4.temp_dac_new = 800;
 8011966:	4b08      	ldr	r3, [pc, #32]	; (8011988 <VC_SIMV_PARAMETERS+0x1e8>)
 8011968:	f44f 7248 	mov.w	r2, #800	; 0x320
 801196c:	80da      	strh	r2, [r3, #6]
 801196e:	e021      	b.n	80119b4 <VC_SIMV_PARAMETERS+0x214>
 8011970:	33333333 	.word	0x33333333
 8011974:	3fd33333 	.word	0x3fd33333
 8011978:	20016c08 	.word	0x20016c08
 801197c:	20000048 	.word	0x20000048
 8011980:	20016b3c 	.word	0x20016b3c
 8011984:	20016d94 	.word	0x20016d94
 8011988:	20016b64 	.word	0x20016b64
 801198c:	40240000 	.word	0x40240000
 8011990:	40590000 	.word	0x40590000
 8011994:	20016df4 	.word	0x20016df4
 8011998:	20016bd4 	.word	0x20016bd4
			else if(R1._Flow_Rate<40 && R1._Flow_Rate>10 )
 801199c:	4b75      	ldr	r3, [pc, #468]	; (8011b74 <VC_SIMV_PARAMETERS+0x3d4>)
 801199e:	8a1b      	ldrh	r3, [r3, #16]
 80119a0:	2b27      	cmp	r3, #39	; 0x27
 80119a2:	d807      	bhi.n	80119b4 <VC_SIMV_PARAMETERS+0x214>
 80119a4:	4b73      	ldr	r3, [pc, #460]	; (8011b74 <VC_SIMV_PARAMETERS+0x3d4>)
 80119a6:	8a1b      	ldrh	r3, [r3, #16]
 80119a8:	2b0a      	cmp	r3, #10
 80119aa:	d903      	bls.n	80119b4 <VC_SIMV_PARAMETERS+0x214>
				R4.temp_dac_new = 700;
 80119ac:	4b72      	ldr	r3, [pc, #456]	; (8011b78 <VC_SIMV_PARAMETERS+0x3d8>)
 80119ae:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80119b2:	80da      	strh	r2, [r3, #6]

			A.PEEP_VAL=R1._PEEP_Val;
 80119b4:	4b6f      	ldr	r3, [pc, #444]	; (8011b74 <VC_SIMV_PARAMETERS+0x3d4>)
 80119b6:	785a      	ldrb	r2, [r3, #1]
 80119b8:	4b70      	ldr	r3, [pc, #448]	; (8011b7c <VC_SIMV_PARAMETERS+0x3dc>)
 80119ba:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 80119bc:	f7f0 fe90 	bl	80026e0 <Alert_Receiving_Parameter>
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	7a9a      	ldrb	r2, [r3, #10]
 80119c4:	4b6e      	ldr	r3, [pc, #440]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 80119c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._VT_Val=R1._VT_Val;
 80119ca:	4b6a      	ldr	r3, [pc, #424]	; (8011b74 <VC_SIMV_PARAMETERS+0x3d4>)
 80119cc:	8a9a      	ldrh	r2, [r3, #20]
 80119ce:	4b6c      	ldr	r3, [pc, #432]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 80119d0:	86da      	strh	r2, [r3, #54]	; 0x36
			O2._Pressure_Base=0;
 80119d2:	4b6b      	ldr	r3, [pc, #428]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=1;
 80119d8:	4b69      	ldr	r3, [pc, #420]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 80119da:	2201      	movs	r2, #1
 80119dc:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 80119de:	f7f9 f85f 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=0;
 80119e2:	4b68      	ldr	r3, [pc, #416]	; (8011b84 <VC_SIMV_PARAMETERS+0x3e4>)
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			S5.Lock_delay=200;
 80119ea:	4b67      	ldr	r3, [pc, #412]	; (8011b88 <VC_SIMV_PARAMETERS+0x3e8>)
 80119ec:	22c8      	movs	r2, #200	; 0xc8
 80119ee:	879a      	strh	r2, [r3, #60]	; 0x3c

			Dac1=300;
 80119f0:	4b66      	ldr	r3, [pc, #408]	; (8011b8c <VC_SIMV_PARAMETERS+0x3ec>)
 80119f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80119f6:	801a      	strh	r2, [r3, #0]
			Dac2=1200;
 80119f8:	4b65      	ldr	r3, [pc, #404]	; (8011b90 <VC_SIMV_PARAMETERS+0x3f0>)
 80119fa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80119fe:	801a      	strh	r2, [r3, #0]
			kp=10;
 8011a00:	4b64      	ldr	r3, [pc, #400]	; (8011b94 <VC_SIMV_PARAMETERS+0x3f4>)
 8011a02:	220a      	movs	r2, #10
 8011a04:	701a      	strb	r2, [r3, #0]
			ki=10;
 8011a06:	4b64      	ldr	r3, [pc, #400]	; (8011b98 <VC_SIMV_PARAMETERS+0x3f8>)
 8011a08:	220a      	movs	r2, #10
 8011a0a:	701a      	strb	r2, [r3, #0]
			kd=1;
 8011a0c:	4963      	ldr	r1, [pc, #396]	; (8011b9c <VC_SIMV_PARAMETERS+0x3fc>)
 8011a0e:	f04f 0200 	mov.w	r2, #0
 8011a12:	4b63      	ldr	r3, [pc, #396]	; (8011ba0 <VC_SIMV_PARAMETERS+0x400>)
 8011a14:	e9c1 2300 	strd	r2, r3, [r1]
			Time=50;
 8011a18:	4b62      	ldr	r3, [pc, #392]	; (8011ba4 <VC_SIMV_PARAMETERS+0x404>)
 8011a1a:	2232      	movs	r2, #50	; 0x32
 8011a1c:	601a      	str	r2, [r3, #0]
			Speed=50;
 8011a1e:	4b62      	ldr	r3, [pc, #392]	; (8011ba8 <VC_SIMV_PARAMETERS+0x408>)
 8011a20:	2232      	movs	r2, #50	; 0x32
 8011a22:	601a      	str	r2, [r3, #0]

			_60_Seconds=60000;				//breath
 8011a24:	4b61      	ldr	r3, [pc, #388]	; (8011bac <VC_SIMV_PARAMETERS+0x40c>)
 8011a26:	f64e 2260 	movw	r2, #60000	; 0xea60
 8011a2a:	801a      	strh	r2, [r3, #0]
			 now_check_breath=0;			//breath
 8011a2c:	4b60      	ldr	r3, [pc, #384]	; (8011bb0 <VC_SIMV_PARAMETERS+0x410>)
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
			 Breath=0;
 8011a32:	4b60      	ldr	r3, [pc, #384]	; (8011bb4 <VC_SIMV_PARAMETERS+0x414>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	701a      	strb	r2, [r3, #0]



			vTaskSuspend(pc_mode_Handler);
 8011a38:	4b5f      	ldr	r3, [pc, #380]	; (8011bb8 <VC_SIMV_PARAMETERS+0x418>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f00d ff49 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8011a42:	4b5e      	ldr	r3, [pc, #376]	; (8011bbc <VC_SIMV_PARAMETERS+0x41c>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f00d ff44 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Pc_simv_Mode_Handler);
 8011a4c:	4b5c      	ldr	r3, [pc, #368]	; (8011bc0 <VC_SIMV_PARAMETERS+0x420>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4618      	mov	r0, r3
 8011a52:	f00d ff3f 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8011a56:	4b5b      	ldr	r3, [pc, #364]	; (8011bc4 <VC_SIMV_PARAMETERS+0x424>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f00d ff3a 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_mode_Handler);
 8011a60:	4b59      	ldr	r3, [pc, #356]	; (8011bc8 <VC_SIMV_PARAMETERS+0x428>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f00d ff35 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 8011a6a:	4b58      	ldr	r3, [pc, #352]	; (8011bcc <VC_SIMV_PARAMETERS+0x42c>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f00d ff30 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Psv_Handler);
 8011a74:	4b56      	ldr	r3, [pc, #344]	; (8011bd0 <VC_SIMV_PARAMETERS+0x430>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f00d ff2b 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Psv_Pid_Handler);
 8011a7e:	4b55      	ldr	r3, [pc, #340]	; (8011bd4 <VC_SIMV_PARAMETERS+0x434>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f00d ff26 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Cpap_Handler);
 8011a88:	4b53      	ldr	r3, [pc, #332]	; (8011bd8 <VC_SIMV_PARAMETERS+0x438>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f00d ff21 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(BiPap_Handler);
 8011a92:	4b52      	ldr	r3, [pc, #328]	; (8011bdc <VC_SIMV_PARAMETERS+0x43c>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f00d ff1c 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(BiPap_Pid_Handler);
 8011a9c:	4b50      	ldr	r3, [pc, #320]	; (8011be0 <VC_SIMV_PARAMETERS+0x440>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f00d ff17 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(APRV_Handler);
 8011aa6:	4b4f      	ldr	r3, [pc, #316]	; (8011be4 <VC_SIMV_PARAMETERS+0x444>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f00d ff12 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(APRV_one_Handler);
 8011ab0:	4b4d      	ldr	r3, [pc, #308]	; (8011be8 <VC_SIMV_PARAMETERS+0x448>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f00d ff0d 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8011aba:	4b4c      	ldr	r3, [pc, #304]	; (8011bec <VC_SIMV_PARAMETERS+0x44c>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f00d ff08 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8011ac4:	4b4a      	ldr	r3, [pc, #296]	; (8011bf0 <VC_SIMV_PARAMETERS+0x450>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f00d ff03 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8011ace:	4b49      	ldr	r3, [pc, #292]	; (8011bf4 <VC_SIMV_PARAMETERS+0x454>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f00d fefe 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8011ad8:	4b47      	ldr	r3, [pc, #284]	; (8011bf8 <VC_SIMV_PARAMETERS+0x458>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f00d fef9 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(HFNC_Handler);
 8011ae2:	4b46      	ldr	r3, [pc, #280]	; (8011bfc <VC_SIMV_PARAMETERS+0x45c>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f00d fef4 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Suction_Handler);
 8011aec:	4b44      	ldr	r3, [pc, #272]	; (8011c00 <VC_SIMV_PARAMETERS+0x460>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f00d feef 	bl	801f8d4 <vTaskSuspend>

			vTaskResume(Vc_simv_mode_Handler);
 8011af6:	4b43      	ldr	r3, [pc, #268]	; (8011c04 <VC_SIMV_PARAMETERS+0x464>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f00d ffae 	bl	801fa5c <vTaskResume>
			vTaskResume(Vc_simv_Pid_Handler);
 8011b00:	4b41      	ldr	r3, [pc, #260]	; (8011c08 <VC_SIMV_PARAMETERS+0x468>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f00d ffa9 	bl	801fa5c <vTaskResume>
			vTaskResume(One_Time_Handler);
 8011b0a:	4b40      	ldr	r3, [pc, #256]	; (8011c0c <VC_SIMV_PARAMETERS+0x46c>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f00d ffa4 	bl	801fa5c <vTaskResume>
			vTaskResume(alert_Handler);
 8011b14:	4b3e      	ldr	r3, [pc, #248]	; (8011c10 <VC_SIMV_PARAMETERS+0x470>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f00d ff9f 	bl	801fa5c <vTaskResume>


			if(O2._FIO2_Val>21)
 8011b1e:	4b18      	ldr	r3, [pc, #96]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 8011b20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b24:	2b15      	cmp	r3, #21
 8011b26:	d905      	bls.n	8011b34 <VC_SIMV_PARAMETERS+0x394>
			{
				vTaskResume(Oxygen_Handler);
 8011b28:	4b3a      	ldr	r3, [pc, #232]	; (8011c14 <VC_SIMV_PARAMETERS+0x474>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f00d ff95 	bl	801fa5c <vTaskResume>
 8011b32:	e00f      	b.n	8011b54 <VC_SIMV_PARAMETERS+0x3b4>
			}
			else if(O2._FIO2_Val<=21)
 8011b34:	4b12      	ldr	r3, [pc, #72]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 8011b36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b3a:	2b15      	cmp	r3, #21
 8011b3c:	d80a      	bhi.n	8011b54 <VC_SIMV_PARAMETERS+0x3b4>
			{
				O2.O2_DAC=0;
 8011b3e:	4b10      	ldr	r3, [pc, #64]	; (8011b80 <VC_SIMV_PARAMETERS+0x3e0>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	811a      	strh	r2, [r3, #8]
				Parkar_valve_Signal(0);
 8011b44:	4b34      	ldr	r3, [pc, #208]	; (8011c18 <VC_SIMV_PARAMETERS+0x478>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	615a      	str	r2, [r3, #20]
				vTaskSuspend(Oxygen_Handler);
 8011b4a:	4b32      	ldr	r3, [pc, #200]	; (8011c14 <VC_SIMV_PARAMETERS+0x474>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f00d fec0 	bl	801f8d4 <vTaskSuspend>
			}

			_CurrentMode=SIMVVC;
 8011b54:	4b31      	ldr	r3, [pc, #196]	; (8011c1c <VC_SIMV_PARAMETERS+0x47c>)
 8011b56:	2204      	movs	r2, #4
 8011b58:	701a      	strb	r2, [r3, #0]
			_CurrentBackupMode = IdleState;
 8011b5a:	4b31      	ldr	r3, [pc, #196]	; (8011c20 <VC_SIMV_PARAMETERS+0x480>)
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8011b60:	4b30      	ldr	r3, [pc, #192]	; (8011c24 <VC_SIMV_PARAMETERS+0x484>)
 8011b62:	2201      	movs	r2, #1
 8011b64:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 8011b66:	4b30      	ldr	r3, [pc, #192]	; (8011c28 <VC_SIMV_PARAMETERS+0x488>)
 8011b68:	2201      	movs	r2, #1
 8011b6a:	701a      	strb	r2, [r3, #0]




}
 8011b6c:	bf00      	nop
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bdb0      	pop	{r4, r5, r7, pc}
 8011b74:	20016c08 	.word	0x20016c08
 8011b78:	20016b64 	.word	0x20016b64
 8011b7c:	20016a2c 	.word	0x20016a2c
 8011b80:	20000048 	.word	0x20000048
 8011b84:	20016960 	.word	0x20016960
 8011b88:	20016df4 	.word	0x20016df4
 8011b8c:	2000012e 	.word	0x2000012e
 8011b90:	20000130 	.word	0x20000130
 8011b94:	20000136 	.word	0x20000136
 8011b98:	20000137 	.word	0x20000137
 8011b9c:	20000138 	.word	0x20000138
 8011ba0:	3ff00000 	.word	0x3ff00000
 8011ba4:	20000140 	.word	0x20000140
 8011ba8:	20000144 	.word	0x20000144
 8011bac:	20000fe8 	.word	0x20000fe8
 8011bb0:	20000feb 	.word	0x20000feb
 8011bb4:	20000fea 	.word	0x20000fea
 8011bb8:	20016a84 	.word	0x20016a84
 8011bbc:	20016a28 	.word	0x20016a28
 8011bc0:	20016e60 	.word	0x20016e60
 8011bc4:	20016e8c 	.word	0x20016e8c
 8011bc8:	20016d78 	.word	0x20016d78
 8011bcc:	2001695c 	.word	0x2001695c
 8011bd0:	20016bf0 	.word	0x20016bf0
 8011bd4:	20016a74 	.word	0x20016a74
 8011bd8:	20016bb8 	.word	0x20016bb8
 8011bdc:	20016a24 	.word	0x20016a24
 8011be0:	20016878 	.word	0x20016878
 8011be4:	20016c00 	.word	0x20016c00
 8011be8:	20016bc8 	.word	0x20016bc8
 8011bec:	20016bcc 	.word	0x20016bcc
 8011bf0:	20016d3c 	.word	0x20016d3c
 8011bf4:	20016d7c 	.word	0x20016d7c
 8011bf8:	20016a7c 	.word	0x20016a7c
 8011bfc:	20016a20 	.word	0x20016a20
 8011c00:	20016e5c 	.word	0x20016e5c
 8011c04:	20016c44 	.word	0x20016c44
 8011c08:	20016ad0 	.word	0x20016ad0
 8011c0c:	20016d40 	.word	0x20016d40
 8011c10:	20016ad4 	.word	0x20016ad4
 8011c14:	20016958 	.word	0x20016958
 8011c18:	40007400 	.word	0x40007400
 8011c1c:	20016c04 	.word	0x20016c04
 8011c20:	2000012c 	.word	0x2000012c
 8011c24:	20016adc 	.word	0x20016adc
 8011c28:	20016cc8 	.word	0x20016cc8

08011c2c <volume_task_SIMV>:




void volume_task_SIMV()
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	af00      	add	r7, sp, #0

	        	if(_CurrentComputationState==Compute_I_Wave)
 8011c30:	4b34      	ldr	r3, [pc, #208]	; (8011d04 <volume_task_SIMV+0xd8>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d162      	bne.n	8011cfe <volume_task_SIMV+0xd2>
				{

					if(vol.Volume<(R1._VT_Val-check_dev))
 8011c38:	4b33      	ldr	r3, [pc, #204]	; (8011d08 <volume_task_SIMV+0xdc>)
 8011c3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011c3e:	4b33      	ldr	r3, [pc, #204]	; (8011d0c <volume_task_SIMV+0xe0>)
 8011c40:	8a9b      	ldrh	r3, [r3, #20]
 8011c42:	461a      	mov	r2, r3
 8011c44:	4b32      	ldr	r3, [pc, #200]	; (8011d10 <volume_task_SIMV+0xe4>)
 8011c46:	881b      	ldrh	r3, [r3, #0]
 8011c48:	1ad3      	subs	r3, r2, r3
 8011c4a:	ee07 3a90 	vmov	s15, r3
 8011c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5a:	d540      	bpl.n	8011cde <volume_task_SIMV+0xb2>
					{


					 if(R3.volume_reached==0)
 8011c5c:	4b2d      	ldr	r3, [pc, #180]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d14c      	bne.n	8011cfe <volume_task_SIMV+0xd2>
					 {
						//if(R3.constant_dac_done==0)
				        //{
								R4._DAC_VAL0=R4.temp_dac+3;
 8011c64:	4b2c      	ldr	r3, [pc, #176]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c66:	889b      	ldrh	r3, [r3, #4]
 8011c68:	3303      	adds	r3, #3
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	4b2a      	ldr	r3, [pc, #168]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c6e:	811a      	strh	r2, [r3, #8]
								R4.temp_dac=R4._DAC_VAL0;
 8011c70:	4b29      	ldr	r3, [pc, #164]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c72:	891a      	ldrh	r2, [r3, #8]
 8011c74:	4b28      	ldr	r3, [pc, #160]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c76:	809a      	strh	r2, [r3, #4]
							    if(R4._DAC_VAL0>4094)
 8011c78:	4b27      	ldr	r3, [pc, #156]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c7a:	891b      	ldrh	r3, [r3, #8]
 8011c7c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d903      	bls.n	8011c8c <volume_task_SIMV+0x60>
							    {
							    	R4._DAC_VAL0=4094;
 8011c84:	4b24      	ldr	r3, [pc, #144]	; (8011d18 <volume_task_SIMV+0xec>)
 8011c86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8011c8a:	811a      	strh	r2, [r3, #8]
							    }
				       // }

						  if(Flow_Sensor_cal._Flow_Val>=R1._Flow_Rate)
 8011c8c:	4b23      	ldr	r3, [pc, #140]	; (8011d1c <volume_task_SIMV+0xf0>)
 8011c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c90:	4a1e      	ldr	r2, [pc, #120]	; (8011d0c <volume_task_SIMV+0xe0>)
 8011c92:	8a12      	ldrh	r2, [r2, #16]
 8011c94:	4293      	cmp	r3, r2
 8011c96:	db13      	blt.n	8011cc0 <volume_task_SIMV+0x94>
						  {

							      R3.max_flow_acheived=1;
 8011c98:	4b1e      	ldr	r3, [pc, #120]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	601a      	str	r2, [r3, #0]
								  R3.Reached_flow_val=Flow_Sensor_cal._Flow_Val;
 8011c9e:	4b1f      	ldr	r3, [pc, #124]	; (8011d1c <volume_task_SIMV+0xf0>)
 8011ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ca2:	4a1c      	ldr	r2, [pc, #112]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011ca4:	6093      	str	r3, [r2, #8]
								  R3.constant_dac_done=0;
 8011ca6:	4b1b      	ldr	r3, [pc, #108]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011ca8:	2200      	movs	r2, #0
 8011caa:	605a      	str	r2, [r3, #4]
								  if(Flow_Sensor_cal._Flow_Val>R4.F_max)
 8011cac:	4b1b      	ldr	r3, [pc, #108]	; (8011d1c <volume_task_SIMV+0xf0>)
 8011cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011cb0:	4b19      	ldr	r3, [pc, #100]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	dd03      	ble.n	8011cc0 <volume_task_SIMV+0x94>
								  {
									  R4.F_max=Flow_Sensor_cal._Flow_Val;
 8011cb8:	4b18      	ldr	r3, [pc, #96]	; (8011d1c <volume_task_SIMV+0xf0>)
 8011cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cbc:	4a16      	ldr	r2, [pc, #88]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cbe:	6013      	str	r3, [r2, #0]




						  }
						  if(Flow_Sensor_cal._Flow_Val<R1._Flow_Rate)
 8011cc0:	4b16      	ldr	r3, [pc, #88]	; (8011d1c <volume_task_SIMV+0xf0>)
 8011cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cc4:	4a11      	ldr	r2, [pc, #68]	; (8011d0c <volume_task_SIMV+0xe0>)
 8011cc6:	8a12      	ldrh	r2, [r2, #16]
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	da18      	bge.n	8011cfe <volume_task_SIMV+0xd2>
						  {

							    if(R3.constant_dac_done==1)
 8011ccc:	4b11      	ldr	r3, [pc, #68]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d114      	bne.n	8011cfe <volume_task_SIMV+0xd2>
							    {
							    	R4._DAC_VAL0=R4.temp_dac;
 8011cd4:	4b10      	ldr	r3, [pc, #64]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cd6:	889a      	ldrh	r2, [r3, #4]
 8011cd8:	4b0f      	ldr	r3, [pc, #60]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cda:	811a      	strh	r2, [r3, #8]

					}

				}

}
 8011cdc:	e00f      	b.n	8011cfe <volume_task_SIMV+0xd2>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ce4:	480e      	ldr	r0, [pc, #56]	; (8011d20 <volume_task_SIMV+0xf4>)
 8011ce6:	f004 ffdd 	bl	8016ca4 <HAL_GPIO_WritePin>
						R3.volume_reached=1;
 8011cea:	4b0a      	ldr	r3, [pc, #40]	; (8011d14 <volume_task_SIMV+0xe8>)
 8011cec:	2201      	movs	r2, #1
 8011cee:	615a      	str	r2, [r3, #20]
						R4._DAC_VAL0=0;
 8011cf0:	4b09      	ldr	r3, [pc, #36]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	811a      	strh	r2, [r3, #8]
						R4.temp_dac=R4.temp_dac_new;
 8011cf6:	4b08      	ldr	r3, [pc, #32]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cf8:	88da      	ldrh	r2, [r3, #6]
 8011cfa:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <volume_task_SIMV+0xec>)
 8011cfc:	809a      	strh	r2, [r3, #4]
}
 8011cfe:	bf00      	nop
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20016cc8 	.word	0x20016cc8
 8011d08:	20016d44 	.word	0x20016d44
 8011d0c:	20016c08 	.word	0x20016c08
 8011d10:	20016bd4 	.word	0x20016bd4
 8011d14:	20016928 	.word	0x20016928
 8011d18:	20016b64 	.word	0x20016b64
 8011d1c:	20016c48 	.word	0x20016c48
 8011d20:	40020400 	.word	0x40020400

08011d24 <Peep_E_Valve_Lock_delay_Vc_simv>:




void Peep_E_Valve_Lock_delay_Vc_simv()
{
 8011d24:	b480      	push	{r7}
 8011d26:	af00      	add	r7, sp, #0
	if (R1.RR < 30)
 8011d28:	4b85      	ldr	r3, [pc, #532]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011d2a:	7c9b      	ldrb	r3, [r3, #18]
 8011d2c:	2b1d      	cmp	r3, #29
 8011d2e:	f200 81f7 	bhi.w	8012120 <Peep_E_Valve_Lock_delay_Vc_simv+0x3fc>
	{
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8011d32:	4b84      	ldr	r3, [pc, #528]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d34:	edd3 6a02 	vldr	s13, [r3, #8]
 8011d38:	4b82      	ldr	r3, [pc, #520]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8011d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d42:	4b80      	ldr	r3, [pc, #512]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d44:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8011d48:	4b7e      	ldr	r3, [pc, #504]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8011d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d52:	ee17 2a90 	vmov	r2, s15
 8011d56:	4b7b      	ldr	r3, [pc, #492]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d58:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8011d5a:	4b7a      	ldr	r3, [pc, #488]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d5c:	f04f 0200 	mov.w	r2, #0
 8011d60:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8011d62:	4b78      	ldr	r3, [pc, #480]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d64:	f04f 0200 	mov.w	r2, #0
 8011d68:	609a      	str	r2, [r3, #8]

		if(trigger_valve_modification==1)
 8011d6a:	4b77      	ldr	r3, [pc, #476]	; (8011f48 <Peep_E_Valve_Lock_delay_Vc_simv+0x224>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d117      	bne.n	8011da2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7e>
		{
			S5._Peep_Avg_val = S5._Peep_Avg_trigger / S5._Peep_Avg_count_trigger;
 8011d72:	4b74      	ldr	r3, [pc, #464]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d74:	edd3 6a06 	vldr	s13, [r3, #24]
 8011d78:	4b72      	ldr	r3, [pc, #456]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d7a:	ed93 7a07 	vldr	s14, [r3, #28]
 8011d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d82:	4b70      	ldr	r3, [pc, #448]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d84:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8011d88:	4b6e      	ldr	r3, [pc, #440]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d92:	ee17 2a90 	vmov	r2, s15
 8011d96:	4b6b      	ldr	r3, [pc, #428]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011d98:	629a      	str	r2, [r3, #40]	; 0x28
			trigger_valve_modification=0;
 8011d9a:	4b6b      	ldr	r3, [pc, #428]	; (8011f48 <Peep_E_Valve_Lock_delay_Vc_simv+0x224>)
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	601a      	str	r2, [r3, #0]
 8011da0:	e013      	b.n	8011dca <Peep_E_Valve_Lock_delay_Vc_simv+0xa6>
		}

		else
		{
			S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8011da2:	4b68      	ldr	r3, [pc, #416]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011da4:	edd3 6a05 	vldr	s13, [r3, #20]
 8011da8:	4b66      	ldr	r3, [pc, #408]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011daa:	ed93 7a08 	vldr	s14, [r3, #32]
 8011dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011db2:	4b64      	ldr	r3, [pc, #400]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011db4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8011db8:	4b62      	ldr	r3, [pc, #392]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011dba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dc2:	ee17 2a90 	vmov	r2, s15
 8011dc6:	4b5f      	ldr	r3, [pc, #380]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011dc8:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (R1.RR >= 30 || R2._E_TIMER_HOLD < 700)
 8011dca:	4b5d      	ldr	r3, [pc, #372]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011dcc:	7c9b      	ldrb	r3, [r3, #18]
 8011dce:	2b1d      	cmp	r3, #29
 8011dd0:	d804      	bhi.n	8011ddc <Peep_E_Valve_Lock_delay_Vc_simv+0xb8>
 8011dd2:	4b5e      	ldr	r3, [pc, #376]	; (8011f4c <Peep_E_Valve_Lock_delay_Vc_simv+0x228>)
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011dda:	d203      	bcs.n	8011de4 <Peep_E_Valve_Lock_delay_Vc_simv+0xc0>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8011ddc:	4b59      	ldr	r3, [pc, #356]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011de0:	4a58      	ldr	r2, [pc, #352]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011de2:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 8011de4:	4b57      	ldr	r3, [pc, #348]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011de6:	2200      	movs	r2, #0
 8011de8:	641a      	str	r2, [r3, #64]	; 0x40


		if (S5._Peep_Avg_val_int >= (R1._PEEP_Val +6) )
 8011dea:	4b55      	ldr	r3, [pc, #340]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011dec:	785b      	ldrb	r3, [r3, #1]
 8011dee:	1d5a      	adds	r2, r3, #5
 8011df0:	4b54      	ldr	r3, [pc, #336]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011df4:	429a      	cmp	r2, r3
 8011df6:	da29      	bge.n	8011e4c <Peep_E_Valve_Lock_delay_Vc_simv+0x128>
				{

					S5.error_count++;
 8011df8:	4b52      	ldr	r3, [pc, #328]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	4a51      	ldr	r2, [pc, #324]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e00:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 8011e02:	4b50      	ldr	r3, [pc, #320]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	dd11      	ble.n	8011e2e <Peep_E_Valve_Lock_delay_Vc_simv+0x10a>
					{
						S5.Lock_delay = S5.Lock_delay + 150;
 8011e0a:	4b4e      	ldr	r3, [pc, #312]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e0e:	3396      	adds	r3, #150	; 0x96
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	4b4c      	ldr	r3, [pc, #304]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e14:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8011e16:	4b4b      	ldr	r3, [pc, #300]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay >= 700)
 8011e1c:	4b49      	ldr	r3, [pc, #292]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e20:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011e24:	d303      	bcc.n	8011e2e <Peep_E_Valve_Lock_delay_Vc_simv+0x10a>
							S5.Lock_delay = 700;
 8011e26:	4b47      	ldr	r3, [pc, #284]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e28:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8011e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
					}
					if (S5._Set_Peep <= 3)
 8011e2e:	4b45      	ldr	r3, [pc, #276]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e30:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011e34:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e40:	f200 815d 	bhi.w	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = 3;
 8011e44:	4b3f      	ldr	r3, [pc, #252]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e46:	4a42      	ldr	r2, [pc, #264]	; (8011f50 <Peep_E_Valve_Lock_delay_Vc_simv+0x22c>)
 8011e48:	639a      	str	r2, [r3, #56]	; 0x38
 8011e4a:	e158      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					}
				}



				else if( (S5._Peep_Avg_val_int > (R1._PEEP_Val+3))  && (S5._Peep_Avg_val_int < (R1._PEEP_Val+6)) )
 8011e4c:	4b3d      	ldr	r3, [pc, #244]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e50:	4b3b      	ldr	r3, [pc, #236]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011e52:	785b      	ldrb	r3, [r3, #1]
 8011e54:	3303      	adds	r3, #3
 8011e56:	429a      	cmp	r2, r3
 8011e58:	dd30      	ble.n	8011ebc <Peep_E_Valve_Lock_delay_Vc_simv+0x198>
 8011e5a:	4b39      	ldr	r3, [pc, #228]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011e5c:	785b      	ldrb	r3, [r3, #1]
 8011e5e:	1d5a      	adds	r2, r3, #5
 8011e60:	4b38      	ldr	r3, [pc, #224]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e64:	429a      	cmp	r2, r3
 8011e66:	db29      	blt.n	8011ebc <Peep_E_Valve_Lock_delay_Vc_simv+0x198>
				{

					S5.error_count++;
 8011e68:	4b36      	ldr	r3, [pc, #216]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	4a35      	ldr	r2, [pc, #212]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e70:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 8011e72:	4b34      	ldr	r3, [pc, #208]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dd11      	ble.n	8011e9e <Peep_E_Valve_Lock_delay_Vc_simv+0x17a>
					{
						S5.Lock_delay = S5.Lock_delay + 50;
 8011e7a:	4b32      	ldr	r3, [pc, #200]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e7e:	3332      	adds	r3, #50	; 0x32
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	4b30      	ldr	r3, [pc, #192]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e84:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8011e86:	4b2f      	ldr	r3, [pc, #188]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e88:	2200      	movs	r2, #0
 8011e8a:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay >= 700)
 8011e8c:	4b2d      	ldr	r3, [pc, #180]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e8e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e90:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011e94:	d303      	bcc.n	8011e9e <Peep_E_Valve_Lock_delay_Vc_simv+0x17a>
							S5.Lock_delay = 700;
 8011e96:	4b2b      	ldr	r3, [pc, #172]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011e98:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8011e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
					}
					if (S5._Set_Peep <= 3)
 8011e9e:	4b29      	ldr	r3, [pc, #164]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ea0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011ea4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb0:	f200 8125 	bhi.w	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = 3;
 8011eb4:	4b23      	ldr	r3, [pc, #140]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011eb6:	4a26      	ldr	r2, [pc, #152]	; (8011f50 <Peep_E_Valve_Lock_delay_Vc_simv+0x22c>)
 8011eb8:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8011eba:	e120      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					}
				}


				else if( (S5._Peep_Avg_val_int > (R1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (R1._PEEP_Val+3)) )
 8011ebc:	4b21      	ldr	r3, [pc, #132]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ec0:	4a1f      	ldr	r2, [pc, #124]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011ec2:	7852      	ldrb	r2, [r2, #1]
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	dd45      	ble.n	8011f54 <Peep_E_Valve_Lock_delay_Vc_simv+0x230>
 8011ec8:	4b1e      	ldr	r3, [pc, #120]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ecc:	4b1c      	ldr	r3, [pc, #112]	; (8011f40 <Peep_E_Valve_Lock_delay_Vc_simv+0x21c>)
 8011ece:	785b      	ldrb	r3, [r3, #1]
 8011ed0:	3303      	adds	r3, #3
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	dc3e      	bgt.n	8011f54 <Peep_E_Valve_Lock_delay_Vc_simv+0x230>
				{
					S5._Set_Peep = S5._Set_Peep - 1;
 8011ed6:	4b1b      	ldr	r3, [pc, #108]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ed8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ee4:	4b17      	ldr	r3, [pc, #92]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ee6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.error_count++;
 8011eea:	4b16      	ldr	r3, [pc, #88]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eee:	3301      	adds	r3, #1
 8011ef0:	4a14      	ldr	r2, [pc, #80]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ef2:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 8011ef4:	4b13      	ldr	r3, [pc, #76]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	dd11      	ble.n	8011f20 <Peep_E_Valve_Lock_delay_Vc_simv+0x1fc>
					{
						S5.Lock_delay = S5.Lock_delay + 10;
 8011efc:	4b11      	ldr	r3, [pc, #68]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011efe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011f00:	330a      	adds	r3, #10
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f06:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8011f08:	4b0e      	ldr	r3, [pc, #56]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay >= 700)
 8011f0e:	4b0d      	ldr	r3, [pc, #52]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011f12:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011f16:	d303      	bcc.n	8011f20 <Peep_E_Valve_Lock_delay_Vc_simv+0x1fc>
							S5.Lock_delay = 700;
 8011f18:	4b0a      	ldr	r3, [pc, #40]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f1a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8011f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
					}
					if (S5._Set_Peep <= 3)
 8011f20:	4b08      	ldr	r3, [pc, #32]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f22:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011f26:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f32:	f200 80e4 	bhi.w	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = 3;
 8011f36:	4b03      	ldr	r3, [pc, #12]	; (8011f44 <Peep_E_Valve_Lock_delay_Vc_simv+0x220>)
 8011f38:	4a05      	ldr	r2, [pc, #20]	; (8011f50 <Peep_E_Valve_Lock_delay_Vc_simv+0x22c>)
 8011f3a:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8011f3c:	e0df      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
 8011f3e:	bf00      	nop
 8011f40:	20016c08 	.word	0x20016c08
 8011f44:	20016df4 	.word	0x20016df4
 8011f48:	20000314 	.word	0x20000314
 8011f4c:	20016d94 	.word	0x20016d94
 8011f50:	40400000 	.word	0x40400000
					}
				}
				else if( (S5._Peep_Avg_val_int >= (R1._PEEP_Val-4) )  && (S5._Peep_Avg_val_int < (R1._PEEP_Val)) )
 8011f54:	4b8e      	ldr	r3, [pc, #568]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f58:	4b8e      	ldr	r3, [pc, #568]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 8011f5a:	785b      	ldrb	r3, [r3, #1]
 8011f5c:	3b04      	subs	r3, #4
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	db42      	blt.n	8011fe8 <Peep_E_Valve_Lock_delay_Vc_simv+0x2c4>
 8011f62:	4b8b      	ldr	r3, [pc, #556]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f66:	4a8b      	ldr	r2, [pc, #556]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 8011f68:	7852      	ldrb	r2, [r2, #1]
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	da3c      	bge.n	8011fe8 <Peep_E_Valve_Lock_delay_Vc_simv+0x2c4>
				{


					S5.error_count2++;
 8011f6e:	4b88      	ldr	r3, [pc, #544]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f72:	3301      	adds	r3, #1
 8011f74:	4a86      	ldr	r2, [pc, #536]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f76:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 3)
 8011f78:	4b85      	ldr	r3, [pc, #532]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	dd1e      	ble.n	8011fbe <Peep_E_Valve_Lock_delay_Vc_simv+0x29a>
					{
						S5.Lock_delay = S5.Lock_delay - 10;
 8011f80:	4b83      	ldr	r3, [pc, #524]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f82:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011f84:	3b0a      	subs	r3, #10
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	4b81      	ldr	r3, [pc, #516]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f8a:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8011f8c:	4b80      	ldr	r3, [pc, #512]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8011f92:	4b7f      	ldr	r3, [pc, #508]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f94:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d904      	bls.n	8011fa4 <Peep_E_Valve_Lock_delay_Vc_simv+0x280>
 8011f9a:	4b7d      	ldr	r3, [pc, #500]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011f9c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011f9e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011fa2:	d90c      	bls.n	8011fbe <Peep_E_Valve_Lock_delay_Vc_simv+0x29a>
						{
							S5.Lock_delay = 1;
 8011fa4:	4b7a      	ldr	r3, [pc, #488]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 1;
 8011faa:	4b79      	ldr	r3, [pc, #484]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011fb8:	4b75      	ldr	r3, [pc, #468]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 8011fbe:	4b74      	ldr	r3, [pc, #464]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fc0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011fc4:	4b73      	ldr	r3, [pc, #460]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 8011fc6:	785b      	ldrb	r3, [r3, #1]
 8011fc8:	330a      	adds	r3, #10
 8011fca:	ee07 3a90 	vmov	s15, r3
 8011fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fda:	f340 8090 	ble.w	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = S5._Set_Peep;
 8011fde:	4b6c      	ldr	r3, [pc, #432]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe2:	4a6b      	ldr	r2, [pc, #428]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fe4:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 8011fe6:	e08a      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					}
				}


				else if( (S5._Peep_Avg_val_int < (R1._PEEP_Val-4) )  && ( (S5._Peep_Avg_val_int !=0)) )
 8011fe8:	4b69      	ldr	r3, [pc, #420]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fec:	4b69      	ldr	r3, [pc, #420]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 8011fee:	785b      	ldrb	r3, [r3, #1]
 8011ff0:	3b04      	subs	r3, #4
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	da3f      	bge.n	8012076 <Peep_E_Valve_Lock_delay_Vc_simv+0x352>
 8011ff6:	4b66      	ldr	r3, [pc, #408]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8011ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d03b      	beq.n	8012076 <Peep_E_Valve_Lock_delay_Vc_simv+0x352>
				{


					S5.error_count2++;
 8011ffe:	4b64      	ldr	r3, [pc, #400]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012002:	3301      	adds	r3, #1
 8012004:	4a62      	ldr	r2, [pc, #392]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012006:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 3)
 8012008:	4b61      	ldr	r3, [pc, #388]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801200c:	2b03      	cmp	r3, #3
 801200e:	dd1e      	ble.n	801204e <Peep_E_Valve_Lock_delay_Vc_simv+0x32a>
					{
						S5.Lock_delay = S5.Lock_delay - 10;
 8012010:	4b5f      	ldr	r3, [pc, #380]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012012:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012014:	3b0a      	subs	r3, #10
 8012016:	b29a      	uxth	r2, r3
 8012018:	4b5d      	ldr	r3, [pc, #372]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801201a:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 801201c:	4b5c      	ldr	r3, [pc, #368]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801201e:	2200      	movs	r2, #0
 8012020:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8012022:	4b5b      	ldr	r3, [pc, #364]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012024:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012026:	2b01      	cmp	r3, #1
 8012028:	d904      	bls.n	8012034 <Peep_E_Valve_Lock_delay_Vc_simv+0x310>
 801202a:	4b59      	ldr	r3, [pc, #356]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801202c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801202e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012032:	d90c      	bls.n	801204e <Peep_E_Valve_Lock_delay_Vc_simv+0x32a>
						{
							S5.Lock_delay = 1;
 8012034:	4b56      	ldr	r3, [pc, #344]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012036:	2201      	movs	r2, #1
 8012038:	879a      	strh	r2, [r3, #60]	; 0x3c
							S5._Set_Peep = S5._Set_Peep + 1;
 801203a:	4b55      	ldr	r3, [pc, #340]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801203c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012048:	4b51      	ldr	r3, [pc, #324]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801204a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						}
					}
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 801204e:	4b50      	ldr	r3, [pc, #320]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012050:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8012054:	4b4f      	ldr	r3, [pc, #316]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 8012056:	785b      	ldrb	r3, [r3, #1]
 8012058:	330a      	adds	r3, #10
 801205a:	ee07 3a90 	vmov	s15, r3
 801205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206a:	dd48      	ble.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = S5._Set_Peep;
 801206c:	4b48      	ldr	r3, [pc, #288]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012070:	4a47      	ldr	r2, [pc, #284]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012072:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 8012074:	e043      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>





				else if ((S5._Peep_Avg_val_int ==0))
 8012076:	4b46      	ldr	r3, [pc, #280]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801207a:	2b00      	cmp	r3, #0
 801207c:	d13b      	bne.n	80120f6 <Peep_E_Valve_Lock_delay_Vc_simv+0x3d2>
				{


					S5.error_count2++;
 801207e:	4b44      	ldr	r3, [pc, #272]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012082:	3301      	adds	r3, #1
 8012084:	4a42      	ldr	r2, [pc, #264]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012086:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 8012088:	4b41      	ldr	r3, [pc, #260]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801208c:	2b02      	cmp	r3, #2
 801208e:	dd1e      	ble.n	80120ce <Peep_E_Valve_Lock_delay_Vc_simv+0x3aa>
					{
						S5._Set_Peep = S5._Set_Peep + 5;
 8012090:	4b3f      	ldr	r3, [pc, #252]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012092:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012096:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801209a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801209e:	4b3c      	ldr	r3, [pc, #240]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120a0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						S5.Lock_delay = S5.Lock_delay - 30;
 80120a4:	4b3a      	ldr	r3, [pc, #232]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80120a8:	3b1e      	subs	r3, #30
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	4b38      	ldr	r3, [pc, #224]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120ae:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 80120b0:	4b37      	ldr	r3, [pc, #220]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 80120b6:	4b36      	ldr	r3, [pc, #216]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d004      	beq.n	80120c8 <Peep_E_Valve_Lock_delay_Vc_simv+0x3a4>
 80120be:	4b34      	ldr	r3, [pc, #208]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80120c2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80120c6:	d902      	bls.n	80120ce <Peep_E_Valve_Lock_delay_Vc_simv+0x3aa>
							S5.Lock_delay = 1;
 80120c8:	4b31      	ldr	r3, [pc, #196]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120ca:	2201      	movs	r2, #1
 80120cc:	879a      	strh	r2, [r3, #60]	; 0x3c
					}
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 80120ce:	4b30      	ldr	r3, [pc, #192]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120d0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80120d4:	4b2f      	ldr	r3, [pc, #188]	; (8012194 <Peep_E_Valve_Lock_delay_Vc_simv+0x470>)
 80120d6:	785b      	ldrb	r3, [r3, #1]
 80120d8:	330a      	adds	r3, #10
 80120da:	ee07 3a90 	vmov	s15, r3
 80120de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ea:	dd08      	ble.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					{
						S5._Set_Peep = S5._Set_Peep;
 80120ec:	4b28      	ldr	r3, [pc, #160]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f0:	4a27      	ldr	r2, [pc, #156]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120f2:	6393      	str	r3, [r2, #56]	; 0x38
 80120f4:	e003      	b.n	80120fe <Peep_E_Valve_Lock_delay_Vc_simv+0x3da>
					}
				}

				else
				{
					S5._Set_Peep = S5._Set_Peep;
 80120f6:	4b26      	ldr	r3, [pc, #152]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120fa:	4a25      	ldr	r2, [pc, #148]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 80120fc:	6393      	str	r3, [r2, #56]	; 0x38
				}
				S5._Peep_Avg_count = 0;
 80120fe:	4b24      	ldr	r3, [pc, #144]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012100:	f04f 0200 	mov.w	r2, #0
 8012104:	621a      	str	r2, [r3, #32]
				S5._Peep_Avg = 0;
 8012106:	4b22      	ldr	r3, [pc, #136]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012108:	f04f 0200 	mov.w	r2, #0
 801210c:	615a      	str	r2, [r3, #20]

				S5._Peep_Avg_trigger=0;
 801210e:	4b20      	ldr	r3, [pc, #128]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012110:	f04f 0200 	mov.w	r2, #0
 8012114:	619a      	str	r2, [r3, #24]
				S5._Peep_Avg_count_trigger=0;
 8012116:	4b1e      	ldr	r3, [pc, #120]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012118:	f04f 0200 	mov.w	r2, #0
 801211c:	61da      	str	r2, [r3, #28]
				S5._Peep_Avg = 0;

				S5._Peep_Avg_trigger=0;
				S5._Peep_Avg_count_trigger=0;
	}
}
 801211e:	e1f8      	b.n	8012512 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ee>
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8012120:	4b1b      	ldr	r3, [pc, #108]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012122:	edd3 6a02 	vldr	s13, [r3, #8]
 8012126:	4b1a      	ldr	r3, [pc, #104]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012128:	ed93 7a03 	vldr	s14, [r3, #12]
 801212c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012130:	4b17      	ldr	r3, [pc, #92]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012132:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8012136:	4b16      	ldr	r3, [pc, #88]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012138:	edd3 7a04 	vldr	s15, [r3, #16]
 801213c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012140:	ee17 2a90 	vmov	r2, s15
 8012144:	4b12      	ldr	r3, [pc, #72]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012146:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8012148:	4b11      	ldr	r3, [pc, #68]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 801214a:	f04f 0200 	mov.w	r2, #0
 801214e:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8012150:	4b0f      	ldr	r3, [pc, #60]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012152:	f04f 0200 	mov.w	r2, #0
 8012156:	609a      	str	r2, [r3, #8]
		if(trigger_valve_modification==1)
 8012158:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <Peep_E_Valve_Lock_delay_Vc_simv+0x474>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d11d      	bne.n	801219c <Peep_E_Valve_Lock_delay_Vc_simv+0x478>
			S5._Peep_Avg_val = S5._Peep_Avg_trigger / S5._Peep_Avg_count_trigger;
 8012160:	4b0b      	ldr	r3, [pc, #44]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012162:	edd3 6a06 	vldr	s13, [r3, #24]
 8012166:	4b0a      	ldr	r3, [pc, #40]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012168:	ed93 7a07 	vldr	s14, [r3, #28]
 801216c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012170:	4b07      	ldr	r3, [pc, #28]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012172:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8012176:	4b06      	ldr	r3, [pc, #24]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012178:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012180:	ee17 2a90 	vmov	r2, s15
 8012184:	4b02      	ldr	r3, [pc, #8]	; (8012190 <Peep_E_Valve_Lock_delay_Vc_simv+0x46c>)
 8012186:	629a      	str	r2, [r3, #40]	; 0x28
			trigger_valve_modification=0;
 8012188:	4b03      	ldr	r3, [pc, #12]	; (8012198 <Peep_E_Valve_Lock_delay_Vc_simv+0x474>)
 801218a:	2200      	movs	r2, #0
 801218c:	601a      	str	r2, [r3, #0]
 801218e:	e019      	b.n	80121c4 <Peep_E_Valve_Lock_delay_Vc_simv+0x4a0>
 8012190:	20016df4 	.word	0x20016df4
 8012194:	20016c08 	.word	0x20016c08
 8012198:	20000314 	.word	0x20000314
			S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 801219c:	4b8b      	ldr	r3, [pc, #556]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801219e:	edd3 6a05 	vldr	s13, [r3, #20]
 80121a2:	4b8a      	ldr	r3, [pc, #552]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80121a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121ac:	4b87      	ldr	r3, [pc, #540]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 80121b2:	4b86      	ldr	r3, [pc, #536]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80121b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121bc:	ee17 2a90 	vmov	r2, s15
 80121c0:	4b82      	ldr	r3, [pc, #520]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121c2:	629a      	str	r2, [r3, #40]	; 0x28
		if (R1.RR >= 30 || R2._E_TIMER_HOLD < 700)
 80121c4:	4b82      	ldr	r3, [pc, #520]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 80121c6:	7c9b      	ldrb	r3, [r3, #18]
 80121c8:	2b1d      	cmp	r3, #29
 80121ca:	d804      	bhi.n	80121d6 <Peep_E_Valve_Lock_delay_Vc_simv+0x4b2>
 80121cc:	4b81      	ldr	r3, [pc, #516]	; (80123d4 <Peep_E_Valve_Lock_delay_Vc_simv+0x6b0>)
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80121d4:	d203      	bcs.n	80121de <Peep_E_Valve_Lock_delay_Vc_simv+0x4ba>
			S5._Peep_Avg_val_int = S5.peep_max;
 80121d6:	4b7d      	ldr	r3, [pc, #500]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121da:	4a7c      	ldr	r2, [pc, #496]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121dc:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 80121de:	4b7b      	ldr	r3, [pc, #492]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121e0:	2200      	movs	r2, #0
 80121e2:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (R1._PEEP_Val +5) )
 80121e4:	4b79      	ldr	r3, [pc, #484]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121e8:	4b79      	ldr	r3, [pc, #484]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 80121ea:	785b      	ldrb	r3, [r3, #1]
 80121ec:	3305      	adds	r3, #5
 80121ee:	429a      	cmp	r2, r3
 80121f0:	dd29      	ble.n	8012246 <Peep_E_Valve_Lock_delay_Vc_simv+0x522>
					S5.error_count++;
 80121f2:	4b76      	ldr	r3, [pc, #472]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121f6:	3301      	adds	r3, #1
 80121f8:	4a74      	ldr	r2, [pc, #464]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121fa:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 80121fc:	4b73      	ldr	r3, [pc, #460]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80121fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012200:	2b00      	cmp	r3, #0
 8012202:	dd11      	ble.n	8012228 <Peep_E_Valve_Lock_delay_Vc_simv+0x504>
						S5.Lock_delay = S5.Lock_delay + 30;
 8012204:	4b71      	ldr	r3, [pc, #452]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012206:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012208:	331e      	adds	r3, #30
 801220a:	b29a      	uxth	r2, r3
 801220c:	4b6f      	ldr	r3, [pc, #444]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801220e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8012210:	4b6e      	ldr	r3, [pc, #440]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012212:	2200      	movs	r2, #0
 8012214:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay > 700)
 8012216:	4b6d      	ldr	r3, [pc, #436]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012218:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801221a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801221e:	d903      	bls.n	8012228 <Peep_E_Valve_Lock_delay_Vc_simv+0x504>
							S5.Lock_delay = 700;
 8012220:	4b6a      	ldr	r3, [pc, #424]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012222:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012226:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep <= 3)
 8012228:	4b68      	ldr	r3, [pc, #416]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801222a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801222e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223a:	f200 815a 	bhi.w	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = 3;
 801223e:	4b63      	ldr	r3, [pc, #396]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012240:	4a65      	ldr	r2, [pc, #404]	; (80123d8 <Peep_E_Valve_Lock_delay_Vc_simv+0x6b4>)
 8012242:	639a      	str	r2, [r3, #56]	; 0x38
 8012244:	e155      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
				else if( (S5._Peep_Avg_val_int > (R1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (R1._PEEP_Val+5)) )
 8012246:	4b61      	ldr	r3, [pc, #388]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801224a:	4b61      	ldr	r3, [pc, #388]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 801224c:	785b      	ldrb	r3, [r3, #1]
 801224e:	3302      	adds	r3, #2
 8012250:	429a      	cmp	r2, r3
 8012252:	dd30      	ble.n	80122b6 <Peep_E_Valve_Lock_delay_Vc_simv+0x592>
 8012254:	4b5d      	ldr	r3, [pc, #372]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012258:	4b5d      	ldr	r3, [pc, #372]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 801225a:	785b      	ldrb	r3, [r3, #1]
 801225c:	3305      	adds	r3, #5
 801225e:	429a      	cmp	r2, r3
 8012260:	dc29      	bgt.n	80122b6 <Peep_E_Valve_Lock_delay_Vc_simv+0x592>
					S5.error_count++;
 8012262:	4b5a      	ldr	r3, [pc, #360]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012266:	3301      	adds	r3, #1
 8012268:	4a58      	ldr	r2, [pc, #352]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801226a:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 801226c:	4b57      	ldr	r3, [pc, #348]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012270:	2b00      	cmp	r3, #0
 8012272:	dd11      	ble.n	8012298 <Peep_E_Valve_Lock_delay_Vc_simv+0x574>
						S5.Lock_delay = S5.Lock_delay + 20;
 8012274:	4b55      	ldr	r3, [pc, #340]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012276:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012278:	3314      	adds	r3, #20
 801227a:	b29a      	uxth	r2, r3
 801227c:	4b53      	ldr	r3, [pc, #332]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801227e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8012280:	4b52      	ldr	r3, [pc, #328]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012282:	2200      	movs	r2, #0
 8012284:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay > 700)
 8012286:	4b51      	ldr	r3, [pc, #324]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012288:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801228a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801228e:	d903      	bls.n	8012298 <Peep_E_Valve_Lock_delay_Vc_simv+0x574>
							S5.Lock_delay = 700;
 8012290:	4b4e      	ldr	r3, [pc, #312]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012292:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012296:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep <= 3)
 8012298:	4b4c      	ldr	r3, [pc, #304]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801229a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801229e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80122a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122aa:	f200 8122 	bhi.w	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = 3;
 80122ae:	4b47      	ldr	r3, [pc, #284]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122b0:	4a49      	ldr	r2, [pc, #292]	; (80123d8 <Peep_E_Valve_Lock_delay_Vc_simv+0x6b4>)
 80122b2:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 80122b4:	e11d      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
				else if( (S5._Peep_Avg_val_int > (R1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (R1._PEEP_Val+2)) )
 80122b6:	4b45      	ldr	r3, [pc, #276]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122ba:	4a45      	ldr	r2, [pc, #276]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 80122bc:	7852      	ldrb	r2, [r2, #1]
 80122be:	4293      	cmp	r3, r2
 80122c0:	dd3a      	ble.n	8012338 <Peep_E_Valve_Lock_delay_Vc_simv+0x614>
 80122c2:	4b42      	ldr	r3, [pc, #264]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122c6:	4b42      	ldr	r3, [pc, #264]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 80122c8:	785b      	ldrb	r3, [r3, #1]
 80122ca:	3302      	adds	r3, #2
 80122cc:	429a      	cmp	r2, r3
 80122ce:	dc33      	bgt.n	8012338 <Peep_E_Valve_Lock_delay_Vc_simv+0x614>
					S5._Set_Peep = S5._Set_Peep - 0.5f;
 80122d0:	4b3e      	ldr	r3, [pc, #248]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80122d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80122da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122de:	4b3b      	ldr	r3, [pc, #236]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122e0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.error_count++;
 80122e4:	4b39      	ldr	r3, [pc, #228]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122e8:	3301      	adds	r3, #1
 80122ea:	4a38      	ldr	r2, [pc, #224]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122ec:	6313      	str	r3, [r2, #48]	; 0x30
					if (S5.error_count > 0)
 80122ee:	4b37      	ldr	r3, [pc, #220]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	dd11      	ble.n	801231a <Peep_E_Valve_Lock_delay_Vc_simv+0x5f6>
						S5.Lock_delay = S5.Lock_delay + 10;
 80122f6:	4b35      	ldr	r3, [pc, #212]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80122f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80122fa:	330a      	adds	r3, #10
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	4b33      	ldr	r3, [pc, #204]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012300:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count = 0;
 8012302:	4b32      	ldr	r3, [pc, #200]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012304:	2200      	movs	r2, #0
 8012306:	631a      	str	r2, [r3, #48]	; 0x30
						if (S5.Lock_delay > 700)
 8012308:	4b30      	ldr	r3, [pc, #192]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801230a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801230c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012310:	d903      	bls.n	801231a <Peep_E_Valve_Lock_delay_Vc_simv+0x5f6>
							S5.Lock_delay = 700;
 8012312:	4b2e      	ldr	r3, [pc, #184]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012314:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012318:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep <= 3)
 801231a:	4b2c      	ldr	r3, [pc, #176]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801231c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012320:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232c:	f200 80e1 	bhi.w	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = 3;
 8012330:	4b26      	ldr	r3, [pc, #152]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012332:	4a29      	ldr	r2, [pc, #164]	; (80123d8 <Peep_E_Valve_Lock_delay_Vc_simv+0x6b4>)
 8012334:	639a      	str	r2, [r3, #56]	; 0x38
					if (S5._Set_Peep <= 3)
 8012336:	e0dc      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
				else if( (S5._Peep_Avg_val_int >= (R1._PEEP_Val-4) )  && (S5._Peep_Avg_val_int < (R1._PEEP_Val)) )
 8012338:	4b24      	ldr	r3, [pc, #144]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801233a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801233c:	4b24      	ldr	r3, [pc, #144]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 801233e:	785b      	ldrb	r3, [r3, #1]
 8012340:	3b04      	subs	r3, #4
 8012342:	429a      	cmp	r2, r3
 8012344:	db4a      	blt.n	80123dc <Peep_E_Valve_Lock_delay_Vc_simv+0x6b8>
 8012346:	4b21      	ldr	r3, [pc, #132]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801234a:	4a21      	ldr	r2, [pc, #132]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 801234c:	7852      	ldrb	r2, [r2, #1]
 801234e:	4293      	cmp	r3, r2
 8012350:	da44      	bge.n	80123dc <Peep_E_Valve_Lock_delay_Vc_simv+0x6b8>
					S5.error_count2++;
 8012352:	4b1e      	ldr	r3, [pc, #120]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012356:	3301      	adds	r3, #1
 8012358:	4a1c      	ldr	r2, [pc, #112]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801235a:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 3)
 801235c:	4b1b      	ldr	r3, [pc, #108]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012360:	2b03      	cmp	r3, #3
 8012362:	dd1e      	ble.n	80123a2 <Peep_E_Valve_Lock_delay_Vc_simv+0x67e>
						S5.Lock_delay = S5.Lock_delay - 10;
 8012364:	4b19      	ldr	r3, [pc, #100]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012366:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012368:	3b0a      	subs	r3, #10
 801236a:	b29a      	uxth	r2, r3
 801236c:	4b17      	ldr	r3, [pc, #92]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801236e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8012370:	4b16      	ldr	r3, [pc, #88]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012372:	2200      	movs	r2, #0
 8012374:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8012376:	4b15      	ldr	r3, [pc, #84]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012378:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801237a:	2b01      	cmp	r3, #1
 801237c:	d904      	bls.n	8012388 <Peep_E_Valve_Lock_delay_Vc_simv+0x664>
 801237e:	4b13      	ldr	r3, [pc, #76]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012380:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012382:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012386:	d90c      	bls.n	80123a2 <Peep_E_Valve_Lock_delay_Vc_simv+0x67e>
							S5._Set_Peep = S5._Set_Peep + 1;
 8012388:	4b10      	ldr	r3, [pc, #64]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801238a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801238e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012392:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012396:	4b0d      	ldr	r3, [pc, #52]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 8012398:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 801239c:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 801239e:	2201      	movs	r2, #1
 80123a0:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 80123a2:	4b0a      	ldr	r3, [pc, #40]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80123a4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80123a8:	4b09      	ldr	r3, [pc, #36]	; (80123d0 <Peep_E_Valve_Lock_delay_Vc_simv+0x6ac>)
 80123aa:	785b      	ldrb	r3, [r3, #1]
 80123ac:	330a      	adds	r3, #10
 80123ae:	ee07 3a90 	vmov	s15, r3
 80123b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123be:	f340 8098 	ble.w	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = S5._Set_Peep;
 80123c2:	4b02      	ldr	r3, [pc, #8]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80123c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123c6:	4a01      	ldr	r2, [pc, #4]	; (80123cc <Peep_E_Valve_Lock_delay_Vc_simv+0x6a8>)
 80123c8:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 80123ca:	e092      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
 80123cc:	20016df4 	.word	0x20016df4
 80123d0:	20016c08 	.word	0x20016c08
 80123d4:	20016d94 	.word	0x20016d94
 80123d8:	40400000 	.word	0x40400000
				else if( (S5._Peep_Avg_val_int < (R1._PEEP_Val-4) )  && ((S5._Peep_Avg_val_int !=0)) )
 80123dc:	4b4f      	ldr	r3, [pc, #316]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80123de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80123e0:	4b4f      	ldr	r3, [pc, #316]	; (8012520 <Peep_E_Valve_Lock_delay_Vc_simv+0x7fc>)
 80123e2:	785b      	ldrb	r3, [r3, #1]
 80123e4:	3b04      	subs	r3, #4
 80123e6:	429a      	cmp	r2, r3
 80123e8:	da3f      	bge.n	801246a <Peep_E_Valve_Lock_delay_Vc_simv+0x746>
 80123ea:	4b4c      	ldr	r3, [pc, #304]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80123ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d03b      	beq.n	801246a <Peep_E_Valve_Lock_delay_Vc_simv+0x746>
					S5.error_count2++;
 80123f2:	4b4a      	ldr	r3, [pc, #296]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80123f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f6:	3301      	adds	r3, #1
 80123f8:	4a48      	ldr	r2, [pc, #288]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80123fa:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 3)
 80123fc:	4b47      	ldr	r3, [pc, #284]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80123fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012400:	2b03      	cmp	r3, #3
 8012402:	dd1e      	ble.n	8012442 <Peep_E_Valve_Lock_delay_Vc_simv+0x71e>
						S5.Lock_delay = S5.Lock_delay - 10;
 8012404:	4b45      	ldr	r3, [pc, #276]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012406:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012408:	3b0a      	subs	r3, #10
 801240a:	b29a      	uxth	r2, r3
 801240c:	4b43      	ldr	r3, [pc, #268]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801240e:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 8012410:	4b42      	ldr	r3, [pc, #264]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012412:	2200      	movs	r2, #0
 8012414:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8012416:	4b41      	ldr	r3, [pc, #260]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012418:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801241a:	2b01      	cmp	r3, #1
 801241c:	d904      	bls.n	8012428 <Peep_E_Valve_Lock_delay_Vc_simv+0x704>
 801241e:	4b3f      	ldr	r3, [pc, #252]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012420:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012422:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012426:	d90c      	bls.n	8012442 <Peep_E_Valve_Lock_delay_Vc_simv+0x71e>
							S5._Set_Peep = S5._Set_Peep + 1;
 8012428:	4b3c      	ldr	r3, [pc, #240]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801242a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801242e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012436:	4b39      	ldr	r3, [pc, #228]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012438:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
							S5.Lock_delay = 1;
 801243c:	4b37      	ldr	r3, [pc, #220]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801243e:	2201      	movs	r2, #1
 8012440:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 8012442:	4b36      	ldr	r3, [pc, #216]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012444:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8012448:	4b35      	ldr	r3, [pc, #212]	; (8012520 <Peep_E_Valve_Lock_delay_Vc_simv+0x7fc>)
 801244a:	785b      	ldrb	r3, [r3, #1]
 801244c:	330a      	adds	r3, #10
 801244e:	ee07 3a90 	vmov	s15, r3
 8012452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245e:	dd48      	ble.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = S5._Set_Peep;
 8012460:	4b2e      	ldr	r3, [pc, #184]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012464:	4a2d      	ldr	r2, [pc, #180]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012466:	6393      	str	r3, [r2, #56]	; 0x38
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 8012468:	e043      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
				else if ((S5._Peep_Avg_val_int ==0))
 801246a:	4b2c      	ldr	r3, [pc, #176]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246e:	2b00      	cmp	r3, #0
 8012470:	d13b      	bne.n	80124ea <Peep_E_Valve_Lock_delay_Vc_simv+0x7c6>
					S5.error_count2++;
 8012472:	4b2a      	ldr	r3, [pc, #168]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012476:	3301      	adds	r3, #1
 8012478:	4a28      	ldr	r2, [pc, #160]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801247a:	6353      	str	r3, [r2, #52]	; 0x34
					if (S5.error_count2 > 2)
 801247c:	4b27      	ldr	r3, [pc, #156]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012480:	2b02      	cmp	r3, #2
 8012482:	dd1e      	ble.n	80124c2 <Peep_E_Valve_Lock_delay_Vc_simv+0x79e>
						S5._Set_Peep = S5._Set_Peep + 5;
 8012484:	4b25      	ldr	r3, [pc, #148]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012486:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801248a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801248e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012492:	4b22      	ldr	r3, [pc, #136]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012494:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
						S5.Lock_delay = S5.Lock_delay - 30;
 8012498:	4b20      	ldr	r3, [pc, #128]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801249a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801249c:	3b1e      	subs	r3, #30
 801249e:	b29a      	uxth	r2, r3
 80124a0:	4b1e      	ldr	r3, [pc, #120]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124a2:	879a      	strh	r2, [r3, #60]	; 0x3c
						S5.error_count2 = 0;
 80124a4:	4b1d      	ldr	r3, [pc, #116]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124a6:	2200      	movs	r2, #0
 80124a8:	635a      	str	r2, [r3, #52]	; 0x34
						if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 80124aa:	4b1c      	ldr	r3, [pc, #112]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d004      	beq.n	80124bc <Peep_E_Valve_Lock_delay_Vc_simv+0x798>
 80124b2:	4b1a      	ldr	r3, [pc, #104]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80124b6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80124ba:	d902      	bls.n	80124c2 <Peep_E_Valve_Lock_delay_Vc_simv+0x79e>
							S5.Lock_delay = 1;
 80124bc:	4b17      	ldr	r3, [pc, #92]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124be:	2201      	movs	r2, #1
 80124c0:	879a      	strh	r2, [r3, #60]	; 0x3c
					if (S5._Set_Peep > R1._PEEP_Val + 10)
 80124c2:	4b16      	ldr	r3, [pc, #88]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124c4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80124c8:	4b15      	ldr	r3, [pc, #84]	; (8012520 <Peep_E_Valve_Lock_delay_Vc_simv+0x7fc>)
 80124ca:	785b      	ldrb	r3, [r3, #1]
 80124cc:	330a      	adds	r3, #10
 80124ce:	ee07 3a90 	vmov	s15, r3
 80124d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124de:	dd08      	ble.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
						S5._Set_Peep = S5._Set_Peep;
 80124e0:	4b0e      	ldr	r3, [pc, #56]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e4:	4a0d      	ldr	r2, [pc, #52]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124e6:	6393      	str	r3, [r2, #56]	; 0x38
 80124e8:	e003      	b.n	80124f2 <Peep_E_Valve_Lock_delay_Vc_simv+0x7ce>
					S5._Set_Peep = S5._Set_Peep;
 80124ea:	4b0c      	ldr	r3, [pc, #48]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ee:	4a0b      	ldr	r2, [pc, #44]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124f0:	6393      	str	r3, [r2, #56]	; 0x38
				S5._Peep_Avg_count = 0;
 80124f2:	4b0a      	ldr	r3, [pc, #40]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124f4:	f04f 0200 	mov.w	r2, #0
 80124f8:	621a      	str	r2, [r3, #32]
				S5._Peep_Avg = 0;
 80124fa:	4b08      	ldr	r3, [pc, #32]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 80124fc:	f04f 0200 	mov.w	r2, #0
 8012500:	615a      	str	r2, [r3, #20]
				S5._Peep_Avg_trigger=0;
 8012502:	4b06      	ldr	r3, [pc, #24]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 8012504:	f04f 0200 	mov.w	r2, #0
 8012508:	619a      	str	r2, [r3, #24]
				S5._Peep_Avg_count_trigger=0;
 801250a:	4b04      	ldr	r3, [pc, #16]	; (801251c <Peep_E_Valve_Lock_delay_Vc_simv+0x7f8>)
 801250c:	f04f 0200 	mov.w	r2, #0
 8012510:	61da      	str	r2, [r3, #28]
}
 8012512:	bf00      	nop
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr
 801251c:	20016df4 	.word	0x20016df4
 8012520:	20016c08 	.word	0x20016c08

08012524 <Vc_Cmv_Task>:
extern uint16_t _60_Seconds;
extern uint8_t now_check_breath;
extern uint8_t Breath;

void Vc_Cmv_Task(void *argument)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]


	while (1)
	{
		        switch (_CurrentComputationState)
 801252c:	4b3a      	ldr	r3, [pc, #232]	; (8012618 <Vc_Cmv_Task+0xf4>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	2b02      	cmp	r3, #2
 8012532:	d068      	beq.n	8012606 <Vc_Cmv_Task+0xe2>
 8012534:	2b02      	cmp	r3, #2
 8012536:	dc68      	bgt.n	801260a <Vc_Cmv_Task+0xe6>
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <Vc_Cmv_Task+0x1e>
 801253c:	2b01      	cmp	r3, #1
 801253e:	d011      	beq.n	8012564 <Vc_Cmv_Task+0x40>
									}
						break;
						case NoComputeState:
						break;
						default:
						break;
 8012540:	e063      	b.n	801260a <Vc_Cmv_Task+0xe6>
							ExpValve_CLOSE();
 8012542:	4b36      	ldr	r3, [pc, #216]	; (801261c <Vc_Cmv_Task+0xf8>)
 8012544:	695b      	ldr	r3, [r3, #20]
 8012546:	4a35      	ldr	r2, [pc, #212]	; (801261c <Vc_Cmv_Task+0xf8>)
 8012548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801254c:	6153      	str	r3, [r2, #20]
							Blower_Signal( V4._DAC_VAL0);
 801254e:	4b34      	ldr	r3, [pc, #208]	; (8012620 <Vc_Cmv_Task+0xfc>)
 8012550:	891a      	ldrh	r2, [r3, #8]
 8012552:	4b34      	ldr	r3, [pc, #208]	; (8012624 <Vc_Cmv_Task+0x100>)
 8012554:	609a      	str	r2, [r3, #8]
							S5.peep_process_done=0;
 8012556:	4b34      	ldr	r3, [pc, #208]	; (8012628 <Vc_Cmv_Task+0x104>)
 8012558:	2200      	movs	r2, #0
 801255a:	64da      	str	r2, [r3, #76]	; 0x4c
							S5.lock=1;
 801255c:	4b32      	ldr	r3, [pc, #200]	; (8012628 <Vc_Cmv_Task+0x104>)
 801255e:	2201      	movs	r2, #1
 8012560:	645a      	str	r2, [r3, #68]	; 0x44
						break;
 8012562:	e055      	b.n	8012610 <Vc_Cmv_Task+0xec>
							V4._DAC_VAL0=0;
 8012564:	4b2e      	ldr	r3, [pc, #184]	; (8012620 <Vc_Cmv_Task+0xfc>)
 8012566:	2200      	movs	r2, #0
 8012568:	811a      	strh	r2, [r3, #8]
							Blower_Signal( V4._DAC_VAL0);
 801256a:	4b2d      	ldr	r3, [pc, #180]	; (8012620 <Vc_Cmv_Task+0xfc>)
 801256c:	891a      	ldrh	r2, [r3, #8]
 801256e:	4b2d      	ldr	r3, [pc, #180]	; (8012624 <Vc_Cmv_Task+0x100>)
 8012570:	609a      	str	r2, [r3, #8]
									if(S5.peep_process_done==1)
 8012572:	4b2d      	ldr	r3, [pc, #180]	; (8012628 <Vc_Cmv_Task+0x104>)
 8012574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012576:	2b01      	cmp	r3, #1
 8012578:	d116      	bne.n	80125a8 <Vc_Cmv_Task+0x84>
											if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 801257a:	4b2c      	ldr	r3, [pc, #176]	; (801262c <Vc_Cmv_Task+0x108>)
 801257c:	791b      	ldrb	r3, [r3, #4]
 801257e:	ee07 3a90 	vmov	s15, r3
 8012582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012586:	4b28      	ldr	r3, [pc, #160]	; (8012628 <Vc_Cmv_Task+0x104>)
 8012588:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801258c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	d504      	bpl.n	80125a0 <Vc_Cmv_Task+0x7c>
												Blower_Signal( V4._DAC_VAL0);
 8012596:	4b22      	ldr	r3, [pc, #136]	; (8012620 <Vc_Cmv_Task+0xfc>)
 8012598:	891a      	ldrh	r2, [r3, #8]
 801259a:	4b22      	ldr	r3, [pc, #136]	; (8012624 <Vc_Cmv_Task+0x100>)
 801259c:	609a      	str	r2, [r3, #8]
 801259e:	e003      	b.n	80125a8 <Vc_Cmv_Task+0x84>
												Blower_Signal( V4._DAC_VAL0);
 80125a0:	4b1f      	ldr	r3, [pc, #124]	; (8012620 <Vc_Cmv_Task+0xfc>)
 80125a2:	891a      	ldrh	r2, [r3, #8]
 80125a4:	4b1f      	ldr	r3, [pc, #124]	; (8012624 <Vc_Cmv_Task+0x100>)
 80125a6:	609a      	str	r2, [r3, #8]
									if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 80125a8:	4b20      	ldr	r3, [pc, #128]	; (801262c <Vc_Cmv_Task+0x108>)
 80125aa:	791b      	ldrb	r3, [r3, #4]
 80125ac:	ee07 3a90 	vmov	s15, r3
 80125b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80125b4:	4b1c      	ldr	r3, [pc, #112]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80125ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	d815      	bhi.n	80125f0 <Vc_Cmv_Task+0xcc>
										if(S5.lock==1)
 80125c4:	4b18      	ldr	r3, [pc, #96]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d107      	bne.n	80125dc <Vc_Cmv_Task+0xb8>
											S5.lock=0;
 80125cc:	4b16      	ldr	r3, [pc, #88]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125ce:	2200      	movs	r2, #0
 80125d0:	645a      	str	r2, [r3, #68]	; 0x44
											vTaskDelay(S5.Lock_delay);
 80125d2:	4b15      	ldr	r3, [pc, #84]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80125d6:	4618      	mov	r0, r3
 80125d8:	f00d f948 	bl	801f86c <vTaskDelay>
										S5.peep_process_done=1;
 80125dc:	4b12      	ldr	r3, [pc, #72]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125de:	2201      	movs	r2, #1
 80125e0:	64da      	str	r2, [r3, #76]	; 0x4c
										ExpValve_CLOSE();
 80125e2:	4b0e      	ldr	r3, [pc, #56]	; (801261c <Vc_Cmv_Task+0xf8>)
 80125e4:	695b      	ldr	r3, [r3, #20]
 80125e6:	4a0d      	ldr	r2, [pc, #52]	; (801261c <Vc_Cmv_Task+0xf8>)
 80125e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80125ec:	6153      	str	r3, [r2, #20]
						break;
 80125ee:	e00e      	b.n	801260e <Vc_Cmv_Task+0xea>
									else if(S5.peep_process_done==0)
 80125f0:	4b0d      	ldr	r3, [pc, #52]	; (8012628 <Vc_Cmv_Task+0x104>)
 80125f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d10a      	bne.n	801260e <Vc_Cmv_Task+0xea>
										ExpValve_OPEN();
 80125f8:	4b08      	ldr	r3, [pc, #32]	; (801261c <Vc_Cmv_Task+0xf8>)
 80125fa:	695b      	ldr	r3, [r3, #20]
 80125fc:	4a07      	ldr	r2, [pc, #28]	; (801261c <Vc_Cmv_Task+0xf8>)
 80125fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012602:	6153      	str	r3, [r2, #20]
						break;
 8012604:	e003      	b.n	801260e <Vc_Cmv_Task+0xea>
						break;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <Vc_Cmv_Task+0xec>
						break;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <Vc_Cmv_Task+0xec>
						break;
 801260e:	bf00      	nop


				}

		        vTaskDelay(2);
 8012610:	2002      	movs	r0, #2
 8012612:	f00d f92b 	bl	801f86c <vTaskDelay>
		        switch (_CurrentComputationState)
 8012616:	e789      	b.n	801252c <Vc_Cmv_Task+0x8>
 8012618:	20016cc8 	.word	0x20016cc8
 801261c:	40020400 	.word	0x40020400
 8012620:	20016c20 	.word	0x20016c20
 8012624:	40007400 	.word	0x40007400
 8012628:	20016df4 	.word	0x20016df4
 801262c:	20016cfc 	.word	0x20016cfc

08012630 <Vc_cmv_PID_Task>:
	}
}


void Vc_cmv_PID_Task(void *argument)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]


	while (1)
	{
		if(S1._Mode_Val == 2 )
 8012638:	4b19      	ldr	r3, [pc, #100]	; (80126a0 <Vc_cmv_PID_Task+0x70>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b02      	cmp	r3, #2
 801263e:	d128      	bne.n	8012692 <Vc_cmv_PID_Task+0x62>
		{
			if(_CurrentComputationState==Compute_I_Wave)
 8012640:	4b18      	ldr	r3, [pc, #96]	; (80126a4 <Vc_cmv_PID_Task+0x74>)
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10c      	bne.n	8012662 <Vc_cmv_PID_Task+0x32>
			{
				if(O2._FIO2_Val==100)
 8012648:	4b17      	ldr	r3, [pc, #92]	; (80126a8 <Vc_cmv_PID_Task+0x78>)
 801264a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801264e:	2b64      	cmp	r3, #100	; 0x64
 8012650:	d104      	bne.n	801265c <Vc_cmv_PID_Task+0x2c>
				{
					V4._DAC_VAL0=400;
 8012652:	4b16      	ldr	r3, [pc, #88]	; (80126ac <Vc_cmv_PID_Task+0x7c>)
 8012654:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012658:	811a      	strh	r2, [r3, #8]
 801265a:	e01a      	b.n	8012692 <Vc_cmv_PID_Task+0x62>
				}
				else
				{
				  volume_task();
 801265c:	f000 fb06 	bl	8012c6c <volume_task>
 8012660:	e017      	b.n	8012692 <Vc_cmv_PID_Task+0x62>
				}

			}
			else if(_CurrentComputationState==Compute_E_Wave)
 8012662:	4b10      	ldr	r3, [pc, #64]	; (80126a4 <Vc_cmv_PID_Task+0x74>)
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	2b01      	cmp	r3, #1
 8012668:	d113      	bne.n	8012692 <Vc_cmv_PID_Task+0x62>
			{
				if(Ach_vol==1)
 801266a:	4b11      	ldr	r3, [pc, #68]	; (80126b0 <Vc_cmv_PID_Task+0x80>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d10c      	bne.n	801268c <Vc_cmv_PID_Task+0x5c>
				{
					Acheived_Volume=vol.Volume;
 8012672:	4b10      	ldr	r3, [pc, #64]	; (80126b4 <Vc_cmv_PID_Task+0x84>)
 8012674:	edd3 7a01 	vldr	s15, [r3, #4]
 8012678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801267c:	ee17 3a90 	vmov	r3, s15
 8012680:	b29a      	uxth	r2, r3
 8012682:	4b0d      	ldr	r3, [pc, #52]	; (80126b8 <Vc_cmv_PID_Task+0x88>)
 8012684:	801a      	strh	r2, [r3, #0]
					Ach_vol=0;
 8012686:	4b0a      	ldr	r3, [pc, #40]	; (80126b0 <Vc_cmv_PID_Task+0x80>)
 8012688:	2200      	movs	r2, #0
 801268a:	601a      	str	r2, [r3, #0]
				}
				V4._DAC_VAL0=0;
 801268c:	4b07      	ldr	r3, [pc, #28]	; (80126ac <Vc_cmv_PID_Task+0x7c>)
 801268e:	2200      	movs	r2, #0
 8012690:	811a      	strh	r2, [r3, #8]
			}
		}
		vTaskDelay(V4.PID_task_delay);
 8012692:	4b06      	ldr	r3, [pc, #24]	; (80126ac <Vc_cmv_PID_Task+0x7c>)
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	4618      	mov	r0, r3
 8012698:	f00d f8e8 	bl	801f86c <vTaskDelay>
		if(S1._Mode_Val == 2 )
 801269c:	e7cc      	b.n	8012638 <Vc_cmv_PID_Task+0x8>
 801269e:	bf00      	nop
 80126a0:	20016ae0 	.word	0x20016ae0
 80126a4:	20016cc8 	.word	0x20016cc8
 80126a8:	20000048 	.word	0x20000048
 80126ac:	20016c20 	.word	0x20016c20
 80126b0:	20016ed8 	.word	0x20016ed8
 80126b4:	20016d44 	.word	0x20016d44
 80126b8:	20016ad8 	.word	0x20016ad8

080126bc <VC_CMV_Pulse_I_Parameter>:
}



void VC_CMV_Pulse_I_Parameter()
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	af00      	add	r7, sp, #0
	 now_check_breath=1;
 80126c0:	4b6d      	ldr	r3, [pc, #436]	; (8012878 <VC_CMV_Pulse_I_Parameter+0x1bc>)
 80126c2:	2201      	movs	r2, #1
 80126c4:	701a      	strb	r2, [r3, #0]
	_Control_Byte &= (uint8_t) (~(0x80));
 80126c6:	4b6d      	ldr	r3, [pc, #436]	; (801287c <VC_CMV_Pulse_I_Parameter+0x1c0>)
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	4b6a      	ldr	r3, [pc, #424]	; (801287c <VC_CMV_Pulse_I_Parameter+0x1c0>)
 80126d2:	701a      	strb	r2, [r3, #0]
	vol.Volume = 0;
 80126d4:	4b6a      	ldr	r3, [pc, #424]	; (8012880 <VC_CMV_Pulse_I_Parameter+0x1c4>)
 80126d6:	f04f 0200 	mov.w	r2, #0
 80126da:	605a      	str	r2, [r3, #4]
    V_max=0;
 80126dc:	4b69      	ldr	r3, [pc, #420]	; (8012884 <VC_CMV_Pulse_I_Parameter+0x1c8>)
 80126de:	2200      	movs	r2, #0
 80126e0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80126e2:	2201      	movs	r2, #1
 80126e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80126e8:	4867      	ldr	r0, [pc, #412]	; (8012888 <VC_CMV_Pulse_I_Parameter+0x1cc>)
 80126ea:	f004 fadb 	bl	8016ca4 <HAL_GPIO_WritePin>
	_I_TIMER_ACHEIVED = 0;
 80126ee:	4b67      	ldr	r3, [pc, #412]	; (801288c <VC_CMV_Pulse_I_Parameter+0x1d0>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	801a      	strh	r2, [r3, #0]
	Led_Alert();
 80126f4:	f7f0 f8f6 	bl	80028e4 <Led_Alert>
	               if (V4.F_max > (V1._Flow_Rate +10))
 80126f8:	4b65      	ldr	r3, [pc, #404]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	4b65      	ldr	r3, [pc, #404]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 80126fe:	8a1b      	ldrh	r3, [r3, #16]
 8012700:	330a      	adds	r3, #10
 8012702:	429a      	cmp	r2, r3
 8012704:	dd46      	ble.n	8012794 <VC_CMV_Pulse_I_Parameter+0xd8>
					{
						if (V4.F_max > (V1._Flow_Rate + 20))
 8012706:	4b62      	ldr	r3, [pc, #392]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012708:	681a      	ldr	r2, [r3, #0]
 801270a:	4b62      	ldr	r3, [pc, #392]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 801270c:	8a1b      	ldrh	r3, [r3, #16]
 801270e:	3314      	adds	r3, #20
 8012710:	429a      	cmp	r2, r3
 8012712:	dd06      	ble.n	8012722 <VC_CMV_Pulse_I_Parameter+0x66>
						{
							V4.temp_dac = V4.temp_dac_new - 20;
 8012714:	4b5e      	ldr	r3, [pc, #376]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012716:	88db      	ldrh	r3, [r3, #6]
 8012718:	3b14      	subs	r3, #20
 801271a:	b29a      	uxth	r2, r3
 801271c:	4b5c      	ldr	r3, [pc, #368]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801271e:	809a      	strh	r2, [r3, #4]
 8012720:	e02a      	b.n	8012778 <VC_CMV_Pulse_I_Parameter+0xbc>
						}
						else if ((V4.F_max <= (V1._Flow_Rate + 20))&& (V4.F_max >= (V1._Flow_Rate + 10)))
 8012722:	4b5b      	ldr	r3, [pc, #364]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	4b5b      	ldr	r3, [pc, #364]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8012728:	8a1b      	ldrh	r3, [r3, #16]
 801272a:	3314      	adds	r3, #20
 801272c:	429a      	cmp	r2, r3
 801272e:	dc0e      	bgt.n	801274e <VC_CMV_Pulse_I_Parameter+0x92>
 8012730:	4b58      	ldr	r3, [pc, #352]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8012732:	8a1b      	ldrh	r3, [r3, #16]
 8012734:	f103 0209 	add.w	r2, r3, #9
 8012738:	4b55      	ldr	r3, [pc, #340]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	429a      	cmp	r2, r3
 801273e:	da06      	bge.n	801274e <VC_CMV_Pulse_I_Parameter+0x92>
						{
							V4.temp_dac = V4.temp_dac_new - 5;
 8012740:	4b53      	ldr	r3, [pc, #332]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012742:	88db      	ldrh	r3, [r3, #6]
 8012744:	3b05      	subs	r3, #5
 8012746:	b29a      	uxth	r2, r3
 8012748:	4b51      	ldr	r3, [pc, #324]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801274a:	809a      	strh	r2, [r3, #4]
 801274c:	e014      	b.n	8012778 <VC_CMV_Pulse_I_Parameter+0xbc>
						}
						else if ((V4.F_max < (V1._Flow_Rate + 10)) && (V4.F_max >= (V1._Flow_Rate + 5)))
 801274e:	4b51      	ldr	r3, [pc, #324]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8012750:	8a1b      	ldrh	r3, [r3, #16]
 8012752:	f103 0209 	add.w	r2, r3, #9
 8012756:	4b4e      	ldr	r3, [pc, #312]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	db0c      	blt.n	8012778 <VC_CMV_Pulse_I_Parameter+0xbc>
 801275e:	4b4d      	ldr	r3, [pc, #308]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8012760:	8a1b      	ldrh	r3, [r3, #16]
 8012762:	1d1a      	adds	r2, r3, #4
 8012764:	4b4a      	ldr	r3, [pc, #296]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	429a      	cmp	r2, r3
 801276a:	da05      	bge.n	8012778 <VC_CMV_Pulse_I_Parameter+0xbc>
						{
							V4.temp_dac = V4.temp_dac_new - 1;
 801276c:	4b48      	ldr	r3, [pc, #288]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801276e:	88db      	ldrh	r3, [r3, #6]
 8012770:	3b01      	subs	r3, #1
 8012772:	b29a      	uxth	r2, r3
 8012774:	4b46      	ldr	r3, [pc, #280]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012776:	809a      	strh	r2, [r3, #4]
						}

						V4.temp_dac_new = V4.temp_dac;
 8012778:	4b45      	ldr	r3, [pc, #276]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801277a:	889a      	ldrh	r2, [r3, #4]
 801277c:	4b44      	ldr	r3, [pc, #272]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801277e:	80da      	strh	r2, [r3, #6]
						if (V4.temp_dac_new < 500)
 8012780:	4b43      	ldr	r3, [pc, #268]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012782:	88db      	ldrh	r3, [r3, #6]
 8012784:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012788:	d22c      	bcs.n	80127e4 <VC_CMV_Pulse_I_Parameter+0x128>
						{
							V4.temp_dac_new = 500;
 801278a:	4b41      	ldr	r3, [pc, #260]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 801278c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8012790:	80da      	strh	r2, [r3, #6]
 8012792:	e027      	b.n	80127e4 <VC_CMV_Pulse_I_Parameter+0x128>
						}
					}
					else if (V4.F_max < (V1._Flow_Rate- 5))
 8012794:	4b3e      	ldr	r3, [pc, #248]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	4b3e      	ldr	r3, [pc, #248]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 801279a:	8a1b      	ldrh	r3, [r3, #16]
 801279c:	3b05      	subs	r3, #5
 801279e:	429a      	cmp	r2, r3
 80127a0:	da18      	bge.n	80127d4 <VC_CMV_Pulse_I_Parameter+0x118>
					{
						if (V3.max_flow_acheived == 0)
 80127a2:	4b3d      	ldr	r3, [pc, #244]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d11c      	bne.n	80127e4 <VC_CMV_Pulse_I_Parameter+0x128>
						{
							V4.temp_dac = V4.temp_dac_new + 30;
 80127aa:	4b39      	ldr	r3, [pc, #228]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127ac:	88db      	ldrh	r3, [r3, #6]
 80127ae:	331e      	adds	r3, #30
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	4b37      	ldr	r3, [pc, #220]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127b4:	809a      	strh	r2, [r3, #4]
							V4.temp_dac_new = V4.temp_dac;
 80127b6:	4b36      	ldr	r3, [pc, #216]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127b8:	889a      	ldrh	r2, [r3, #4]
 80127ba:	4b35      	ldr	r3, [pc, #212]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127bc:	80da      	strh	r2, [r3, #6]

								if (V4.temp_dac_new >= 3500)
 80127be:	4b34      	ldr	r3, [pc, #208]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127c0:	88db      	ldrh	r3, [r3, #6]
 80127c2:	f640 52ab 	movw	r2, #3499	; 0xdab
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d90c      	bls.n	80127e4 <VC_CMV_Pulse_I_Parameter+0x128>
								{
									V4.temp_dac_new = 3500;
 80127ca:	4b31      	ldr	r3, [pc, #196]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127cc:	f640 52ac 	movw	r2, #3500	; 0xdac
 80127d0:	80da      	strh	r2, [r3, #6]
 80127d2:	e007      	b.n	80127e4 <VC_CMV_Pulse_I_Parameter+0x128>
						}

					}
					else
					{
						V4.temp_dac = V4.temp_dac_new;
 80127d4:	4b2e      	ldr	r3, [pc, #184]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127d6:	88da      	ldrh	r2, [r3, #6]
 80127d8:	4b2d      	ldr	r3, [pc, #180]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127da:	809a      	strh	r2, [r3, #4]
						V4.temp_dac_new = V4.temp_dac;
 80127dc:	4b2c      	ldr	r3, [pc, #176]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127de:	889a      	ldrh	r2, [r3, #4]
 80127e0:	4b2b      	ldr	r3, [pc, #172]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127e2:	80da      	strh	r2, [r3, #6]
					}


	               V3.max_flow_acheived = 0;
 80127e4:	4b2c      	ldr	r3, [pc, #176]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]
	               V3.constant_dac_done = 1;
 80127ea:	4b2b      	ldr	r3, [pc, #172]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 80127ec:	2201      	movs	r2, #1
 80127ee:	605a      	str	r2, [r3, #4]
	               V3.Reached_flow_val = 0;
 80127f0:	4b29      	ldr	r3, [pc, #164]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	609a      	str	r2, [r3, #8]
	               V4.F_max = 0;
 80127f6:	4b26      	ldr	r3, [pc, #152]	; (8012890 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	601a      	str	r2, [r3, #0]
	               V3.sensordata_done = 1;
 80127fc:	4b26      	ldr	r3, [pc, #152]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 80127fe:	2201      	movs	r2, #1
 8012800:	60da      	str	r2, [r3, #12]
	               V3.Volume_acheived = 1;
 8012802:	4b25      	ldr	r3, [pc, #148]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 8012804:	2201      	movs	r2, #1
 8012806:	611a      	str	r2, [r3, #16]
	               V3.volume_reached = 0;
 8012808:	4b23      	ldr	r3, [pc, #140]	; (8012898 <VC_CMV_Pulse_I_Parameter+0x1dc>)
 801280a:	2200      	movs	r2, #0
 801280c:	615a      	str	r2, [r3, #20]


	               Peep_E_Valve_Lock_delay_Vc_cmv();
 801280e:	f000 faa9 	bl	8012d64 <Peep_E_Valve_Lock_delay_Vc_cmv>

	               Ach_vol=1;
 8012812:	4b22      	ldr	r3, [pc, #136]	; (801289c <VC_CMV_Pulse_I_Parameter+0x1e0>)
 8012814:	2201      	movs	r2, #1
 8012816:	601a      	str	r2, [r3, #0]
	               if(Acheived_Volume>(V1._VT_Val+20))
 8012818:	4b21      	ldr	r3, [pc, #132]	; (80128a0 <VC_CMV_Pulse_I_Parameter+0x1e4>)
 801281a:	881b      	ldrh	r3, [r3, #0]
 801281c:	461a      	mov	r2, r3
 801281e:	4b1d      	ldr	r3, [pc, #116]	; (8012894 <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8012820:	8a9b      	ldrh	r3, [r3, #20]
 8012822:	3314      	adds	r3, #20
 8012824:	429a      	cmp	r2, r3
 8012826:	dd11      	ble.n	801284c <VC_CMV_Pulse_I_Parameter+0x190>
	               {
						check_count++;
 8012828:	4b1e      	ldr	r3, [pc, #120]	; (80128a4 <VC_CMV_Pulse_I_Parameter+0x1e8>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	3301      	adds	r3, #1
 801282e:	4a1d      	ldr	r2, [pc, #116]	; (80128a4 <VC_CMV_Pulse_I_Parameter+0x1e8>)
 8012830:	6013      	str	r3, [r2, #0]
						if (check_count >= 3)
 8012832:	4b1c      	ldr	r3, [pc, #112]	; (80128a4 <VC_CMV_Pulse_I_Parameter+0x1e8>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b02      	cmp	r3, #2
 8012838:	dd08      	ble.n	801284c <VC_CMV_Pulse_I_Parameter+0x190>
						{
							check_dev = check_dev + 5;
 801283a:	4b1b      	ldr	r3, [pc, #108]	; (80128a8 <VC_CMV_Pulse_I_Parameter+0x1ec>)
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	3305      	adds	r3, #5
 8012840:	b29a      	uxth	r2, r3
 8012842:	4b19      	ldr	r3, [pc, #100]	; (80128a8 <VC_CMV_Pulse_I_Parameter+0x1ec>)
 8012844:	801a      	strh	r2, [r3, #0]
							check_count = 0;
 8012846:	4b17      	ldr	r3, [pc, #92]	; (80128a4 <VC_CMV_Pulse_I_Parameter+0x1e8>)
 8012848:	2200      	movs	r2, #0
 801284a:	601a      	str	r2, [r3, #0]
						}
	               	}*/

        /****************************************************************************************/

	               S5.P_Max = 0;
 801284c:	4b17      	ldr	r3, [pc, #92]	; (80128ac <VC_CMV_Pulse_I_Parameter+0x1f0>)
 801284e:	2200      	movs	r2, #0
 8012850:	601a      	str	r2, [r3, #0]
	 Alert_I_Time_Parameter();
 8012852:	f7ef fe95 	bl	8002580 <Alert_I_Time_Parameter>
	 _I_TIMER = V2._I_TIMER_HOLD;
 8012856:	4b16      	ldr	r3, [pc, #88]	; (80128b0 <VC_CMV_Pulse_I_Parameter+0x1f4>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4a16      	ldr	r2, [pc, #88]	; (80128b4 <VC_CMV_Pulse_I_Parameter+0x1f8>)
 801285c:	6013      	str	r3, [r2, #0]
	_CurrentWaveFormState = Generate_E_Wave;
 801285e:	4b16      	ldr	r3, [pc, #88]	; (80128b8 <VC_CMV_Pulse_I_Parameter+0x1fc>)
 8012860:	2201      	movs	r2, #1
 8012862:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_I_Wave ;
 8012864:	4b15      	ldr	r3, [pc, #84]	; (80128bc <VC_CMV_Pulse_I_Parameter+0x200>)
 8012866:	2200      	movs	r2, #0
 8012868:	701a      	strb	r2, [r3, #0]
	vTaskDelay(V2._I_TIMER_HOLD);
 801286a:	4b11      	ldr	r3, [pc, #68]	; (80128b0 <VC_CMV_Pulse_I_Parameter+0x1f4>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	4618      	mov	r0, r3
 8012870:	f00c fffc 	bl	801f86c <vTaskDelay>

}
 8012874:	bf00      	nop
 8012876:	bd80      	pop	{r7, pc}
 8012878:	20000feb 	.word	0x20000feb
 801287c:	20016e59 	.word	0x20016e59
 8012880:	20016d44 	.word	0x20016d44
 8012884:	20016d60 	.word	0x20016d60
 8012888:	40020400 	.word	0x40020400
 801288c:	20016af4 	.word	0x20016af4
 8012890:	20016c20 	.word	0x20016c20
 8012894:	20016ab8 	.word	0x20016ab8
 8012898:	20016940 	.word	0x20016940
 801289c:	20016ed8 	.word	0x20016ed8
 80128a0:	20016ad8 	.word	0x20016ad8
 80128a4:	20016ec8 	.word	0x20016ec8
 80128a8:	20016bd4 	.word	0x20016bd4
 80128ac:	20016df4 	.word	0x20016df4
 80128b0:	20016ebc 	.word	0x20016ebc
 80128b4:	20016df0 	.word	0x20016df0
 80128b8:	20016adc 	.word	0x20016adc
 80128bc:	20016cc8 	.word	0x20016cc8

080128c0 <VC_CMV_Pulse_E_Parameter>:


void VC_CMV_Pulse_E_Parameter()
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	af00      	add	r7, sp, #0
	_Control_Byte |= (uint8_t) 0x80;
 80128c4:	4b0f      	ldr	r3, [pc, #60]	; (8012904 <VC_CMV_Pulse_E_Parameter+0x44>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80128cc:	b2da      	uxtb	r2, r3
 80128ce:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <VC_CMV_Pulse_E_Parameter+0x44>)
 80128d0:	701a      	strb	r2, [r3, #0]
	_E_TIMER_ACHEIVED = 0;
 80128d2:	4b0d      	ldr	r3, [pc, #52]	; (8012908 <VC_CMV_Pulse_E_Parameter+0x48>)
 80128d4:	2200      	movs	r2, #0
 80128d6:	801a      	strh	r2, [r3, #0]
	_E_TIMER = V2._E_TIMER_HOLD;
 80128d8:	4b0c      	ldr	r3, [pc, #48]	; (801290c <VC_CMV_Pulse_E_Parameter+0x4c>)
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	4a0c      	ldr	r2, [pc, #48]	; (8012910 <VC_CMV_Pulse_E_Parameter+0x50>)
 80128de:	6013      	str	r3, [r2, #0]
	 Alert_E_Time_Parameter();
 80128e0:	f7ef fe9a 	bl	8002618 <Alert_E_Time_Parameter>
	 adjust_servo();
 80128e4:	f7f8 f800 	bl	800a8e8 <adjust_servo>
	_CurrentWaveFormState = Generate_I_Wave;
 80128e8:	4b0a      	ldr	r3, [pc, #40]	; (8012914 <VC_CMV_Pulse_E_Parameter+0x54>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 80128ee:	4b0a      	ldr	r3, [pc, #40]	; (8012918 <VC_CMV_Pulse_E_Parameter+0x58>)
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
	vTaskDelay(V2._E_TIMER_HOLD);
 80128f4:	4b05      	ldr	r3, [pc, #20]	; (801290c <VC_CMV_Pulse_E_Parameter+0x4c>)
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f00c ffb7 	bl	801f86c <vTaskDelay>
}
 80128fe:	bf00      	nop
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	20016e59 	.word	0x20016e59
 8012908:	20016eb4 	.word	0x20016eb4
 801290c:	20016ebc 	.word	0x20016ebc
 8012910:	20016d74 	.word	0x20016d74
 8012914:	20016adc 	.word	0x20016adc
 8012918:	20016cc8 	.word	0x20016cc8

0801291c <VC_CMV_PARAMETERS>:

void VC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]

			V1._VT_Val = RX_PARAM_CMD_PACKET->_VTI;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	88db      	ldrh	r3, [r3, #6]
 8012928:	b29a      	uxth	r2, r3
 801292a:	4ba6      	ldr	r3, [pc, #664]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 801292c:	829a      	strh	r2, [r3, #20]
			V1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	795a      	ldrb	r2, [r3, #5]
 8012932:	4ba4      	ldr	r3, [pc, #656]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012934:	705a      	strb	r2, [r3, #1]
			V1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	7a5b      	ldrb	r3, [r3, #9]
 801293a:	461a      	mov	r2, r3
 801293c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012940:	fb93 f3f2 	sdiv	r3, r3, r2
 8012944:	461a      	mov	r2, r3
 8012946:	4b9f      	ldr	r3, [pc, #636]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012948:	605a      	str	r2, [r3, #4]
			V1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	7a1b      	ldrb	r3, [r3, #8]
 801294e:	091b      	lsrs	r3, r3, #4
 8012950:	b2db      	uxtb	r3, r3
 8012952:	461a      	mov	r2, r3
 8012954:	4b9b      	ldr	r3, [pc, #620]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012956:	609a      	str	r2, [r3, #8]
			V1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	7a1b      	ldrb	r3, [r3, #8]
 801295c:	f003 030f 	and.w	r3, r3, #15
 8012960:	4a98      	ldr	r2, [pc, #608]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012962:	60d3      	str	r3, [r2, #12]
			V1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	7b1b      	ldrb	r3, [r3, #12]
 8012968:	b29a      	uxth	r2, r3
 801296a:	4b96      	ldr	r3, [pc, #600]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 801296c:	821a      	strh	r2, [r3, #16]
			V1.RR=RX_PARAM_CMD_PACKET->_RR;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	7a5a      	ldrb	r2, [r3, #9]
 8012972:	4b94      	ldr	r3, [pc, #592]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012974:	749a      	strb	r2, [r3, #18]


			V2._I_TIMER_HOLD = (V1.I_Time * (V1.CycleTime / (V1.I_Time +V1.E_Time)));
 8012976:	4b93      	ldr	r3, [pc, #588]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012978:	689b      	ldr	r3, [r3, #8]
 801297a:	4a92      	ldr	r2, [pc, #584]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 801297c:	6851      	ldr	r1, [r2, #4]
 801297e:	4a91      	ldr	r2, [pc, #580]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012980:	6890      	ldr	r0, [r2, #8]
 8012982:	4a90      	ldr	r2, [pc, #576]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012984:	68d2      	ldr	r2, [r2, #12]
 8012986:	4402      	add	r2, r0
 8012988:	fbb1 f2f2 	udiv	r2, r1, r2
 801298c:	fb02 f303 	mul.w	r3, r2, r3
 8012990:	4a8d      	ldr	r2, [pc, #564]	; (8012bc8 <VC_CMV_PARAMETERS+0x2ac>)
 8012992:	6013      	str	r3, [r2, #0]
			V2._E_TIMER_HOLD = (V1.E_Time * (V1.CycleTime / (V1.I_Time + V1.E_Time)));
 8012994:	4b8b      	ldr	r3, [pc, #556]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	4a8a      	ldr	r2, [pc, #552]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 801299a:	6851      	ldr	r1, [r2, #4]
 801299c:	4a89      	ldr	r2, [pc, #548]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 801299e:	6890      	ldr	r0, [r2, #8]
 80129a0:	4a88      	ldr	r2, [pc, #544]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 80129a2:	68d2      	ldr	r2, [r2, #12]
 80129a4:	4402      	add	r2, r0
 80129a6:	fbb1 f2f2 	udiv	r2, r1, r2
 80129aa:	fb02 f303 	mul.w	r3, r2, r3
 80129ae:	4a86      	ldr	r2, [pc, #536]	; (8012bc8 <VC_CMV_PARAMETERS+0x2ac>)
 80129b0:	6053      	str	r3, [r2, #4]
			V4.PID_task_delay=10;
 80129b2:	4b86      	ldr	r3, [pc, #536]	; (8012bcc <VC_CMV_PARAMETERS+0x2b0>)
 80129b4:	220a      	movs	r2, #10
 80129b6:	60da      	str	r2, [r3, #12]

			S5.Lock_delay=10;
 80129b8:	4b85      	ldr	r3, [pc, #532]	; (8012bd0 <VC_CMV_PARAMETERS+0x2b4>)
 80129ba:	220a      	movs	r2, #10
 80129bc:	879a      	strh	r2, [r3, #60]	; 0x3c
			S5._Set_Peep=V1._PEEP_Val;
 80129be:	4b81      	ldr	r3, [pc, #516]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 80129c0:	785b      	ldrb	r3, [r3, #1]
 80129c2:	ee07 3a90 	vmov	s15, r3
 80129c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129ca:	4b81      	ldr	r3, [pc, #516]	; (8012bd0 <VC_CMV_PARAMETERS+0x2b4>)
 80129cc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			check_dev=0;
 80129d0:	4b80      	ldr	r3, [pc, #512]	; (8012bd4 <VC_CMV_PARAMETERS+0x2b8>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	801a      	strh	r2, [r3, #0]
			S5.peep_process_done=0;
 80129d6:	4b7e      	ldr	r3, [pc, #504]	; (8012bd0 <VC_CMV_PARAMETERS+0x2b4>)
 80129d8:	2200      	movs	r2, #0
 80129da:	64da      	str	r2, [r3, #76]	; 0x4c
			S5.lock=1;
 80129dc:	4b7c      	ldr	r3, [pc, #496]	; (8012bd0 <VC_CMV_PARAMETERS+0x2b4>)
 80129de:	2201      	movs	r2, #1
 80129e0:	645a      	str	r2, [r3, #68]	; 0x44


			if(V1._Flow_Rate>=60)
 80129e2:	4b78      	ldr	r3, [pc, #480]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 80129e4:	8a1b      	ldrh	r3, [r3, #16]
 80129e6:	2b3b      	cmp	r3, #59	; 0x3b
 80129e8:	d904      	bls.n	80129f4 <VC_CMV_PARAMETERS+0xd8>
				V4.temp_dac_new = 900;
 80129ea:	4b78      	ldr	r3, [pc, #480]	; (8012bcc <VC_CMV_PARAMETERS+0x2b0>)
 80129ec:	f44f 7261 	mov.w	r2, #900	; 0x384
 80129f0:	80da      	strh	r2, [r3, #6]
 80129f2:	e018      	b.n	8012a26 <VC_CMV_PARAMETERS+0x10a>
			else if(V1._Flow_Rate<60 && V1._Flow_Rate>=40 )
 80129f4:	4b73      	ldr	r3, [pc, #460]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 80129f6:	8a1b      	ldrh	r3, [r3, #16]
 80129f8:	2b3b      	cmp	r3, #59	; 0x3b
 80129fa:	d808      	bhi.n	8012a0e <VC_CMV_PARAMETERS+0xf2>
 80129fc:	4b71      	ldr	r3, [pc, #452]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 80129fe:	8a1b      	ldrh	r3, [r3, #16]
 8012a00:	2b27      	cmp	r3, #39	; 0x27
 8012a02:	d904      	bls.n	8012a0e <VC_CMV_PARAMETERS+0xf2>
				V4.temp_dac_new = 800;
 8012a04:	4b71      	ldr	r3, [pc, #452]	; (8012bcc <VC_CMV_PARAMETERS+0x2b0>)
 8012a06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012a0a:	80da      	strh	r2, [r3, #6]
 8012a0c:	e00b      	b.n	8012a26 <VC_CMV_PARAMETERS+0x10a>
			else if(V1._Flow_Rate<40 && V1._Flow_Rate>10 )
 8012a0e:	4b6d      	ldr	r3, [pc, #436]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012a10:	8a1b      	ldrh	r3, [r3, #16]
 8012a12:	2b27      	cmp	r3, #39	; 0x27
 8012a14:	d807      	bhi.n	8012a26 <VC_CMV_PARAMETERS+0x10a>
 8012a16:	4b6b      	ldr	r3, [pc, #428]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012a18:	8a1b      	ldrh	r3, [r3, #16]
 8012a1a:	2b0a      	cmp	r3, #10
 8012a1c:	d903      	bls.n	8012a26 <VC_CMV_PARAMETERS+0x10a>
				V4.temp_dac_new = 700;
 8012a1e:	4b6b      	ldr	r3, [pc, #428]	; (8012bcc <VC_CMV_PARAMETERS+0x2b0>)
 8012a20:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012a24:	80da      	strh	r2, [r3, #6]

			A.PEEP_VAL=V1._PEEP_Val;
 8012a26:	4b67      	ldr	r3, [pc, #412]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012a28:	785a      	ldrb	r2, [r3, #1]
 8012a2a:	4b6b      	ldr	r3, [pc, #428]	; (8012bd8 <VC_CMV_PARAMETERS+0x2bc>)
 8012a2c:	715a      	strb	r2, [r3, #5]
			Alert_Receiving_Parameter();
 8012a2e:	f7ef fe57 	bl	80026e0 <Alert_Receiving_Parameter>
			O2._FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	7a9a      	ldrb	r2, [r3, #10]
 8012a36:	4b69      	ldr	r3, [pc, #420]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			O2._VT_Val=V1._VT_Val;
 8012a3c:	4b61      	ldr	r3, [pc, #388]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012a3e:	8a9a      	ldrh	r2, [r3, #20]
 8012a40:	4b66      	ldr	r3, [pc, #408]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012a42:	86da      	strh	r2, [r3, #54]	; 0x36
			O2._Pressure_Base=0;
 8012a44:	4b65      	ldr	r3, [pc, #404]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012a46:	2200      	movs	r2, #0
 8012a48:	62da      	str	r2, [r3, #44]	; 0x2c
			O2._Flow_Base=1;
 8012a4a:	4b64      	ldr	r3, [pc, #400]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	631a      	str	r2, [r3, #48]	; 0x30
			O2_Parameter();
 8012a50:	f7f8 f826 	bl	800aaa0 <O2_Parameter>
			P1.Apnea_Mode=0;
 8012a54:	4b62      	ldr	r3, [pc, #392]	; (8012be0 <VC_CMV_PARAMETERS+0x2c4>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

			_60_Seconds=60000;				//breath
 8012a5c:	4b61      	ldr	r3, [pc, #388]	; (8012be4 <VC_CMV_PARAMETERS+0x2c8>)
 8012a5e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8012a62:	801a      	strh	r2, [r3, #0]
			 now_check_breath=0;			//breath
 8012a64:	4b60      	ldr	r3, [pc, #384]	; (8012be8 <VC_CMV_PARAMETERS+0x2cc>)
 8012a66:	2200      	movs	r2, #0
 8012a68:	701a      	strb	r2, [r3, #0]
			 Breath=0;
 8012a6a:	4b60      	ldr	r3, [pc, #384]	; (8012bec <VC_CMV_PARAMETERS+0x2d0>)
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	701a      	strb	r2, [r3, #0]

			 check_count=0;
 8012a70:	4b5f      	ldr	r3, [pc, #380]	; (8012bf0 <VC_CMV_PARAMETERS+0x2d4>)
 8012a72:	2200      	movs	r2, #0
 8012a74:	601a      	str	r2, [r3, #0]
			 vol_check_count=0;
 8012a76:	4b5f      	ldr	r3, [pc, #380]	; (8012bf4 <VC_CMV_PARAMETERS+0x2d8>)
 8012a78:	2200      	movs	r2, #0
 8012a7a:	601a      	str	r2, [r3, #0]

			 S5._Peep_Avg_val_int=V1._PEEP_Val;
 8012a7c:	4b51      	ldr	r3, [pc, #324]	; (8012bc4 <VC_CMV_PARAMETERS+0x2a8>)
 8012a7e:	785b      	ldrb	r3, [r3, #1]
 8012a80:	461a      	mov	r2, r3
 8012a82:	4b53      	ldr	r3, [pc, #332]	; (8012bd0 <VC_CMV_PARAMETERS+0x2b4>)
 8012a84:	629a      	str	r2, [r3, #40]	; 0x28

			vTaskSuspend(pc_mode_Handler);
 8012a86:	4b5c      	ldr	r3, [pc, #368]	; (8012bf8 <VC_CMV_PARAMETERS+0x2dc>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f00c ff22 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8012a90:	4b5a      	ldr	r3, [pc, #360]	; (8012bfc <VC_CMV_PARAMETERS+0x2e0>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4618      	mov	r0, r3
 8012a96:	f00c ff1d 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Pc_simv_Mode_Handler);
 8012a9a:	4b59      	ldr	r3, [pc, #356]	; (8012c00 <VC_CMV_PARAMETERS+0x2e4>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f00c ff18 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8012aa4:	4b57      	ldr	r3, [pc, #348]	; (8012c04 <VC_CMV_PARAMETERS+0x2e8>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f00c ff13 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Vc_simv_mode_Handler);
 8012aae:	4b56      	ldr	r3, [pc, #344]	; (8012c08 <VC_CMV_PARAMETERS+0x2ec>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f00c ff0e 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Vc_simv_Pid_Handler);
 8012ab8:	4b54      	ldr	r3, [pc, #336]	; (8012c0c <VC_CMV_PARAMETERS+0x2f0>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f00c ff09 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Psv_Handler);
 8012ac2:	4b53      	ldr	r3, [pc, #332]	; (8012c10 <VC_CMV_PARAMETERS+0x2f4>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f00c ff04 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Psv_Pid_Handler);
 8012acc:	4b51      	ldr	r3, [pc, #324]	; (8012c14 <VC_CMV_PARAMETERS+0x2f8>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f00c feff 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Cpap_Handler);
 8012ad6:	4b50      	ldr	r3, [pc, #320]	; (8012c18 <VC_CMV_PARAMETERS+0x2fc>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f00c fefa 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(BiPap_Handler);
 8012ae0:	4b4e      	ldr	r3, [pc, #312]	; (8012c1c <VC_CMV_PARAMETERS+0x300>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f00c fef5 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(BiPap_Pid_Handler);
 8012aea:	4b4d      	ldr	r3, [pc, #308]	; (8012c20 <VC_CMV_PARAMETERS+0x304>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f00c fef0 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(APRV_Handler);
 8012af4:	4b4b      	ldr	r3, [pc, #300]	; (8012c24 <VC_CMV_PARAMETERS+0x308>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f00c feeb 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(APRV_one_Handler);
 8012afe:	4b4a      	ldr	r3, [pc, #296]	; (8012c28 <VC_CMV_PARAMETERS+0x30c>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f00c fee6 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8012b08:	4b48      	ldr	r3, [pc, #288]	; (8012c2c <VC_CMV_PARAMETERS+0x310>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f00c fee1 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8012b12:	4b47      	ldr	r3, [pc, #284]	; (8012c30 <VC_CMV_PARAMETERS+0x314>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f00c fedc 	bl	801f8d4 <vTaskSuspend>

			vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 8012b1c:	4b45      	ldr	r3, [pc, #276]	; (8012c34 <VC_CMV_PARAMETERS+0x318>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4618      	mov	r0, r3
 8012b22:	f00c fed7 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 8012b26:	4b44      	ldr	r3, [pc, #272]	; (8012c38 <VC_CMV_PARAMETERS+0x31c>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f00c fed2 	bl	801f8d4 <vTaskSuspend>


			vTaskSuspend(HFNC_Handler);
 8012b30:	4b42      	ldr	r3, [pc, #264]	; (8012c3c <VC_CMV_PARAMETERS+0x320>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f00c fecd 	bl	801f8d4 <vTaskSuspend>
			vTaskSuspend(Suction_Handler);
 8012b3a:	4b41      	ldr	r3, [pc, #260]	; (8012c40 <VC_CMV_PARAMETERS+0x324>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f00c fec8 	bl	801f8d4 <vTaskSuspend>

			vTaskResume(Vc_mode_Handler);
 8012b44:	4b3f      	ldr	r3, [pc, #252]	; (8012c44 <VC_CMV_PARAMETERS+0x328>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f00c ff87 	bl	801fa5c <vTaskResume>
			vTaskResume(Vc_cmv_Pid_Handler);
 8012b4e:	4b3e      	ldr	r3, [pc, #248]	; (8012c48 <VC_CMV_PARAMETERS+0x32c>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f00c ff82 	bl	801fa5c <vTaskResume>
			vTaskResume(One_Time_Handler);
 8012b58:	4b3c      	ldr	r3, [pc, #240]	; (8012c4c <VC_CMV_PARAMETERS+0x330>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f00c ff7d 	bl	801fa5c <vTaskResume>
			vTaskResume(alert_Handler);
 8012b62:	4b3b      	ldr	r3, [pc, #236]	; (8012c50 <VC_CMV_PARAMETERS+0x334>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f00c ff78 	bl	801fa5c <vTaskResume>



			if(O2._FIO2_Val>21)
 8012b6c:	4b1b      	ldr	r3, [pc, #108]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b72:	2b15      	cmp	r3, #21
 8012b74:	d905      	bls.n	8012b82 <VC_CMV_PARAMETERS+0x266>
			{
				vTaskResume(Oxygen_Handler);
 8012b76:	4b37      	ldr	r3, [pc, #220]	; (8012c54 <VC_CMV_PARAMETERS+0x338>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f00c ff6e 	bl	801fa5c <vTaskResume>
 8012b80:	e00f      	b.n	8012ba2 <VC_CMV_PARAMETERS+0x286>
			}
			else if(O2._FIO2_Val<=21)
 8012b82:	4b16      	ldr	r3, [pc, #88]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012b84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b88:	2b15      	cmp	r3, #21
 8012b8a:	d80a      	bhi.n	8012ba2 <VC_CMV_PARAMETERS+0x286>
			{
				O2.O2_DAC=0;
 8012b8c:	4b13      	ldr	r3, [pc, #76]	; (8012bdc <VC_CMV_PARAMETERS+0x2c0>)
 8012b8e:	2200      	movs	r2, #0
 8012b90:	811a      	strh	r2, [r3, #8]
				Parkar_valve_Signal(0);
 8012b92:	4b31      	ldr	r3, [pc, #196]	; (8012c58 <VC_CMV_PARAMETERS+0x33c>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	615a      	str	r2, [r3, #20]
				vTaskSuspend(Oxygen_Handler);
 8012b98:	4b2e      	ldr	r3, [pc, #184]	; (8012c54 <VC_CMV_PARAMETERS+0x338>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f00c fe99 	bl	801f8d4 <vTaskSuspend>
			}

			_CurrentMode=VCCMV;
 8012ba2:	4b2e      	ldr	r3, [pc, #184]	; (8012c5c <VC_CMV_PARAMETERS+0x340>)
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	701a      	strb	r2, [r3, #0]
			_CurrentBackupMode = IdleState;
 8012ba8:	4b2d      	ldr	r3, [pc, #180]	; (8012c60 <VC_CMV_PARAMETERS+0x344>)
 8012baa:	2202      	movs	r2, #2
 8012bac:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8012bae:	4b2d      	ldr	r3, [pc, #180]	; (8012c64 <VC_CMV_PARAMETERS+0x348>)
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 8012bb4:	4b2c      	ldr	r3, [pc, #176]	; (8012c68 <VC_CMV_PARAMETERS+0x34c>)
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	701a      	strb	r2, [r3, #0]




}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20016ab8 	.word	0x20016ab8
 8012bc8:	20016ebc 	.word	0x20016ebc
 8012bcc:	20016c20 	.word	0x20016c20
 8012bd0:	20016df4 	.word	0x20016df4
 8012bd4:	20016bd4 	.word	0x20016bd4
 8012bd8:	20016a2c 	.word	0x20016a2c
 8012bdc:	20000048 	.word	0x20000048
 8012be0:	20016960 	.word	0x20016960
 8012be4:	20000fe8 	.word	0x20000fe8
 8012be8:	20000feb 	.word	0x20000feb
 8012bec:	20000fea 	.word	0x20000fea
 8012bf0:	20016ec8 	.word	0x20016ec8
 8012bf4:	20016a90 	.word	0x20016a90
 8012bf8:	20016a84 	.word	0x20016a84
 8012bfc:	20016a28 	.word	0x20016a28
 8012c00:	20016e60 	.word	0x20016e60
 8012c04:	20016e8c 	.word	0x20016e8c
 8012c08:	20016c44 	.word	0x20016c44
 8012c0c:	20016ad0 	.word	0x20016ad0
 8012c10:	20016bf0 	.word	0x20016bf0
 8012c14:	20016a74 	.word	0x20016a74
 8012c18:	20016bb8 	.word	0x20016bb8
 8012c1c:	20016a24 	.word	0x20016a24
 8012c20:	20016878 	.word	0x20016878
 8012c24:	20016c00 	.word	0x20016c00
 8012c28:	20016bc8 	.word	0x20016bc8
 8012c2c:	20016bcc 	.word	0x20016bcc
 8012c30:	20016d3c 	.word	0x20016d3c
 8012c34:	20016d7c 	.word	0x20016d7c
 8012c38:	20016a7c 	.word	0x20016a7c
 8012c3c:	20016a20 	.word	0x20016a20
 8012c40:	20016e5c 	.word	0x20016e5c
 8012c44:	20016d78 	.word	0x20016d78
 8012c48:	2001695c 	.word	0x2001695c
 8012c4c:	20016d40 	.word	0x20016d40
 8012c50:	20016ad4 	.word	0x20016ad4
 8012c54:	20016958 	.word	0x20016958
 8012c58:	40007400 	.word	0x40007400
 8012c5c:	20016c04 	.word	0x20016c04
 8012c60:	2000012c 	.word	0x2000012c
 8012c64:	20016adc 	.word	0x20016adc
 8012c68:	20016cc8 	.word	0x20016cc8

08012c6c <volume_task>:




void volume_task()
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	af00      	add	r7, sp, #0

	        	if(_CurrentComputationState==Compute_I_Wave)
 8012c70:	4b34      	ldr	r3, [pc, #208]	; (8012d44 <volume_task+0xd8>)
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d162      	bne.n	8012d3e <volume_task+0xd2>
				{

					if(vol.Volume<(V1._VT_Val-check_dev))
 8012c78:	4b33      	ldr	r3, [pc, #204]	; (8012d48 <volume_task+0xdc>)
 8012c7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8012c7e:	4b33      	ldr	r3, [pc, #204]	; (8012d4c <volume_task+0xe0>)
 8012c80:	8a9b      	ldrh	r3, [r3, #20]
 8012c82:	461a      	mov	r2, r3
 8012c84:	4b32      	ldr	r3, [pc, #200]	; (8012d50 <volume_task+0xe4>)
 8012c86:	881b      	ldrh	r3, [r3, #0]
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	ee07 3a90 	vmov	s15, r3
 8012c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9a:	d540      	bpl.n	8012d1e <volume_task+0xb2>
					{
					 if(V3.volume_reached==0)
 8012c9c:	4b2d      	ldr	r3, [pc, #180]	; (8012d54 <volume_task+0xe8>)
 8012c9e:	695b      	ldr	r3, [r3, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d14c      	bne.n	8012d3e <volume_task+0xd2>
					 {
						//if(V3.constant_dac_done==0)
				        //{
								V4._DAC_VAL0=V4.temp_dac+3;
 8012ca4:	4b2c      	ldr	r3, [pc, #176]	; (8012d58 <volume_task+0xec>)
 8012ca6:	889b      	ldrh	r3, [r3, #4]
 8012ca8:	3303      	adds	r3, #3
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	4b2a      	ldr	r3, [pc, #168]	; (8012d58 <volume_task+0xec>)
 8012cae:	811a      	strh	r2, [r3, #8]
								V4.temp_dac=V4._DAC_VAL0;
 8012cb0:	4b29      	ldr	r3, [pc, #164]	; (8012d58 <volume_task+0xec>)
 8012cb2:	891a      	ldrh	r2, [r3, #8]
 8012cb4:	4b28      	ldr	r3, [pc, #160]	; (8012d58 <volume_task+0xec>)
 8012cb6:	809a      	strh	r2, [r3, #4]
							    if(V4._DAC_VAL0>4094)
 8012cb8:	4b27      	ldr	r3, [pc, #156]	; (8012d58 <volume_task+0xec>)
 8012cba:	891b      	ldrh	r3, [r3, #8]
 8012cbc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d903      	bls.n	8012ccc <volume_task+0x60>
							    {
							    	V4._DAC_VAL0=4094;
 8012cc4:	4b24      	ldr	r3, [pc, #144]	; (8012d58 <volume_task+0xec>)
 8012cc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8012cca:	811a      	strh	r2, [r3, #8]
							    }

				        //}

						  if(Flow_Sensor_cal._Flow_Val>=V1._Flow_Rate)
 8012ccc:	4b23      	ldr	r3, [pc, #140]	; (8012d5c <volume_task+0xf0>)
 8012cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cd0:	4a1e      	ldr	r2, [pc, #120]	; (8012d4c <volume_task+0xe0>)
 8012cd2:	8a12      	ldrh	r2, [r2, #16]
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	db13      	blt.n	8012d00 <volume_task+0x94>
						  {

							      V3.max_flow_acheived=1;
 8012cd8:	4b1e      	ldr	r3, [pc, #120]	; (8012d54 <volume_task+0xe8>)
 8012cda:	2201      	movs	r2, #1
 8012cdc:	601a      	str	r2, [r3, #0]
								  V3.Reached_flow_val=Flow_Sensor_cal._Flow_Val;
 8012cde:	4b1f      	ldr	r3, [pc, #124]	; (8012d5c <volume_task+0xf0>)
 8012ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ce2:	4a1c      	ldr	r2, [pc, #112]	; (8012d54 <volume_task+0xe8>)
 8012ce4:	6093      	str	r3, [r2, #8]
								  V3.constant_dac_done=0;
 8012ce6:	4b1b      	ldr	r3, [pc, #108]	; (8012d54 <volume_task+0xe8>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	605a      	str	r2, [r3, #4]
								  if(Flow_Sensor_cal._Flow_Val>V4.F_max)
 8012cec:	4b1b      	ldr	r3, [pc, #108]	; (8012d5c <volume_task+0xf0>)
 8012cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012cf0:	4b19      	ldr	r3, [pc, #100]	; (8012d58 <volume_task+0xec>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	dd03      	ble.n	8012d00 <volume_task+0x94>
								  {
									  V4.F_max=Flow_Sensor_cal._Flow_Val;
 8012cf8:	4b18      	ldr	r3, [pc, #96]	; (8012d5c <volume_task+0xf0>)
 8012cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cfc:	4a16      	ldr	r2, [pc, #88]	; (8012d58 <volume_task+0xec>)
 8012cfe:	6013      	str	r3, [r2, #0]
								  }

						  }
						  if(Flow_Sensor_cal._Flow_Val<V1._Flow_Rate)
 8012d00:	4b16      	ldr	r3, [pc, #88]	; (8012d5c <volume_task+0xf0>)
 8012d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d04:	4a11      	ldr	r2, [pc, #68]	; (8012d4c <volume_task+0xe0>)
 8012d06:	8a12      	ldrh	r2, [r2, #16]
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	da18      	bge.n	8012d3e <volume_task+0xd2>
						  {

							    if(V3.constant_dac_done==1)
 8012d0c:	4b11      	ldr	r3, [pc, #68]	; (8012d54 <volume_task+0xe8>)
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d114      	bne.n	8012d3e <volume_task+0xd2>
							    {
							    	V4._DAC_VAL0=V4.temp_dac;
 8012d14:	4b10      	ldr	r3, [pc, #64]	; (8012d58 <volume_task+0xec>)
 8012d16:	889a      	ldrh	r2, [r3, #4]
 8012d18:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <volume_task+0xec>)
 8012d1a:	811a      	strh	r2, [r3, #8]

					}

				}

}
 8012d1c:	e00f      	b.n	8012d3e <volume_task+0xd2>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012d24:	480e      	ldr	r0, [pc, #56]	; (8012d60 <volume_task+0xf4>)
 8012d26:	f003 ffbd 	bl	8016ca4 <HAL_GPIO_WritePin>
						V3.volume_reached=1;
 8012d2a:	4b0a      	ldr	r3, [pc, #40]	; (8012d54 <volume_task+0xe8>)
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	615a      	str	r2, [r3, #20]
						V4._DAC_VAL0=0;
 8012d30:	4b09      	ldr	r3, [pc, #36]	; (8012d58 <volume_task+0xec>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	811a      	strh	r2, [r3, #8]
						V4.temp_dac=V4.temp_dac_new;
 8012d36:	4b08      	ldr	r3, [pc, #32]	; (8012d58 <volume_task+0xec>)
 8012d38:	88da      	ldrh	r2, [r3, #6]
 8012d3a:	4b07      	ldr	r3, [pc, #28]	; (8012d58 <volume_task+0xec>)
 8012d3c:	809a      	strh	r2, [r3, #4]
}
 8012d3e:	bf00      	nop
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	20016cc8 	.word	0x20016cc8
 8012d48:	20016d44 	.word	0x20016d44
 8012d4c:	20016ab8 	.word	0x20016ab8
 8012d50:	20016bd4 	.word	0x20016bd4
 8012d54:	20016940 	.word	0x20016940
 8012d58:	20016c20 	.word	0x20016c20
 8012d5c:	20016c48 	.word	0x20016c48
 8012d60:	40020400 	.word	0x40020400

08012d64 <Peep_E_Valve_Lock_delay_Vc_cmv>:




void Peep_E_Valve_Lock_delay_Vc_cmv()
{
 8012d64:	b480      	push	{r7}
 8012d66:	af00      	add	r7, sp, #0
	if (V1.RR < 30 )
 8012d68:	4b9c      	ldr	r3, [pc, #624]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012d6a:	7c9b      	ldrb	r3, [r3, #18]
 8012d6c:	2b1d      	cmp	r3, #29
 8012d6e:	f200 81d1 	bhi.w	8013114 <Peep_E_Valve_Lock_delay_Vc_cmv+0x3b0>
	{
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8012d72:	4b9b      	ldr	r3, [pc, #620]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d74:	edd3 6a02 	vldr	s13, [r3, #8]
 8012d78:	4b99      	ldr	r3, [pc, #612]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8012d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d82:	4b97      	ldr	r3, [pc, #604]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d84:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8012d88:	4b95      	ldr	r3, [pc, #596]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8012d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d92:	ee17 2a90 	vmov	r2, s15
 8012d96:	4b92      	ldr	r3, [pc, #584]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d98:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 8012d9a:	4b91      	ldr	r3, [pc, #580]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012d9c:	f04f 0200 	mov.w	r2, #0
 8012da0:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8012da2:	4b8f      	ldr	r3, [pc, #572]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012da4:	f04f 0200 	mov.w	r2, #0
 8012da8:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8012daa:	4b8d      	ldr	r3, [pc, #564]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dac:	edd3 6a05 	vldr	s13, [r3, #20]
 8012db0:	4b8b      	ldr	r3, [pc, #556]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012db2:	ed93 7a08 	vldr	s14, [r3, #32]
 8012db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dba:	4b89      	ldr	r3, [pc, #548]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dbc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8012dc0:	4b87      	ldr	r3, [pc, #540]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dca:	ee17 2a90 	vmov	r2, s15
 8012dce:	4b84      	ldr	r3, [pc, #528]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dd0:	629a      	str	r2, [r3, #40]	; 0x28

		if (V1.RR >= 30 || V2._E_TIMER_HOLD < 700)
 8012dd2:	4b82      	ldr	r3, [pc, #520]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012dd4:	7c9b      	ldrb	r3, [r3, #18]
 8012dd6:	2b1d      	cmp	r3, #29
 8012dd8:	d804      	bhi.n	8012de4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x80>
 8012dda:	4b82      	ldr	r3, [pc, #520]	; (8012fe4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x280>)
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012de2:	d203      	bcs.n	8012dec <Peep_E_Valve_Lock_delay_Vc_cmv+0x88>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8012de4:	4b7e      	ldr	r3, [pc, #504]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012de8:	4a7d      	ldr	r2, [pc, #500]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dea:	6293      	str	r3, [r2, #40]	; 0x28
		}
		S5.peep_max=0;
 8012dec:	4b7c      	ldr	r3, [pc, #496]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012dee:	2200      	movs	r2, #0
 8012df0:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (V1._PEEP_Val +6) )
 8012df2:	4b7b      	ldr	r3, [pc, #492]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012df6:	4b79      	ldr	r3, [pc, #484]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012df8:	785b      	ldrb	r3, [r3, #1]
 8012dfa:	3306      	adds	r3, #6
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	dd29      	ble.n	8012e54 <Peep_E_Valve_Lock_delay_Vc_cmv+0xf0>
		{

			S5.error_count++;
 8012e00:	4b77      	ldr	r3, [pc, #476]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e04:	3301      	adds	r3, #1
 8012e06:	4a76      	ldr	r2, [pc, #472]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e08:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 8012e0a:	4b75      	ldr	r3, [pc, #468]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	dd11      	ble.n	8012e36 <Peep_E_Valve_Lock_delay_Vc_cmv+0xd2>
			{
				S5.Lock_delay = S5.Lock_delay + 150;
 8012e12:	4b73      	ldr	r3, [pc, #460]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e16:	3396      	adds	r3, #150	; 0x96
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	4b71      	ldr	r3, [pc, #452]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e1c:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 8012e1e:	4b70      	ldr	r3, [pc, #448]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8012e24:	4b6e      	ldr	r3, [pc, #440]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e28:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012e2c:	d903      	bls.n	8012e36 <Peep_E_Valve_Lock_delay_Vc_cmv+0xd2>
					S5.Lock_delay = 700;
 8012e2e:	4b6c      	ldr	r3, [pc, #432]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e30:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012e34:	879a      	strh	r2, [r3, #60]	; 0x3c
			}
			if (S5._Set_Peep <= 3)
 8012e36:	4b6a      	ldr	r3, [pc, #424]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e38:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012e3c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e48:	f200 815b 	bhi.w	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = 3;
 8012e4c:	4b64      	ldr	r3, [pc, #400]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e4e:	4a66      	ldr	r2, [pc, #408]	; (8012fe8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x284>)
 8012e50:	639a      	str	r2, [r3, #56]	; 0x38
 8012e52:	e156      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			}
		}



		else if( (S5._Peep_Avg_val_int > (V1._PEEP_Val+3))  && (S5._Peep_Avg_val_int <= (V1._PEEP_Val+6)) )
 8012e54:	4b62      	ldr	r3, [pc, #392]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e58:	4b60      	ldr	r3, [pc, #384]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012e5a:	785b      	ldrb	r3, [r3, #1]
 8012e5c:	3303      	adds	r3, #3
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	dd30      	ble.n	8012ec4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x160>
 8012e62:	4b5f      	ldr	r3, [pc, #380]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e66:	4b5d      	ldr	r3, [pc, #372]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012e68:	785b      	ldrb	r3, [r3, #1]
 8012e6a:	3306      	adds	r3, #6
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	dc29      	bgt.n	8012ec4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x160>
		{

			S5.error_count++;
 8012e70:	4b5b      	ldr	r3, [pc, #364]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e74:	3301      	adds	r3, #1
 8012e76:	4a5a      	ldr	r2, [pc, #360]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e78:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 8012e7a:	4b59      	ldr	r3, [pc, #356]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	dd11      	ble.n	8012ea6 <Peep_E_Valve_Lock_delay_Vc_cmv+0x142>
			{
				S5.Lock_delay = S5.Lock_delay + 50;
 8012e82:	4b57      	ldr	r3, [pc, #348]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e84:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e86:	3332      	adds	r3, #50	; 0x32
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	4b55      	ldr	r3, [pc, #340]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 8012e8e:	4b54      	ldr	r3, [pc, #336]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e90:	2200      	movs	r2, #0
 8012e92:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8012e94:	4b52      	ldr	r3, [pc, #328]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012e96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012e98:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012e9c:	d903      	bls.n	8012ea6 <Peep_E_Valve_Lock_delay_Vc_cmv+0x142>
					S5.Lock_delay = 700;
 8012e9e:	4b50      	ldr	r3, [pc, #320]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ea0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
			}
			if (S5._Set_Peep <= 3)
 8012ea6:	4b4e      	ldr	r3, [pc, #312]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ea8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012eac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb8:	f200 8123 	bhi.w	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = 3;
 8012ebc:	4b48      	ldr	r3, [pc, #288]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ebe:	4a4a      	ldr	r2, [pc, #296]	; (8012fe8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x284>)
 8012ec0:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 8012ec2:	e11e      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			}
		}


		else if( (S5._Peep_Avg_val_int > (V1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (V1._PEEP_Val+3)) )
 8012ec4:	4b46      	ldr	r3, [pc, #280]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ec8:	4a44      	ldr	r2, [pc, #272]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012eca:	7852      	ldrb	r2, [r2, #1]
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	dd3a      	ble.n	8012f46 <Peep_E_Valve_Lock_delay_Vc_cmv+0x1e2>
 8012ed0:	4b43      	ldr	r3, [pc, #268]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ed4:	4b41      	ldr	r3, [pc, #260]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012ed6:	785b      	ldrb	r3, [r3, #1]
 8012ed8:	3303      	adds	r3, #3
 8012eda:	429a      	cmp	r2, r3
 8012edc:	dc33      	bgt.n	8012f46 <Peep_E_Valve_Lock_delay_Vc_cmv+0x1e2>
		{
			S5._Set_Peep = S5._Set_Peep - 1;
 8012ede:	4b40      	ldr	r3, [pc, #256]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ee0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012eec:	4b3c      	ldr	r3, [pc, #240]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012eee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			S5.error_count++;
 8012ef2:	4b3b      	ldr	r3, [pc, #236]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	4a39      	ldr	r2, [pc, #228]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012efa:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 8012efc:	4b38      	ldr	r3, [pc, #224]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	dd11      	ble.n	8012f28 <Peep_E_Valve_Lock_delay_Vc_cmv+0x1c4>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8012f04:	4b36      	ldr	r3, [pc, #216]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f06:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012f08:	330a      	adds	r3, #10
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	4b34      	ldr	r3, [pc, #208]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 8012f10:	4b33      	ldr	r3, [pc, #204]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f12:	2200      	movs	r2, #0
 8012f14:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8012f16:	4b32      	ldr	r3, [pc, #200]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f18:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012f1a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012f1e:	d903      	bls.n	8012f28 <Peep_E_Valve_Lock_delay_Vc_cmv+0x1c4>
					S5.Lock_delay = 700;
 8012f20:	4b2f      	ldr	r3, [pc, #188]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f22:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8012f26:	879a      	strh	r2, [r3, #60]	; 0x3c
			}
			if (S5._Set_Peep <= 3)
 8012f28:	4b2d      	ldr	r3, [pc, #180]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f2a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012f2e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3a:	f200 80e2 	bhi.w	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = 3;
 8012f3e:	4b28      	ldr	r3, [pc, #160]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f40:	4a29      	ldr	r2, [pc, #164]	; (8012fe8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x284>)
 8012f42:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 8012f44:	e0dd      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			}
		}
		else if ((S5._Peep_Avg_val_int >= (V1._PEEP_Val -4)) && (S5._Peep_Avg_val_int < (V1._PEEP_Val)))
 8012f46:	4b26      	ldr	r3, [pc, #152]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f4a:	4b24      	ldr	r3, [pc, #144]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012f4c:	785b      	ldrb	r3, [r3, #1]
 8012f4e:	3b04      	subs	r3, #4
 8012f50:	429a      	cmp	r2, r3
 8012f52:	db4b      	blt.n	8012fec <Peep_E_Valve_Lock_delay_Vc_cmv+0x288>
 8012f54:	4b22      	ldr	r3, [pc, #136]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f58:	4a20      	ldr	r2, [pc, #128]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012f5a:	7852      	ldrb	r2, [r2, #1]
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	da45      	bge.n	8012fec <Peep_E_Valve_Lock_delay_Vc_cmv+0x288>
		{


			S5.error_count2++;
 8012f60:	4b1f      	ldr	r3, [pc, #124]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f64:	3301      	adds	r3, #1
 8012f66:	4a1e      	ldr	r2, [pc, #120]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f68:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 3)
 8012f6a:	4b1d      	ldr	r3, [pc, #116]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f6e:	2b03      	cmp	r3, #3
 8012f70:	dd1e      	ble.n	8012fb0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x24c>
			{

				S5.Lock_delay = S5.Lock_delay - 10;
 8012f72:	4b1b      	ldr	r3, [pc, #108]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012f76:	3b0a      	subs	r3, #10
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	4b19      	ldr	r3, [pc, #100]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 8012f7e:	4b18      	ldr	r3, [pc, #96]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8012f84:	4b16      	ldr	r3, [pc, #88]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d904      	bls.n	8012f96 <Peep_E_Valve_Lock_delay_Vc_cmv+0x232>
 8012f8c:	4b14      	ldr	r3, [pc, #80]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f8e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012f90:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012f94:	d90c      	bls.n	8012fb0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x24c>
				{
					S5._Set_Peep = S5._Set_Peep + 1;
 8012f96:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012f98:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012fa4:	4b0e      	ldr	r3, [pc, #56]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012fa6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.Lock_delay = 1;
 8012faa:	4b0d      	ldr	r3, [pc, #52]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012fac:	2201      	movs	r2, #1
 8012fae:	879a      	strh	r2, [r3, #60]	; 0x3c
				}
			}
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8012fb0:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012fb2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8012fb6:	4b09      	ldr	r3, [pc, #36]	; (8012fdc <Peep_E_Valve_Lock_delay_Vc_cmv+0x278>)
 8012fb8:	785b      	ldrb	r3, [r3, #1]
 8012fba:	330a      	adds	r3, #10
 8012fbc:	ee07 3a90 	vmov	s15, r3
 8012fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fcc:	f340 8099 	ble.w	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = S5._Set_Peep;
 8012fd0:	4b03      	ldr	r3, [pc, #12]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd4:	4a02      	ldr	r2, [pc, #8]	; (8012fe0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x27c>)
 8012fd6:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8012fd8:	e093      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
 8012fda:	bf00      	nop
 8012fdc:	20016ab8 	.word	0x20016ab8
 8012fe0:	20016df4 	.word	0x20016df4
 8012fe4:	20016ebc 	.word	0x20016ebc
 8012fe8:	40400000 	.word	0x40400000
			}
		}


		else  if ((S5._Peep_Avg_val_int < (V1._PEEP_Val -4)) && (S5._Peep_Avg_val_int != 0))
 8012fec:	4b9e      	ldr	r3, [pc, #632]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8012fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ff0:	4b9e      	ldr	r3, [pc, #632]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 8012ff2:	785b      	ldrb	r3, [r3, #1]
 8012ff4:	3b04      	subs	r3, #4
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	da3f      	bge.n	801307a <Peep_E_Valve_Lock_delay_Vc_cmv+0x316>
 8012ffa:	4b9b      	ldr	r3, [pc, #620]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8012ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d03b      	beq.n	801307a <Peep_E_Valve_Lock_delay_Vc_cmv+0x316>
		{


			S5.error_count2++;
 8013002:	4b99      	ldr	r3, [pc, #612]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013006:	3301      	adds	r3, #1
 8013008:	4a97      	ldr	r2, [pc, #604]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801300a:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 3)
 801300c:	4b96      	ldr	r3, [pc, #600]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013010:	2b03      	cmp	r3, #3
 8013012:	dd1e      	ble.n	8013052 <Peep_E_Valve_Lock_delay_Vc_cmv+0x2ee>
			{

				S5.Lock_delay = S5.Lock_delay - 10;
 8013014:	4b94      	ldr	r3, [pc, #592]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013016:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013018:	3b0a      	subs	r3, #10
 801301a:	b29a      	uxth	r2, r3
 801301c:	4b92      	ldr	r3, [pc, #584]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801301e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 8013020:	4b91      	ldr	r3, [pc, #580]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013022:	2200      	movs	r2, #0
 8013024:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8013026:	4b90      	ldr	r3, [pc, #576]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013028:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801302a:	2b01      	cmp	r3, #1
 801302c:	d904      	bls.n	8013038 <Peep_E_Valve_Lock_delay_Vc_cmv+0x2d4>
 801302e:	4b8e      	ldr	r3, [pc, #568]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013030:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013032:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013036:	d90c      	bls.n	8013052 <Peep_E_Valve_Lock_delay_Vc_cmv+0x2ee>
				{
					S5._Set_Peep = S5._Set_Peep + 1;
 8013038:	4b8b      	ldr	r3, [pc, #556]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801303a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801303e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013046:	4b88      	ldr	r3, [pc, #544]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013048:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					S5.Lock_delay = 1;
 801304c:	4b86      	ldr	r3, [pc, #536]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801304e:	2201      	movs	r2, #1
 8013050:	879a      	strh	r2, [r3, #60]	; 0x3c
				}
			}
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8013052:	4b85      	ldr	r3, [pc, #532]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013054:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8013058:	4b84      	ldr	r3, [pc, #528]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 801305a:	785b      	ldrb	r3, [r3, #1]
 801305c:	330a      	adds	r3, #10
 801305e:	ee07 3a90 	vmov	s15, r3
 8013062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306e:	dd48      	ble.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = S5._Set_Peep;
 8013070:	4b7d      	ldr	r3, [pc, #500]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013074:	4a7c      	ldr	r2, [pc, #496]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013076:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8013078:	e043      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
		}




		else if ((S5._Peep_Avg_val_int == 0))
 801307a:	4b7b      	ldr	r3, [pc, #492]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801307e:	2b00      	cmp	r3, #0
 8013080:	d13b      	bne.n	80130fa <Peep_E_Valve_Lock_delay_Vc_cmv+0x396>
		{


			S5.error_count2++;
 8013082:	4b79      	ldr	r3, [pc, #484]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013086:	3301      	adds	r3, #1
 8013088:	4a77      	ldr	r2, [pc, #476]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801308a:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 801308c:	4b76      	ldr	r3, [pc, #472]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013090:	2b02      	cmp	r3, #2
 8013092:	dd1e      	ble.n	80130d2 <Peep_E_Valve_Lock_delay_Vc_cmv+0x36e>
			{
				S5._Set_Peep = S5._Set_Peep + 5;
 8013094:	4b74      	ldr	r3, [pc, #464]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013096:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801309a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801309e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130a2:	4b71      	ldr	r3, [pc, #452]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130a4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				S5.Lock_delay = S5.Lock_delay - 50;
 80130a8:	4b6f      	ldr	r3, [pc, #444]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80130ac:	3b32      	subs	r3, #50	; 0x32
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	4b6d      	ldr	r3, [pc, #436]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130b2:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 80130b4:	4b6c      	ldr	r3, [pc, #432]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130b6:	2200      	movs	r2, #0
 80130b8:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 80130ba:	4b6b      	ldr	r3, [pc, #428]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d004      	beq.n	80130cc <Peep_E_Valve_Lock_delay_Vc_cmv+0x368>
 80130c2:	4b69      	ldr	r3, [pc, #420]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80130c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80130ca:	d902      	bls.n	80130d2 <Peep_E_Valve_Lock_delay_Vc_cmv+0x36e>
					S5.Lock_delay = 1;
 80130cc:	4b66      	ldr	r3, [pc, #408]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130ce:	2201      	movs	r2, #1
 80130d0:	879a      	strh	r2, [r3, #60]	; 0x3c
			}
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 80130d2:	4b65      	ldr	r3, [pc, #404]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130d4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80130d8:	4b64      	ldr	r3, [pc, #400]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 80130da:	785b      	ldrb	r3, [r3, #1]
 80130dc:	330a      	adds	r3, #10
 80130de:	ee07 3a90 	vmov	s15, r3
 80130e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	dd08      	ble.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
			{
				S5._Set_Peep = S5._Set_Peep;
 80130f0:	4b5d      	ldr	r3, [pc, #372]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130f4:	4a5c      	ldr	r2, [pc, #368]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130f6:	6393      	str	r3, [r2, #56]	; 0x38
 80130f8:	e003      	b.n	8013102 <Peep_E_Valve_Lock_delay_Vc_cmv+0x39e>
		}


		else
		{
			S5._Set_Peep = S5._Set_Peep;
 80130fa:	4b5b      	ldr	r3, [pc, #364]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80130fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130fe:	4a5a      	ldr	r2, [pc, #360]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013100:	6393      	str	r3, [r2, #56]	; 0x38
		}
		S5._Peep_Avg_count = 0;
 8013102:	4b59      	ldr	r3, [pc, #356]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013104:	f04f 0200 	mov.w	r2, #0
 8013108:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 801310a:	4b57      	ldr	r3, [pc, #348]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801310c:	f04f 0200 	mov.w	r2, #0
 8013110:	615a      	str	r2, [r3, #20]
			S5._Set_Peep = S5._Set_Peep;
		}
		S5._Peep_Avg_count = 0;
		S5._Peep_Avg = 0;
	}
}
 8013112:	e1cf      	b.n	80134b4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x750>
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8013114:	4b54      	ldr	r3, [pc, #336]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013116:	edd3 6a02 	vldr	s13, [r3, #8]
 801311a:	4b53      	ldr	r3, [pc, #332]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801311c:	ed93 7a03 	vldr	s14, [r3, #12]
 8013120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013124:	4b50      	ldr	r3, [pc, #320]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013126:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 801312a:	4b4f      	ldr	r3, [pc, #316]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801312c:	edd3 7a04 	vldr	s15, [r3, #16]
 8013130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013134:	ee17 2a90 	vmov	r2, s15
 8013138:	4b4b      	ldr	r3, [pc, #300]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801313a:	62da      	str	r2, [r3, #44]	; 0x2c
		S5._Pip_Avg_count = 0;
 801313c:	4b4a      	ldr	r3, [pc, #296]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801313e:	f04f 0200 	mov.w	r2, #0
 8013142:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8013144:	4b48      	ldr	r3, [pc, #288]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013146:	f04f 0200 	mov.w	r2, #0
 801314a:	609a      	str	r2, [r3, #8]
		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 801314c:	4b46      	ldr	r3, [pc, #280]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801314e:	edd3 6a05 	vldr	s13, [r3, #20]
 8013152:	4b45      	ldr	r3, [pc, #276]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013154:	ed93 7a08 	vldr	s14, [r3, #32]
 8013158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801315c:	4b42      	ldr	r3, [pc, #264]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801315e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8013162:	4b41      	ldr	r3, [pc, #260]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013164:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801316c:	ee17 2a90 	vmov	r2, s15
 8013170:	4b3d      	ldr	r3, [pc, #244]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013172:	629a      	str	r2, [r3, #40]	; 0x28
		if (V1.RR >= 30 || V2._E_TIMER_HOLD < 700)
 8013174:	4b3d      	ldr	r3, [pc, #244]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 8013176:	7c9b      	ldrb	r3, [r3, #18]
 8013178:	2b1d      	cmp	r3, #29
 801317a:	d804      	bhi.n	8013186 <Peep_E_Valve_Lock_delay_Vc_cmv+0x422>
 801317c:	4b3c      	ldr	r3, [pc, #240]	; (8013270 <Peep_E_Valve_Lock_delay_Vc_cmv+0x50c>)
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013184:	d203      	bcs.n	801318e <Peep_E_Valve_Lock_delay_Vc_cmv+0x42a>
			S5._Peep_Avg_val_int = S5.peep_max;
 8013186:	4b38      	ldr	r3, [pc, #224]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801318a:	4a37      	ldr	r2, [pc, #220]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801318c:	6293      	str	r3, [r2, #40]	; 0x28
		S5.peep_max=0;
 801318e:	4b36      	ldr	r3, [pc, #216]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013190:	2200      	movs	r2, #0
 8013192:	641a      	str	r2, [r3, #64]	; 0x40
		if (S5._Peep_Avg_val_int > (V1._PEEP_Val +5) )
 8013194:	4b34      	ldr	r3, [pc, #208]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013198:	4b34      	ldr	r3, [pc, #208]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 801319a:	785b      	ldrb	r3, [r3, #1]
 801319c:	3305      	adds	r3, #5
 801319e:	429a      	cmp	r2, r3
 80131a0:	dd29      	ble.n	80131f6 <Peep_E_Valve_Lock_delay_Vc_cmv+0x492>
			S5.error_count++;
 80131a2:	4b31      	ldr	r3, [pc, #196]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131a6:	3301      	adds	r3, #1
 80131a8:	4a2f      	ldr	r2, [pc, #188]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131aa:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 80131ac:	4b2e      	ldr	r3, [pc, #184]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	dd11      	ble.n	80131d8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x474>
				S5.Lock_delay = S5.Lock_delay + 30;
 80131b4:	4b2c      	ldr	r3, [pc, #176]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80131b8:	331e      	adds	r3, #30
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	4b2a      	ldr	r3, [pc, #168]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131be:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 80131c0:	4b29      	ldr	r3, [pc, #164]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 80131c6:	4b28      	ldr	r3, [pc, #160]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80131ca:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80131ce:	d903      	bls.n	80131d8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x474>
					S5.Lock_delay = 700;
 80131d0:	4b25      	ldr	r3, [pc, #148]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131d2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80131d6:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep <= 3)
 80131d8:	4b23      	ldr	r3, [pc, #140]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131da:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80131de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80131e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ea:	f200 815b 	bhi.w	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = 3;
 80131ee:	4b1e      	ldr	r3, [pc, #120]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131f0:	4a20      	ldr	r2, [pc, #128]	; (8013274 <Peep_E_Valve_Lock_delay_Vc_cmv+0x510>)
 80131f2:	639a      	str	r2, [r3, #56]	; 0x38
 80131f4:	e156      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
		else if( (S5._Peep_Avg_val_int > (V1._PEEP_Val+2))  && (S5._Peep_Avg_val_int <= (V1._PEEP_Val+5)) )
 80131f6:	4b1c      	ldr	r3, [pc, #112]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 80131f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131fa:	4b1c      	ldr	r3, [pc, #112]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 80131fc:	785b      	ldrb	r3, [r3, #1]
 80131fe:	3302      	adds	r3, #2
 8013200:	429a      	cmp	r2, r3
 8013202:	dd39      	ble.n	8013278 <Peep_E_Valve_Lock_delay_Vc_cmv+0x514>
 8013204:	4b18      	ldr	r3, [pc, #96]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013208:	4b18      	ldr	r3, [pc, #96]	; (801326c <Peep_E_Valve_Lock_delay_Vc_cmv+0x508>)
 801320a:	785b      	ldrb	r3, [r3, #1]
 801320c:	3305      	adds	r3, #5
 801320e:	429a      	cmp	r2, r3
 8013210:	dc32      	bgt.n	8013278 <Peep_E_Valve_Lock_delay_Vc_cmv+0x514>
			S5.error_count++;
 8013212:	4b15      	ldr	r3, [pc, #84]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013216:	3301      	adds	r3, #1
 8013218:	4a13      	ldr	r2, [pc, #76]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801321a:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 801321c:	4b12      	ldr	r3, [pc, #72]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013220:	2b00      	cmp	r3, #0
 8013222:	dd11      	ble.n	8013248 <Peep_E_Valve_Lock_delay_Vc_cmv+0x4e4>
				S5.Lock_delay = S5.Lock_delay + 20;
 8013224:	4b10      	ldr	r3, [pc, #64]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013226:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013228:	3314      	adds	r3, #20
 801322a:	b29a      	uxth	r2, r3
 801322c:	4b0e      	ldr	r3, [pc, #56]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801322e:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 8013230:	4b0d      	ldr	r3, [pc, #52]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013232:	2200      	movs	r2, #0
 8013234:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 8013236:	4b0c      	ldr	r3, [pc, #48]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013238:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801323a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801323e:	d903      	bls.n	8013248 <Peep_E_Valve_Lock_delay_Vc_cmv+0x4e4>
					S5.Lock_delay = 700;
 8013240:	4b09      	ldr	r3, [pc, #36]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013242:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8013246:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep <= 3)
 8013248:	4b07      	ldr	r3, [pc, #28]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 801324a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801324e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325a:	f200 8123 	bhi.w	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = 3;
 801325e:	4b02      	ldr	r3, [pc, #8]	; (8013268 <Peep_E_Valve_Lock_delay_Vc_cmv+0x504>)
 8013260:	4a04      	ldr	r2, [pc, #16]	; (8013274 <Peep_E_Valve_Lock_delay_Vc_cmv+0x510>)
 8013262:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 8013264:	e11e      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
 8013266:	bf00      	nop
 8013268:	20016df4 	.word	0x20016df4
 801326c:	20016ab8 	.word	0x20016ab8
 8013270:	20016ebc 	.word	0x20016ebc
 8013274:	40400000 	.word	0x40400000
		else if( (S5._Peep_Avg_val_int > (V1._PEEP_Val))  && (S5._Peep_Avg_val_int <= (V1._PEEP_Val+2)) )
 8013278:	4b91      	ldr	r3, [pc, #580]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801327c:	4a91      	ldr	r2, [pc, #580]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 801327e:	7852      	ldrb	r2, [r2, #1]
 8013280:	4293      	cmp	r3, r2
 8013282:	dd3a      	ble.n	80132fa <Peep_E_Valve_Lock_delay_Vc_cmv+0x596>
 8013284:	4b8e      	ldr	r3, [pc, #568]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013288:	4b8e      	ldr	r3, [pc, #568]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 801328a:	785b      	ldrb	r3, [r3, #1]
 801328c:	3302      	adds	r3, #2
 801328e:	429a      	cmp	r2, r3
 8013290:	dc33      	bgt.n	80132fa <Peep_E_Valve_Lock_delay_Vc_cmv+0x596>
			S5._Set_Peep = S5._Set_Peep - 1;
 8013292:	4b8b      	ldr	r3, [pc, #556]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013294:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8013298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801329c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132a0:	4b87      	ldr	r3, [pc, #540]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132a2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			S5.error_count++;
 80132a6:	4b86      	ldr	r3, [pc, #536]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132aa:	3301      	adds	r3, #1
 80132ac:	4a84      	ldr	r2, [pc, #528]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132ae:	6313      	str	r3, [r2, #48]	; 0x30
			if (S5.error_count > 0)
 80132b0:	4b83      	ldr	r3, [pc, #524]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dd11      	ble.n	80132dc <Peep_E_Valve_Lock_delay_Vc_cmv+0x578>
				S5.Lock_delay = S5.Lock_delay + 10;
 80132b8:	4b81      	ldr	r3, [pc, #516]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80132bc:	330a      	adds	r3, #10
 80132be:	b29a      	uxth	r2, r3
 80132c0:	4b7f      	ldr	r3, [pc, #508]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132c2:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count = 0;
 80132c4:	4b7e      	ldr	r3, [pc, #504]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132c6:	2200      	movs	r2, #0
 80132c8:	631a      	str	r2, [r3, #48]	; 0x30
				if (S5.Lock_delay > 700)
 80132ca:	4b7d      	ldr	r3, [pc, #500]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80132ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80132d2:	d903      	bls.n	80132dc <Peep_E_Valve_Lock_delay_Vc_cmv+0x578>
					S5.Lock_delay = 700;
 80132d4:	4b7a      	ldr	r3, [pc, #488]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132d6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80132da:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep <= 3)
 80132dc:	4b78      	ldr	r3, [pc, #480]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80132e2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80132e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	f200 80d9 	bhi.w	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = 3;
 80132f2:	4b73      	ldr	r3, [pc, #460]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132f4:	4a74      	ldr	r2, [pc, #464]	; (80134c8 <Peep_E_Valve_Lock_delay_Vc_cmv+0x764>)
 80132f6:	639a      	str	r2, [r3, #56]	; 0x38
			if (S5._Set_Peep <= 3)
 80132f8:	e0d4      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
		else if ((S5._Peep_Avg_val_int >= (V1._PEEP_Val -4)) && (S5._Peep_Avg_val_int < (V1._PEEP_Val)))
 80132fa:	4b71      	ldr	r3, [pc, #452]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80132fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80132fe:	4b71      	ldr	r3, [pc, #452]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 8013300:	785b      	ldrb	r3, [r3, #1]
 8013302:	3b04      	subs	r3, #4
 8013304:	429a      	cmp	r2, r3
 8013306:	db42      	blt.n	801338e <Peep_E_Valve_Lock_delay_Vc_cmv+0x62a>
 8013308:	4b6d      	ldr	r3, [pc, #436]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330c:	4a6d      	ldr	r2, [pc, #436]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 801330e:	7852      	ldrb	r2, [r2, #1]
 8013310:	4293      	cmp	r3, r2
 8013312:	da3c      	bge.n	801338e <Peep_E_Valve_Lock_delay_Vc_cmv+0x62a>
			S5.error_count2++;
 8013314:	4b6a      	ldr	r3, [pc, #424]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013318:	3301      	adds	r3, #1
 801331a:	4a69      	ldr	r2, [pc, #420]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801331c:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 3)
 801331e:	4b68      	ldr	r3, [pc, #416]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013322:	2b03      	cmp	r3, #3
 8013324:	dd1e      	ble.n	8013364 <Peep_E_Valve_Lock_delay_Vc_cmv+0x600>
				S5.Lock_delay = S5.Lock_delay - 10;
 8013326:	4b66      	ldr	r3, [pc, #408]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013328:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801332a:	3b0a      	subs	r3, #10
 801332c:	b29a      	uxth	r2, r3
 801332e:	4b64      	ldr	r3, [pc, #400]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013330:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 8013332:	4b63      	ldr	r3, [pc, #396]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013334:	2200      	movs	r2, #0
 8013336:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 8013338:	4b61      	ldr	r3, [pc, #388]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801333a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801333c:	2b01      	cmp	r3, #1
 801333e:	d904      	bls.n	801334a <Peep_E_Valve_Lock_delay_Vc_cmv+0x5e6>
 8013340:	4b5f      	ldr	r3, [pc, #380]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013342:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013344:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013348:	d90c      	bls.n	8013364 <Peep_E_Valve_Lock_delay_Vc_cmv+0x600>
					S5.Lock_delay = 1;
 801334a:	4b5d      	ldr	r3, [pc, #372]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801334c:	2201      	movs	r2, #1
 801334e:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 1;
 8013350:	4b5b      	ldr	r3, [pc, #364]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013352:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8013356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801335a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801335e:	4b58      	ldr	r3, [pc, #352]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013360:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8013364:	4b56      	ldr	r3, [pc, #344]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013366:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801336a:	4b56      	ldr	r3, [pc, #344]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 801336c:	785b      	ldrb	r3, [r3, #1]
 801336e:	330a      	adds	r3, #10
 8013370:	ee07 3a90 	vmov	s15, r3
 8013374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013380:	f340 8090 	ble.w	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = S5._Set_Peep;
 8013384:	4b4e      	ldr	r3, [pc, #312]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013388:	4a4d      	ldr	r2, [pc, #308]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801338a:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 801338c:	e08a      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
		else if ((S5._Peep_Avg_val_int < (V1._PEEP_Val -4)) && (S5._Peep_Avg_val_int != 0))
 801338e:	4b4c      	ldr	r3, [pc, #304]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013392:	4b4c      	ldr	r3, [pc, #304]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 8013394:	785b      	ldrb	r3, [r3, #1]
 8013396:	3b04      	subs	r3, #4
 8013398:	429a      	cmp	r2, r3
 801339a:	da3f      	bge.n	801341c <Peep_E_Valve_Lock_delay_Vc_cmv+0x6b8>
 801339c:	4b48      	ldr	r3, [pc, #288]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d03b      	beq.n	801341c <Peep_E_Valve_Lock_delay_Vc_cmv+0x6b8>
			S5.error_count2++;
 80133a4:	4b46      	ldr	r3, [pc, #280]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133a8:	3301      	adds	r3, #1
 80133aa:	4a45      	ldr	r2, [pc, #276]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133ac:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 3)
 80133ae:	4b44      	ldr	r3, [pc, #272]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133b2:	2b03      	cmp	r3, #3
 80133b4:	dd1e      	ble.n	80133f4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x690>
				S5.Lock_delay = S5.Lock_delay - 10;
 80133b6:	4b42      	ldr	r3, [pc, #264]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80133ba:	3b0a      	subs	r3, #10
 80133bc:	b29a      	uxth	r2, r3
 80133be:	4b40      	ldr	r3, [pc, #256]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133c0:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 80133c2:	4b3f      	ldr	r3, [pc, #252]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133c4:	2200      	movs	r2, #0
 80133c6:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay <= 1 || S5.Lock_delay > 700)
 80133c8:	4b3d      	ldr	r3, [pc, #244]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d904      	bls.n	80133da <Peep_E_Valve_Lock_delay_Vc_cmv+0x676>
 80133d0:	4b3b      	ldr	r3, [pc, #236]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80133d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80133d8:	d90c      	bls.n	80133f4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x690>
					S5.Lock_delay = 1;
 80133da:	4b39      	ldr	r3, [pc, #228]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133dc:	2201      	movs	r2, #1
 80133de:	879a      	strh	r2, [r3, #60]	; 0x3c
					S5._Set_Peep = S5._Set_Peep + 1;
 80133e0:	4b37      	ldr	r3, [pc, #220]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133e2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80133e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80133ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133ee:	4b34      	ldr	r3, [pc, #208]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133f0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 80133f4:	4b32      	ldr	r3, [pc, #200]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80133f6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80133fa:	4b32      	ldr	r3, [pc, #200]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 80133fc:	785b      	ldrb	r3, [r3, #1]
 80133fe:	330a      	adds	r3, #10
 8013400:	ee07 3a90 	vmov	s15, r3
 8013404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	dd48      	ble.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = S5._Set_Peep;
 8013412:	4b2b      	ldr	r3, [pc, #172]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013416:	4a2a      	ldr	r2, [pc, #168]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013418:	6393      	str	r3, [r2, #56]	; 0x38
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 801341a:	e043      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
		else if ((S5._Peep_Avg_val_int == 0))
 801341c:	4b28      	ldr	r3, [pc, #160]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013420:	2b00      	cmp	r3, #0
 8013422:	d13b      	bne.n	801349c <Peep_E_Valve_Lock_delay_Vc_cmv+0x738>
			S5.error_count2++;
 8013424:	4b26      	ldr	r3, [pc, #152]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013428:	3301      	adds	r3, #1
 801342a:	4a25      	ldr	r2, [pc, #148]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801342c:	6353      	str	r3, [r2, #52]	; 0x34
			if (S5.error_count2 > 2)
 801342e:	4b24      	ldr	r3, [pc, #144]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013432:	2b02      	cmp	r3, #2
 8013434:	dd1e      	ble.n	8013474 <Peep_E_Valve_Lock_delay_Vc_cmv+0x710>
				S5._Set_Peep = S5._Set_Peep + 5;
 8013436:	4b22      	ldr	r3, [pc, #136]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013438:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801343c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013444:	4b1e      	ldr	r3, [pc, #120]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013446:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				S5.Lock_delay = S5.Lock_delay - 50;
 801344a:	4b1d      	ldr	r3, [pc, #116]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801344c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801344e:	3b32      	subs	r3, #50	; 0x32
 8013450:	b29a      	uxth	r2, r3
 8013452:	4b1b      	ldr	r3, [pc, #108]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013454:	879a      	strh	r2, [r3, #60]	; 0x3c
				S5.error_count2 = 0;
 8013456:	4b1a      	ldr	r3, [pc, #104]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013458:	2200      	movs	r2, #0
 801345a:	635a      	str	r2, [r3, #52]	; 0x34
				if (S5.Lock_delay < 1 || S5.Lock_delay > 700)
 801345c:	4b18      	ldr	r3, [pc, #96]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801345e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013460:	2b00      	cmp	r3, #0
 8013462:	d004      	beq.n	801346e <Peep_E_Valve_Lock_delay_Vc_cmv+0x70a>
 8013464:	4b16      	ldr	r3, [pc, #88]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013466:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013468:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801346c:	d902      	bls.n	8013474 <Peep_E_Valve_Lock_delay_Vc_cmv+0x710>
					S5.Lock_delay = 1;
 801346e:	4b14      	ldr	r3, [pc, #80]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013470:	2201      	movs	r2, #1
 8013472:	879a      	strh	r2, [r3, #60]	; 0x3c
			if (S5._Set_Peep > V1._PEEP_Val + 10)
 8013474:	4b12      	ldr	r3, [pc, #72]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013476:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801347a:	4b12      	ldr	r3, [pc, #72]	; (80134c4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x760>)
 801347c:	785b      	ldrb	r3, [r3, #1]
 801347e:	330a      	adds	r3, #10
 8013480:	ee07 3a90 	vmov	s15, r3
 8013484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013490:	dd08      	ble.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
				S5._Set_Peep = S5._Set_Peep;
 8013492:	4b0b      	ldr	r3, [pc, #44]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013496:	4a0a      	ldr	r2, [pc, #40]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 8013498:	6393      	str	r3, [r2, #56]	; 0x38
 801349a:	e003      	b.n	80134a4 <Peep_E_Valve_Lock_delay_Vc_cmv+0x740>
			S5._Set_Peep = S5._Set_Peep;
 801349c:	4b08      	ldr	r3, [pc, #32]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 801349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a0:	4a07      	ldr	r2, [pc, #28]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80134a2:	6393      	str	r3, [r2, #56]	; 0x38
		S5._Peep_Avg_count = 0;
 80134a4:	4b06      	ldr	r3, [pc, #24]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80134a6:	f04f 0200 	mov.w	r2, #0
 80134aa:	621a      	str	r2, [r3, #32]
		S5._Peep_Avg = 0;
 80134ac:	4b04      	ldr	r3, [pc, #16]	; (80134c0 <Peep_E_Valve_Lock_delay_Vc_cmv+0x75c>)
 80134ae:	f04f 0200 	mov.w	r2, #0
 80134b2:	615a      	str	r2, [r3, #20]
}
 80134b4:	bf00      	nop
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	20016df4 	.word	0x20016df4
 80134c4:	20016ab8 	.word	0x20016ab8
 80134c8:	40400000 	.word	0x40400000

080134cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80134cc:	b480      	push	{r7}
 80134ce:	b085      	sub	sp, #20
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	4a07      	ldr	r2, [pc, #28]	; (80134f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80134dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	4a06      	ldr	r2, [pc, #24]	; (80134fc <vApplicationGetIdleTaskMemory+0x30>)
 80134e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134ea:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80134ec:	bf00      	nop
 80134ee:	3714      	adds	r7, #20
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr
 80134f8:	20000340 	.word	0x20000340
 80134fc:	20000394 	.word	0x20000394

08013500 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8013500:	b480      	push	{r7}
 8013502:	b085      	sub	sp, #20
 8013504:	af00      	add	r7, sp, #0
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4a07      	ldr	r2, [pc, #28]	; (801352c <vApplicationGetTimerTaskMemory+0x2c>)
 8013510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	4a06      	ldr	r2, [pc, #24]	; (8013530 <vApplicationGetTimerTaskMemory+0x30>)
 8013516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801351e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8013520:	bf00      	nop
 8013522:	3714      	adds	r7, #20
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr
 801352c:	20000b94 	.word	0x20000b94
 8013530:	20000be8 	.word	0x20000be8

08013534 <Pressure_Min_Max>:




void Pressure_Min_Max()
{
 8013534:	b480      	push	{r7}
 8013536:	af00      	add	r7, sp, #0
		if (Pressure_sensor._Pressure_Val < (S5.P_Min))
 8013538:	4b13      	ldr	r3, [pc, #76]	; (8013588 <Pressure_Min_Max+0x54>)
 801353a:	791b      	ldrb	r3, [r3, #4]
 801353c:	461a      	mov	r2, r3
 801353e:	4b13      	ldr	r3, [pc, #76]	; (801358c <Pressure_Min_Max+0x58>)
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	429a      	cmp	r2, r3
 8013544:	da0c      	bge.n	8013560 <Pressure_Min_Max+0x2c>
		{
			if (S5.now_check == 1)
 8013546:	4b11      	ldr	r3, [pc, #68]	; (801358c <Pressure_Min_Max+0x58>)
 8013548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801354a:	2b01      	cmp	r3, #1
 801354c:	d108      	bne.n	8013560 <Pressure_Min_Max+0x2c>
			{
				if(_CurrentComputationState==Compute_I_Wave)
 801354e:	4b10      	ldr	r3, [pc, #64]	; (8013590 <Pressure_Min_Max+0x5c>)
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d104      	bne.n	8013560 <Pressure_Min_Max+0x2c>
				{

					S5.P_Min = Pressure_sensor._Pressure_Val;
 8013556:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <Pressure_Min_Max+0x54>)
 8013558:	791b      	ldrb	r3, [r3, #4]
 801355a:	461a      	mov	r2, r3
 801355c:	4b0b      	ldr	r3, [pc, #44]	; (801358c <Pressure_Min_Max+0x58>)
 801355e:	605a      	str	r2, [r3, #4]

				}
			}
		}
		if(Pressure_sensor._Pressure_Val >= S5.P_Max)
 8013560:	4b09      	ldr	r3, [pc, #36]	; (8013588 <Pressure_Min_Max+0x54>)
 8013562:	791b      	ldrb	r3, [r3, #4]
 8013564:	461a      	mov	r2, r3
 8013566:	4b09      	ldr	r3, [pc, #36]	; (801358c <Pressure_Min_Max+0x58>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	429a      	cmp	r2, r3
 801356c:	db07      	blt.n	801357e <Pressure_Min_Max+0x4a>
		{
			S5.P_Max = Pressure_sensor._Pressure_Val;
 801356e:	4b06      	ldr	r3, [pc, #24]	; (8013588 <Pressure_Min_Max+0x54>)
 8013570:	791b      	ldrb	r3, [r3, #4]
 8013572:	461a      	mov	r2, r3
 8013574:	4b05      	ldr	r3, [pc, #20]	; (801358c <Pressure_Min_Max+0x58>)
 8013576:	601a      	str	r2, [r3, #0]
			S5.now_check = 1;
 8013578:	4b04      	ldr	r3, [pc, #16]	; (801358c <Pressure_Min_Max+0x58>)
 801357a:	2201      	movs	r2, #1
 801357c:	649a      	str	r2, [r3, #72]	; 0x48
		}
}
 801357e:	bf00      	nop
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr
 8013588:	20016cfc 	.word	0x20016cfc
 801358c:	20016df4 	.word	0x20016df4
 8013590:	20016cc8 	.word	0x20016cc8

08013594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013594:	b5b0      	push	{r4, r5, r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801359a:	f001 ff41 	bl	8015420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801359e:	f000 faf7 	bl	8013b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80135a2:	f000 fccf 	bl	8013f44 <MX_GPIO_Init>
  MX_DMA_Init();
 80135a6:	f000 fcad 	bl	8013f04 <MX_DMA_Init>
  MX_ADC1_Init();
 80135aa:	f000 fb5b 	bl	8013c64 <MX_ADC1_Init>
  MX_DAC_Init();
 80135ae:	f000 fbe3 	bl	8013d78 <MX_DAC_Init>
  MX_I2C2_Init();
 80135b2:	f000 fc15 	bl	8013de0 <MX_I2C2_Init>
  MX_TIM12_Init();
 80135b6:	f000 fc41 	bl	8013e3c <MX_TIM12_Init>

  /* USER CODE BEGIN 2 */
         MX_USB_DEVICE_Init();
 80135ba:	f00d ff5f 	bl	802147c <MX_USB_DEVICE_Init>
         Uart_Receive = xQueueCreate(1, sizeof(UART_RX_BUF));
 80135be:	2200      	movs	r2, #0
 80135c0:	2111      	movs	r1, #17
 80135c2:	2001      	movs	r0, #1
 80135c4:	f00b faec 	bl	801eba0 <xQueueGenericCreate>
 80135c8:	4603      	mov	r3, r0
 80135ca:	4aae      	ldr	r2, [pc, #696]	; (8013884 <main+0x2f0>)
 80135cc:	6013      	str	r3, [r2, #0]
         xTaskCreate(One_Time_Task,"One Time Execute Task", 512, NULL, 2, &One_Time_Handler);
 80135ce:	4bae      	ldr	r3, [pc, #696]	; (8013888 <main+0x2f4>)
 80135d0:	9301      	str	r3, [sp, #4]
 80135d2:	2302      	movs	r3, #2
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	2300      	movs	r3, #0
 80135d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135dc:	49ab      	ldr	r1, [pc, #684]	; (801388c <main+0x2f8>)
 80135de:	48ac      	ldr	r0, [pc, #688]	; (8013890 <main+0x2fc>)
 80135e0:	f00b ff7d 	bl	801f4de <xTaskCreate>
         xTaskCreate(Offset_Task,"Sensor Offset Calculation Task", 512, NULL , 3, &Sensor_Offset_Handler);
 80135e4:	4bab      	ldr	r3, [pc, #684]	; (8013894 <main+0x300>)
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	2303      	movs	r3, #3
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	2300      	movs	r3, #0
 80135ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135f2:	49a9      	ldr	r1, [pc, #676]	; (8013898 <main+0x304>)
 80135f4:	48a9      	ldr	r0, [pc, #676]	; (801389c <main+0x308>)
 80135f6:	f00b ff72 	bl	801f4de <xTaskCreate>
         xTaskCreate(Receiver_Task,"BlueTooth Data Receive Task", 512, NULL, 4, &Receiver_Handler);
 80135fa:	4ba9      	ldr	r3, [pc, #676]	; (80138a0 <main+0x30c>)
 80135fc:	9301      	str	r3, [sp, #4]
 80135fe:	2304      	movs	r3, #4
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	2300      	movs	r3, #0
 8013604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013608:	49a6      	ldr	r1, [pc, #664]	; (80138a4 <main+0x310>)
 801360a:	48a7      	ldr	r0, [pc, #668]	; (80138a8 <main+0x314>)
 801360c:	f00b ff67 	bl	801f4de <xTaskCreate>
         xTaskCreate(Two_Milli_Second_Task,"Two millisecond Task", 512, NULL , 3, &Two_Milli_Second_Handler);
 8013610:	4ba6      	ldr	r3, [pc, #664]	; (80138ac <main+0x318>)
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	2303      	movs	r3, #3
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	2300      	movs	r3, #0
 801361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801361e:	49a4      	ldr	r1, [pc, #656]	; (80138b0 <main+0x31c>)
 8013620:	48a4      	ldr	r0, [pc, #656]	; (80138b4 <main+0x320>)
 8013622:	f00b ff5c 	bl	801f4de <xTaskCreate>
         xTaskCreate(Sensor_Data_Read_Task,"Read sensor values Task", 512, NULL, 3, &Sensor_Read_Handler);
 8013626:	4ba4      	ldr	r3, [pc, #656]	; (80138b8 <main+0x324>)
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	2303      	movs	r3, #3
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	2300      	movs	r3, #0
 8013630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013634:	49a1      	ldr	r1, [pc, #644]	; (80138bc <main+0x328>)
 8013636:	48a2      	ldr	r0, [pc, #648]	; (80138c0 <main+0x32c>)
 8013638:	f00b ff51 	bl	801f4de <xTaskCreate>
         xTaskCreate(Uart_Transmit_Task,"BluetoothData Transmit Task", 512, NULL, 3, &Uart_Transmit_Handler);
 801363c:	4ba1      	ldr	r3, [pc, #644]	; (80138c4 <main+0x330>)
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	2303      	movs	r3, #3
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	2300      	movs	r3, #0
 8013646:	f44f 7200 	mov.w	r2, #512	; 0x200
 801364a:	499f      	ldr	r1, [pc, #636]	; (80138c8 <main+0x334>)
 801364c:	489f      	ldr	r0, [pc, #636]	; (80138cc <main+0x338>)
 801364e:	f00b ff46 	bl	801f4de <xTaskCreate>
         xTaskCreate(PC_CMV_Task,"PC CMV Mode Task", 512, NULL, 2, &pc_mode_Handler);
 8013652:	4b9f      	ldr	r3, [pc, #636]	; (80138d0 <main+0x33c>)
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	2302      	movs	r3, #2
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	2300      	movs	r3, #0
 801365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013660:	499c      	ldr	r1, [pc, #624]	; (80138d4 <main+0x340>)
 8013662:	489d      	ldr	r0, [pc, #628]	; (80138d8 <main+0x344>)
 8013664:	f00b ff3b 	bl	801f4de <xTaskCreate>
         xTaskCreate(PC_CMV_PID_Task,"PC CMV Mode PID Task", 512, NULL, 2, &Pc_cmv_Pid_Handler);
 8013668:	4b9c      	ldr	r3, [pc, #624]	; (80138dc <main+0x348>)
 801366a:	9301      	str	r3, [sp, #4]
 801366c:	2302      	movs	r3, #2
 801366e:	9300      	str	r3, [sp, #0]
 8013670:	2300      	movs	r3, #0
 8013672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013676:	499a      	ldr	r1, [pc, #616]	; (80138e0 <main+0x34c>)
 8013678:	489a      	ldr	r0, [pc, #616]	; (80138e4 <main+0x350>)
 801367a:	f00b ff30 	bl	801f4de <xTaskCreate>
         xTaskCreate(Vc_Cmv_Task,"VC CMV Mode Task", 512, NULL, 2, &Vc_mode_Handler);
 801367e:	4b9a      	ldr	r3, [pc, #616]	; (80138e8 <main+0x354>)
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	2302      	movs	r3, #2
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	2300      	movs	r3, #0
 8013688:	f44f 7200 	mov.w	r2, #512	; 0x200
 801368c:	4997      	ldr	r1, [pc, #604]	; (80138ec <main+0x358>)
 801368e:	4898      	ldr	r0, [pc, #608]	; (80138f0 <main+0x35c>)
 8013690:	f00b ff25 	bl	801f4de <xTaskCreate>
         xTaskCreate(Vc_cmv_PID_Task,"VC CMV Mode PID Task", 512, NULL, 2, &Vc_cmv_Pid_Handler);
 8013694:	4b97      	ldr	r3, [pc, #604]	; (80138f4 <main+0x360>)
 8013696:	9301      	str	r3, [sp, #4]
 8013698:	2302      	movs	r3, #2
 801369a:	9300      	str	r3, [sp, #0]
 801369c:	2300      	movs	r3, #0
 801369e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136a2:	4995      	ldr	r1, [pc, #596]	; (80138f8 <main+0x364>)
 80136a4:	4895      	ldr	r0, [pc, #596]	; (80138fc <main+0x368>)
 80136a6:	f00b ff1a 	bl	801f4de <xTaskCreate>
         xTaskCreate(PC_SIMV_Task,"PC SIMV Mode Task", 512, NULL, 2, &Pc_simv_Mode_Handler);
 80136aa:	4b95      	ldr	r3, [pc, #596]	; (8013900 <main+0x36c>)
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	2302      	movs	r3, #2
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	2300      	movs	r3, #0
 80136b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136b8:	4992      	ldr	r1, [pc, #584]	; (8013904 <main+0x370>)
 80136ba:	4893      	ldr	r0, [pc, #588]	; (8013908 <main+0x374>)
 80136bc:	f00b ff0f 	bl	801f4de <xTaskCreate>
         xTaskCreate(PC_SIMV_PID_Task, "PC SIMV Mode Task", 512, NULL, 2, &Pc_simv_Mode_Pid_Handler);
 80136c0:	4b92      	ldr	r3, [pc, #584]	; (801390c <main+0x378>)
 80136c2:	9301      	str	r3, [sp, #4]
 80136c4:	2302      	movs	r3, #2
 80136c6:	9300      	str	r3, [sp, #0]
 80136c8:	2300      	movs	r3, #0
 80136ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136ce:	498d      	ldr	r1, [pc, #564]	; (8013904 <main+0x370>)
 80136d0:	488f      	ldr	r0, [pc, #572]	; (8013910 <main+0x37c>)
 80136d2:	f00b ff04 	bl	801f4de <xTaskCreate>
         xTaskCreate(VC_SIMV_Task, "VC SIMV Mode Task", 512, NULL, 2, &Vc_simv_mode_Handler);
 80136d6:	4b8f      	ldr	r3, [pc, #572]	; (8013914 <main+0x380>)
 80136d8:	9301      	str	r3, [sp, #4]
 80136da:	2302      	movs	r3, #2
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	2300      	movs	r3, #0
 80136e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136e4:	498c      	ldr	r1, [pc, #560]	; (8013918 <main+0x384>)
 80136e6:	488d      	ldr	r0, [pc, #564]	; (801391c <main+0x388>)
 80136e8:	f00b fef9 	bl	801f4de <xTaskCreate>
         xTaskCreate(VC_SIMV_PID_Task, "VC SIMV Mode PID Task", 256, NULL, 2, &Vc_simv_Pid_Handler);
 80136ec:	4b8c      	ldr	r3, [pc, #560]	; (8013920 <main+0x38c>)
 80136ee:	9301      	str	r3, [sp, #4]
 80136f0:	2302      	movs	r3, #2
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	2300      	movs	r3, #0
 80136f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80136fa:	498a      	ldr	r1, [pc, #552]	; (8013924 <main+0x390>)
 80136fc:	488a      	ldr	r0, [pc, #552]	; (8013928 <main+0x394>)
 80136fe:	f00b feee 	bl	801f4de <xTaskCreate>
         xTaskCreate(PSV_Mode_Task, "PSV Mode Task", 512, NULL, 2, &Psv_Handler);
 8013702:	4b8a      	ldr	r3, [pc, #552]	; (801392c <main+0x398>)
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	2302      	movs	r3, #2
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	2300      	movs	r3, #0
 801370c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013710:	4987      	ldr	r1, [pc, #540]	; (8013930 <main+0x39c>)
 8013712:	4888      	ldr	r0, [pc, #544]	; (8013934 <main+0x3a0>)
 8013714:	f00b fee3 	bl	801f4de <xTaskCreate>
         xTaskCreate(PSV_PID_Task, "PSV PID Task", 512, NULL, 3, &Psv_Pid_Handler);
 8013718:	4b87      	ldr	r3, [pc, #540]	; (8013938 <main+0x3a4>)
 801371a:	9301      	str	r3, [sp, #4]
 801371c:	2303      	movs	r3, #3
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	2300      	movs	r3, #0
 8013722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013726:	4985      	ldr	r1, [pc, #532]	; (801393c <main+0x3a8>)
 8013728:	4885      	ldr	r0, [pc, #532]	; (8013940 <main+0x3ac>)
 801372a:	f00b fed8 	bl	801f4de <xTaskCreate>
         xTaskCreate(Back_Up_PC_CMV_Mode_Task, "Back Up PC CMV Mode Task", 512, NULL, 2, &Back_Up_PC_CMV_Mode_Handler);
 801372e:	4b85      	ldr	r3, [pc, #532]	; (8013944 <main+0x3b0>)
 8013730:	9301      	str	r3, [sp, #4]
 8013732:	2302      	movs	r3, #2
 8013734:	9300      	str	r3, [sp, #0]
 8013736:	2300      	movs	r3, #0
 8013738:	f44f 7200 	mov.w	r2, #512	; 0x200
 801373c:	4982      	ldr	r1, [pc, #520]	; (8013948 <main+0x3b4>)
 801373e:	4883      	ldr	r0, [pc, #524]	; (801394c <main+0x3b8>)
 8013740:	f00b fecd 	bl	801f4de <xTaskCreate>
         xTaskCreate(PID_Back_Up_PC_CMV_Mode_Task,"PID Back Up PC CMV Mode Task", 512, NULL, 2, &PID_Back_Up_PC_CMV_Mode_Handler);
 8013744:	4b82      	ldr	r3, [pc, #520]	; (8013950 <main+0x3bc>)
 8013746:	9301      	str	r3, [sp, #4]
 8013748:	2302      	movs	r3, #2
 801374a:	9300      	str	r3, [sp, #0]
 801374c:	2300      	movs	r3, #0
 801374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013752:	4980      	ldr	r1, [pc, #512]	; (8013954 <main+0x3c0>)
 8013754:	4880      	ldr	r0, [pc, #512]	; (8013958 <main+0x3c4>)
 8013756:	f00b fec2 	bl	801f4de <xTaskCreate>
         xTaskCreate(Back_Up_VC_CMV_Mode_Task, "Back Up VC CMV Mode Task", 512, NULL, 2, &Back_Up_VC_CMV_Mode_Handler);
 801375a:	4b80      	ldr	r3, [pc, #512]	; (801395c <main+0x3c8>)
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	2302      	movs	r3, #2
 8013760:	9300      	str	r3, [sp, #0]
 8013762:	2300      	movs	r3, #0
 8013764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013768:	497d      	ldr	r1, [pc, #500]	; (8013960 <main+0x3cc>)
 801376a:	487e      	ldr	r0, [pc, #504]	; (8013964 <main+0x3d0>)
 801376c:	f00b feb7 	bl	801f4de <xTaskCreate>
         xTaskCreate(PID_Back_Up_VC_CMV_Mode_Task, "PID Back Up VC CMV Mode Task", 512, NULL, 2, &PID_Back_Up_VC_CMV_Mode_Handler);
 8013770:	4b7d      	ldr	r3, [pc, #500]	; (8013968 <main+0x3d4>)
 8013772:	9301      	str	r3, [sp, #4]
 8013774:	2302      	movs	r3, #2
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	2300      	movs	r3, #0
 801377a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801377e:	497b      	ldr	r1, [pc, #492]	; (801396c <main+0x3d8>)
 8013780:	487b      	ldr	r0, [pc, #492]	; (8013970 <main+0x3dc>)
 8013782:	f00b feac 	bl	801f4de <xTaskCreate>
         xTaskCreate(CPAP_Mode_Task, "CPAP Mode Task", 512, NULL, 2, &Cpap_Handler);
 8013786:	4b7b      	ldr	r3, [pc, #492]	; (8013974 <main+0x3e0>)
 8013788:	9301      	str	r3, [sp, #4]
 801378a:	2302      	movs	r3, #2
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	2300      	movs	r3, #0
 8013790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013794:	4978      	ldr	r1, [pc, #480]	; (8013978 <main+0x3e4>)
 8013796:	4879      	ldr	r0, [pc, #484]	; (801397c <main+0x3e8>)
 8013798:	f00b fea1 	bl	801f4de <xTaskCreate>
         xTaskCreate(BIPAP_Mode_Task, "BIPAP Mode Task", 512, NULL, 2, &BiPap_Handler);
 801379c:	4b78      	ldr	r3, [pc, #480]	; (8013980 <main+0x3ec>)
 801379e:	9301      	str	r3, [sp, #4]
 80137a0:	2302      	movs	r3, #2
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	2300      	movs	r3, #0
 80137a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137aa:	4976      	ldr	r1, [pc, #472]	; (8013984 <main+0x3f0>)
 80137ac:	4876      	ldr	r0, [pc, #472]	; (8013988 <main+0x3f4>)
 80137ae:	f00b fe96 	bl	801f4de <xTaskCreate>
         xTaskCreate(BIPAP_PID_Mode_Task, "BIPAP PID Mode Task", 512, NULL, 3, &BiPap_Pid_Handler);
 80137b2:	4b76      	ldr	r3, [pc, #472]	; (801398c <main+0x3f8>)
 80137b4:	9301      	str	r3, [sp, #4]
 80137b6:	2303      	movs	r3, #3
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	2300      	movs	r3, #0
 80137bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137c0:	4973      	ldr	r1, [pc, #460]	; (8013990 <main+0x3fc>)
 80137c2:	4874      	ldr	r0, [pc, #464]	; (8013994 <main+0x400>)
 80137c4:	f00b fe8b 	bl	801f4de <xTaskCreate>
         xTaskCreate(APRV_Mode_Task, "APRV Mode Task", 512, NULL, 2, &APRV_Handler);
 80137c8:	4b73      	ldr	r3, [pc, #460]	; (8013998 <main+0x404>)
 80137ca:	9301      	str	r3, [sp, #4]
 80137cc:	2302      	movs	r3, #2
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	2300      	movs	r3, #0
 80137d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137d6:	4971      	ldr	r1, [pc, #452]	; (801399c <main+0x408>)
 80137d8:	4871      	ldr	r0, [pc, #452]	; (80139a0 <main+0x40c>)
 80137da:	f00b fe80 	bl	801f4de <xTaskCreate>
         xTaskCreate(APRV_Mode_One_Time_Task, "APRV Mode Task", 512, NULL, 2, &APRV_one_Handler);
 80137de:	4b71      	ldr	r3, [pc, #452]	; (80139a4 <main+0x410>)
 80137e0:	9301      	str	r3, [sp, #4]
 80137e2:	2302      	movs	r3, #2
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	2300      	movs	r3, #0
 80137e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137ec:	496b      	ldr	r1, [pc, #428]	; (801399c <main+0x408>)
 80137ee:	486e      	ldr	r0, [pc, #440]	; (80139a8 <main+0x414>)
 80137f0:	f00b fe75 	bl	801f4de <xTaskCreate>
         xTaskCreate(Oxygen_Task, "Oxygen Mode Task", 512, NULL, 2, &Oxygen_Handler);
 80137f4:	4b6d      	ldr	r3, [pc, #436]	; (80139ac <main+0x418>)
 80137f6:	9301      	str	r3, [sp, #4]
 80137f8:	2302      	movs	r3, #2
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	2300      	movs	r3, #0
 80137fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013802:	496b      	ldr	r1, [pc, #428]	; (80139b0 <main+0x41c>)
 8013804:	486b      	ldr	r0, [pc, #428]	; (80139b4 <main+0x420>)
 8013806:	f00b fe6a 	bl	801f4de <xTaskCreate>
         xTaskCreate(Alert_Task, "Alert Task", 512, NULL, 2, &alert_Handler);
 801380a:	4b6b      	ldr	r3, [pc, #428]	; (80139b8 <main+0x424>)
 801380c:	9301      	str	r3, [sp, #4]
 801380e:	2302      	movs	r3, #2
 8013810:	9300      	str	r3, [sp, #0]
 8013812:	2300      	movs	r3, #0
 8013814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013818:	4968      	ldr	r1, [pc, #416]	; (80139bc <main+0x428>)
 801381a:	4869      	ldr	r0, [pc, #420]	; (80139c0 <main+0x42c>)
 801381c:	f00b fe5f 	bl	801f4de <xTaskCreate>
         xTaskCreate(CALIBRATION_Task, "CALIBRATION Task", 512, NULL, 2, &Calibration_Handler);
 8013820:	4b68      	ldr	r3, [pc, #416]	; (80139c4 <main+0x430>)
 8013822:	9301      	str	r3, [sp, #4]
 8013824:	2302      	movs	r3, #2
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	2300      	movs	r3, #0
 801382a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801382e:	4966      	ldr	r1, [pc, #408]	; (80139c8 <main+0x434>)
 8013830:	4866      	ldr	r0, [pc, #408]	; (80139cc <main+0x438>)
 8013832:	f00b fe54 	bl	801f4de <xTaskCreate>
         xTaskCreate(SERVICE_Task, "SERVICE Task", 512, NULL, 2, &Service_Handler);
 8013836:	4b66      	ldr	r3, [pc, #408]	; (80139d0 <main+0x43c>)
 8013838:	9301      	str	r3, [sp, #4]
 801383a:	2302      	movs	r3, #2
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	2300      	movs	r3, #0
 8013840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013844:	4963      	ldr	r1, [pc, #396]	; (80139d4 <main+0x440>)
 8013846:	4864      	ldr	r0, [pc, #400]	; (80139d8 <main+0x444>)
 8013848:	f00b fe49 	bl	801f4de <xTaskCreate>
         xTaskCreate(Nebuliser_Task,"Nebulizer-Task", 256, NULL, 2, &Nebuliser_Handler);
 801384c:	4b63      	ldr	r3, [pc, #396]	; (80139dc <main+0x448>)
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	2302      	movs	r3, #2
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	2300      	movs	r3, #0
 8013856:	f44f 7280 	mov.w	r2, #256	; 0x100
 801385a:	4961      	ldr	r1, [pc, #388]	; (80139e0 <main+0x44c>)
 801385c:	4861      	ldr	r0, [pc, #388]	; (80139e4 <main+0x450>)
 801385e:	f00b fe3e 	bl	801f4de <xTaskCreate>
         xTaskCreate(HFNC_Task,"HFNC-Task", 256, NULL, 2, &HFNC_Handler);
 8013862:	4b61      	ldr	r3, [pc, #388]	; (80139e8 <main+0x454>)
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	2302      	movs	r3, #2
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	2300      	movs	r3, #0
 801386c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013870:	495e      	ldr	r1, [pc, #376]	; (80139ec <main+0x458>)
 8013872:	485f      	ldr	r0, [pc, #380]	; (80139f0 <main+0x45c>)
 8013874:	f00b fe33 	bl	801f4de <xTaskCreate>
         xTaskCreate(Suction_Task,"Suction-Task", 256, NULL, 2, &Suction_Handler);
 8013878:	4b5e      	ldr	r3, [pc, #376]	; (80139f4 <main+0x460>)
 801387a:	9301      	str	r3, [sp, #4]
 801387c:	2302      	movs	r3, #2
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	2300      	movs	r3, #0
 8013882:	e0b9      	b.n	80139f8 <main+0x464>
 8013884:	20016da8 	.word	0x20016da8
 8013888:	20016d40 	.word	0x20016d40
 801388c:	08021fb0 	.word	0x08021fb0
 8013890:	080140e9 	.word	0x080140e9
 8013894:	20016ef4 	.word	0x20016ef4
 8013898:	08021fc8 	.word	0x08021fc8
 801389c:	08014211 	.word	0x08014211
 80138a0:	20016ef8 	.word	0x20016ef8
 80138a4:	08021fe8 	.word	0x08021fe8
 80138a8:	08010db5 	.word	0x08010db5
 80138ac:	20017000 	.word	0x20017000
 80138b0:	08022004 	.word	0x08022004
 80138b4:	0801447d 	.word	0x0801447d
 80138b8:	20016ffc 	.word	0x20016ffc
 80138bc:	0802201c 	.word	0x0802201c
 80138c0:	08014405 	.word	0x08014405
 80138c4:	20016f98 	.word	0x20016f98
 80138c8:	08022034 	.word	0x08022034
 80138cc:	08010565 	.word	0x08010565
 80138d0:	20016a84 	.word	0x20016a84
 80138d4:	08022050 	.word	0x08022050
 80138d8:	0800cc21 	.word	0x0800cc21
 80138dc:	20016a28 	.word	0x20016a28
 80138e0:	08022064 	.word	0x08022064
 80138e4:	0800d58d 	.word	0x0800d58d
 80138e8:	20016d78 	.word	0x20016d78
 80138ec:	0802207c 	.word	0x0802207c
 80138f0:	08012525 	.word	0x08012525
 80138f4:	2001695c 	.word	0x2001695c
 80138f8:	08022090 	.word	0x08022090
 80138fc:	08012631 	.word	0x08012631
 8013900:	20016e60 	.word	0x20016e60
 8013904:	080220a8 	.word	0x080220a8
 8013908:	0800adf9 	.word	0x0800adf9
 801390c:	20016e8c 	.word	0x20016e8c
 8013910:	0800b595 	.word	0x0800b595
 8013914:	20016c44 	.word	0x20016c44
 8013918:	080220bc 	.word	0x080220bc
 801391c:	08010e39 	.word	0x08010e39
 8013920:	20016ad0 	.word	0x20016ad0
 8013924:	080220d0 	.word	0x080220d0
 8013928:	080111c1 	.word	0x080111c1
 801392c:	20016bf0 	.word	0x20016bf0
 8013930:	080220e8 	.word	0x080220e8
 8013934:	0800e419 	.word	0x0800e419
 8013938:	20016a74 	.word	0x20016a74
 801393c:	080220f8 	.word	0x080220f8
 8013940:	0800f6d1 	.word	0x0800f6d1
 8013944:	20016bcc 	.word	0x20016bcc
 8013948:	08022108 	.word	0x08022108
 801394c:	08003d69 	.word	0x08003d69
 8013950:	20016d3c 	.word	0x20016d3c
 8013954:	08022124 	.word	0x08022124
 8013958:	08004d1d 	.word	0x08004d1d
 801395c:	20016d7c 	.word	0x20016d7c
 8013960:	08022144 	.word	0x08022144
 8013964:	08006139 	.word	0x08006139
 8013968:	20016a7c 	.word	0x20016a7c
 801396c:	08022160 	.word	0x08022160
 8013970:	08006f09 	.word	0x08006f09
 8013974:	20016bb8 	.word	0x20016bb8
 8013978:	08022180 	.word	0x08022180
 801397c:	08008701 	.word	0x08008701
 8013980:	20016a24 	.word	0x20016a24
 8013984:	08022190 	.word	0x08022190
 8013988:	08002979 	.word	0x08002979
 801398c:	20016878 	.word	0x20016878
 8013990:	080221a0 	.word	0x080221a0
 8013994:	08003c55 	.word	0x08003c55
 8013998:	20016c00 	.word	0x20016c00
 801399c:	080221b4 	.word	0x080221b4
 80139a0:	08000ea5 	.word	0x08000ea5
 80139a4:	20016bc8 	.word	0x20016bc8
 80139a8:	08001169 	.word	0x08001169
 80139ac:	20016958 	.word	0x20016958
 80139b0:	080221c4 	.word	0x080221c4
 80139b4:	0800a859 	.word	0x0800a859
 80139b8:	20016ad4 	.word	0x20016ad4
 80139bc:	080221d8 	.word	0x080221d8
 80139c0:	08001d19 	.word	0x08001d19
 80139c4:	20016cd0 	.word	0x20016cd0
 80139c8:	080221e4 	.word	0x080221e4
 80139cc:	08007e91 	.word	0x08007e91
 80139d0:	200168c8 	.word	0x200168c8
 80139d4:	080221f8 	.word	0x080221f8
 80139d8:	0800f93d 	.word	0x0800f93d
 80139dc:	20016a94 	.word	0x20016a94
 80139e0:	08022208 	.word	0x08022208
 80139e4:	0800a3f9 	.word	0x0800a3f9
 80139e8:	20016a20 	.word	0x20016a20
 80139ec:	08022218 	.word	0x08022218
 80139f0:	08009bf9 	.word	0x08009bf9
 80139f4:	20016e5c 	.word	0x20016e5c
 80139f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80139fc:	494c      	ldr	r1, [pc, #304]	; (8013b30 <main+0x59c>)
 80139fe:	484d      	ldr	r0, [pc, #308]	; (8013b34 <main+0x5a0>)
 8013a00:	f00b fd6d 	bl	801f4de <xTaskCreate>
         xTaskCreate(Shutdown_Task,"Shutdown-Task", 256, NULL, 3, &Shutdown_Handler);
 8013a04:	4b4c      	ldr	r3, [pc, #304]	; (8013b38 <main+0x5a4>)
 8013a06:	9301      	str	r3, [sp, #4]
 8013a08:	2303      	movs	r3, #3
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013a12:	494a      	ldr	r1, [pc, #296]	; (8013b3c <main+0x5a8>)
 8013a14:	484a      	ldr	r0, [pc, #296]	; (8013b40 <main+0x5ac>)
 8013a16:	f00b fd62 	bl	801f4de <xTaskCreate>





         HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	4849      	ldr	r0, [pc, #292]	; (8013b44 <main+0x5b0>)
 8013a1e:	f002 fa7b 	bl	8015f18 <HAL_DAC_Start>
         Blower_Signal(0);
 8013a22:	4b49      	ldr	r3, [pc, #292]	; (8013b48 <main+0x5b4>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	609a      	str	r2, [r3, #8]
         HAL_DAC_Start(&hdac,DAC1_CHANNEL_2);
 8013a28:	2110      	movs	r1, #16
 8013a2a:	4846      	ldr	r0, [pc, #280]	; (8013b44 <main+0x5b0>)
 8013a2c:	f002 fa74 	bl	8015f18 <HAL_DAC_Start>
         Parkar_valve_Signal(0);
 8013a30:	4b45      	ldr	r3, [pc, #276]	; (8013b48 <main+0x5b4>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	615a      	str	r2, [r3, #20]
         HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AdcData,5);
 8013a36:	2205      	movs	r2, #5
 8013a38:	4944      	ldr	r1, [pc, #272]	; (8013b4c <main+0x5b8>)
 8013a3a:	4845      	ldr	r0, [pc, #276]	; (8013b50 <main+0x5bc>)
 8013a3c:	f001 fd9a 	bl	8015574 <HAL_ADC_Start_DMA>
         HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8013a40:	2100      	movs	r1, #0
 8013a42:	4844      	ldr	r0, [pc, #272]	; (8013b54 <main+0x5c0>)
 8013a44:	f006 f85c 	bl	8019b00 <HAL_TIM_PWM_Start>
         Servo_Power_ON();
 8013a48:	4b43      	ldr	r3, [pc, #268]	; (8013b58 <main+0x5c4>)
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	4a42      	ldr	r2, [pc, #264]	; (8013b58 <main+0x5c4>)
 8013a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013a52:	6153      	str	r3, [r2, #20]
         Servo_Angle(45);
 8013a54:	4b41      	ldr	r3, [pc, #260]	; (8013b5c <main+0x5c8>)
 8013a56:	222d      	movs	r2, #45	; 0x2d
 8013a58:	635a      	str	r2, [r3, #52]	; 0x34
         Blower_ON();
 8013a5a:	4b41      	ldr	r3, [pc, #260]	; (8013b60 <main+0x5cc>)
 8013a5c:	695b      	ldr	r3, [r3, #20]
 8013a5e:	4a40      	ldr	r2, [pc, #256]	; (8013b60 <main+0x5cc>)
 8013a60:	f043 0320 	orr.w	r3, r3, #32
 8013a64:	6153      	str	r3, [r2, #20]
         Power_Led_ON();
 8013a66:	4b3e      	ldr	r3, [pc, #248]	; (8013b60 <main+0x5cc>)
 8013a68:	695b      	ldr	r3, [r3, #20]
 8013a6a:	4a3d      	ldr	r2, [pc, #244]	; (8013b60 <main+0x5cc>)
 8013a6c:	f043 0302 	orr.w	r3, r3, #2
 8013a70:	6153      	str	r3, [r2, #20]
         Uart_Receive_Debug_Toggle_Led();
 8013a72:	4b3c      	ldr	r3, [pc, #240]	; (8013b64 <main+0x5d0>)
 8013a74:	695b      	ldr	r3, [r3, #20]
 8013a76:	4a3b      	ldr	r2, [pc, #236]	; (8013b64 <main+0x5d0>)
 8013a78:	f083 0302 	eor.w	r3, r3, #2
 8013a7c:	6153      	str	r3, [r2, #20]
         Blue_Led_ON();
 8013a7e:	4b39      	ldr	r3, [pc, #228]	; (8013b64 <main+0x5d0>)
 8013a80:	695b      	ldr	r3, [r3, #20]
 8013a82:	4a38      	ldr	r2, [pc, #224]	; (8013b64 <main+0x5d0>)
 8013a84:	f043 0308 	orr.w	r3, r3, #8
 8013a88:	6153      	str	r3, [r2, #20]
         Red_Led_OFF();
 8013a8a:	4b36      	ldr	r3, [pc, #216]	; (8013b64 <main+0x5d0>)
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	4a35      	ldr	r2, [pc, #212]	; (8013b64 <main+0x5d0>)
 8013a90:	f023 0310 	bic.w	r3, r3, #16
 8013a94:	6153      	str	r3, [r2, #20]
         Green_Led_OFF();
 8013a96:	4b33      	ldr	r3, [pc, #204]	; (8013b64 <main+0x5d0>)
 8013a98:	695b      	ldr	r3, [r3, #20]
 8013a9a:	4a32      	ldr	r2, [pc, #200]	; (8013b64 <main+0x5d0>)
 8013a9c:	f023 0320 	bic.w	r3, r3, #32
 8013aa0:	6153      	str	r3, [r2, #20]


               TempSetpoint = 30;
 8013aa2:	4931      	ldr	r1, [pc, #196]	; (8013b68 <main+0x5d4>)
 8013aa4:	f04f 0200 	mov.w	r2, #0
 8013aa8:	4b30      	ldr	r3, [pc, #192]	; (8013b6c <main+0x5d8>)
 8013aaa:	e9c1 2300 	strd	r2, r3, [r1]
               PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8013aae:	4b30      	ldr	r3, [pc, #192]	; (8013b70 <main+0x5dc>)
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ec fcce 	bl	8000454 <__aeabi_ui2d>
 8013ab8:	4604      	mov	r4, r0
 8013aba:	460d      	mov	r5, r1
 8013abc:	4b2d      	ldr	r3, [pc, #180]	; (8013b74 <main+0x5e0>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7ec fcc7 	bl	8000454 <__aeabi_ui2d>
 8013ac6:	4b2c      	ldr	r3, [pc, #176]	; (8013b78 <main+0x5e4>)
 8013ac8:	ed93 7b00 	vldr	d7, [r3]
 8013acc:	2300      	movs	r3, #0
 8013ace:	9301      	str	r3, [sp, #4]
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	eeb0 2a47 	vmov.f32	s4, s14
 8013ad8:	eef0 2a67 	vmov.f32	s5, s15
 8013adc:	ec41 0b11 	vmov	d1, r0, r1
 8013ae0:	ec45 4b10 	vmov	d0, r4, r5
 8013ae4:	4b20      	ldr	r3, [pc, #128]	; (8013b68 <main+0x5d4>)
 8013ae6:	4a25      	ldr	r2, [pc, #148]	; (8013b7c <main+0x5e8>)
 8013ae8:	4925      	ldr	r1, [pc, #148]	; (8013b80 <main+0x5ec>)
 8013aea:	4826      	ldr	r0, [pc, #152]	; (8013b84 <main+0x5f0>)
 8013aec:	f000 fe58 	bl	80147a0 <PID>
               PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8013af0:	2101      	movs	r1, #1
 8013af2:	4824      	ldr	r0, [pc, #144]	; (8013b84 <main+0x5f0>)
 8013af4:	f000 ff8a 	bl	8014a0c <PID_SetMode>
               PID_SetSampleTime(&TPID, 50);
 8013af8:	2132      	movs	r1, #50	; 0x32
 8013afa:	4822      	ldr	r0, [pc, #136]	; (8013b84 <main+0x5f0>)
 8013afc:	f001 f902 	bl	8014d04 <PID_SetSampleTime>
               PID_SetOutputLimits(&TPID, Dac1, Dac2);
 8013b00:	4b21      	ldr	r3, [pc, #132]	; (8013b88 <main+0x5f4>)
 8013b02:	881b      	ldrh	r3, [r3, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7ec fca5 	bl	8000454 <__aeabi_ui2d>
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	460d      	mov	r5, r1
 8013b0e:	4b1f      	ldr	r3, [pc, #124]	; (8013b8c <main+0x5f8>)
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ec fc9e 	bl	8000454 <__aeabi_ui2d>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	ec43 2b11 	vmov	d1, r2, r3
 8013b20:	ec45 4b10 	vmov	d0, r4, r5
 8013b24:	4817      	ldr	r0, [pc, #92]	; (8013b84 <main+0x5f0>)
 8013b26:	f000 ff8f 	bl	8014a48 <PID_SetOutputLimits>


         vTaskStartScheduler();
 8013b2a:	f00b fff5 	bl	801fb18 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 8013b2e:	e7fe      	b.n	8013b2e <main+0x59a>
 8013b30:	08022224 	.word	0x08022224
 8013b34:	08009f35 	.word	0x08009f35
 8013b38:	20016d24 	.word	0x20016d24
 8013b3c:	08022234 	.word	0x08022234
 8013b40:	0800a215 	.word	0x0800a215
 8013b44:	20016c30 	.word	0x20016c30
 8013b48:	40007400 	.word	0x40007400
 8013b4c:	20016bbc 	.word	0x20016bbc
 8013b50:	20016f50 	.word	0x20016f50
 8013b54:	20017004 	.word	0x20017004
 8013b58:	40020400 	.word	0x40020400
 8013b5c:	40001800 	.word	0x40001800
 8013b60:	40021000 	.word	0x40021000
 8013b64:	40020c00 	.word	0x40020c00
 8013b68:	20016e80 	.word	0x20016e80
 8013b6c:	403e0000 	.word	0x403e0000
 8013b70:	20000136 	.word	0x20000136
 8013b74:	20000137 	.word	0x20000137
 8013b78:	20000138 	.word	0x20000138
 8013b7c:	20016a18 	.word	0x20016a18
 8013b80:	20016a98 	.word	0x20016a98
 8013b84:	200169a0 	.word	0x200169a0
 8013b88:	2000012e 	.word	0x2000012e
 8013b8c:	20000130 	.word	0x20000130

08013b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b094      	sub	sp, #80	; 0x50
 8013b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013b96:	f107 0320 	add.w	r3, r7, #32
 8013b9a:	2230      	movs	r2, #48	; 0x30
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f00e f9ea 	bl	8021f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013ba4:	f107 030c 	add.w	r3, r7, #12
 8013ba8:	2200      	movs	r2, #0
 8013baa:	601a      	str	r2, [r3, #0]
 8013bac:	605a      	str	r2, [r3, #4]
 8013bae:	609a      	str	r2, [r3, #8]
 8013bb0:	60da      	str	r2, [r3, #12]
 8013bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	60bb      	str	r3, [r7, #8]
 8013bb8:	4b28      	ldr	r3, [pc, #160]	; (8013c5c <SystemClock_Config+0xcc>)
 8013bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bbc:	4a27      	ldr	r2, [pc, #156]	; (8013c5c <SystemClock_Config+0xcc>)
 8013bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8013bc4:	4b25      	ldr	r3, [pc, #148]	; (8013c5c <SystemClock_Config+0xcc>)
 8013bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013bcc:	60bb      	str	r3, [r7, #8]
 8013bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	607b      	str	r3, [r7, #4]
 8013bd4:	4b22      	ldr	r3, [pc, #136]	; (8013c60 <SystemClock_Config+0xd0>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4a21      	ldr	r2, [pc, #132]	; (8013c60 <SystemClock_Config+0xd0>)
 8013bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013bde:	6013      	str	r3, [r2, #0]
 8013be0:	4b1f      	ldr	r3, [pc, #124]	; (8013c60 <SystemClock_Config+0xd0>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013be8:	607b      	str	r3, [r7, #4]
 8013bea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013bec:	2301      	movs	r3, #1
 8013bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013bf6:	2302      	movs	r3, #2
 8013bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8013c00:	2308      	movs	r3, #8
 8013c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013c04:	23a8      	movs	r3, #168	; 0xa8
 8013c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013c08:	2302      	movs	r3, #2
 8013c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013c0c:	2307      	movs	r3, #7
 8013c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013c10:	f107 0320 	add.w	r3, r7, #32
 8013c14:	4618      	mov	r0, r3
 8013c16:	f005 f9b5 	bl	8018f84 <HAL_RCC_OscConfig>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d001      	beq.n	8013c24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013c20:	f000 fd7c 	bl	801471c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013c24:	230f      	movs	r3, #15
 8013c26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013c28:	2302      	movs	r3, #2
 8013c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013c30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013c3c:	f107 030c 	add.w	r3, r7, #12
 8013c40:	2105      	movs	r1, #5
 8013c42:	4618      	mov	r0, r3
 8013c44:	f005 fc16 	bl	8019474 <HAL_RCC_ClockConfig>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013c4e:	f000 fd65 	bl	801471c <Error_Handler>
  }
}
 8013c52:	bf00      	nop
 8013c54:	3750      	adds	r7, #80	; 0x50
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	40023800 	.word	0x40023800
 8013c60:	40007000 	.word	0x40007000

08013c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b084      	sub	sp, #16
 8013c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8013c6a:	463b      	mov	r3, r7
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	605a      	str	r2, [r3, #4]
 8013c72:	609a      	str	r2, [r3, #8]
 8013c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8013c76:	4b3d      	ldr	r3, [pc, #244]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c78:	4a3d      	ldr	r2, [pc, #244]	; (8013d70 <MX_ADC1_Init+0x10c>)
 8013c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8013c7c:	4b3b      	ldr	r3, [pc, #236]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8013c84:	4b39      	ldr	r3, [pc, #228]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c86:	2200      	movs	r2, #0
 8013c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8013c8a:	4b38      	ldr	r3, [pc, #224]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8013c90:	4b36      	ldr	r3, [pc, #216]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c92:	2201      	movs	r2, #1
 8013c94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013c96:	4b35      	ldr	r3, [pc, #212]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013c9e:	4b33      	ldr	r3, [pc, #204]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8013ca4:	4b31      	ldr	r3, [pc, #196]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013ca6:	4a33      	ldr	r2, [pc, #204]	; (8013d74 <MX_ADC1_Init+0x110>)
 8013ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013caa:	4b30      	ldr	r3, [pc, #192]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013cac:	2200      	movs	r2, #0
 8013cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8013cb0:	4b2e      	ldr	r3, [pc, #184]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013cb2:	2205      	movs	r2, #5
 8013cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8013cb6:	4b2d      	ldr	r3, [pc, #180]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013cb8:	2201      	movs	r2, #1
 8013cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013cbe:	4b2b      	ldr	r3, [pc, #172]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8013cc4:	4829      	ldr	r0, [pc, #164]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013cc6:	f001 fc11 	bl	80154ec <HAL_ADC_Init>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8013cd0:	f000 fd24 	bl	801471c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8013cdc:	2307      	movs	r3, #7
 8013cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013ce0:	463b      	mov	r3, r7
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	4821      	ldr	r0, [pc, #132]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013ce6:	f001 fd73 	bl	80157d0 <HAL_ADC_ConfigChannel>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d001      	beq.n	8013cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8013cf0:	f000 fd14 	bl	801471c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013cfc:	463b      	mov	r3, r7
 8013cfe:	4619      	mov	r1, r3
 8013d00:	481a      	ldr	r0, [pc, #104]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013d02:	f001 fd65 	bl	80157d0 <HAL_ADC_ConfigChannel>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d001      	beq.n	8013d10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8013d0c:	f000 fd06 	bl	801471c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8013d10:	2303      	movs	r3, #3
 8013d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8013d14:	2303      	movs	r3, #3
 8013d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013d18:	463b      	mov	r3, r7
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	4813      	ldr	r0, [pc, #76]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013d1e:	f001 fd57 	bl	80157d0 <HAL_ADC_ConfigChannel>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d001      	beq.n	8013d2c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8013d28:	f000 fcf8 	bl	801471c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8013d2c:	230f      	movs	r3, #15
 8013d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8013d30:	2304      	movs	r3, #4
 8013d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013d34:	463b      	mov	r3, r7
 8013d36:	4619      	mov	r1, r3
 8013d38:	480c      	ldr	r0, [pc, #48]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013d3a:	f001 fd49 	bl	80157d0 <HAL_ADC_ConfigChannel>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8013d44:	f000 fcea 	bl	801471c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8013d48:	230d      	movs	r3, #13
 8013d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8013d4c:	2305      	movs	r3, #5
 8013d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013d50:	463b      	mov	r3, r7
 8013d52:	4619      	mov	r1, r3
 8013d54:	4805      	ldr	r0, [pc, #20]	; (8013d6c <MX_ADC1_Init+0x108>)
 8013d56:	f001 fd3b 	bl	80157d0 <HAL_ADC_ConfigChannel>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d001      	beq.n	8013d64 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8013d60:	f000 fcdc 	bl	801471c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8013d64:	bf00      	nop
 8013d66:	3710      	adds	r7, #16
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	20016f50 	.word	0x20016f50
 8013d70:	40012000 	.word	0x40012000
 8013d74:	0f000001 	.word	0x0f000001

08013d78 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8013d7e:	463b      	mov	r3, r7
 8013d80:	2200      	movs	r2, #0
 8013d82:	601a      	str	r2, [r3, #0]
 8013d84:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8013d86:	4b14      	ldr	r3, [pc, #80]	; (8013dd8 <MX_DAC_Init+0x60>)
 8013d88:	4a14      	ldr	r2, [pc, #80]	; (8013ddc <MX_DAC_Init+0x64>)
 8013d8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8013d8c:	4812      	ldr	r0, [pc, #72]	; (8013dd8 <MX_DAC_Init+0x60>)
 8013d8e:	f002 f8a1 	bl	8015ed4 <HAL_DAC_Init>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d001      	beq.n	8013d9c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8013d98:	f000 fcc0 	bl	801471c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8013da0:	2300      	movs	r3, #0
 8013da2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8013da4:	463b      	mov	r3, r7
 8013da6:	2200      	movs	r2, #0
 8013da8:	4619      	mov	r1, r3
 8013daa:	480b      	ldr	r0, [pc, #44]	; (8013dd8 <MX_DAC_Init+0x60>)
 8013dac:	f002 f96a 	bl	8016084 <HAL_DAC_ConfigChannel>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d001      	beq.n	8013dba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8013db6:	f000 fcb1 	bl	801471c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8013dba:	463b      	mov	r3, r7
 8013dbc:	2210      	movs	r2, #16
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	4805      	ldr	r0, [pc, #20]	; (8013dd8 <MX_DAC_Init+0x60>)
 8013dc2:	f002 f95f 	bl	8016084 <HAL_DAC_ConfigChannel>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d001      	beq.n	8013dd0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8013dcc:	f000 fca6 	bl	801471c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20016c30 	.word	0x20016c30
 8013ddc:	40007400 	.word	0x40007400

08013de0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8013de4:	4b12      	ldr	r3, [pc, #72]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013de6:	4a13      	ldr	r2, [pc, #76]	; (8013e34 <MX_I2C2_Init+0x54>)
 8013de8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8013dea:	4b11      	ldr	r3, [pc, #68]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013dec:	4a12      	ldr	r2, [pc, #72]	; (8013e38 <MX_I2C2_Init+0x58>)
 8013dee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013df0:	4b0f      	ldr	r3, [pc, #60]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013df2:	2200      	movs	r2, #0
 8013df4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8013df6:	4b0e      	ldr	r3, [pc, #56]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013df8:	2200      	movs	r2, #0
 8013dfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013dfc:	4b0c      	ldr	r3, [pc, #48]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013e02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013e04:	4b0a      	ldr	r3, [pc, #40]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013e06:	2200      	movs	r2, #0
 8013e08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8013e0a:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013e10:	4b07      	ldr	r3, [pc, #28]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013e12:	2200      	movs	r2, #0
 8013e14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013e16:	4b06      	ldr	r3, [pc, #24]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013e1c:	4804      	ldr	r0, [pc, #16]	; (8013e30 <MX_I2C2_Init+0x50>)
 8013e1e:	f002 ff99 	bl	8016d54 <HAL_I2C_Init>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d001      	beq.n	8013e2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8013e28:	f000 fc78 	bl	801471c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013e2c:	bf00      	nop
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	20016efc 	.word	0x20016efc
 8013e34:	40005800 	.word	0x40005800
 8013e38:	00061a80 	.word	0x00061a80

08013e3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b08c      	sub	sp, #48	; 0x30
 8013e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013e42:	f107 0320 	add.w	r3, r7, #32
 8013e46:	2200      	movs	r2, #0
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	605a      	str	r2, [r3, #4]
 8013e4c:	609a      	str	r2, [r3, #8]
 8013e4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013e50:	1d3b      	adds	r3, r7, #4
 8013e52:	2200      	movs	r2, #0
 8013e54:	601a      	str	r2, [r3, #0]
 8013e56:	605a      	str	r2, [r3, #4]
 8013e58:	609a      	str	r2, [r3, #8]
 8013e5a:	60da      	str	r2, [r3, #12]
 8013e5c:	611a      	str	r2, [r3, #16]
 8013e5e:	615a      	str	r2, [r3, #20]
 8013e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8013e62:	4b26      	ldr	r3, [pc, #152]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e64:	4a26      	ldr	r2, [pc, #152]	; (8013f00 <MX_TIM12_Init+0xc4>)
 8013e66:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1680-1;
 8013e68:	4b24      	ldr	r3, [pc, #144]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e6a:	f240 628f 	movw	r2, #1679	; 0x68f
 8013e6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013e70:	4b22      	ldr	r3, [pc, #136]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e72:	2200      	movs	r2, #0
 8013e74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8013e76:	4b21      	ldr	r3, [pc, #132]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013e7e:	4b1f      	ldr	r3, [pc, #124]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e80:	2200      	movs	r2, #0
 8013e82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013e84:	4b1d      	ldr	r3, [pc, #116]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e86:	2200      	movs	r2, #0
 8013e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8013e8a:	481c      	ldr	r0, [pc, #112]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013e8c:	f005 fd1e 	bl	80198cc <HAL_TIM_Base_Init>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d001      	beq.n	8013e9a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8013e96:	f000 fc41 	bl	801471c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8013ea0:	f107 0320 	add.w	r3, r7, #32
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4815      	ldr	r0, [pc, #84]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013ea8:	f006 f8bc 	bl	801a024 <HAL_TIM_ConfigClockSource>
 8013eac:	4603      	mov	r3, r0
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d001      	beq.n	8013eb6 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8013eb2:	f000 fc33 	bl	801471c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8013eb6:	4811      	ldr	r0, [pc, #68]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013eb8:	f005 fdc8 	bl	8019a4c <HAL_TIM_PWM_Init>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d001      	beq.n	8013ec6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8013ec2:	f000 fc2b 	bl	801471c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013ec6:	2360      	movs	r3, #96	; 0x60
 8013ec8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013ed6:	1d3b      	adds	r3, r7, #4
 8013ed8:	2200      	movs	r2, #0
 8013eda:	4619      	mov	r1, r3
 8013edc:	4807      	ldr	r0, [pc, #28]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013ede:	f005 ffdf 	bl	8019ea0 <HAL_TIM_PWM_ConfigChannel>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d001      	beq.n	8013eec <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8013ee8:	f000 fc18 	bl	801471c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8013eec:	4803      	ldr	r0, [pc, #12]	; (8013efc <MX_TIM12_Init+0xc0>)
 8013eee:	f001 f8bb 	bl	8015068 <HAL_TIM_MspPostInit>

}
 8013ef2:	bf00      	nop
 8013ef4:	3730      	adds	r7, #48	; 0x30
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	20017004 	.word	0x20017004
 8013f00:	40001800 	.word	0x40001800

08013f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	607b      	str	r3, [r7, #4]
 8013f0e:	4b0c      	ldr	r3, [pc, #48]	; (8013f40 <MX_DMA_Init+0x3c>)
 8013f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f12:	4a0b      	ldr	r2, [pc, #44]	; (8013f40 <MX_DMA_Init+0x3c>)
 8013f14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013f18:	6313      	str	r3, [r2, #48]	; 0x30
 8013f1a:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <MX_DMA_Init+0x3c>)
 8013f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013f22:	607b      	str	r3, [r7, #4]
 8013f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8013f26:	2200      	movs	r2, #0
 8013f28:	2105      	movs	r1, #5
 8013f2a:	2038      	movs	r0, #56	; 0x38
 8013f2c:	f001 ffa8 	bl	8015e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8013f30:	2038      	movs	r0, #56	; 0x38
 8013f32:	f001 ffc1 	bl	8015eb8 <HAL_NVIC_EnableIRQ>

}
 8013f36:	bf00      	nop
 8013f38:	3708      	adds	r7, #8
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	40023800 	.word	0x40023800

08013f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b08c      	sub	sp, #48	; 0x30
 8013f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f4a:	f107 031c 	add.w	r3, r7, #28
 8013f4e:	2200      	movs	r2, #0
 8013f50:	601a      	str	r2, [r3, #0]
 8013f52:	605a      	str	r2, [r3, #4]
 8013f54:	609a      	str	r2, [r3, #8]
 8013f56:	60da      	str	r2, [r3, #12]
 8013f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	61bb      	str	r3, [r7, #24]
 8013f5e:	4b5e      	ldr	r3, [pc, #376]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f62:	4a5d      	ldr	r2, [pc, #372]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f64:	f043 0310 	orr.w	r3, r3, #16
 8013f68:	6313      	str	r3, [r2, #48]	; 0x30
 8013f6a:	4b5b      	ldr	r3, [pc, #364]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f6e:	f003 0310 	and.w	r3, r3, #16
 8013f72:	61bb      	str	r3, [r7, #24]
 8013f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013f76:	2300      	movs	r3, #0
 8013f78:	617b      	str	r3, [r7, #20]
 8013f7a:	4b57      	ldr	r3, [pc, #348]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7e:	4a56      	ldr	r2, [pc, #344]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f84:	6313      	str	r3, [r2, #48]	; 0x30
 8013f86:	4b54      	ldr	r3, [pc, #336]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f8e:	617b      	str	r3, [r7, #20]
 8013f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013f92:	2300      	movs	r3, #0
 8013f94:	613b      	str	r3, [r7, #16]
 8013f96:	4b50      	ldr	r3, [pc, #320]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f9a:	4a4f      	ldr	r2, [pc, #316]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013f9c:	f043 0304 	orr.w	r3, r3, #4
 8013fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8013fa2:	4b4d      	ldr	r3, [pc, #308]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fa6:	f003 0304 	and.w	r3, r3, #4
 8013faa:	613b      	str	r3, [r7, #16]
 8013fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013fae:	2300      	movs	r3, #0
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	4b49      	ldr	r3, [pc, #292]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fb6:	4a48      	ldr	r2, [pc, #288]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fb8:	f043 0301 	orr.w	r3, r3, #1
 8013fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8013fbe:	4b46      	ldr	r3, [pc, #280]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fc2:	f003 0301 	and.w	r3, r3, #1
 8013fc6:	60fb      	str	r3, [r7, #12]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013fca:	2300      	movs	r3, #0
 8013fcc:	60bb      	str	r3, [r7, #8]
 8013fce:	4b42      	ldr	r3, [pc, #264]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fd2:	4a41      	ldr	r2, [pc, #260]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fd4:	f043 0302 	orr.w	r3, r3, #2
 8013fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8013fda:	4b3f      	ldr	r3, [pc, #252]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fde:	f003 0302 	and.w	r3, r3, #2
 8013fe2:	60bb      	str	r3, [r7, #8]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	607b      	str	r3, [r7, #4]
 8013fea:	4b3b      	ldr	r3, [pc, #236]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fee:	4a3a      	ldr	r2, [pc, #232]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013ff0:	f043 0308 	orr.w	r3, r3, #8
 8013ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8013ff6:	4b38      	ldr	r3, [pc, #224]	; (80140d8 <MX_GPIO_Init+0x194>)
 8013ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ffa:	f003 0308 	and.w	r3, r3, #8
 8013ffe:	607b      	str	r3, [r7, #4]
 8014000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8014002:	2200      	movs	r2, #0
 8014004:	2122      	movs	r1, #34	; 0x22
 8014006:	4835      	ldr	r0, [pc, #212]	; (80140dc <MX_GPIO_Init+0x198>)
 8014008:	f002 fe4c 	bl	8016ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 801400c:	2200      	movs	r2, #0
 801400e:	f44f 4132 	mov.w	r1, #45568	; 0xb200
 8014012:	4833      	ldr	r0, [pc, #204]	; (80140e0 <MX_GPIO_Init+0x19c>)
 8014014:	f002 fe46 	bl	8016ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8014018:	2200      	movs	r2, #0
 801401a:	f248 017a 	movw	r1, #32890	; 0x807a
 801401e:	4831      	ldr	r0, [pc, #196]	; (80140e4 <MX_GPIO_Init+0x1a0>)
 8014020:	f002 fe40 	bl	8016ca4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014024:	2304      	movs	r3, #4
 8014026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014028:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801402c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801402e:	2301      	movs	r3, #1
 8014030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014032:	f107 031c 	add.w	r3, r7, #28
 8014036:	4619      	mov	r1, r3
 8014038:	4828      	ldr	r0, [pc, #160]	; (80140dc <MX_GPIO_Init+0x198>)
 801403a:	f002 fc7f 	bl	801693c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1;
 801403e:	2322      	movs	r3, #34	; 0x22
 8014040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014042:	2301      	movs	r3, #1
 8014044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014046:	2300      	movs	r3, #0
 8014048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801404a:	2300      	movs	r3, #0
 801404c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801404e:	f107 031c 	add.w	r3, r7, #28
 8014052:	4619      	mov	r1, r3
 8014054:	4821      	ldr	r0, [pc, #132]	; (80140dc <MX_GPIO_Init+0x198>)
 8014056:	f002 fc71 	bl	801693c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 801405a:	2340      	movs	r3, #64	; 0x40
 801405c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801405e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8014062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014064:	2300      	movs	r3, #0
 8014066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014068:	f107 031c 	add.w	r3, r7, #28
 801406c:	4619      	mov	r1, r3
 801406e:	481b      	ldr	r0, [pc, #108]	; (80140dc <MX_GPIO_Init+0x198>)
 8014070:	f002 fc64 	bl	801693c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_9;
 8014074:	f44f 4332 	mov.w	r3, #45568	; 0xb200
 8014078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801407a:	2301      	movs	r3, #1
 801407c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801407e:	2300      	movs	r3, #0
 8014080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014082:	2300      	movs	r3, #0
 8014084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014086:	f107 031c 	add.w	r3, r7, #28
 801408a:	4619      	mov	r1, r3
 801408c:	4814      	ldr	r0, [pc, #80]	; (80140e0 <MX_GPIO_Init+0x19c>)
 801408e:	f002 fc55 	bl	801693c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD1 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8014092:	f248 037a 	movw	r3, #32890	; 0x807a
 8014096:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014098:	2301      	movs	r3, #1
 801409a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801409c:	2300      	movs	r3, #0
 801409e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80140a0:	2300      	movs	r3, #0
 80140a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80140a4:	f107 031c 	add.w	r3, r7, #28
 80140a8:	4619      	mov	r1, r3
 80140aa:	480e      	ldr	r0, [pc, #56]	; (80140e4 <MX_GPIO_Init+0x1a0>)
 80140ac:	f002 fc46 	bl	801693c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80140b0:	2200      	movs	r2, #0
 80140b2:	2105      	movs	r1, #5
 80140b4:	2008      	movs	r0, #8
 80140b6:	f001 fee3 	bl	8015e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80140ba:	2008      	movs	r0, #8
 80140bc:	f001 fefc 	bl	8015eb8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80140c0:	2200      	movs	r2, #0
 80140c2:	2105      	movs	r1, #5
 80140c4:	2017      	movs	r0, #23
 80140c6:	f001 fedb 	bl	8015e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80140ca:	2017      	movs	r0, #23
 80140cc:	f001 fef4 	bl	8015eb8 <HAL_NVIC_EnableIRQ>

}
 80140d0:	bf00      	nop
 80140d2:	3730      	adds	r7, #48	; 0x30
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	40023800 	.word	0x40023800
 80140dc:	40021000 	.word	0x40021000
 80140e0:	40020400 	.word	0x40020400
 80140e4:	40020c00 	.word	0x40020c00

080140e8 <One_Time_Task>:




void One_Time_Task (void *argument)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
	while (1)
	{

		switch (_CurrentWaveFormState)
 80140f0:	4b42      	ldr	r3, [pc, #264]	; (80141fc <One_Time_Task+0x114>)
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	2b02      	cmp	r3, #2
 80140f6:	d07d      	beq.n	80141f4 <One_Time_Task+0x10c>
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	dc7d      	bgt.n	80141f8 <One_Time_Task+0x110>
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d002      	beq.n	8014106 <One_Time_Task+0x1e>
 8014100:	2b01      	cmp	r3, #1
 8014102:	d044      	beq.n	801418e <One_Time_Task+0xa6>
			break;

		case NoWaveFormState:
			break;
		default:
			break;
 8014104:	e078      	b.n	80141f8 <One_Time_Task+0x110>
			switch (S1._Mode_Val)
 8014106:	4b3e      	ldr	r3, [pc, #248]	; (8014200 <One_Time_Task+0x118>)
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	3b01      	subs	r3, #1
 801410c:	2b0a      	cmp	r3, #10
 801410e:	d82b      	bhi.n	8014168 <One_Time_Task+0x80>
 8014110:	a201      	add	r2, pc, #4	; (adr r2, 8014118 <One_Time_Task+0x30>)
 8014112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014116:	bf00      	nop
 8014118:	08014145 	.word	0x08014145
 801411c:	0801414b 	.word	0x0801414b
 8014120:	08014151 	.word	0x08014151
 8014124:	08014157 	.word	0x08014157
 8014128:	08014169 	.word	0x08014169
 801412c:	08014169 	.word	0x08014169
 8014130:	08014169 	.word	0x08014169
 8014134:	08014169 	.word	0x08014169
 8014138:	08014169 	.word	0x08014169
 801413c:	0801415d 	.word	0x0801415d
 8014140:	08014163 	.word	0x08014163
				PC_CMV_Pulse_I_Parameter();
 8014144:	f7f8 fdf2 	bl	800cd2c <PC_CMV_Pulse_I_Parameter>
				break;
 8014148:	e020      	b.n	801418c <One_Time_Task+0xa4>
				VC_CMV_Pulse_I_Parameter();
 801414a:	f7fe fab7 	bl	80126bc <VC_CMV_Pulse_I_Parameter>
				break;
 801414e:	e01d      	b.n	801418c <One_Time_Task+0xa4>
				PC_SIMV_Pulse_I_Parameter();
 8014150:	f7f7 f81c 	bl	800b18c <PC_SIMV_Pulse_I_Parameter>
			    break;
 8014154:	e01a      	b.n	801418c <One_Time_Task+0xa4>
				VC_SIMV_Pulse_I_Parameter();
 8014156:	f7fd f885 	bl	8011264 <VC_SIMV_Pulse_I_Parameter>
		    	break;
 801415a:	e017      	b.n	801418c <One_Time_Task+0xa4>
				  BACKUP_PC_SIMV_Pulse_I_Parameter();
 801415c:	f7f0 fcec 	bl	8004b38 <BACKUP_PC_SIMV_Pulse_I_Parameter>
				break;
 8014160:	e014      	b.n	801418c <One_Time_Task+0xa4>
				 BACKUP_VC_SIMV_Pulse_I_Parameter();
 8014162:	f7f2 ff93 	bl	800708c <BACKUP_VC_SIMV_Pulse_I_Parameter>
				break;
 8014166:	e011      	b.n	801418c <One_Time_Task+0xa4>
				Main_Supply_or_Battery_Indication();
 8014168:	f7ed feb0 	bl	8001ecc <Main_Supply_or_Battery_Indication>
				vol.Volume = 0;
 801416c:	4b25      	ldr	r3, [pc, #148]	; (8014204 <One_Time_Task+0x11c>)
 801416e:	f04f 0200 	mov.w	r2, #0
 8014172:	605a      	str	r2, [r3, #4]
				A.Alert_Now=1;
 8014174:	4b24      	ldr	r3, [pc, #144]	; (8014208 <One_Time_Task+0x120>)
 8014176:	2201      	movs	r2, #1
 8014178:	70da      	strb	r2, [r3, #3]
				 Flow_sensor.AW_Flow_Offset=Flow_sensor.AW_flow_milli_volt;
 801417a:	4b24      	ldr	r3, [pc, #144]	; (801420c <One_Time_Task+0x124>)
 801417c:	88da      	ldrh	r2, [r3, #6]
 801417e:	4b23      	ldr	r3, [pc, #140]	; (801420c <One_Time_Task+0x124>)
 8014180:	801a      	strh	r2, [r3, #0]
				vTaskDelay(2000);
 8014182:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014186:	f00b fb71 	bl	801f86c <vTaskDelay>
				break;
 801418a:	bf00      	nop
			break;
 801418c:	e035      	b.n	80141fa <One_Time_Task+0x112>
			switch (S1._Mode_Val)
 801418e:	4b1c      	ldr	r3, [pc, #112]	; (8014200 <One_Time_Task+0x118>)
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	3b01      	subs	r3, #1
 8014194:	2b0a      	cmp	r3, #10
 8014196:	d82b      	bhi.n	80141f0 <One_Time_Task+0x108>
 8014198:	a201      	add	r2, pc, #4	; (adr r2, 80141a0 <One_Time_Task+0xb8>)
 801419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801419e:	bf00      	nop
 80141a0:	080141cd 	.word	0x080141cd
 80141a4:	080141d3 	.word	0x080141d3
 80141a8:	080141d9 	.word	0x080141d9
 80141ac:	080141df 	.word	0x080141df
 80141b0:	080141f1 	.word	0x080141f1
 80141b4:	080141f1 	.word	0x080141f1
 80141b8:	080141f1 	.word	0x080141f1
 80141bc:	080141f1 	.word	0x080141f1
 80141c0:	080141f1 	.word	0x080141f1
 80141c4:	080141e5 	.word	0x080141e5
 80141c8:	080141eb 	.word	0x080141eb
				PC_CMV_Pulse_E_Parameter();
 80141cc:	f7f8 fe28 	bl	800ce20 <PC_CMV_Pulse_E_Parameter>
				break;
 80141d0:	e00f      	b.n	80141f2 <One_Time_Task+0x10a>
				VC_CMV_Pulse_E_Parameter();
 80141d2:	f7fe fb75 	bl	80128c0 <VC_CMV_Pulse_E_Parameter>
				break;
 80141d6:	e00c      	b.n	80141f2 <One_Time_Task+0x10a>
				PC_SIMV_Pulse_E_Parameter();
 80141d8:	f7f7 f914 	bl	800b404 <PC_SIMV_Pulse_E_Parameter>
				break;
 80141dc:	e009      	b.n	80141f2 <One_Time_Task+0x10a>
				VC_SIMV_Pulse_E_Parameter();
 80141de:	f7fd fa15 	bl	801160c <VC_SIMV_Pulse_E_Parameter>
				break;
 80141e2:	e006      	b.n	80141f2 <One_Time_Task+0x10a>
				BACKUP_PC_SIMV_Pulse_E_Parameter();
 80141e4:	f7f0 fd68 	bl	8004cb8 <BACKUP_PC_SIMV_Pulse_E_Parameter>
				break;
 80141e8:	e003      	b.n	80141f2 <One_Time_Task+0x10a>
				BACKUP_VC_SIMV_Pulse_E_Parameter();
 80141ea:	f7f3 f88f 	bl	800730c <BACKUP_VC_SIMV_Pulse_E_Parameter>
				break;
 80141ee:	e000      	b.n	80141f2 <One_Time_Task+0x10a>
				break;
 80141f0:	bf00      	nop
			break;
 80141f2:	e002      	b.n	80141fa <One_Time_Task+0x112>
			break;
 80141f4:	bf00      	nop
 80141f6:	e77b      	b.n	80140f0 <One_Time_Task+0x8>
			break;
 80141f8:	bf00      	nop
		switch (_CurrentWaveFormState)
 80141fa:	e779      	b.n	80140f0 <One_Time_Task+0x8>
 80141fc:	20016adc 	.word	0x20016adc
 8014200:	20016ae0 	.word	0x20016ae0
 8014204:	20016d44 	.word	0x20016d44
 8014208:	20016a2c 	.word	0x20016a2c
 801420c:	20016914 	.word	0x20016914

08014210 <Offset_Task>:
	}

}

void Offset_Task (void *argument)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	while (1)
	{

		vTaskSuspend(pc_mode_Handler);
 8014218:	4b5b      	ldr	r3, [pc, #364]	; (8014388 <Offset_Task+0x178>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4618      	mov	r0, r3
 801421e:	f00b fb59 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Pc_cmv_Pid_Handler);
 8014222:	4b5a      	ldr	r3, [pc, #360]	; (801438c <Offset_Task+0x17c>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4618      	mov	r0, r3
 8014228:	f00b fb54 	bl	801f8d4 <vTaskSuspend>
		vTaskSuspend(Vc_mode_Handler);
 801422c:	4b58      	ldr	r3, [pc, #352]	; (8014390 <Offset_Task+0x180>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4618      	mov	r0, r3
 8014232:	f00b fb4f 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Vc_cmv_Pid_Handler);
 8014236:	4b57      	ldr	r3, [pc, #348]	; (8014394 <Offset_Task+0x184>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	4618      	mov	r0, r3
 801423c:	f00b fb4a 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Pc_simv_Mode_Handler);
 8014240:	4b55      	ldr	r3, [pc, #340]	; (8014398 <Offset_Task+0x188>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4618      	mov	r0, r3
 8014246:	f00b fb45 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Pc_simv_Mode_Handler);
 801424a:	4b53      	ldr	r3, [pc, #332]	; (8014398 <Offset_Task+0x188>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	4618      	mov	r0, r3
 8014250:	f00b fb40 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Vc_simv_mode_Handler);
 8014254:	4b51      	ldr	r3, [pc, #324]	; (801439c <Offset_Task+0x18c>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4618      	mov	r0, r3
 801425a:	f00b fb3b 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Vc_simv_Pid_Handler);
 801425e:	4b50      	ldr	r3, [pc, #320]	; (80143a0 <Offset_Task+0x190>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4618      	mov	r0, r3
 8014264:	f00b fb36 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Psv_Handler);
 8014268:	4b4e      	ldr	r3, [pc, #312]	; (80143a4 <Offset_Task+0x194>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	4618      	mov	r0, r3
 801426e:	f00b fb31 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Psv_Pid_Handler);
 8014272:	4b4d      	ldr	r3, [pc, #308]	; (80143a8 <Offset_Task+0x198>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	4618      	mov	r0, r3
 8014278:	f00b fb2c 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Cpap_Handler);
 801427c:	4b4b      	ldr	r3, [pc, #300]	; (80143ac <Offset_Task+0x19c>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4618      	mov	r0, r3
 8014282:	f00b fb27 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(BiPap_Handler);
 8014286:	4b4a      	ldr	r3, [pc, #296]	; (80143b0 <Offset_Task+0x1a0>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4618      	mov	r0, r3
 801428c:	f00b fb22 	bl	801f8d4 <vTaskSuspend>
	   	vTaskSuspend(BiPap_Pid_Handler);
 8014290:	4b48      	ldr	r3, [pc, #288]	; (80143b4 <Offset_Task+0x1a4>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4618      	mov	r0, r3
 8014296:	f00b fb1d 	bl	801f8d4 <vTaskSuspend>
	   	vTaskSuspend(APRV_Handler);
 801429a:	4b47      	ldr	r3, [pc, #284]	; (80143b8 <Offset_Task+0x1a8>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4618      	mov	r0, r3
 80142a0:	f00b fb18 	bl	801f8d4 <vTaskSuspend>
	   	vTaskSuspend(APRV_one_Handler);
 80142a4:	4b45      	ldr	r3, [pc, #276]	; (80143bc <Offset_Task+0x1ac>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f00b fb13 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 80142ae:	4b44      	ldr	r3, [pc, #272]	; (80143c0 <Offset_Task+0x1b0>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4618      	mov	r0, r3
 80142b4:	f00b fb0e 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 80142b8:	4b42      	ldr	r3, [pc, #264]	; (80143c4 <Offset_Task+0x1b4>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4618      	mov	r0, r3
 80142be:	f00b fb09 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Back_Up_VC_CMV_Mode_Handler);
 80142c2:	4b41      	ldr	r3, [pc, #260]	; (80143c8 <Offset_Task+0x1b8>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f00b fb04 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(PID_Back_Up_VC_CMV_Mode_Handler);
 80142cc:	4b3f      	ldr	r3, [pc, #252]	; (80143cc <Offset_Task+0x1bc>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4618      	mov	r0, r3
 80142d2:	f00b faff 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Oxygen_Handler);
 80142d6:	4b3e      	ldr	r3, [pc, #248]	; (80143d0 <Offset_Task+0x1c0>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4618      	mov	r0, r3
 80142dc:	f00b fafa 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(alert_Handler);
 80142e0:	4b3c      	ldr	r3, [pc, #240]	; (80143d4 <Offset_Task+0x1c4>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f00b faf5 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Calibration_Handler);
 80142ea:	4b3b      	ldr	r3, [pc, #236]	; (80143d8 <Offset_Task+0x1c8>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f00b faf0 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Service_Handler);
 80142f4:	4b39      	ldr	r3, [pc, #228]	; (80143dc <Offset_Task+0x1cc>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f00b faeb 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Nebuliser_Handler);
 80142fe:	4b38      	ldr	r3, [pc, #224]	; (80143e0 <Offset_Task+0x1d0>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	4618      	mov	r0, r3
 8014304:	f00b fae6 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(HFNC_Handler);
 8014308:	4b36      	ldr	r3, [pc, #216]	; (80143e4 <Offset_Task+0x1d4>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	4618      	mov	r0, r3
 801430e:	f00b fae1 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Suction_Handler);
 8014312:	4b35      	ldr	r3, [pc, #212]	; (80143e8 <Offset_Task+0x1d8>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	4618      	mov	r0, r3
 8014318:	f00b fadc 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Shutdown_Handler);
 801431c:	4b33      	ldr	r3, [pc, #204]	; (80143ec <Offset_Task+0x1dc>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4618      	mov	r0, r3
 8014322:	f00b fad7 	bl	801f8d4 <vTaskSuspend>


	    vTaskSuspend(Two_Milli_Second_Handler);
 8014326:	4b32      	ldr	r3, [pc, #200]	; (80143f0 <Offset_Task+0x1e0>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4618      	mov	r0, r3
 801432c:	f00b fad2 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Sensor_Read_Handler);
 8014330:	4b30      	ldr	r3, [pc, #192]	; (80143f4 <Offset_Task+0x1e4>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4618      	mov	r0, r3
 8014336:	f00b facd 	bl	801f8d4 <vTaskSuspend>
	    vTaskSuspend(Uart_Transmit_Handler);
 801433a:	4b2f      	ldr	r3, [pc, #188]	; (80143f8 <Offset_Task+0x1e8>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	4618      	mov	r0, r3
 8014340:	f00b fac8 	bl	801f8d4 <vTaskSuspend>


	    vTaskDelay(1000);
 8014344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014348:	f00b fa90 	bl	801f86c <vTaskDelay>
	    battery_old=100;
 801434c:	4b2b      	ldr	r3, [pc, #172]	; (80143fc <Offset_Task+0x1ec>)
 801434e:	2264      	movs	r2, #100	; 0x64
 8014350:	701a      	strb	r2, [r3, #0]

		Pressure_Sensor_offset();
 8014352:	f7fa f805 	bl	800e360 <Pressure_Sensor_offset>
		Flow_Sensor_7002_offset();
 8014356:	f7f5 fa35 	bl	80097c4 <Flow_Sensor_7002_offset>
		O2_Flow_offset();
 801435a:	f7f6 fcf9 	bl	800ad50 <O2_Flow_offset>

		vTaskResume(Two_Milli_Second_Handler);
 801435e:	4b24      	ldr	r3, [pc, #144]	; (80143f0 <Offset_Task+0x1e0>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	4618      	mov	r0, r3
 8014364:	f00b fb7a 	bl	801fa5c <vTaskResume>
		vTaskResume(Sensor_Read_Handler);
 8014368:	4b22      	ldr	r3, [pc, #136]	; (80143f4 <Offset_Task+0x1e4>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4618      	mov	r0, r3
 801436e:	f00b fb75 	bl	801fa5c <vTaskResume>
		vTaskResume(Uart_Transmit_Handler);
 8014372:	4b21      	ldr	r3, [pc, #132]	; (80143f8 <Offset_Task+0x1e8>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	4618      	mov	r0, r3
 8014378:	f00b fb70 	bl	801fa5c <vTaskResume>

		vTaskDelete(Sensor_Offset_Handler);
 801437c:	4b20      	ldr	r3, [pc, #128]	; (8014400 <Offset_Task+0x1f0>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4618      	mov	r0, r3
 8014382:	f00b f9e3 	bl	801f74c <vTaskDelete>
		vTaskSuspend(pc_mode_Handler);
 8014386:	e747      	b.n	8014218 <Offset_Task+0x8>
 8014388:	20016a84 	.word	0x20016a84
 801438c:	20016a28 	.word	0x20016a28
 8014390:	20016d78 	.word	0x20016d78
 8014394:	2001695c 	.word	0x2001695c
 8014398:	20016e60 	.word	0x20016e60
 801439c:	20016c44 	.word	0x20016c44
 80143a0:	20016ad0 	.word	0x20016ad0
 80143a4:	20016bf0 	.word	0x20016bf0
 80143a8:	20016a74 	.word	0x20016a74
 80143ac:	20016bb8 	.word	0x20016bb8
 80143b0:	20016a24 	.word	0x20016a24
 80143b4:	20016878 	.word	0x20016878
 80143b8:	20016c00 	.word	0x20016c00
 80143bc:	20016bc8 	.word	0x20016bc8
 80143c0:	20016bcc 	.word	0x20016bcc
 80143c4:	20016d3c 	.word	0x20016d3c
 80143c8:	20016d7c 	.word	0x20016d7c
 80143cc:	20016a7c 	.word	0x20016a7c
 80143d0:	20016958 	.word	0x20016958
 80143d4:	20016ad4 	.word	0x20016ad4
 80143d8:	20016cd0 	.word	0x20016cd0
 80143dc:	200168c8 	.word	0x200168c8
 80143e0:	20016a94 	.word	0x20016a94
 80143e4:	20016a20 	.word	0x20016a20
 80143e8:	20016e5c 	.word	0x20016e5c
 80143ec:	20016d24 	.word	0x20016d24
 80143f0:	20017000 	.word	0x20017000
 80143f4:	20016ffc 	.word	0x20016ffc
 80143f8:	20016f98 	.word	0x20016f98
 80143fc:	20016900 	.word	0x20016900
 8014400:	20016ef4 	.word	0x20016ef4

08014404 <Sensor_Data_Read_Task>:

	}
}

void Sensor_Data_Read_Task (void *argument)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//xSemaphoreTake(binarysem,portMAX_DELAY);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 801440c:	2201      	movs	r2, #1
 801440e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014412:	4815      	ldr	r0, [pc, #84]	; (8014468 <Sensor_Data_Read_Task+0x64>)
 8014414:	f002 fc46 	bl	8016ca4 <HAL_GPIO_WritePin>
		Pressure_Sensor_Value();
 8014418:	f7f9 ffc4 	bl	800e3a4 <Pressure_Sensor_Value>
		Temp = Pressure_sensor._Pressure_Val;
 801441c:	4b13      	ldr	r3, [pc, #76]	; (801446c <Sensor_Data_Read_Task+0x68>)
 801441e:	791b      	ldrb	r3, [r3, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7ec f817 	bl	8000454 <__aeabi_ui2d>
 8014426:	4602      	mov	r2, r0
 8014428:	460b      	mov	r3, r1
 801442a:	4911      	ldr	r1, [pc, #68]	; (8014470 <Sensor_Data_Read_Task+0x6c>)
 801442c:	e9c1 2300 	strd	r2, r3, [r1]
		Flow_Sensor_Value();
 8014430:	f7f5 fbda 	bl	8009be8 <Flow_Sensor_Value>
		Temp_Flow=Flow_Sensor_cal._Flow_Val;
 8014434:	4b0f      	ldr	r3, [pc, #60]	; (8014474 <Sensor_Data_Read_Task+0x70>)
 8014436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014438:	4618      	mov	r0, r3
 801443a:	f7ec f81b 	bl	8000474 <__aeabi_i2d>
 801443e:	4602      	mov	r2, r0
 8014440:	460b      	mov	r3, r1
 8014442:	490d      	ldr	r1, [pc, #52]	; (8014478 <Sensor_Data_Read_Task+0x74>)
 8014444:	e9c1 2300 	strd	r2, r3, [r1]
		Get_Volume();
 8014448:	f7f5 f8a2 	bl	8009590 <Get_Volume>
		Get_Oxygen();
 801444c:	f7f6 fae2 	bl	800aa14 <Get_Oxygen>
		Battery_Status();
 8014450:	f7ee f992 	bl	8002778 <Battery_Status>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8014454:	2200      	movs	r2, #0
 8014456:	f44f 7100 	mov.w	r1, #512	; 0x200
 801445a:	4803      	ldr	r0, [pc, #12]	; (8014468 <Sensor_Data_Read_Task+0x64>)
 801445c:	f002 fc22 	bl	8016ca4 <HAL_GPIO_WritePin>
		//xSemaphoreGive(binarysem);
		vTaskDelay(2);
 8014460:	2002      	movs	r0, #2
 8014462:	f00b fa03 	bl	801f86c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8014466:	e7d1      	b.n	801440c <Sensor_Data_Read_Task+0x8>
 8014468:	40020400 	.word	0x40020400
 801446c:	20016cfc 	.word	0x20016cfc
 8014470:	20016a98 	.word	0x20016a98
 8014474:	20016c48 	.word	0x20016c48
 8014478:	20016b30 	.word	0x20016b30

0801447c <Two_Milli_Second_Task>:
}



void Two_Milli_Second_Task (void *argument)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
	while (1)
	{


		if(_E_TIMER>0)
 8014484:	4b8c      	ldr	r3, [pc, #560]	; (80146b8 <Two_Milli_Second_Task+0x23c>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d05b      	beq.n	8014544 <Two_Milli_Second_Task+0xc8>
		{

			_E_TIMER=_E_TIMER-1 ;
 801448c:	4b8a      	ldr	r3, [pc, #552]	; (80146b8 <Two_Milli_Second_Task+0x23c>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	3b01      	subs	r3, #1
 8014492:	4a89      	ldr	r2, [pc, #548]	; (80146b8 <Two_Milli_Second_Task+0x23c>)
 8014494:	6013      	str	r3, [r2, #0]
			_E_TIMER_ACHEIVED=_E_TIMER_ACHEIVED+1;
 8014496:	4b89      	ldr	r3, [pc, #548]	; (80146bc <Two_Milli_Second_Task+0x240>)
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	3301      	adds	r3, #1
 801449c:	b29a      	uxth	r2, r3
 801449e:	4b87      	ldr	r3, [pc, #540]	; (80146bc <Two_Milli_Second_Task+0x240>)
 80144a0:	801a      	strh	r2, [r3, #0]
				if(_E_TIMER<100)
 80144a2:	4b85      	ldr	r3, [pc, #532]	; (80146b8 <Two_Milli_Second_Task+0x23c>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b63      	cmp	r3, #99	; 0x63
 80144a8:	d82f      	bhi.n	801450a <Two_Milli_Second_Task+0x8e>
				{
					S5._Peep_Avg+=Pressure_sensor._Pressure_Val;
 80144aa:	4b85      	ldr	r3, [pc, #532]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80144b0:	4b84      	ldr	r3, [pc, #528]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 80144b2:	791b      	ldrb	r3, [r3, #4]
 80144b4:	ee07 3a90 	vmov	s15, r3
 80144b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144c0:	4b7f      	ldr	r3, [pc, #508]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144c2:	edc3 7a05 	vstr	s15, [r3, #20]
					S5._Peep_Avg_count++;
 80144c6:	4b7e      	ldr	r3, [pc, #504]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80144cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144d4:	4b7a      	ldr	r3, [pc, #488]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144d6:	edc3 7a08 	vstr	s15, [r3, #32]
						if(S5.peep_max<Pressure_sensor._Pressure_Val)
 80144da:	4b79      	ldr	r3, [pc, #484]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144de:	4a79      	ldr	r2, [pc, #484]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 80144e0:	7912      	ldrb	r2, [r2, #4]
 80144e2:	4293      	cmp	r3, r2
 80144e4:	da04      	bge.n	80144f0 <Two_Milli_Second_Task+0x74>
						{
							S5.peep_max=Pressure_sensor._Pressure_Val;
 80144e6:	4b77      	ldr	r3, [pc, #476]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 80144e8:	791b      	ldrb	r3, [r3, #4]
 80144ea:	461a      	mov	r2, r3
 80144ec:	4b74      	ldr	r3, [pc, #464]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80144ee:	641a      	str	r2, [r3, #64]	; 0x40
						}

						if(A.Alert==1)
 80144f0:	4b75      	ldr	r3, [pc, #468]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 80144f2:	789b      	ldrb	r3, [r3, #2]
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d104      	bne.n	8014502 <Two_Milli_Second_Task+0x86>
							A.Red_Led_Alert=1;
 80144f8:	4b73      	ldr	r3, [pc, #460]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014500:	e003      	b.n	801450a <Two_Milli_Second_Task+0x8e>
						else
							A.Red_Led_Alert=0;
 8014502:	4b71      	ldr	r3, [pc, #452]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 8014504:	2200      	movs	r2, #0
 8014506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				}



				if(_E_TIMER_ACHEIVED>500)
 801450a:	4b6c      	ldr	r3, [pc, #432]	; (80146bc <Two_Milli_Second_Task+0x240>)
 801450c:	881b      	ldrh	r3, [r3, #0]
 801450e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8014512:	d917      	bls.n	8014544 <Two_Milli_Second_Task+0xc8>
				{
					S5._Peep_Avg_trigger+=Pressure_sensor._Pressure_Val;
 8014514:	4b6a      	ldr	r3, [pc, #424]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 8014516:	ed93 7a06 	vldr	s14, [r3, #24]
 801451a:	4b6a      	ldr	r3, [pc, #424]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 801451c:	791b      	ldrb	r3, [r3, #4]
 801451e:	ee07 3a90 	vmov	s15, r3
 8014522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801452a:	4b65      	ldr	r3, [pc, #404]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 801452c:	edc3 7a06 	vstr	s15, [r3, #24]
					S5._Peep_Avg_count_trigger++;
 8014530:	4b63      	ldr	r3, [pc, #396]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 8014532:	edd3 7a07 	vldr	s15, [r3, #28]
 8014536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801453a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801453e:	4b60      	ldr	r3, [pc, #384]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 8014540:	edc3 7a07 	vstr	s15, [r3, #28]
				}

		}
		if(_I_TIMER>0)
 8014544:	4b61      	ldr	r3, [pc, #388]	; (80146cc <Two_Milli_Second_Task+0x250>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d02c      	beq.n	80145a6 <Two_Milli_Second_Task+0x12a>
		{
			_I_TIMER=_I_TIMER-1 ;
 801454c:	4b5f      	ldr	r3, [pc, #380]	; (80146cc <Two_Milli_Second_Task+0x250>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	3b01      	subs	r3, #1
 8014552:	4a5e      	ldr	r2, [pc, #376]	; (80146cc <Two_Milli_Second_Task+0x250>)
 8014554:	6013      	str	r3, [r2, #0]
			_I_TIMER_ACHEIVED=_I_TIMER_ACHEIVED+1;
 8014556:	4b5e      	ldr	r3, [pc, #376]	; (80146d0 <Two_Milli_Second_Task+0x254>)
 8014558:	881b      	ldrh	r3, [r3, #0]
 801455a:	3301      	adds	r3, #1
 801455c:	b29a      	uxth	r2, r3
 801455e:	4b5c      	ldr	r3, [pc, #368]	; (80146d0 <Two_Milli_Second_Task+0x254>)
 8014560:	801a      	strh	r2, [r3, #0]
			    if(_I_TIMER_ACHEIVED>100)
 8014562:	4b5b      	ldr	r3, [pc, #364]	; (80146d0 <Two_Milli_Second_Task+0x254>)
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	2b64      	cmp	r3, #100	; 0x64
 8014568:	d901      	bls.n	801456e <Two_Milli_Second_Task+0xf2>
				{
					 Pressure_Min_Max();
 801456a:	f7fe ffe3 	bl	8013534 <Pressure_Min_Max>
				}
			    if(_I_TIMER<200)
 801456e:	4b57      	ldr	r3, [pc, #348]	; (80146cc <Two_Milli_Second_Task+0x250>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	2bc7      	cmp	r3, #199	; 0xc7
 8014574:	d817      	bhi.n	80145a6 <Two_Milli_Second_Task+0x12a>
				{
					S5._Pip_Avg+=Pressure_sensor._Pressure_Val;
 8014576:	4b52      	ldr	r3, [pc, #328]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 8014578:	ed93 7a02 	vldr	s14, [r3, #8]
 801457c:	4b51      	ldr	r3, [pc, #324]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 801457e:	791b      	ldrb	r3, [r3, #4]
 8014580:	ee07 3a90 	vmov	s15, r3
 8014584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014588:	ee77 7a27 	vadd.f32	s15, s14, s15
 801458c:	4b4c      	ldr	r3, [pc, #304]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 801458e:	edc3 7a02 	vstr	s15, [r3, #8]
					S5._Pip_Avg_count++;
 8014592:	4b4b      	ldr	r3, [pc, #300]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 8014594:	edd3 7a03 	vldr	s15, [r3, #12]
 8014598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801459c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145a0:	4b47      	ldr	r3, [pc, #284]	; (80146c0 <Two_Milli_Second_Task+0x244>)
 80145a2:	edc3 7a03 	vstr	s15, [r3, #12]

				}


		}
		if(P1._APNEA_COUNTER  > 0)
 80145a6:	4b4b      	ldr	r3, [pc, #300]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d012      	beq.n	80145d4 <Two_Milli_Second_Task+0x158>
		{
			P1._APNEA_COUNTER=P1._APNEA_COUNTER -1 ;
 80145ae:	4b49      	ldr	r3, [pc, #292]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80145b2:	3b01      	subs	r3, #1
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	4b47      	ldr	r3, [pc, #284]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145b8:	849a      	strh	r2, [r3, #36]	; 0x24
			if(A.Alert==1)
 80145ba:	4b43      	ldr	r3, [pc, #268]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 80145bc:	789b      	ldrb	r3, [r3, #2]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d104      	bne.n	80145cc <Two_Milli_Second_Task+0x150>
				A.Red_Led_Alert=1;
 80145c2:	4b41      	ldr	r3, [pc, #260]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 80145c4:	2201      	movs	r2, #1
 80145c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80145ca:	e003      	b.n	80145d4 <Two_Milli_Second_Task+0x158>
			else
				A.Red_Led_Alert=0;
 80145cc:	4b3e      	ldr	r3, [pc, #248]	; (80146c8 <Two_Milli_Second_Task+0x24c>)
 80145ce:	2200      	movs	r2, #0
 80145d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		}

		if(P1._Apnea_counter_trigger_check_time>0)
 80145d4:	4b3f      	ldr	r3, [pc, #252]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145d6:	889b      	ldrh	r3, [r3, #4]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d005      	beq.n	80145e8 <Two_Milli_Second_Task+0x16c>
		{
			 P1._Apnea_counter_trigger_check_time=P1._Apnea_counter_trigger_check_time-1;
 80145dc:	4b3d      	ldr	r3, [pc, #244]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145de:	889b      	ldrh	r3, [r3, #4]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	4b3b      	ldr	r3, [pc, #236]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145e6:	809a      	strh	r2, [r3, #4]
		}

		if(P1.P_LOW_TIMER>0)
 80145e8:	4b3a      	ldr	r3, [pc, #232]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d021      	beq.n	8014634 <Two_Milli_Second_Task+0x1b8>
		{
			P1.P_LOW_TIMER=P1.P_LOW_TIMER-1;
 80145f0:	4b38      	ldr	r3, [pc, #224]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80145f4:	3b01      	subs	r3, #1
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	4b36      	ldr	r3, [pc, #216]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145fa:	879a      	strh	r2, [r3, #60]	; 0x3c
			if(P1.P_LOW_TIMER<100)
 80145fc:	4b35      	ldr	r3, [pc, #212]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 80145fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014600:	2b63      	cmp	r3, #99	; 0x63
 8014602:	d817      	bhi.n	8014634 <Two_Milli_Second_Task+0x1b8>
			{
			     _Peep_Avg+=Pressure_sensor._Pressure_Val;
 8014604:	4b2f      	ldr	r3, [pc, #188]	; (80146c4 <Two_Milli_Second_Task+0x248>)
 8014606:	791b      	ldrb	r3, [r3, #4]
 8014608:	ee07 3a90 	vmov	s15, r3
 801460c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014610:	4b31      	ldr	r3, [pc, #196]	; (80146d8 <Two_Milli_Second_Task+0x25c>)
 8014612:	edd3 7a00 	vldr	s15, [r3]
 8014616:	ee77 7a27 	vadd.f32	s15, s14, s15
 801461a:	4b2f      	ldr	r3, [pc, #188]	; (80146d8 <Two_Milli_Second_Task+0x25c>)
 801461c:	edc3 7a00 	vstr	s15, [r3]
			     _Peep_Avg_count++;
 8014620:	4b2e      	ldr	r3, [pc, #184]	; (80146dc <Two_Milli_Second_Task+0x260>)
 8014622:	edd3 7a00 	vldr	s15, [r3]
 8014626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801462a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801462e:	4b2b      	ldr	r3, [pc, #172]	; (80146dc <Two_Milli_Second_Task+0x260>)
 8014630:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if(P1.P_HIGH_TIMER>0)
 8014634:	4b27      	ldr	r3, [pc, #156]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 8014636:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014638:	2b00      	cmp	r3, #0
 801463a:	d005      	beq.n	8014648 <Two_Milli_Second_Task+0x1cc>
		{
			P1.P_HIGH_TIMER=P1.P_HIGH_TIMER-1;
 801463c:	4b25      	ldr	r3, [pc, #148]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 801463e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014640:	3b01      	subs	r3, #1
 8014642:	b29a      	uxth	r2, r3
 8014644:	4b23      	ldr	r3, [pc, #140]	; (80146d4 <Two_Milli_Second_Task+0x258>)
 8014646:	875a      	strh	r2, [r3, #58]	; 0x3a
		}

		if(Start_check_time>0)
 8014648:	4b25      	ldr	r3, [pc, #148]	; (80146e0 <Two_Milli_Second_Task+0x264>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	dd04      	ble.n	801465a <Two_Milli_Second_Task+0x1de>
		{
			Start_check_time=Start_check_time-1;
 8014650:	4b23      	ldr	r3, [pc, #140]	; (80146e0 <Two_Milli_Second_Task+0x264>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	3b01      	subs	r3, #1
 8014656:	4a22      	ldr	r2, [pc, #136]	; (80146e0 <Two_Milli_Second_Task+0x264>)
 8014658:	6013      	str	r3, [r2, #0]
		}

		if(_60_Seconds>0)
 801465a:	4b22      	ldr	r3, [pc, #136]	; (80146e4 <Two_Milli_Second_Task+0x268>)
 801465c:	881b      	ldrh	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d026      	beq.n	80146b0 <Two_Milli_Second_Task+0x234>
		{
			_60_Seconds=_60_Seconds-1;
 8014662:	4b20      	ldr	r3, [pc, #128]	; (80146e4 <Two_Milli_Second_Task+0x268>)
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	3b01      	subs	r3, #1
 8014668:	b29a      	uxth	r2, r3
 801466a:	4b1e      	ldr	r3, [pc, #120]	; (80146e4 <Two_Milli_Second_Task+0x268>)
 801466c:	801a      	strh	r2, [r3, #0]

			if(_60_Seconds==0)
 801466e:	4b1d      	ldr	r3, [pc, #116]	; (80146e4 <Two_Milli_Second_Task+0x268>)
 8014670:	881b      	ldrh	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d10a      	bne.n	801468c <Two_Milli_Second_Task+0x210>
			{
				new_Breath=Breath;
 8014676:	4b1c      	ldr	r3, [pc, #112]	; (80146e8 <Two_Milli_Second_Task+0x26c>)
 8014678:	781a      	ldrb	r2, [r3, #0]
 801467a:	4b1c      	ldr	r3, [pc, #112]	; (80146ec <Two_Milli_Second_Task+0x270>)
 801467c:	701a      	strb	r2, [r3, #0]
				_60_Seconds=60000;
 801467e:	4b19      	ldr	r3, [pc, #100]	; (80146e4 <Two_Milli_Second_Task+0x268>)
 8014680:	f64e 2260 	movw	r2, #60000	; 0xea60
 8014684:	801a      	strh	r2, [r3, #0]
				Breath=0;
 8014686:	4b18      	ldr	r3, [pc, #96]	; (80146e8 <Two_Milli_Second_Task+0x26c>)
 8014688:	2200      	movs	r2, #0
 801468a:	701a      	strb	r2, [r3, #0]
			}

				if(  ( ! ( _Control_Byte >> 8) & 1)  )
 801468c:	4b18      	ldr	r3, [pc, #96]	; (80146f0 <Two_Milli_Second_Task+0x274>)
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	121b      	asrs	r3, r3, #8
 8014692:	2b00      	cmp	r3, #0
 8014694:	d10c      	bne.n	80146b0 <Two_Milli_Second_Task+0x234>
				{
					if(now_check_breath==1)
 8014696:	4b17      	ldr	r3, [pc, #92]	; (80146f4 <Two_Milli_Second_Task+0x278>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d108      	bne.n	80146b0 <Two_Milli_Second_Task+0x234>
					{
						Breath++;
 801469e:	4b12      	ldr	r3, [pc, #72]	; (80146e8 <Two_Milli_Second_Task+0x26c>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	3301      	adds	r3, #1
 80146a4:	b2da      	uxtb	r2, r3
 80146a6:	4b10      	ldr	r3, [pc, #64]	; (80146e8 <Two_Milli_Second_Task+0x26c>)
 80146a8:	701a      	strb	r2, [r3, #0]
						now_check_breath=0;
 80146aa:	4b12      	ldr	r3, [pc, #72]	; (80146f4 <Two_Milli_Second_Task+0x278>)
 80146ac:	2200      	movs	r2, #0
 80146ae:	701a      	strb	r2, [r3, #0]


		}


		vTaskDelay(1);
 80146b0:	2001      	movs	r0, #1
 80146b2:	f00b f8db 	bl	801f86c <vTaskDelay>
		if(_E_TIMER>0)
 80146b6:	e6e5      	b.n	8014484 <Two_Milli_Second_Task+0x8>
 80146b8:	20016d74 	.word	0x20016d74
 80146bc:	20016eb4 	.word	0x20016eb4
 80146c0:	20016df4 	.word	0x20016df4
 80146c4:	20016cfc 	.word	0x20016cfc
 80146c8:	20016a2c 	.word	0x20016a2c
 80146cc:	20016df0 	.word	0x20016df0
 80146d0:	20016af4 	.word	0x20016af4
 80146d4:	20016960 	.word	0x20016960
 80146d8:	20016ccc 	.word	0x20016ccc
 80146dc:	20016888 	.word	0x20016888
 80146e0:	20000324 	.word	0x20000324
 80146e4:	20000fe8 	.word	0x20000fe8
 80146e8:	20000fea 	.word	0x20000fea
 80146ec:	20000fec 	.word	0x20000fec
 80146f0:	20016e59 	.word	0x20016e59
 80146f4:	20000feb 	.word	0x20000feb

080146f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4a04      	ldr	r2, [pc, #16]	; (8014718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8014706:	4293      	cmp	r3, r2
 8014708:	d101      	bne.n	801470e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801470a:	f000 feab 	bl	8015464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801470e:	bf00      	nop
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	40001000 	.word	0x40001000

0801471c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801471c:	b480      	push	{r7}
 801471e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8014720:	b672      	cpsid	i
}
 8014722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8014724:	e7fe      	b.n	8014724 <Error_Handler+0x8>

08014726 <PID_Init>:
int Speed=50;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8014726:	b580      	push	{r7, lr}
 8014728:	b082      	sub	sp, #8
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	6879      	ldr	r1, [r7, #4]
 8014746:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014756:	f7ec f987 	bl	8000a68 <__aeabi_dcmpgt>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d006      	beq.n	801476e <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014766:	6879      	ldr	r1, [r7, #4]
 8014768:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 801476c:	e011      	b.n	8014792 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 801477a:	f7ec f957 	bl	8000a2c <__aeabi_dcmplt>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	d100      	bne.n	8014786 <PID_Init+0x60>
}
 8014784:	e005      	b.n	8014792 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 801478c:	6879      	ldr	r1, [r7, #4]
 801478e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	0000      	movs	r0, r0
 801479c:	0000      	movs	r0, r0
	...

080147a0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b08a      	sub	sp, #40	; 0x28
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6278      	str	r0, [r7, #36]	; 0x24
 80147a8:	6239      	str	r1, [r7, #32]
 80147aa:	61fa      	str	r2, [r7, #28]
 80147ac:	61bb      	str	r3, [r7, #24]
 80147ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80147b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80147b6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	69fa      	ldr	r2, [r7, #28]
 80147be:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80147c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c2:	6a3a      	ldr	r2, [r7, #32]
 80147c4:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80147c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c8:	69ba      	ldr	r2, [r7, #24]
 80147ca:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	2200      	movs	r2, #0
 80147d0:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80147d2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8014828 <PID+0x88>
 80147d6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8014830 <PID+0x90>
 80147da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147dc:	f000 f934 	bl	8014a48 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80147e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e2:	2264      	movs	r2, #100	; 0x64
 80147e4:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80147e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80147ea:	4619      	mov	r1, r3
 80147ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147ee:	f000 fa49 	bl	8014c84 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80147f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80147f6:	4619      	mov	r1, r3
 80147f8:	ed97 2b00 	vldr	d2, [r7]
 80147fc:	ed97 1b02 	vldr	d1, [r7, #8]
 8014800:	ed97 0b04 	vldr	d0, [r7, #16]
 8014804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014806:	f000 f98d 	bl	8014b24 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 801480a:	f000 fe3f 	bl	801548c <HAL_GetTick>
 801480e:	4602      	mov	r2, r0
 8014810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014812:	689b      	ldr	r3, [r3, #8]
 8014814:	1ad2      	subs	r2, r2, r3
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	605a      	str	r2, [r3, #4]
	
}
 801481a:	bf00      	nop
 801481c:	3728      	adds	r7, #40	; 0x28
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	f3af 8000 	nop.w
 8014828:	00000000 	.word	0x00000000
 801482c:	406fe000 	.word	0x406fe000
	...

08014838 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8014838:	b5b0      	push	{r4, r5, r7, lr}
 801483a:	b08c      	sub	sp, #48	; 0x30
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	785b      	ldrb	r3, [r3, #1]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d101      	bne.n	801484c <PID_Compute+0x14>
	{
		return _FALSE;
 8014848:	2300      	movs	r3, #0
 801484a:	e0db      	b.n	8014a04 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 801484c:	f000 fe1e 	bl	801548c <HAL_GetTick>
 8014850:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014858:	1ad3      	subs	r3, r2, r3
 801485a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	689b      	ldr	r3, [r3, #8]
 8014860:	6a3a      	ldr	r2, [r7, #32]
 8014862:	429a      	cmp	r2, r3
 8014864:	f0c0 80cd 	bcc.w	8014a02 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014870:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014878:	e9d3 0100 	ldrd	r0, r1, [r3]
 801487c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014880:	f7eb fcaa 	bl	80001d8 <__aeabi_dsub>
 8014884:	4602      	mov	r2, r0
 8014886:	460b      	mov	r3, r1
 8014888:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8014892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014896:	f7eb fc9f 	bl	80001d8 <__aeabi_dsub>
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80148ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80148b2:	f7eb fe49 	bl	8000548 <__aeabi_dmul>
 80148b6:	4602      	mov	r2, r0
 80148b8:	460b      	mov	r3, r1
 80148ba:	4620      	mov	r0, r4
 80148bc:	4629      	mov	r1, r5
 80148be:	f7eb fc8d 	bl	80001dc <__adddf3>
 80148c2:	4602      	mov	r2, r0
 80148c4:	460b      	mov	r3, r1
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d114      	bne.n	80148fe <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80148e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80148e4:	f7eb fe30 	bl	8000548 <__aeabi_dmul>
 80148e8:	4602      	mov	r2, r0
 80148ea:	460b      	mov	r3, r1
 80148ec:	4620      	mov	r0, r4
 80148ee:	4629      	mov	r1, r5
 80148f0:	f7eb fc72 	bl	80001d8 <__aeabi_dsub>
 80148f4:	4602      	mov	r2, r0
 80148f6:	460b      	mov	r3, r1
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 801490a:	f7ec f8ad 	bl	8000a68 <__aeabi_dcmpgt>
 801490e:	4603      	mov	r3, r0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d006      	beq.n	8014922 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 801491a:	6879      	ldr	r1, [r7, #4]
 801491c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8014920:	e010      	b.n	8014944 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 801492e:	f7ec f87d 	bl	8000a2c <__aeabi_dcmplt>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d005      	beq.n	8014944 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 801493e:	6879      	ldr	r1, [r7, #4]
 8014940:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d00b      	beq.n	8014964 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8014952:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014956:	f7eb fdf7 	bl	8000548 <__aeabi_dmul>
 801495a:	4602      	mov	r2, r0
 801495c:	460b      	mov	r3, r1
 801495e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8014962:	e005      	b.n	8014970 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8014964:	f04f 0200 	mov.w	r2, #0
 8014968:	f04f 0300 	mov.w	r3, #0
 801496c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801497c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014980:	f7eb fde2 	bl	8000548 <__aeabi_dmul>
 8014984:	4602      	mov	r2, r0
 8014986:	460b      	mov	r3, r1
 8014988:	4620      	mov	r0, r4
 801498a:	4629      	mov	r1, r5
 801498c:	f7eb fc24 	bl	80001d8 <__aeabi_dsub>
 8014990:	4602      	mov	r2, r0
 8014992:	460b      	mov	r3, r1
 8014994:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014998:	f7eb fc20 	bl	80001dc <__adddf3>
 801499c:	4602      	mov	r2, r0
 801499e:	460b      	mov	r3, r1
 80149a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80149aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80149ae:	f7ec f85b 	bl	8000a68 <__aeabi_dcmpgt>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d005      	beq.n	80149c4 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80149be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80149c2:	e00e      	b.n	80149e2 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80149ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80149ce:	f7ec f82d 	bl	8000a2c <__aeabi_dcmplt>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d004      	beq.n	80149e2 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80149de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80149e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80149ea:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80149ee:	6879      	ldr	r1, [r7, #4]
 80149f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80149f4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149fc:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80149fe:	2301      	movs	r3, #1
 8014a00:	e000      	b.n	8014a04 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8014a02:	2300      	movs	r3, #0
	}
	
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3730      	adds	r7, #48	; 0x30
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bdb0      	pop	{r4, r5, r7, pc}

08014a0c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void  PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8014a18:	78fb      	ldrb	r3, [r7, #3]
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	bf0c      	ite	eq
 8014a1e:	2301      	moveq	r3, #1
 8014a20:	2300      	movne	r3, #0
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8014a26:	7bfb      	ldrb	r3, [r7, #15]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d006      	beq.n	8014a3a <PID_SetMode+0x2e>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	785b      	ldrb	r3, [r3, #1]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d102      	bne.n	8014a3a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f7ff fe76 	bl	8014726 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	7bfa      	ldrb	r2, [r7, #15]
 8014a3e:	705a      	strb	r2, [r3, #1]
	
}
 8014a40:	bf00      	nop
 8014a42:	3710      	adds	r7, #16
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6178      	str	r0, [r7, #20]
 8014a50:	ed87 0b02 	vstr	d0, [r7, #8]
 8014a54:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8014a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014a60:	f7eb fff8 	bl	8000a54 <__aeabi_dcmpge>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d158      	bne.n	8014b1c <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8014a6a:	6979      	ldr	r1, [r7, #20]
 8014a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a70:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8014a74:	6979      	ldr	r1, [r7, #20]
 8014a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a7a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	785b      	ldrb	r3, [r3, #1]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d04b      	beq.n	8014b1e <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014a94:	f7eb ffe8 	bl	8000a68 <__aeabi_dcmpgt>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d007      	beq.n	8014aae <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014aa8:	e9c1 2300 	strd	r2, r3, [r1]
 8014aac:	e012      	b.n	8014ad4 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8014abc:	f7eb ffb6 	bl	8000a2c <__aeabi_dcmplt>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d006      	beq.n	8014ad4 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8014ad0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014ae0:	f7eb ffc2 	bl	8000a68 <__aeabi_dcmpgt>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d006      	beq.n	8014af8 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8014af0:	6979      	ldr	r1, [r7, #20]
 8014af2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8014af6:	e012      	b.n	8014b1e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8014b04:	f7eb ff92 	bl	8000a2c <__aeabi_dcmplt>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d007      	beq.n	8014b1e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8014b14:	6979      	ldr	r1, [r7, #20]
 8014b16:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8014b1a:	e000      	b.n	8014b1e <PID_SetOutputLimits+0xd6>
		return;
 8014b1c:	bf00      	nop
		}
		else { }
		
	}
	
}
 8014b1e:	3718      	adds	r7, #24
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8014b24:	b5b0      	push	{r4, r5, r7, lr}
 8014b26:	b08a      	sub	sp, #40	; 0x28
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	61f8      	str	r0, [r7, #28]
 8014b2c:	ed87 0b04 	vstr	d0, [r7, #16]
 8014b30:	ed87 1b02 	vstr	d1, [r7, #8]
 8014b34:	ed87 2b00 	vstr	d2, [r7]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8014b3c:	f04f 0200 	mov.w	r2, #0
 8014b40:	f04f 0300 	mov.w	r3, #0
 8014b44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014b48:	f7eb ff70 	bl	8000a2c <__aeabi_dcmplt>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	f040 8092 	bne.w	8014c78 <PID_SetTunings2+0x154>
 8014b54:	f04f 0200 	mov.w	r2, #0
 8014b58:	f04f 0300 	mov.w	r3, #0
 8014b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014b60:	f7eb ff64 	bl	8000a2c <__aeabi_dcmplt>
 8014b64:	4603      	mov	r3, r0
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	f040 8086 	bne.w	8014c78 <PID_SetTunings2+0x154>
 8014b6c:	f04f 0200 	mov.w	r2, #0
 8014b70:	f04f 0300 	mov.w	r3, #0
 8014b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014b78:	f7eb ff58 	bl	8000a2c <__aeabi_dcmplt>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d17a      	bne.n	8014c78 <PID_SetTunings2+0x154>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	7efa      	ldrb	r2, [r7, #27]
 8014b86:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8014b88:	7efb      	ldrb	r3, [r7, #27]
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	bf0c      	ite	eq
 8014b8e:	2301      	moveq	r3, #1
 8014b90:	2300      	movne	r3, #0
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	461a      	mov	r2, r3
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8014b9a:	69f9      	ldr	r1, [r7, #28]
 8014b9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014ba0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8014ba4:	69f9      	ldr	r1, [r7, #28]
 8014ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014baa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8014bae:	69f9      	ldr	r1, [r7, #28]
 8014bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014bb4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / Speed;
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	689b      	ldr	r3, [r3, #8]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7eb fc49 	bl	8000454 <__aeabi_ui2d>
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	460d      	mov	r5, r1
 8014bc6:	4b2e      	ldr	r3, [pc, #184]	; (8014c80 <PID_SetTunings2+0x15c>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7eb fc52 	bl	8000474 <__aeabi_i2d>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	4629      	mov	r1, r5
 8014bd8:	f7eb fde0 	bl	800079c <__aeabi_ddiv>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8014be4:	69f9      	ldr	r1, [r7, #28]
 8014be6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014bea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8014bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014bf6:	f7eb fca7 	bl	8000548 <__aeabi_dmul>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	69f9      	ldr	r1, [r7, #28]
 8014c00:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8014c04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014c0c:	f7eb fdc6 	bl	800079c <__aeabi_ddiv>
 8014c10:	4602      	mov	r2, r0
 8014c12:	460b      	mov	r3, r1
 8014c14:	69f9      	ldr	r1, [r7, #28]
 8014c16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	78db      	ldrb	r3, [r3, #3]
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d12b      	bne.n	8014c7a <PID_SetTunings2+0x156>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8014c22:	69fb      	ldr	r3, [r7, #28]
 8014c24:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8014c28:	f04f 0000 	mov.w	r0, #0
 8014c2c:	f04f 0100 	mov.w	r1, #0
 8014c30:	f7eb fad2 	bl	80001d8 <__aeabi_dsub>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	69f9      	ldr	r1, [r7, #28]
 8014c3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8014c44:	f04f 0000 	mov.w	r0, #0
 8014c48:	f04f 0100 	mov.w	r1, #0
 8014c4c:	f7eb fac4 	bl	80001d8 <__aeabi_dsub>
 8014c50:	4602      	mov	r2, r0
 8014c52:	460b      	mov	r3, r1
 8014c54:	69f9      	ldr	r1, [r7, #28]
 8014c56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014c60:	f04f 0000 	mov.w	r0, #0
 8014c64:	f04f 0100 	mov.w	r1, #0
 8014c68:	f7eb fab6 	bl	80001d8 <__aeabi_dsub>
 8014c6c:	4602      	mov	r2, r0
 8014c6e:	460b      	mov	r3, r1
 8014c70:	69f9      	ldr	r1, [r7, #28]
 8014c72:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8014c76:	e000      	b.n	8014c7a <PID_SetTunings2+0x156>
		return;
 8014c78:	bf00      	nop
		
	}
	
}
 8014c7a:	3728      	adds	r7, #40	; 0x28
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8014c80:	20000144 	.word	0x20000144

08014c84 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	785b      	ldrb	r3, [r3, #1]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d02e      	beq.n	8014cf6 <PID_SetControllerDirection+0x72>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	78db      	ldrb	r3, [r3, #3]
 8014c9c:	78fa      	ldrb	r2, [r7, #3]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d029      	beq.n	8014cf6 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8014ca8:	f04f 0000 	mov.w	r0, #0
 8014cac:	f04f 0100 	mov.w	r1, #0
 8014cb0:	f7eb fa92 	bl	80001d8 <__aeabi_dsub>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	6879      	ldr	r1, [r7, #4]
 8014cba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8014cc4:	f04f 0000 	mov.w	r0, #0
 8014cc8:	f04f 0100 	mov.w	r1, #0
 8014ccc:	f7eb fa84 	bl	80001d8 <__aeabi_dsub>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	6879      	ldr	r1, [r7, #4]
 8014cd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8014ce0:	f04f 0000 	mov.w	r0, #0
 8014ce4:	f04f 0100 	mov.w	r1, #0
 8014ce8:	f7eb fa76 	bl	80001d8 <__aeabi_dsub>
 8014cec:	4602      	mov	r2, r0
 8014cee:	460b      	mov	r3, r1
 8014cf0:	6879      	ldr	r1, [r7, #4]
 8014cf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	78fa      	ldrb	r2, [r7, #3]
 8014cfa:	70da      	strb	r2, [r3, #3]
	
}
 8014cfc:	bf00      	nop
 8014cfe:	3708      	adds	r7, #8
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8014d04:	b5b0      	push	{r4, r5, r7, lr}
 8014d06:	b084      	sub	sp, #16
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	dd2e      	ble.n	8014d72 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8014d14:	6838      	ldr	r0, [r7, #0]
 8014d16:	f7eb fbad 	bl	8000474 <__aeabi_i2d>
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	460d      	mov	r5, r1
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	689b      	ldr	r3, [r3, #8]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7eb fb96 	bl	8000454 <__aeabi_ui2d>
 8014d28:	4602      	mov	r2, r0
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	4629      	mov	r1, r5
 8014d30:	f7eb fd34 	bl	800079c <__aeabi_ddiv>
 8014d34:	4602      	mov	r2, r0
 8014d36:	460b      	mov	r3, r1
 8014d38:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8014d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014d46:	f7eb fbff 	bl	8000548 <__aeabi_dmul>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	6879      	ldr	r1, [r7, #4]
 8014d50:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014d5e:	f7eb fd1d 	bl	800079c <__aeabi_ddiv>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	6879      	ldr	r1, [r7, #4]
 8014d68:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8014d6c:	683a      	ldr	r2, [r7, #0]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8014d72:	bf00      	nop
 8014d74:	3710      	adds	r7, #16
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014d82:	2300      	movs	r3, #0
 8014d84:	607b      	str	r3, [r7, #4]
 8014d86:	4b12      	ldr	r3, [pc, #72]	; (8014dd0 <HAL_MspInit+0x54>)
 8014d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d8a:	4a11      	ldr	r2, [pc, #68]	; (8014dd0 <HAL_MspInit+0x54>)
 8014d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014d90:	6453      	str	r3, [r2, #68]	; 0x44
 8014d92:	4b0f      	ldr	r3, [pc, #60]	; (8014dd0 <HAL_MspInit+0x54>)
 8014d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d9a:	607b      	str	r3, [r7, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014d9e:	2300      	movs	r3, #0
 8014da0:	603b      	str	r3, [r7, #0]
 8014da2:	4b0b      	ldr	r3, [pc, #44]	; (8014dd0 <HAL_MspInit+0x54>)
 8014da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014da6:	4a0a      	ldr	r2, [pc, #40]	; (8014dd0 <HAL_MspInit+0x54>)
 8014da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014dac:	6413      	str	r3, [r2, #64]	; 0x40
 8014dae:	4b08      	ldr	r3, [pc, #32]	; (8014dd0 <HAL_MspInit+0x54>)
 8014db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014db6:	603b      	str	r3, [r7, #0]
 8014db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014dba:	2200      	movs	r2, #0
 8014dbc:	210f      	movs	r1, #15
 8014dbe:	f06f 0001 	mvn.w	r0, #1
 8014dc2:	f001 f85d 	bl	8015e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014dc6:	bf00      	nop
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	40023800 	.word	0x40023800

08014dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b08a      	sub	sp, #40	; 0x28
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ddc:	f107 0314 	add.w	r3, r7, #20
 8014de0:	2200      	movs	r2, #0
 8014de2:	601a      	str	r2, [r3, #0]
 8014de4:	605a      	str	r2, [r3, #4]
 8014de6:	609a      	str	r2, [r3, #8]
 8014de8:	60da      	str	r2, [r3, #12]
 8014dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	4a3c      	ldr	r2, [pc, #240]	; (8014ee4 <HAL_ADC_MspInit+0x110>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d171      	bne.n	8014eda <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014df6:	2300      	movs	r3, #0
 8014df8:	613b      	str	r3, [r7, #16]
 8014dfa:	4b3b      	ldr	r3, [pc, #236]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dfe:	4a3a      	ldr	r2, [pc, #232]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e04:	6453      	str	r3, [r2, #68]	; 0x44
 8014e06:	4b38      	ldr	r3, [pc, #224]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e0e:	613b      	str	r3, [r7, #16]
 8014e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014e12:	2300      	movs	r3, #0
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	4b34      	ldr	r3, [pc, #208]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e1a:	4a33      	ldr	r2, [pc, #204]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e1c:	f043 0304 	orr.w	r3, r3, #4
 8014e20:	6313      	str	r3, [r2, #48]	; 0x30
 8014e22:	4b31      	ldr	r3, [pc, #196]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e26:	f003 0304 	and.w	r3, r3, #4
 8014e2a:	60fb      	str	r3, [r7, #12]
 8014e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e2e:	2300      	movs	r3, #0
 8014e30:	60bb      	str	r3, [r7, #8]
 8014e32:	4b2d      	ldr	r3, [pc, #180]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e36:	4a2c      	ldr	r2, [pc, #176]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e38:	f043 0301 	orr.w	r3, r3, #1
 8014e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8014e3e:	4b2a      	ldr	r3, [pc, #168]	; (8014ee8 <HAL_ADC_MspInit+0x114>)
 8014e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e42:	f003 0301 	and.w	r3, r3, #1
 8014e46:	60bb      	str	r3, [r7, #8]
 8014e48:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8014e4a:	2328      	movs	r3, #40	; 0x28
 8014e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014e4e:	2303      	movs	r3, #3
 8014e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e52:	2300      	movs	r3, #0
 8014e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014e56:	f107 0314 	add.w	r3, r7, #20
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	4823      	ldr	r0, [pc, #140]	; (8014eec <HAL_ADC_MspInit+0x118>)
 8014e5e:	f001 fd6d 	bl	801693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014e62:	230d      	movs	r3, #13
 8014e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014e66:	2303      	movs	r3, #3
 8014e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e6e:	f107 0314 	add.w	r3, r7, #20
 8014e72:	4619      	mov	r1, r3
 8014e74:	481e      	ldr	r0, [pc, #120]	; (8014ef0 <HAL_ADC_MspInit+0x11c>)
 8014e76:	f001 fd61 	bl	801693c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014e7a:	4b1e      	ldr	r3, [pc, #120]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e7c:	4a1e      	ldr	r2, [pc, #120]	; (8014ef8 <HAL_ADC_MspInit+0x124>)
 8014e7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014e80:	4b1c      	ldr	r3, [pc, #112]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014e86:	4b1b      	ldr	r3, [pc, #108]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014e8c:	4b19      	ldr	r3, [pc, #100]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e8e:	2200      	movs	r2, #0
 8014e90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014e92:	4b18      	ldr	r3, [pc, #96]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014e98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014e9a:	4b16      	ldr	r3, [pc, #88]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ea0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014ea2:	4b14      	ldr	r3, [pc, #80]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014ea8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014eaa:	4b12      	ldr	r3, [pc, #72]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8014eb2:	4b10      	ldr	r3, [pc, #64]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014eb8:	4b0e      	ldr	r3, [pc, #56]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014ebe:	480d      	ldr	r0, [pc, #52]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014ec0:	f001 f93a 	bl	8016138 <HAL_DMA_Init>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d001      	beq.n	8014ece <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8014eca:	f7ff fc27 	bl	801471c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4a08      	ldr	r2, [pc, #32]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014ed2:	639a      	str	r2, [r3, #56]	; 0x38
 8014ed4:	4a07      	ldr	r2, [pc, #28]	; (8014ef4 <HAL_ADC_MspInit+0x120>)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014eda:	bf00      	nop
 8014edc:	3728      	adds	r7, #40	; 0x28
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	40012000 	.word	0x40012000
 8014ee8:	40023800 	.word	0x40023800
 8014eec:	40020800 	.word	0x40020800
 8014ef0:	40020000 	.word	0x40020000
 8014ef4:	20016f9c 	.word	0x20016f9c
 8014ef8:	40026410 	.word	0x40026410

08014efc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b08a      	sub	sp, #40	; 0x28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f04:	f107 0314 	add.w	r3, r7, #20
 8014f08:	2200      	movs	r2, #0
 8014f0a:	601a      	str	r2, [r3, #0]
 8014f0c:	605a      	str	r2, [r3, #4]
 8014f0e:	609a      	str	r2, [r3, #8]
 8014f10:	60da      	str	r2, [r3, #12]
 8014f12:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	4a1b      	ldr	r2, [pc, #108]	; (8014f88 <HAL_DAC_MspInit+0x8c>)
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d12f      	bne.n	8014f7e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8014f1e:	2300      	movs	r3, #0
 8014f20:	613b      	str	r3, [r7, #16]
 8014f22:	4b1a      	ldr	r3, [pc, #104]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f26:	4a19      	ldr	r2, [pc, #100]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8014f2e:	4b17      	ldr	r3, [pc, #92]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014f36:	613b      	str	r3, [r7, #16]
 8014f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60fb      	str	r3, [r7, #12]
 8014f3e:	4b13      	ldr	r3, [pc, #76]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f42:	4a12      	ldr	r2, [pc, #72]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f44:	f043 0301 	orr.w	r3, r3, #1
 8014f48:	6313      	str	r3, [r2, #48]	; 0x30
 8014f4a:	4b10      	ldr	r3, [pc, #64]	; (8014f8c <HAL_DAC_MspInit+0x90>)
 8014f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f4e:	f003 0301 	and.w	r3, r3, #1
 8014f52:	60fb      	str	r3, [r7, #12]
 8014f54:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8014f56:	2330      	movs	r3, #48	; 0x30
 8014f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f62:	f107 0314 	add.w	r3, r7, #20
 8014f66:	4619      	mov	r1, r3
 8014f68:	4809      	ldr	r0, [pc, #36]	; (8014f90 <HAL_DAC_MspInit+0x94>)
 8014f6a:	f001 fce7 	bl	801693c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8014f6e:	2200      	movs	r2, #0
 8014f70:	210f      	movs	r1, #15
 8014f72:	2036      	movs	r0, #54	; 0x36
 8014f74:	f000 ff84 	bl	8015e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014f78:	2036      	movs	r0, #54	; 0x36
 8014f7a:	f000 ff9d 	bl	8015eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8014f7e:	bf00      	nop
 8014f80:	3728      	adds	r7, #40	; 0x28
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	40007400 	.word	0x40007400
 8014f8c:	40023800 	.word	0x40023800
 8014f90:	40020000 	.word	0x40020000

08014f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b08a      	sub	sp, #40	; 0x28
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f9c:	f107 0314 	add.w	r3, r7, #20
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	601a      	str	r2, [r3, #0]
 8014fa4:	605a      	str	r2, [r3, #4]
 8014fa6:	609a      	str	r2, [r3, #8]
 8014fa8:	60da      	str	r2, [r3, #12]
 8014faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	4a19      	ldr	r2, [pc, #100]	; (8015018 <HAL_I2C_MspInit+0x84>)
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d12c      	bne.n	8015010 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	613b      	str	r3, [r7, #16]
 8014fba:	4b18      	ldr	r3, [pc, #96]	; (801501c <HAL_I2C_MspInit+0x88>)
 8014fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fbe:	4a17      	ldr	r2, [pc, #92]	; (801501c <HAL_I2C_MspInit+0x88>)
 8014fc0:	f043 0302 	orr.w	r3, r3, #2
 8014fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8014fc6:	4b15      	ldr	r3, [pc, #84]	; (801501c <HAL_I2C_MspInit+0x88>)
 8014fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fca:	f003 0302 	and.w	r3, r3, #2
 8014fce:	613b      	str	r3, [r7, #16]
 8014fd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8014fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014fd8:	2312      	movs	r3, #18
 8014fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fe0:	2303      	movs	r3, #3
 8014fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8014fe4:	2304      	movs	r3, #4
 8014fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014fe8:	f107 0314 	add.w	r3, r7, #20
 8014fec:	4619      	mov	r1, r3
 8014fee:	480c      	ldr	r0, [pc, #48]	; (8015020 <HAL_I2C_MspInit+0x8c>)
 8014ff0:	f001 fca4 	bl	801693c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	60fb      	str	r3, [r7, #12]
 8014ff8:	4b08      	ldr	r3, [pc, #32]	; (801501c <HAL_I2C_MspInit+0x88>)
 8014ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ffc:	4a07      	ldr	r2, [pc, #28]	; (801501c <HAL_I2C_MspInit+0x88>)
 8014ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015002:	6413      	str	r3, [r2, #64]	; 0x40
 8015004:	4b05      	ldr	r3, [pc, #20]	; (801501c <HAL_I2C_MspInit+0x88>)
 8015006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801500c:	60fb      	str	r3, [r7, #12]
 801500e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8015010:	bf00      	nop
 8015012:	3728      	adds	r7, #40	; 0x28
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	40005800 	.word	0x40005800
 801501c:	40023800 	.word	0x40023800
 8015020:	40020400 	.word	0x40020400

08015024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015024:	b480      	push	{r7}
 8015026:	b085      	sub	sp, #20
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4a0b      	ldr	r2, [pc, #44]	; (8015060 <HAL_TIM_Base_MspInit+0x3c>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d10d      	bne.n	8015052 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8015036:	2300      	movs	r3, #0
 8015038:	60fb      	str	r3, [r7, #12]
 801503a:	4b0a      	ldr	r3, [pc, #40]	; (8015064 <HAL_TIM_Base_MspInit+0x40>)
 801503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801503e:	4a09      	ldr	r2, [pc, #36]	; (8015064 <HAL_TIM_Base_MspInit+0x40>)
 8015040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015044:	6413      	str	r3, [r2, #64]	; 0x40
 8015046:	4b07      	ldr	r3, [pc, #28]	; (8015064 <HAL_TIM_Base_MspInit+0x40>)
 8015048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801504e:	60fb      	str	r3, [r7, #12]
 8015050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8015052:	bf00      	nop
 8015054:	3714      	adds	r7, #20
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	40001800 	.word	0x40001800
 8015064:	40023800 	.word	0x40023800

08015068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b088      	sub	sp, #32
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015070:	f107 030c 	add.w	r3, r7, #12
 8015074:	2200      	movs	r2, #0
 8015076:	601a      	str	r2, [r3, #0]
 8015078:	605a      	str	r2, [r3, #4]
 801507a:	609a      	str	r2, [r3, #8]
 801507c:	60da      	str	r2, [r3, #12]
 801507e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4a12      	ldr	r2, [pc, #72]	; (80150d0 <HAL_TIM_MspPostInit+0x68>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d11e      	bne.n	80150c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801508a:	2300      	movs	r3, #0
 801508c:	60bb      	str	r3, [r7, #8]
 801508e:	4b11      	ldr	r3, [pc, #68]	; (80150d4 <HAL_TIM_MspPostInit+0x6c>)
 8015090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015092:	4a10      	ldr	r2, [pc, #64]	; (80150d4 <HAL_TIM_MspPostInit+0x6c>)
 8015094:	f043 0302 	orr.w	r3, r3, #2
 8015098:	6313      	str	r3, [r2, #48]	; 0x30
 801509a:	4b0e      	ldr	r3, [pc, #56]	; (80150d4 <HAL_TIM_MspPostInit+0x6c>)
 801509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801509e:	f003 0302 	and.w	r3, r3, #2
 80150a2:	60bb      	str	r3, [r7, #8]
 80150a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80150a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80150aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150ac:	2302      	movs	r3, #2
 80150ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150b0:	2300      	movs	r3, #0
 80150b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150b4:	2300      	movs	r3, #0
 80150b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80150b8:	2309      	movs	r3, #9
 80150ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80150bc:	f107 030c 	add.w	r3, r7, #12
 80150c0:	4619      	mov	r1, r3
 80150c2:	4805      	ldr	r0, [pc, #20]	; (80150d8 <HAL_TIM_MspPostInit+0x70>)
 80150c4:	f001 fc3a 	bl	801693c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80150c8:	bf00      	nop
 80150ca:	3720      	adds	r7, #32
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	40001800 	.word	0x40001800
 80150d4:	40023800 	.word	0x40023800
 80150d8:	40020400 	.word	0x40020400

080150dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b08c      	sub	sp, #48	; 0x30
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80150e4:	f107 031c 	add.w	r3, r7, #28
 80150e8:	2200      	movs	r2, #0
 80150ea:	601a      	str	r2, [r3, #0]
 80150ec:	605a      	str	r2, [r3, #4]
 80150ee:	609a      	str	r2, [r3, #8]
 80150f0:	60da      	str	r2, [r3, #12]
 80150f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4a49      	ldr	r2, [pc, #292]	; (8015220 <HAL_UART_MspInit+0x144>)
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d153      	bne.n	80151a6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80150fe:	2300      	movs	r3, #0
 8015100:	61bb      	str	r3, [r7, #24]
 8015102:	4b48      	ldr	r3, [pc, #288]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015106:	4a47      	ldr	r2, [pc, #284]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801510c:	6413      	str	r3, [r2, #64]	; 0x40
 801510e:	4b45      	ldr	r3, [pc, #276]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015116:	61bb      	str	r3, [r7, #24]
 8015118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801511a:	2300      	movs	r3, #0
 801511c:	617b      	str	r3, [r7, #20]
 801511e:	4b41      	ldr	r3, [pc, #260]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015122:	4a40      	ldr	r2, [pc, #256]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015124:	f043 0304 	orr.w	r3, r3, #4
 8015128:	6313      	str	r3, [r2, #48]	; 0x30
 801512a:	4b3e      	ldr	r3, [pc, #248]	; (8015224 <HAL_UART_MspInit+0x148>)
 801512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801512e:	f003 0304 	and.w	r3, r3, #4
 8015132:	617b      	str	r3, [r7, #20]
 8015134:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015136:	2300      	movs	r3, #0
 8015138:	613b      	str	r3, [r7, #16]
 801513a:	4b3a      	ldr	r3, [pc, #232]	; (8015224 <HAL_UART_MspInit+0x148>)
 801513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801513e:	4a39      	ldr	r2, [pc, #228]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015140:	f043 0308 	orr.w	r3, r3, #8
 8015144:	6313      	str	r3, [r2, #48]	; 0x30
 8015146:	4b37      	ldr	r3, [pc, #220]	; (8015224 <HAL_UART_MspInit+0x148>)
 8015148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801514a:	f003 0308 	and.w	r3, r3, #8
 801514e:	613b      	str	r3, [r7, #16]
 8015150:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8015152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015158:	2302      	movs	r3, #2
 801515a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801515c:	2301      	movs	r3, #1
 801515e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015160:	2303      	movs	r3, #3
 8015162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8015164:	2308      	movs	r3, #8
 8015166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015168:	f107 031c 	add.w	r3, r7, #28
 801516c:	4619      	mov	r1, r3
 801516e:	482e      	ldr	r0, [pc, #184]	; (8015228 <HAL_UART_MspInit+0x14c>)
 8015170:	f001 fbe4 	bl	801693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015174:	2304      	movs	r3, #4
 8015176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015178:	2302      	movs	r3, #2
 801517a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801517c:	2301      	movs	r3, #1
 801517e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015180:	2303      	movs	r3, #3
 8015182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8015184:	2308      	movs	r3, #8
 8015186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015188:	f107 031c 	add.w	r3, r7, #28
 801518c:	4619      	mov	r1, r3
 801518e:	4827      	ldr	r0, [pc, #156]	; (801522c <HAL_UART_MspInit+0x150>)
 8015190:	f001 fbd4 	bl	801693c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8015194:	2200      	movs	r2, #0
 8015196:	2105      	movs	r1, #5
 8015198:	2035      	movs	r0, #53	; 0x35
 801519a:	f000 fe71 	bl	8015e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801519e:	2035      	movs	r0, #53	; 0x35
 80151a0:	f000 fe8a 	bl	8015eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80151a4:	e038      	b.n	8015218 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4a21      	ldr	r2, [pc, #132]	; (8015230 <HAL_UART_MspInit+0x154>)
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d133      	bne.n	8015218 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80151b0:	2300      	movs	r3, #0
 80151b2:	60fb      	str	r3, [r7, #12]
 80151b4:	4b1b      	ldr	r3, [pc, #108]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151b8:	4a1a      	ldr	r2, [pc, #104]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151ba:	f043 0320 	orr.w	r3, r3, #32
 80151be:	6453      	str	r3, [r2, #68]	; 0x44
 80151c0:	4b18      	ldr	r3, [pc, #96]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151c4:	f003 0320 	and.w	r3, r3, #32
 80151c8:	60fb      	str	r3, [r7, #12]
 80151ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80151cc:	2300      	movs	r3, #0
 80151ce:	60bb      	str	r3, [r7, #8]
 80151d0:	4b14      	ldr	r3, [pc, #80]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d4:	4a13      	ldr	r2, [pc, #76]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151d6:	f043 0304 	orr.w	r3, r3, #4
 80151da:	6313      	str	r3, [r2, #48]	; 0x30
 80151dc:	4b11      	ldr	r3, [pc, #68]	; (8015224 <HAL_UART_MspInit+0x148>)
 80151de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151e0:	f003 0304 	and.w	r3, r3, #4
 80151e4:	60bb      	str	r3, [r7, #8]
 80151e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80151e8:	23c0      	movs	r3, #192	; 0xc0
 80151ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151ec:	2302      	movs	r3, #2
 80151ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80151f0:	2301      	movs	r3, #1
 80151f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151f4:	2303      	movs	r3, #3
 80151f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80151f8:	2308      	movs	r3, #8
 80151fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80151fc:	f107 031c 	add.w	r3, r7, #28
 8015200:	4619      	mov	r1, r3
 8015202:	4809      	ldr	r0, [pc, #36]	; (8015228 <HAL_UART_MspInit+0x14c>)
 8015204:	f001 fb9a 	bl	801693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8015208:	2200      	movs	r2, #0
 801520a:	2105      	movs	r1, #5
 801520c:	2047      	movs	r0, #71	; 0x47
 801520e:	f000 fe37 	bl	8015e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8015212:	2047      	movs	r0, #71	; 0x47
 8015214:	f000 fe50 	bl	8015eb8 <HAL_NVIC_EnableIRQ>
}
 8015218:	bf00      	nop
 801521a:	3730      	adds	r7, #48	; 0x30
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	40005000 	.word	0x40005000
 8015224:	40023800 	.word	0x40023800
 8015228:	40020800 	.word	0x40020800
 801522c:	40020c00 	.word	0x40020c00
 8015230:	40011400 	.word	0x40011400

08015234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b08c      	sub	sp, #48	; 0x30
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8015244:	2200      	movs	r2, #0
 8015246:	6879      	ldr	r1, [r7, #4]
 8015248:	2036      	movs	r0, #54	; 0x36
 801524a:	f000 fe19 	bl	8015e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801524e:	2036      	movs	r0, #54	; 0x36
 8015250:	f000 fe32 	bl	8015eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8015254:	2300      	movs	r3, #0
 8015256:	60fb      	str	r3, [r7, #12]
 8015258:	4b1f      	ldr	r3, [pc, #124]	; (80152d8 <HAL_InitTick+0xa4>)
 801525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801525c:	4a1e      	ldr	r2, [pc, #120]	; (80152d8 <HAL_InitTick+0xa4>)
 801525e:	f043 0310 	orr.w	r3, r3, #16
 8015262:	6413      	str	r3, [r2, #64]	; 0x40
 8015264:	4b1c      	ldr	r3, [pc, #112]	; (80152d8 <HAL_InitTick+0xa4>)
 8015266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015268:	f003 0310 	and.w	r3, r3, #16
 801526c:	60fb      	str	r3, [r7, #12]
 801526e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8015270:	f107 0210 	add.w	r2, r7, #16
 8015274:	f107 0314 	add.w	r3, r7, #20
 8015278:	4611      	mov	r1, r2
 801527a:	4618      	mov	r0, r3
 801527c:	f004 faf4 	bl	8019868 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8015280:	f004 faca 	bl	8019818 <HAL_RCC_GetPCLK1Freq>
 8015284:	4603      	mov	r3, r0
 8015286:	005b      	lsls	r3, r3, #1
 8015288:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528c:	4a13      	ldr	r2, [pc, #76]	; (80152dc <HAL_InitTick+0xa8>)
 801528e:	fba2 2303 	umull	r2, r3, r2, r3
 8015292:	0c9b      	lsrs	r3, r3, #18
 8015294:	3b01      	subs	r3, #1
 8015296:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8015298:	4b11      	ldr	r3, [pc, #68]	; (80152e0 <HAL_InitTick+0xac>)
 801529a:	4a12      	ldr	r2, [pc, #72]	; (80152e4 <HAL_InitTick+0xb0>)
 801529c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 801529e:	4b10      	ldr	r3, [pc, #64]	; (80152e0 <HAL_InitTick+0xac>)
 80152a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80152a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80152a6:	4a0e      	ldr	r2, [pc, #56]	; (80152e0 <HAL_InitTick+0xac>)
 80152a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80152ac:	4b0c      	ldr	r3, [pc, #48]	; (80152e0 <HAL_InitTick+0xac>)
 80152ae:	2200      	movs	r2, #0
 80152b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80152b2:	4b0b      	ldr	r3, [pc, #44]	; (80152e0 <HAL_InitTick+0xac>)
 80152b4:	2200      	movs	r2, #0
 80152b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80152b8:	4809      	ldr	r0, [pc, #36]	; (80152e0 <HAL_InitTick+0xac>)
 80152ba:	f004 fb07 	bl	80198cc <HAL_TIM_Base_Init>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d104      	bne.n	80152ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80152c4:	4806      	ldr	r0, [pc, #24]	; (80152e0 <HAL_InitTick+0xac>)
 80152c6:	f004 fb51 	bl	801996c <HAL_TIM_Base_Start_IT>
 80152ca:	4603      	mov	r3, r0
 80152cc:	e000      	b.n	80152d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80152ce:	2301      	movs	r3, #1
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3730      	adds	r7, #48	; 0x30
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	40023800 	.word	0x40023800
 80152dc:	431bde83 	.word	0x431bde83
 80152e0:	2001704c 	.word	0x2001704c
 80152e4:	40001000 	.word	0x40001000

080152e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80152e8:	b480      	push	{r7}
 80152ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80152ec:	e7fe      	b.n	80152ec <NMI_Handler+0x4>

080152ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80152ee:	b480      	push	{r7}
 80152f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80152f2:	e7fe      	b.n	80152f2 <HardFault_Handler+0x4>

080152f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80152f4:	b480      	push	{r7}
 80152f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80152f8:	e7fe      	b.n	80152f8 <MemManage_Handler+0x4>

080152fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80152fa:	b480      	push	{r7}
 80152fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80152fe:	e7fe      	b.n	80152fe <BusFault_Handler+0x4>

08015300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015300:	b480      	push	{r7}
 8015302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015304:	e7fe      	b.n	8015304 <UsageFault_Handler+0x4>

08015306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015306:	b480      	push	{r7}
 8015308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801530a:	bf00      	nop
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8015318:	2004      	movs	r0, #4
 801531a:	f001 fcf7 	bl	8016d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801531e:	bf00      	nop
 8015320:	bd80      	pop	{r7, pc}

08015322 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8015322:	b580      	push	{r7, lr}
 8015324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8015326:	2040      	movs	r0, #64	; 0x40
 8015328:	f001 fcf0 	bl	8016d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 801532c:	bf00      	nop
 801532e:	bd80      	pop	{r7, pc}

08015330 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8015334:	4802      	ldr	r0, [pc, #8]	; (8015340 <UART5_IRQHandler+0x10>)
 8015336:	f005 fbdd 	bl	801aaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801533a:	bf00      	nop
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	20016b74 	.word	0x20016b74

08015344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8015348:	4b06      	ldr	r3, [pc, #24]	; (8015364 <TIM6_DAC_IRQHandler+0x20>)
 801534a:	791b      	ldrb	r3, [r3, #4]
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d002      	beq.n	8015358 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8015352:	4804      	ldr	r0, [pc, #16]	; (8015364 <TIM6_DAC_IRQHandler+0x20>)
 8015354:	f000 fe32 	bl	8015fbc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8015358:	4803      	ldr	r0, [pc, #12]	; (8015368 <TIM6_DAC_IRQHandler+0x24>)
 801535a:	f004 fc99 	bl	8019c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801535e:	bf00      	nop
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	20016c30 	.word	0x20016c30
 8015368:	2001704c 	.word	0x2001704c

0801536c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015370:	4802      	ldr	r0, [pc, #8]	; (801537c <DMA2_Stream0_IRQHandler+0x10>)
 8015372:	f001 f879 	bl	8016468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8015376:	bf00      	nop
 8015378:	bd80      	pop	{r7, pc}
 801537a:	bf00      	nop
 801537c:	20016f9c 	.word	0x20016f9c

08015380 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8015384:	4802      	ldr	r0, [pc, #8]	; (8015390 <OTG_FS_IRQHandler+0x10>)
 8015386:	f002 fdca 	bl	8017f1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801538a:	bf00      	nop
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	200185a8 	.word	0x200185a8

08015394 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8015398:	4802      	ldr	r0, [pc, #8]	; (80153a4 <USART6_IRQHandler+0x10>)
 801539a:	f005 fbab 	bl	801aaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801539e:	bf00      	nop
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	20016dac 	.word	0x20016dac

080153a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80153a8:	b480      	push	{r7}
 80153aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80153ac:	4b06      	ldr	r3, [pc, #24]	; (80153c8 <SystemInit+0x20>)
 80153ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153b2:	4a05      	ldr	r2, [pc, #20]	; (80153c8 <SystemInit+0x20>)
 80153b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80153b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80153bc:	bf00      	nop
 80153be:	46bd      	mov	sp, r7
 80153c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	e000ed00 	.word	0xe000ed00

080153cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80153cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80153d0:	480d      	ldr	r0, [pc, #52]	; (8015408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80153d2:	490e      	ldr	r1, [pc, #56]	; (801540c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80153d4:	4a0e      	ldr	r2, [pc, #56]	; (8015410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80153d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80153d8:	e002      	b.n	80153e0 <LoopCopyDataInit>

080153da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80153da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80153dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80153de:	3304      	adds	r3, #4

080153e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80153e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80153e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80153e4:	d3f9      	bcc.n	80153da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80153e6:	4a0b      	ldr	r2, [pc, #44]	; (8015414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80153e8:	4c0b      	ldr	r4, [pc, #44]	; (8015418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80153ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80153ec:	e001      	b.n	80153f2 <LoopFillZerobss>

080153ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80153ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80153f0:	3204      	adds	r2, #4

080153f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80153f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80153f4:	d3fb      	bcc.n	80153ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80153f6:	f7ff ffd7 	bl	80153a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80153fa:	f00c fd8b 	bl	8021f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80153fe:	f7fe f8c9 	bl	8013594 <main>
  bx  lr    
 8015402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8015404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801540c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8015410:	080222d4 	.word	0x080222d4
  ldr r2, =_sbss
 8015414:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8015418:	200189b0 	.word	0x200189b0

0801541c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801541c:	e7fe      	b.n	801541c <ADC_IRQHandler>
	...

08015420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015424:	4b0e      	ldr	r3, [pc, #56]	; (8015460 <HAL_Init+0x40>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	4a0d      	ldr	r2, [pc, #52]	; (8015460 <HAL_Init+0x40>)
 801542a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801542e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015430:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <HAL_Init+0x40>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4a0a      	ldr	r2, [pc, #40]	; (8015460 <HAL_Init+0x40>)
 8015436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801543a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801543c:	4b08      	ldr	r3, [pc, #32]	; (8015460 <HAL_Init+0x40>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a07      	ldr	r2, [pc, #28]	; (8015460 <HAL_Init+0x40>)
 8015442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015448:	2003      	movs	r0, #3
 801544a:	f000 fd0e 	bl	8015e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801544e:	200f      	movs	r0, #15
 8015450:	f7ff fef0 	bl	8015234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015454:	f7ff fc92 	bl	8014d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	40023c00 	.word	0x40023c00

08015464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015464:	b480      	push	{r7}
 8015466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015468:	4b06      	ldr	r3, [pc, #24]	; (8015484 <HAL_IncTick+0x20>)
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	461a      	mov	r2, r3
 801546e:	4b06      	ldr	r3, [pc, #24]	; (8015488 <HAL_IncTick+0x24>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	4413      	add	r3, r2
 8015474:	4a04      	ldr	r2, [pc, #16]	; (8015488 <HAL_IncTick+0x24>)
 8015476:	6013      	str	r3, [r2, #0]
}
 8015478:	bf00      	nop
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	20000150 	.word	0x20000150
 8015488:	20017094 	.word	0x20017094

0801548c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801548c:	b480      	push	{r7}
 801548e:	af00      	add	r7, sp, #0
  return uwTick;
 8015490:	4b03      	ldr	r3, [pc, #12]	; (80154a0 <HAL_GetTick+0x14>)
 8015492:	681b      	ldr	r3, [r3, #0]
}
 8015494:	4618      	mov	r0, r3
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr
 801549e:	bf00      	nop
 80154a0:	20017094 	.word	0x20017094

080154a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80154ac:	f7ff ffee 	bl	801548c <HAL_GetTick>
 80154b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154bc:	d005      	beq.n	80154ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80154be:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <HAL_Delay+0x44>)
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	461a      	mov	r2, r3
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80154ca:	bf00      	nop
 80154cc:	f7ff ffde 	bl	801548c <HAL_GetTick>
 80154d0:	4602      	mov	r2, r0
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	1ad3      	subs	r3, r2, r3
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d8f7      	bhi.n	80154cc <HAL_Delay+0x28>
  {
  }
}
 80154dc:	bf00      	nop
 80154de:	bf00      	nop
 80154e0:	3710      	adds	r7, #16
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	20000150 	.word	0x20000150

080154ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d101      	bne.n	8015502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80154fe:	2301      	movs	r3, #1
 8015500:	e033      	b.n	801556a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015506:	2b00      	cmp	r3, #0
 8015508:	d109      	bne.n	801551e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f7ff fc62 	bl	8014dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2200      	movs	r2, #0
 8015514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2200      	movs	r2, #0
 801551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015522:	f003 0310 	and.w	r3, r3, #16
 8015526:	2b00      	cmp	r3, #0
 8015528:	d118      	bne.n	801555c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801552e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8015532:	f023 0302 	bic.w	r3, r3, #2
 8015536:	f043 0202 	orr.w	r2, r3, #2
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 fa68 	bl	8015a14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2200      	movs	r2, #0
 8015548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801554e:	f023 0303 	bic.w	r3, r3, #3
 8015552:	f043 0201 	orr.w	r2, r3, #1
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	641a      	str	r2, [r3, #64]	; 0x40
 801555a:	e001      	b.n	8015560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801555c:	2301      	movs	r3, #1
 801555e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2200      	movs	r2, #0
 8015564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8015568:	7bfb      	ldrb	r3, [r7, #15]
}
 801556a:	4618      	mov	r0, r3
 801556c:	3710      	adds	r7, #16
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
	...

08015574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b086      	sub	sp, #24
 8015578:	af00      	add	r7, sp, #0
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8015580:	2300      	movs	r3, #0
 8015582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801558a:	2b01      	cmp	r3, #1
 801558c:	d101      	bne.n	8015592 <HAL_ADC_Start_DMA+0x1e>
 801558e:	2302      	movs	r3, #2
 8015590:	e0e9      	b.n	8015766 <HAL_ADC_Start_DMA+0x1f2>
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2201      	movs	r2, #1
 8015596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	f003 0301 	and.w	r3, r3, #1
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d018      	beq.n	80155da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	689a      	ldr	r2, [r3, #8]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	f042 0201 	orr.w	r2, r2, #1
 80155b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80155b8:	4b6d      	ldr	r3, [pc, #436]	; (8015770 <HAL_ADC_Start_DMA+0x1fc>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	4a6d      	ldr	r2, [pc, #436]	; (8015774 <HAL_ADC_Start_DMA+0x200>)
 80155be:	fba2 2303 	umull	r2, r3, r2, r3
 80155c2:	0c9a      	lsrs	r2, r3, #18
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80155cc:	e002      	b.n	80155d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	3b01      	subs	r3, #1
 80155d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d1f9      	bne.n	80155ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	689b      	ldr	r3, [r3, #8]
 80155e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80155e8:	d107      	bne.n	80155fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	689a      	ldr	r2, [r3, #8]
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80155f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	689b      	ldr	r3, [r3, #8]
 8015600:	f003 0301 	and.w	r3, r3, #1
 8015604:	2b01      	cmp	r3, #1
 8015606:	f040 80a1 	bne.w	801574c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801560e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8015612:	f023 0301 	bic.w	r3, r3, #1
 8015616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015628:	2b00      	cmp	r3, #0
 801562a:	d007      	beq.n	801563c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8015634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015648:	d106      	bne.n	8015658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801564e:	f023 0206 	bic.w	r2, r3, #6
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	645a      	str	r2, [r3, #68]	; 0x44
 8015656:	e002      	b.n	801565e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2200      	movs	r2, #0
 801565c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2200      	movs	r2, #0
 8015662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8015666:	4b44      	ldr	r3, [pc, #272]	; (8015778 <HAL_ADC_Start_DMA+0x204>)
 8015668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801566e:	4a43      	ldr	r2, [pc, #268]	; (801577c <HAL_ADC_Start_DMA+0x208>)
 8015670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015676:	4a42      	ldr	r2, [pc, #264]	; (8015780 <HAL_ADC_Start_DMA+0x20c>)
 8015678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801567e:	4a41      	ldr	r2, [pc, #260]	; (8015784 <HAL_ADC_Start_DMA+0x210>)
 8015680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801568a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	685a      	ldr	r2, [r3, #4]
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801569a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	689a      	ldr	r2, [r3, #8]
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80156aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	334c      	adds	r3, #76	; 0x4c
 80156b6:	4619      	mov	r1, r3
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f000 fdea 	bl	8016294 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	f003 031f 	and.w	r3, r3, #31
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d12a      	bne.n	8015722 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	4a2d      	ldr	r2, [pc, #180]	; (8015788 <HAL_ADC_Start_DMA+0x214>)
 80156d2:	4293      	cmp	r3, r2
 80156d4:	d015      	beq.n	8015702 <HAL_ADC_Start_DMA+0x18e>
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	4a2c      	ldr	r2, [pc, #176]	; (801578c <HAL_ADC_Start_DMA+0x218>)
 80156dc:	4293      	cmp	r3, r2
 80156de:	d105      	bne.n	80156ec <HAL_ADC_Start_DMA+0x178>
 80156e0:	4b25      	ldr	r3, [pc, #148]	; (8015778 <HAL_ADC_Start_DMA+0x204>)
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	f003 031f 	and.w	r3, r3, #31
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d00a      	beq.n	8015702 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	4a27      	ldr	r2, [pc, #156]	; (8015790 <HAL_ADC_Start_DMA+0x21c>)
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d136      	bne.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
 80156f6:	4b20      	ldr	r3, [pc, #128]	; (8015778 <HAL_ADC_Start_DMA+0x204>)
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	f003 0310 	and.w	r3, r3, #16
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d130      	bne.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	689b      	ldr	r3, [r3, #8]
 8015708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801570c:	2b00      	cmp	r3, #0
 801570e:	d129      	bne.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	689a      	ldr	r2, [r3, #8]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801571e:	609a      	str	r2, [r3, #8]
 8015720:	e020      	b.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4a18      	ldr	r2, [pc, #96]	; (8015788 <HAL_ADC_Start_DMA+0x214>)
 8015728:	4293      	cmp	r3, r2
 801572a:	d11b      	bne.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	689b      	ldr	r3, [r3, #8]
 8015732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015736:	2b00      	cmp	r3, #0
 8015738:	d114      	bne.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	689a      	ldr	r2, [r3, #8]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8015748:	609a      	str	r2, [r3, #8]
 801574a:	e00b      	b.n	8015764 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015750:	f043 0210 	orr.w	r2, r3, #16
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801575c:	f043 0201 	orr.w	r2, r3, #1
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8015764:	2300      	movs	r3, #0
}
 8015766:	4618      	mov	r0, r3
 8015768:	3718      	adds	r7, #24
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	20000148 	.word	0x20000148
 8015774:	431bde83 	.word	0x431bde83
 8015778:	40012300 	.word	0x40012300
 801577c:	08015c0d 	.word	0x08015c0d
 8015780:	08015cc7 	.word	0x08015cc7
 8015784:	08015ce3 	.word	0x08015ce3
 8015788:	40012000 	.word	0x40012000
 801578c:	40012100 	.word	0x40012100
 8015790:	40012200 	.word	0x40012200

08015794 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801579c:	bf00      	nop
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr

080157a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80157b0:	bf00      	nop
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr

080157bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80157bc:	b480      	push	{r7}
 80157be:	b083      	sub	sp, #12
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80157c4:	bf00      	nop
 80157c6:	370c      	adds	r7, #12
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr

080157d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80157d0:	b480      	push	{r7}
 80157d2:	b085      	sub	sp, #20
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80157da:	2300      	movs	r3, #0
 80157dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d101      	bne.n	80157ec <HAL_ADC_ConfigChannel+0x1c>
 80157e8:	2302      	movs	r3, #2
 80157ea:	e105      	b.n	80159f8 <HAL_ADC_ConfigChannel+0x228>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2201      	movs	r2, #1
 80157f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	2b09      	cmp	r3, #9
 80157fa:	d925      	bls.n	8015848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	68d9      	ldr	r1, [r3, #12]
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	b29b      	uxth	r3, r3
 8015808:	461a      	mov	r2, r3
 801580a:	4613      	mov	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4413      	add	r3, r2
 8015810:	3b1e      	subs	r3, #30
 8015812:	2207      	movs	r2, #7
 8015814:	fa02 f303 	lsl.w	r3, r2, r3
 8015818:	43da      	mvns	r2, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	400a      	ands	r2, r1
 8015820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	68d9      	ldr	r1, [r3, #12]
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	689a      	ldr	r2, [r3, #8]
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	b29b      	uxth	r3, r3
 8015832:	4618      	mov	r0, r3
 8015834:	4603      	mov	r3, r0
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	4403      	add	r3, r0
 801583a:	3b1e      	subs	r3, #30
 801583c:	409a      	lsls	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	430a      	orrs	r2, r1
 8015844:	60da      	str	r2, [r3, #12]
 8015846:	e022      	b.n	801588e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	6919      	ldr	r1, [r3, #16]
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	b29b      	uxth	r3, r3
 8015854:	461a      	mov	r2, r3
 8015856:	4613      	mov	r3, r2
 8015858:	005b      	lsls	r3, r3, #1
 801585a:	4413      	add	r3, r2
 801585c:	2207      	movs	r2, #7
 801585e:	fa02 f303 	lsl.w	r3, r2, r3
 8015862:	43da      	mvns	r2, r3
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	400a      	ands	r2, r1
 801586a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	6919      	ldr	r1, [r3, #16]
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	689a      	ldr	r2, [r3, #8]
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	b29b      	uxth	r3, r3
 801587c:	4618      	mov	r0, r3
 801587e:	4603      	mov	r3, r0
 8015880:	005b      	lsls	r3, r3, #1
 8015882:	4403      	add	r3, r0
 8015884:	409a      	lsls	r2, r3
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	430a      	orrs	r2, r1
 801588c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	2b06      	cmp	r3, #6
 8015894:	d824      	bhi.n	80158e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	685a      	ldr	r2, [r3, #4]
 80158a0:	4613      	mov	r3, r2
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	4413      	add	r3, r2
 80158a6:	3b05      	subs	r3, #5
 80158a8:	221f      	movs	r2, #31
 80158aa:	fa02 f303 	lsl.w	r3, r2, r3
 80158ae:	43da      	mvns	r2, r3
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	400a      	ands	r2, r1
 80158b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	4618      	mov	r0, r3
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	685a      	ldr	r2, [r3, #4]
 80158ca:	4613      	mov	r3, r2
 80158cc:	009b      	lsls	r3, r3, #2
 80158ce:	4413      	add	r3, r2
 80158d0:	3b05      	subs	r3, #5
 80158d2:	fa00 f203 	lsl.w	r2, r0, r3
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	430a      	orrs	r2, r1
 80158dc:	635a      	str	r2, [r3, #52]	; 0x34
 80158de:	e04c      	b.n	801597a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	2b0c      	cmp	r3, #12
 80158e6:	d824      	bhi.n	8015932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	685a      	ldr	r2, [r3, #4]
 80158f2:	4613      	mov	r3, r2
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	4413      	add	r3, r2
 80158f8:	3b23      	subs	r3, #35	; 0x23
 80158fa:	221f      	movs	r2, #31
 80158fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015900:	43da      	mvns	r2, r3
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	400a      	ands	r2, r1
 8015908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	b29b      	uxth	r3, r3
 8015916:	4618      	mov	r0, r3
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	685a      	ldr	r2, [r3, #4]
 801591c:	4613      	mov	r3, r2
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	4413      	add	r3, r2
 8015922:	3b23      	subs	r3, #35	; 0x23
 8015924:	fa00 f203 	lsl.w	r2, r0, r3
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	430a      	orrs	r2, r1
 801592e:	631a      	str	r2, [r3, #48]	; 0x30
 8015930:	e023      	b.n	801597a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	685a      	ldr	r2, [r3, #4]
 801593c:	4613      	mov	r3, r2
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	4413      	add	r3, r2
 8015942:	3b41      	subs	r3, #65	; 0x41
 8015944:	221f      	movs	r2, #31
 8015946:	fa02 f303 	lsl.w	r3, r2, r3
 801594a:	43da      	mvns	r2, r3
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	400a      	ands	r2, r1
 8015952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	b29b      	uxth	r3, r3
 8015960:	4618      	mov	r0, r3
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	685a      	ldr	r2, [r3, #4]
 8015966:	4613      	mov	r3, r2
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	4413      	add	r3, r2
 801596c:	3b41      	subs	r3, #65	; 0x41
 801596e:	fa00 f203 	lsl.w	r2, r0, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	430a      	orrs	r2, r1
 8015978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801597a:	4b22      	ldr	r3, [pc, #136]	; (8015a04 <HAL_ADC_ConfigChannel+0x234>)
 801597c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	4a21      	ldr	r2, [pc, #132]	; (8015a08 <HAL_ADC_ConfigChannel+0x238>)
 8015984:	4293      	cmp	r3, r2
 8015986:	d109      	bne.n	801599c <HAL_ADC_ConfigChannel+0x1cc>
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b12      	cmp	r3, #18
 801598e:	d105      	bne.n	801599c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	4a19      	ldr	r2, [pc, #100]	; (8015a08 <HAL_ADC_ConfigChannel+0x238>)
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d123      	bne.n	80159ee <HAL_ADC_ConfigChannel+0x21e>
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	2b10      	cmp	r3, #16
 80159ac:	d003      	beq.n	80159b6 <HAL_ADC_ConfigChannel+0x1e6>
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b11      	cmp	r3, #17
 80159b4:	d11b      	bne.n	80159ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b10      	cmp	r3, #16
 80159c8:	d111      	bne.n	80159ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80159ca:	4b10      	ldr	r3, [pc, #64]	; (8015a0c <HAL_ADC_ConfigChannel+0x23c>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	4a10      	ldr	r2, [pc, #64]	; (8015a10 <HAL_ADC_ConfigChannel+0x240>)
 80159d0:	fba2 2303 	umull	r2, r3, r2, r3
 80159d4:	0c9a      	lsrs	r2, r3, #18
 80159d6:	4613      	mov	r3, r2
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	4413      	add	r3, r2
 80159dc:	005b      	lsls	r3, r3, #1
 80159de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80159e0:	e002      	b.n	80159e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	3b01      	subs	r3, #1
 80159e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d1f9      	bne.n	80159e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2200      	movs	r2, #0
 80159f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80159f6:	2300      	movs	r3, #0
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3714      	adds	r7, #20
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr
 8015a04:	40012300 	.word	0x40012300
 8015a08:	40012000 	.word	0x40012000
 8015a0c:	20000148 	.word	0x20000148
 8015a10:	431bde83 	.word	0x431bde83

08015a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8015a1c:	4b79      	ldr	r3, [pc, #484]	; (8015c04 <ADC_Init+0x1f0>)
 8015a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	685a      	ldr	r2, [r3, #4]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	431a      	orrs	r2, r3
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	685a      	ldr	r2, [r3, #4]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	6859      	ldr	r1, [r3, #4]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	691b      	ldr	r3, [r3, #16]
 8015a54:	021a      	lsls	r2, r3, #8
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	430a      	orrs	r2, r1
 8015a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	685a      	ldr	r2, [r3, #4]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	6859      	ldr	r1, [r3, #4]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	689a      	ldr	r2, [r3, #8]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	430a      	orrs	r2, r1
 8015a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	689a      	ldr	r2, [r3, #8]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	6899      	ldr	r1, [r3, #8]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	68da      	ldr	r2, [r3, #12]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	430a      	orrs	r2, r1
 8015aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aa6:	4a58      	ldr	r2, [pc, #352]	; (8015c08 <ADC_Init+0x1f4>)
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	d022      	beq.n	8015af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	689a      	ldr	r2, [r3, #8]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	6899      	ldr	r1, [r3, #8]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	430a      	orrs	r2, r1
 8015acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	689a      	ldr	r2, [r3, #8]
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8015adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	6899      	ldr	r1, [r3, #8]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	430a      	orrs	r2, r1
 8015aee:	609a      	str	r2, [r3, #8]
 8015af0:	e00f      	b.n	8015b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	689a      	ldr	r2, [r3, #8]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	689a      	ldr	r2, [r3, #8]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8015b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	689a      	ldr	r2, [r3, #8]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f022 0202 	bic.w	r2, r2, #2
 8015b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	6899      	ldr	r1, [r3, #8]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	7e1b      	ldrb	r3, [r3, #24]
 8015b2c:	005a      	lsls	r2, r3, #1
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	430a      	orrs	r2, r1
 8015b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d01b      	beq.n	8015b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	685a      	ldr	r2, [r3, #4]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	685a      	ldr	r2, [r3, #4]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8015b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	6859      	ldr	r1, [r3, #4]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6a:	3b01      	subs	r3, #1
 8015b6c:	035a      	lsls	r2, r3, #13
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	430a      	orrs	r2, r1
 8015b74:	605a      	str	r2, [r3, #4]
 8015b76:	e007      	b.n	8015b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	685a      	ldr	r2, [r3, #4]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8015b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	69db      	ldr	r3, [r3, #28]
 8015ba2:	3b01      	subs	r3, #1
 8015ba4:	051a      	lsls	r2, r3, #20
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	430a      	orrs	r2, r1
 8015bac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	689a      	ldr	r2, [r3, #8]
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8015bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	6899      	ldr	r1, [r3, #8]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015bca:	025a      	lsls	r2, r3, #9
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	430a      	orrs	r2, r1
 8015bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	689a      	ldr	r2, [r3, #8]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	6899      	ldr	r1, [r3, #8]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	695b      	ldr	r3, [r3, #20]
 8015bee:	029a      	lsls	r2, r3, #10
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	430a      	orrs	r2, r1
 8015bf6:	609a      	str	r2, [r3, #8]
}
 8015bf8:	bf00      	nop
 8015bfa:	3714      	adds	r7, #20
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c02:	4770      	bx	lr
 8015c04:	40012300 	.word	0x40012300
 8015c08:	0f000001 	.word	0x0f000001

08015c0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d13c      	bne.n	8015ca0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d12b      	bne.n	8015c98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d127      	bne.n	8015c98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d006      	beq.n	8015c64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	689b      	ldr	r3, [r3, #8]
 8015c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d119      	bne.n	8015c98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	685a      	ldr	r2, [r3, #4]
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f022 0220 	bic.w	r2, r2, #32
 8015c72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d105      	bne.n	8015c98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c90:	f043 0201 	orr.w	r2, r3, #1
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	f7ff fd7b 	bl	8015794 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8015c9e:	e00e      	b.n	8015cbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ca4:	f003 0310 	and.w	r3, r3, #16
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d003      	beq.n	8015cb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff fd85 	bl	80157bc <HAL_ADC_ErrorCallback>
}
 8015cb2:	e004      	b.n	8015cbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	4798      	blx	r3
}
 8015cbe:	bf00      	nop
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b084      	sub	sp, #16
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f7ff fd67 	bl	80157a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015cda:	bf00      	nop
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b084      	sub	sp, #16
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2240      	movs	r2, #64	; 0x40
 8015cf4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cfa:	f043 0204 	orr.w	r2, r3, #4
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8015d02:	68f8      	ldr	r0, [r7, #12]
 8015d04:	f7ff fd5a 	bl	80157bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015d08:	bf00      	nop
 8015d0a:	3710      	adds	r7, #16
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015d10:	b480      	push	{r7}
 8015d12:	b085      	sub	sp, #20
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f003 0307 	and.w	r3, r3, #7
 8015d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015d20:	4b0c      	ldr	r3, [pc, #48]	; (8015d54 <__NVIC_SetPriorityGrouping+0x44>)
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015d26:	68ba      	ldr	r2, [r7, #8]
 8015d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015d42:	4a04      	ldr	r2, [pc, #16]	; (8015d54 <__NVIC_SetPriorityGrouping+0x44>)
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	60d3      	str	r3, [r2, #12]
}
 8015d48:	bf00      	nop
 8015d4a:	3714      	adds	r7, #20
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d52:	4770      	bx	lr
 8015d54:	e000ed00 	.word	0xe000ed00

08015d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015d58:	b480      	push	{r7}
 8015d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015d5c:	4b04      	ldr	r3, [pc, #16]	; (8015d70 <__NVIC_GetPriorityGrouping+0x18>)
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	0a1b      	lsrs	r3, r3, #8
 8015d62:	f003 0307 	and.w	r3, r3, #7
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr
 8015d70:	e000ed00 	.word	0xe000ed00

08015d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	db0b      	blt.n	8015d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015d86:	79fb      	ldrb	r3, [r7, #7]
 8015d88:	f003 021f 	and.w	r2, r3, #31
 8015d8c:	4907      	ldr	r1, [pc, #28]	; (8015dac <__NVIC_EnableIRQ+0x38>)
 8015d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d92:	095b      	lsrs	r3, r3, #5
 8015d94:	2001      	movs	r0, #1
 8015d96:	fa00 f202 	lsl.w	r2, r0, r2
 8015d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015d9e:	bf00      	nop
 8015da0:	370c      	adds	r7, #12
 8015da2:	46bd      	mov	sp, r7
 8015da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da8:	4770      	bx	lr
 8015daa:	bf00      	nop
 8015dac:	e000e100 	.word	0xe000e100

08015db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	4603      	mov	r3, r0
 8015db8:	6039      	str	r1, [r7, #0]
 8015dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	db0a      	blt.n	8015dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	b2da      	uxtb	r2, r3
 8015dc8:	490c      	ldr	r1, [pc, #48]	; (8015dfc <__NVIC_SetPriority+0x4c>)
 8015dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dce:	0112      	lsls	r2, r2, #4
 8015dd0:	b2d2      	uxtb	r2, r2
 8015dd2:	440b      	add	r3, r1
 8015dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015dd8:	e00a      	b.n	8015df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	b2da      	uxtb	r2, r3
 8015dde:	4908      	ldr	r1, [pc, #32]	; (8015e00 <__NVIC_SetPriority+0x50>)
 8015de0:	79fb      	ldrb	r3, [r7, #7]
 8015de2:	f003 030f 	and.w	r3, r3, #15
 8015de6:	3b04      	subs	r3, #4
 8015de8:	0112      	lsls	r2, r2, #4
 8015dea:	b2d2      	uxtb	r2, r2
 8015dec:	440b      	add	r3, r1
 8015dee:	761a      	strb	r2, [r3, #24]
}
 8015df0:	bf00      	nop
 8015df2:	370c      	adds	r7, #12
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr
 8015dfc:	e000e100 	.word	0xe000e100
 8015e00:	e000ed00 	.word	0xe000ed00

08015e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015e04:	b480      	push	{r7}
 8015e06:	b089      	sub	sp, #36	; 0x24
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	60f8      	str	r0, [r7, #12]
 8015e0c:	60b9      	str	r1, [r7, #8]
 8015e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f003 0307 	and.w	r3, r3, #7
 8015e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015e18:	69fb      	ldr	r3, [r7, #28]
 8015e1a:	f1c3 0307 	rsb	r3, r3, #7
 8015e1e:	2b04      	cmp	r3, #4
 8015e20:	bf28      	it	cs
 8015e22:	2304      	movcs	r3, #4
 8015e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	3304      	adds	r3, #4
 8015e2a:	2b06      	cmp	r3, #6
 8015e2c:	d902      	bls.n	8015e34 <NVIC_EncodePriority+0x30>
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	3b03      	subs	r3, #3
 8015e32:	e000      	b.n	8015e36 <NVIC_EncodePriority+0x32>
 8015e34:	2300      	movs	r3, #0
 8015e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015e38:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3c:	69bb      	ldr	r3, [r7, #24]
 8015e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8015e42:	43da      	mvns	r2, r3
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	401a      	ands	r2, r3
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	fa01 f303 	lsl.w	r3, r1, r3
 8015e56:	43d9      	mvns	r1, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015e5c:	4313      	orrs	r3, r2
         );
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3724      	adds	r7, #36	; 0x24
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr

08015e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015e6a:	b580      	push	{r7, lr}
 8015e6c:	b082      	sub	sp, #8
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f7ff ff4c 	bl	8015d10 <__NVIC_SetPriorityGrouping>
}
 8015e78:	bf00      	nop
 8015e7a:	3708      	adds	r7, #8
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}

08015e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b086      	sub	sp, #24
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	4603      	mov	r3, r0
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	607a      	str	r2, [r7, #4]
 8015e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015e92:	f7ff ff61 	bl	8015d58 <__NVIC_GetPriorityGrouping>
 8015e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	68b9      	ldr	r1, [r7, #8]
 8015e9c:	6978      	ldr	r0, [r7, #20]
 8015e9e:	f7ff ffb1 	bl	8015e04 <NVIC_EncodePriority>
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ea8:	4611      	mov	r1, r2
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f7ff ff80 	bl	8015db0 <__NVIC_SetPriority>
}
 8015eb0:	bf00      	nop
 8015eb2:	3718      	adds	r7, #24
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7ff ff54 	bl	8015d74 <__NVIC_EnableIRQ>
}
 8015ecc:	bf00      	nop
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d101      	bne.n	8015ee6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	e014      	b.n	8015f10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	791b      	ldrb	r3, [r3, #4]
 8015eea:	b2db      	uxtb	r3, r3
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d105      	bne.n	8015efc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7ff f800 	bl	8014efc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2202      	movs	r2, #2
 8015f00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2200      	movs	r2, #0
 8015f06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8015f0e:	2300      	movs	r3, #0
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3708      	adds	r7, #8
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b083      	sub	sp, #12
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	795b      	ldrb	r3, [r3, #5]
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d101      	bne.n	8015f2e <HAL_DAC_Start+0x16>
 8015f2a:	2302      	movs	r3, #2
 8015f2c:	e040      	b.n	8015fb0 <HAL_DAC_Start+0x98>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2201      	movs	r2, #1
 8015f32:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2202      	movs	r2, #2
 8015f38:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	6819      	ldr	r1, [r3, #0]
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	f003 0310 	and.w	r3, r3, #16
 8015f46:	2201      	movs	r2, #1
 8015f48:	409a      	lsls	r2, r3
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	430a      	orrs	r2, r1
 8015f50:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d10f      	bne.n	8015f78 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8015f62:	2b3c      	cmp	r3, #60	; 0x3c
 8015f64:	d11d      	bne.n	8015fa2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	685a      	ldr	r2, [r3, #4]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f042 0201 	orr.w	r2, r2, #1
 8015f74:	605a      	str	r2, [r3, #4]
 8015f76:	e014      	b.n	8015fa2 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	f003 0310 	and.w	r3, r3, #16
 8015f88:	213c      	movs	r1, #60	; 0x3c
 8015f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d107      	bne.n	8015fa2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	685a      	ldr	r2, [r3, #4]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f042 0202 	orr.w	r2, r2, #2
 8015fa0:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2200      	movs	r2, #0
 8015fac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015fd2:	d120      	bne.n	8016016 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015fe2:	d118      	bne.n	8016016 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2204      	movs	r2, #4
 8015fe8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	691b      	ldr	r3, [r3, #16]
 8015fee:	f043 0201 	orr.w	r2, r3, #1
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015ffe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	681a      	ldr	r2, [r3, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801600e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 f82d 	bl	8016070 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016024:	d120      	bne.n	8016068 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801602c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016034:	d118      	bne.n	8016068 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2204      	movs	r2, #4
 801603a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	691b      	ldr	r3, [r3, #16]
 8016040:	f043 0202 	orr.w	r2, r3, #2
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	681a      	ldr	r2, [r3, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8016060:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f000 f85d 	bl	8016122 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8016068:	bf00      	nop
 801606a:	3708      	adds	r7, #8
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8016078:	bf00      	nop
 801607a:	370c      	adds	r7, #12
 801607c:	46bd      	mov	sp, r7
 801607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016082:	4770      	bx	lr

08016084 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8016084:	b480      	push	{r7}
 8016086:	b087      	sub	sp, #28
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	795b      	ldrb	r3, [r3, #5]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d101      	bne.n	801609c <HAL_DAC_ConfigChannel+0x18>
 8016098:	2302      	movs	r3, #2
 801609a:	e03c      	b.n	8016116 <HAL_DAC_ConfigChannel+0x92>
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2201      	movs	r2, #1
 80160a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2202      	movs	r2, #2
 80160a6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f003 0310 	and.w	r3, r3, #16
 80160b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80160ba:	fa02 f303 	lsl.w	r3, r2, r3
 80160be:	43db      	mvns	r3, r3
 80160c0:	697a      	ldr	r2, [r7, #20]
 80160c2:	4013      	ands	r3, r2
 80160c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	4313      	orrs	r3, r2
 80160d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f003 0310 	and.w	r3, r3, #16
 80160d8:	693a      	ldr	r2, [r7, #16]
 80160da:	fa02 f303 	lsl.w	r3, r2, r3
 80160de:	697a      	ldr	r2, [r7, #20]
 80160e0:	4313      	orrs	r3, r2
 80160e2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	697a      	ldr	r2, [r7, #20]
 80160ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	6819      	ldr	r1, [r3, #0]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f003 0310 	and.w	r3, r3, #16
 80160f8:	22c0      	movs	r2, #192	; 0xc0
 80160fa:	fa02 f303 	lsl.w	r3, r2, r3
 80160fe:	43da      	mvns	r2, r3
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	400a      	ands	r2, r1
 8016106:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	2201      	movs	r2, #1
 801610c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8016114:	2300      	movs	r3, #0
}
 8016116:	4618      	mov	r0, r3
 8016118:	371c      	adds	r7, #28
 801611a:	46bd      	mov	sp, r7
 801611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016120:	4770      	bx	lr

08016122 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8016122:	b480      	push	{r7}
 8016124:	b083      	sub	sp, #12
 8016126:	af00      	add	r7, sp, #0
 8016128:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 801612a:	bf00      	nop
 801612c:	370c      	adds	r7, #12
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr
	...

08016138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b086      	sub	sp, #24
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016140:	2300      	movs	r3, #0
 8016142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016144:	f7ff f9a2 	bl	801548c <HAL_GetTick>
 8016148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d101      	bne.n	8016154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016150:	2301      	movs	r3, #1
 8016152:	e099      	b.n	8016288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2202      	movs	r2, #2
 8016158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2200      	movs	r2, #0
 8016160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	681a      	ldr	r2, [r3, #0]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f022 0201 	bic.w	r2, r2, #1
 8016172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016174:	e00f      	b.n	8016196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016176:	f7ff f989 	bl	801548c <HAL_GetTick>
 801617a:	4602      	mov	r2, r0
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	1ad3      	subs	r3, r2, r3
 8016180:	2b05      	cmp	r3, #5
 8016182:	d908      	bls.n	8016196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2220      	movs	r2, #32
 8016188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2203      	movs	r2, #3
 801618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016192:	2303      	movs	r3, #3
 8016194:	e078      	b.n	8016288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	f003 0301 	and.w	r3, r3, #1
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d1e8      	bne.n	8016176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80161ac:	697a      	ldr	r2, [r7, #20]
 80161ae:	4b38      	ldr	r3, [pc, #224]	; (8016290 <HAL_DMA_Init+0x158>)
 80161b0:	4013      	ands	r3, r2
 80161b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	685a      	ldr	r2, [r3, #4]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	689b      	ldr	r3, [r3, #8]
 80161bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80161c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	691b      	ldr	r3, [r3, #16]
 80161c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80161ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	699b      	ldr	r3, [r3, #24]
 80161d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	6a1b      	ldr	r3, [r3, #32]
 80161e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80161e2:	697a      	ldr	r2, [r7, #20]
 80161e4:	4313      	orrs	r3, r2
 80161e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ec:	2b04      	cmp	r3, #4
 80161ee:	d107      	bne.n	8016200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161f8:	4313      	orrs	r3, r2
 80161fa:	697a      	ldr	r2, [r7, #20]
 80161fc:	4313      	orrs	r3, r2
 80161fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	697a      	ldr	r2, [r7, #20]
 8016206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	695b      	ldr	r3, [r3, #20]
 801620e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	f023 0307 	bic.w	r3, r3, #7
 8016216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801621c:	697a      	ldr	r2, [r7, #20]
 801621e:	4313      	orrs	r3, r2
 8016220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016226:	2b04      	cmp	r3, #4
 8016228:	d117      	bne.n	801625a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801622e:	697a      	ldr	r2, [r7, #20]
 8016230:	4313      	orrs	r3, r2
 8016232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00e      	beq.n	801625a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f000 fb01 	bl	8016844 <DMA_CheckFifoParam>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d008      	beq.n	801625a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2240      	movs	r2, #64	; 0x40
 801624c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2201      	movs	r2, #1
 8016252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016256:	2301      	movs	r3, #1
 8016258:	e016      	b.n	8016288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	697a      	ldr	r2, [r7, #20]
 8016260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f000 fab8 	bl	80167d8 <DMA_CalcBaseAndBitshift>
 8016268:	4603      	mov	r3, r0
 801626a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016270:	223f      	movs	r2, #63	; 0x3f
 8016272:	409a      	lsls	r2, r3
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2201      	movs	r2, #1
 8016282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	f010803f 	.word	0xf010803f

08016294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b086      	sub	sp, #24
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
 80162a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80162a2:	2300      	movs	r3, #0
 80162a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d101      	bne.n	80162ba <HAL_DMA_Start_IT+0x26>
 80162b6:	2302      	movs	r3, #2
 80162b8:	e040      	b.n	801633c <HAL_DMA_Start_IT+0xa8>
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	2201      	movs	r2, #1
 80162be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d12f      	bne.n	801632e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2202      	movs	r2, #2
 80162d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	2200      	movs	r2, #0
 80162da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	68b9      	ldr	r1, [r7, #8]
 80162e2:	68f8      	ldr	r0, [r7, #12]
 80162e4:	f000 fa4a 	bl	801677c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162ec:	223f      	movs	r2, #63	; 0x3f
 80162ee:	409a      	lsls	r2, r3
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	f042 0216 	orr.w	r2, r2, #22
 8016302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016308:	2b00      	cmp	r3, #0
 801630a:	d007      	beq.n	801631c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	681a      	ldr	r2, [r3, #0]
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	f042 0208 	orr.w	r2, r2, #8
 801631a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	681a      	ldr	r2, [r3, #0]
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	f042 0201 	orr.w	r2, r2, #1
 801632a:	601a      	str	r2, [r3, #0]
 801632c:	e005      	b.n	801633a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2200      	movs	r2, #0
 8016332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016336:	2302      	movs	r3, #2
 8016338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801633a:	7dfb      	ldrb	r3, [r7, #23]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3718      	adds	r7, #24
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b084      	sub	sp, #16
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016352:	f7ff f89b 	bl	801548c <HAL_GetTick>
 8016356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801635e:	b2db      	uxtb	r3, r3
 8016360:	2b02      	cmp	r3, #2
 8016362:	d008      	beq.n	8016376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2280      	movs	r2, #128	; 0x80
 8016368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2200      	movs	r2, #0
 801636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016372:	2301      	movs	r3, #1
 8016374:	e052      	b.n	801641c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f022 0216 	bic.w	r2, r2, #22
 8016384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	695a      	ldr	r2, [r3, #20]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801639a:	2b00      	cmp	r3, #0
 801639c:	d103      	bne.n	80163a6 <HAL_DMA_Abort+0x62>
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d007      	beq.n	80163b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f022 0208 	bic.w	r2, r2, #8
 80163b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f022 0201 	bic.w	r2, r2, #1
 80163c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80163c6:	e013      	b.n	80163f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80163c8:	f7ff f860 	bl	801548c <HAL_GetTick>
 80163cc:	4602      	mov	r2, r0
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	1ad3      	subs	r3, r2, r3
 80163d2:	2b05      	cmp	r3, #5
 80163d4:	d90c      	bls.n	80163f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2220      	movs	r2, #32
 80163da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2203      	movs	r2, #3
 80163e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2200      	movs	r2, #0
 80163e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80163ec:	2303      	movs	r3, #3
 80163ee:	e015      	b.n	801641c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f003 0301 	and.w	r3, r3, #1
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d1e4      	bne.n	80163c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016402:	223f      	movs	r2, #63	; 0x3f
 8016404:	409a      	lsls	r2, r3
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2201      	movs	r2, #1
 801640e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2200      	movs	r2, #0
 8016416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801641a:	2300      	movs	r3, #0
}
 801641c:	4618      	mov	r0, r3
 801641e:	3710      	adds	r7, #16
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016424:	b480      	push	{r7}
 8016426:	b083      	sub	sp, #12
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016432:	b2db      	uxtb	r3, r3
 8016434:	2b02      	cmp	r3, #2
 8016436:	d004      	beq.n	8016442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2280      	movs	r2, #128	; 0x80
 801643c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801643e:	2301      	movs	r3, #1
 8016440:	e00c      	b.n	801645c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2205      	movs	r2, #5
 8016446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f022 0201 	bic.w	r2, r2, #1
 8016458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801645a:	2300      	movs	r3, #0
}
 801645c:	4618      	mov	r0, r3
 801645e:	370c      	adds	r7, #12
 8016460:	46bd      	mov	sp, r7
 8016462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016466:	4770      	bx	lr

08016468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b086      	sub	sp, #24
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016470:	2300      	movs	r3, #0
 8016472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016474:	4b92      	ldr	r3, [pc, #584]	; (80166c0 <HAL_DMA_IRQHandler+0x258>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4a92      	ldr	r2, [pc, #584]	; (80166c4 <HAL_DMA_IRQHandler+0x25c>)
 801647a:	fba2 2303 	umull	r2, r3, r2, r3
 801647e:	0a9b      	lsrs	r3, r3, #10
 8016480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016492:	2208      	movs	r2, #8
 8016494:	409a      	lsls	r2, r3
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	4013      	ands	r3, r2
 801649a:	2b00      	cmp	r3, #0
 801649c:	d01a      	beq.n	80164d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	f003 0304 	and.w	r3, r3, #4
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d013      	beq.n	80164d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f022 0204 	bic.w	r2, r2, #4
 80164ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164c0:	2208      	movs	r2, #8
 80164c2:	409a      	lsls	r2, r3
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164cc:	f043 0201 	orr.w	r2, r3, #1
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164d8:	2201      	movs	r2, #1
 80164da:	409a      	lsls	r2, r3
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	4013      	ands	r3, r2
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d012      	beq.n	801650a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	695b      	ldr	r3, [r3, #20]
 80164ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d00b      	beq.n	801650a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164f6:	2201      	movs	r2, #1
 80164f8:	409a      	lsls	r2, r3
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016502:	f043 0202 	orr.w	r2, r3, #2
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801650e:	2204      	movs	r2, #4
 8016510:	409a      	lsls	r2, r3
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	4013      	ands	r3, r2
 8016516:	2b00      	cmp	r3, #0
 8016518:	d012      	beq.n	8016540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f003 0302 	and.w	r3, r3, #2
 8016524:	2b00      	cmp	r3, #0
 8016526:	d00b      	beq.n	8016540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801652c:	2204      	movs	r2, #4
 801652e:	409a      	lsls	r2, r3
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016538:	f043 0204 	orr.w	r2, r3, #4
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016544:	2210      	movs	r2, #16
 8016546:	409a      	lsls	r2, r3
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	4013      	ands	r3, r2
 801654c:	2b00      	cmp	r3, #0
 801654e:	d043      	beq.n	80165d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f003 0308 	and.w	r3, r3, #8
 801655a:	2b00      	cmp	r3, #0
 801655c:	d03c      	beq.n	80165d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016562:	2210      	movs	r2, #16
 8016564:	409a      	lsls	r2, r3
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016574:	2b00      	cmp	r3, #0
 8016576:	d018      	beq.n	80165aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016582:	2b00      	cmp	r3, #0
 8016584:	d108      	bne.n	8016598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801658a:	2b00      	cmp	r3, #0
 801658c:	d024      	beq.n	80165d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	4798      	blx	r3
 8016596:	e01f      	b.n	80165d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801659c:	2b00      	cmp	r3, #0
 801659e:	d01b      	beq.n	80165d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	4798      	blx	r3
 80165a8:	e016      	b.n	80165d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d107      	bne.n	80165c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	f022 0208 	bic.w	r2, r2, #8
 80165c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d003      	beq.n	80165d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165dc:	2220      	movs	r2, #32
 80165de:	409a      	lsls	r2, r3
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	4013      	ands	r3, r2
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	f000 808e 	beq.w	8016706 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	f003 0310 	and.w	r3, r3, #16
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f000 8086 	beq.w	8016706 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165fe:	2220      	movs	r2, #32
 8016600:	409a      	lsls	r2, r3
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801660c:	b2db      	uxtb	r3, r3
 801660e:	2b05      	cmp	r3, #5
 8016610:	d136      	bne.n	8016680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f022 0216 	bic.w	r2, r2, #22
 8016620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	695a      	ldr	r2, [r3, #20]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016636:	2b00      	cmp	r3, #0
 8016638:	d103      	bne.n	8016642 <HAL_DMA_IRQHandler+0x1da>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801663e:	2b00      	cmp	r3, #0
 8016640:	d007      	beq.n	8016652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	f022 0208 	bic.w	r2, r2, #8
 8016650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016656:	223f      	movs	r2, #63	; 0x3f
 8016658:	409a      	lsls	r2, r3
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2201      	movs	r2, #1
 8016662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016672:	2b00      	cmp	r3, #0
 8016674:	d07d      	beq.n	8016772 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	4798      	blx	r3
        }
        return;
 801667e:	e078      	b.n	8016772 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801668a:	2b00      	cmp	r3, #0
 801668c:	d01c      	beq.n	80166c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016698:	2b00      	cmp	r3, #0
 801669a:	d108      	bne.n	80166ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d030      	beq.n	8016706 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	4798      	blx	r3
 80166ac:	e02b      	b.n	8016706 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d027      	beq.n	8016706 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	4798      	blx	r3
 80166be:	e022      	b.n	8016706 <HAL_DMA_IRQHandler+0x29e>
 80166c0:	20000148 	.word	0x20000148
 80166c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d10f      	bne.n	80166f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	f022 0210 	bic.w	r2, r2, #16
 80166e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2201      	movs	r2, #1
 80166ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d003      	beq.n	8016706 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801670a:	2b00      	cmp	r3, #0
 801670c:	d032      	beq.n	8016774 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016712:	f003 0301 	and.w	r3, r3, #1
 8016716:	2b00      	cmp	r3, #0
 8016718:	d022      	beq.n	8016760 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2205      	movs	r2, #5
 801671e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f022 0201 	bic.w	r2, r2, #1
 8016730:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	3301      	adds	r3, #1
 8016736:	60bb      	str	r3, [r7, #8]
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	429a      	cmp	r2, r3
 801673c:	d307      	bcc.n	801674e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f003 0301 	and.w	r3, r3, #1
 8016748:	2b00      	cmp	r3, #0
 801674a:	d1f2      	bne.n	8016732 <HAL_DMA_IRQHandler+0x2ca>
 801674c:	e000      	b.n	8016750 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801674e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2201      	movs	r2, #1
 8016754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016764:	2b00      	cmp	r3, #0
 8016766:	d005      	beq.n	8016774 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	4798      	blx	r3
 8016770:	e000      	b.n	8016774 <HAL_DMA_IRQHandler+0x30c>
        return;
 8016772:	bf00      	nop
    }
  }
}
 8016774:	3718      	adds	r7, #24
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop

0801677c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801677c:	b480      	push	{r7}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	60f8      	str	r0, [r7, #12]
 8016784:	60b9      	str	r1, [r7, #8]
 8016786:	607a      	str	r2, [r7, #4]
 8016788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	689b      	ldr	r3, [r3, #8]
 80167a6:	2b40      	cmp	r3, #64	; 0x40
 80167a8:	d108      	bne.n	80167bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	68ba      	ldr	r2, [r7, #8]
 80167b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80167ba:	e007      	b.n	80167cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	68ba      	ldr	r2, [r7, #8]
 80167c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	60da      	str	r2, [r3, #12]
}
 80167cc:	bf00      	nop
 80167ce:	3714      	adds	r7, #20
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr

080167d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80167d8:	b480      	push	{r7}
 80167da:	b085      	sub	sp, #20
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	3b10      	subs	r3, #16
 80167e8:	4a14      	ldr	r2, [pc, #80]	; (801683c <DMA_CalcBaseAndBitshift+0x64>)
 80167ea:	fba2 2303 	umull	r2, r3, r2, r3
 80167ee:	091b      	lsrs	r3, r3, #4
 80167f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80167f2:	4a13      	ldr	r2, [pc, #76]	; (8016840 <DMA_CalcBaseAndBitshift+0x68>)
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	4413      	add	r3, r2
 80167f8:	781b      	ldrb	r3, [r3, #0]
 80167fa:	461a      	mov	r2, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2b03      	cmp	r3, #3
 8016804:	d909      	bls.n	801681a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801680e:	f023 0303 	bic.w	r3, r3, #3
 8016812:	1d1a      	adds	r2, r3, #4
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	659a      	str	r2, [r3, #88]	; 0x58
 8016818:	e007      	b.n	801682a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016822:	f023 0303 	bic.w	r3, r3, #3
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801682e:	4618      	mov	r0, r3
 8016830:	3714      	adds	r7, #20
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr
 801683a:	bf00      	nop
 801683c:	aaaaaaab 	.word	0xaaaaaaab
 8016840:	080222bc 	.word	0x080222bc

08016844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801684c:	2300      	movs	r3, #0
 801684e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	699b      	ldr	r3, [r3, #24]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d11f      	bne.n	801689e <DMA_CheckFifoParam+0x5a>
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	2b03      	cmp	r3, #3
 8016862:	d856      	bhi.n	8016912 <DMA_CheckFifoParam+0xce>
 8016864:	a201      	add	r2, pc, #4	; (adr r2, 801686c <DMA_CheckFifoParam+0x28>)
 8016866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801686a:	bf00      	nop
 801686c:	0801687d 	.word	0x0801687d
 8016870:	0801688f 	.word	0x0801688f
 8016874:	0801687d 	.word	0x0801687d
 8016878:	08016913 	.word	0x08016913
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016884:	2b00      	cmp	r3, #0
 8016886:	d046      	beq.n	8016916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016888:	2301      	movs	r3, #1
 801688a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801688c:	e043      	b.n	8016916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016896:	d140      	bne.n	801691a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016898:	2301      	movs	r3, #1
 801689a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801689c:	e03d      	b.n	801691a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	699b      	ldr	r3, [r3, #24]
 80168a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80168a6:	d121      	bne.n	80168ec <DMA_CheckFifoParam+0xa8>
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	2b03      	cmp	r3, #3
 80168ac:	d837      	bhi.n	801691e <DMA_CheckFifoParam+0xda>
 80168ae:	a201      	add	r2, pc, #4	; (adr r2, 80168b4 <DMA_CheckFifoParam+0x70>)
 80168b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b4:	080168c5 	.word	0x080168c5
 80168b8:	080168cb 	.word	0x080168cb
 80168bc:	080168c5 	.word	0x080168c5
 80168c0:	080168dd 	.word	0x080168dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80168c4:	2301      	movs	r3, #1
 80168c6:	73fb      	strb	r3, [r7, #15]
      break;
 80168c8:	e030      	b.n	801692c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d025      	beq.n	8016922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80168d6:	2301      	movs	r3, #1
 80168d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80168da:	e022      	b.n	8016922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80168e4:	d11f      	bne.n	8016926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80168e6:	2301      	movs	r3, #1
 80168e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80168ea:	e01c      	b.n	8016926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	2b02      	cmp	r3, #2
 80168f0:	d903      	bls.n	80168fa <DMA_CheckFifoParam+0xb6>
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	2b03      	cmp	r3, #3
 80168f6:	d003      	beq.n	8016900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80168f8:	e018      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80168fa:	2301      	movs	r3, #1
 80168fc:	73fb      	strb	r3, [r7, #15]
      break;
 80168fe:	e015      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016908:	2b00      	cmp	r3, #0
 801690a:	d00e      	beq.n	801692a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801690c:	2301      	movs	r3, #1
 801690e:	73fb      	strb	r3, [r7, #15]
      break;
 8016910:	e00b      	b.n	801692a <DMA_CheckFifoParam+0xe6>
      break;
 8016912:	bf00      	nop
 8016914:	e00a      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;
 8016916:	bf00      	nop
 8016918:	e008      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;
 801691a:	bf00      	nop
 801691c:	e006      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;
 801691e:	bf00      	nop
 8016920:	e004      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;
 8016922:	bf00      	nop
 8016924:	e002      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;   
 8016926:	bf00      	nop
 8016928:	e000      	b.n	801692c <DMA_CheckFifoParam+0xe8>
      break;
 801692a:	bf00      	nop
    }
  } 
  
  return status; 
 801692c:	7bfb      	ldrb	r3, [r7, #15]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3714      	adds	r7, #20
 8016932:	46bd      	mov	sp, r7
 8016934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop

0801693c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801693c:	b480      	push	{r7}
 801693e:	b089      	sub	sp, #36	; 0x24
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016946:	2300      	movs	r3, #0
 8016948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801694a:	2300      	movs	r3, #0
 801694c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801694e:	2300      	movs	r3, #0
 8016950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016952:	2300      	movs	r3, #0
 8016954:	61fb      	str	r3, [r7, #28]
 8016956:	e16b      	b.n	8016c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016958:	2201      	movs	r2, #1
 801695a:	69fb      	ldr	r3, [r7, #28]
 801695c:	fa02 f303 	lsl.w	r3, r2, r3
 8016960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	697a      	ldr	r2, [r7, #20]
 8016968:	4013      	ands	r3, r2
 801696a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801696c:	693a      	ldr	r2, [r7, #16]
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	429a      	cmp	r2, r3
 8016972:	f040 815a 	bne.w	8016c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	f003 0303 	and.w	r3, r3, #3
 801697e:	2b01      	cmp	r3, #1
 8016980:	d005      	beq.n	801698e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801698a:	2b02      	cmp	r3, #2
 801698c:	d130      	bne.n	80169f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	689b      	ldr	r3, [r3, #8]
 8016992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	2203      	movs	r2, #3
 801699a:	fa02 f303 	lsl.w	r3, r2, r3
 801699e:	43db      	mvns	r3, r3
 80169a0:	69ba      	ldr	r2, [r7, #24]
 80169a2:	4013      	ands	r3, r2
 80169a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	68da      	ldr	r2, [r3, #12]
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	fa02 f303 	lsl.w	r3, r2, r3
 80169b2:	69ba      	ldr	r2, [r7, #24]
 80169b4:	4313      	orrs	r3, r2
 80169b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	69ba      	ldr	r2, [r7, #24]
 80169bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80169c4:	2201      	movs	r2, #1
 80169c6:	69fb      	ldr	r3, [r7, #28]
 80169c8:	fa02 f303 	lsl.w	r3, r2, r3
 80169cc:	43db      	mvns	r3, r3
 80169ce:	69ba      	ldr	r2, [r7, #24]
 80169d0:	4013      	ands	r3, r2
 80169d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	091b      	lsrs	r3, r3, #4
 80169da:	f003 0201 	and.w	r2, r3, #1
 80169de:	69fb      	ldr	r3, [r7, #28]
 80169e0:	fa02 f303 	lsl.w	r3, r2, r3
 80169e4:	69ba      	ldr	r2, [r7, #24]
 80169e6:	4313      	orrs	r3, r2
 80169e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	69ba      	ldr	r2, [r7, #24]
 80169ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	f003 0303 	and.w	r3, r3, #3
 80169f8:	2b03      	cmp	r3, #3
 80169fa:	d017      	beq.n	8016a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	68db      	ldr	r3, [r3, #12]
 8016a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	005b      	lsls	r3, r3, #1
 8016a06:	2203      	movs	r2, #3
 8016a08:	fa02 f303 	lsl.w	r3, r2, r3
 8016a0c:	43db      	mvns	r3, r3
 8016a0e:	69ba      	ldr	r2, [r7, #24]
 8016a10:	4013      	ands	r3, r2
 8016a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	689a      	ldr	r2, [r3, #8]
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	005b      	lsls	r3, r3, #1
 8016a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a20:	69ba      	ldr	r2, [r7, #24]
 8016a22:	4313      	orrs	r3, r2
 8016a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	69ba      	ldr	r2, [r7, #24]
 8016a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	f003 0303 	and.w	r3, r3, #3
 8016a34:	2b02      	cmp	r3, #2
 8016a36:	d123      	bne.n	8016a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	08da      	lsrs	r2, r3, #3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	3208      	adds	r2, #8
 8016a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	f003 0307 	and.w	r3, r3, #7
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	220f      	movs	r2, #15
 8016a50:	fa02 f303 	lsl.w	r3, r2, r3
 8016a54:	43db      	mvns	r3, r3
 8016a56:	69ba      	ldr	r2, [r7, #24]
 8016a58:	4013      	ands	r3, r2
 8016a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	691a      	ldr	r2, [r3, #16]
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	f003 0307 	and.w	r3, r3, #7
 8016a66:	009b      	lsls	r3, r3, #2
 8016a68:	fa02 f303 	lsl.w	r3, r2, r3
 8016a6c:	69ba      	ldr	r2, [r7, #24]
 8016a6e:	4313      	orrs	r3, r2
 8016a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016a72:	69fb      	ldr	r3, [r7, #28]
 8016a74:	08da      	lsrs	r2, r3, #3
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	3208      	adds	r2, #8
 8016a7a:	69b9      	ldr	r1, [r7, #24]
 8016a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	2203      	movs	r2, #3
 8016a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a90:	43db      	mvns	r3, r3
 8016a92:	69ba      	ldr	r2, [r7, #24]
 8016a94:	4013      	ands	r3, r2
 8016a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	f003 0203 	and.w	r2, r3, #3
 8016aa0:	69fb      	ldr	r3, [r7, #28]
 8016aa2:	005b      	lsls	r3, r3, #1
 8016aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8016aa8:	69ba      	ldr	r2, [r7, #24]
 8016aaa:	4313      	orrs	r3, r2
 8016aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	69ba      	ldr	r2, [r7, #24]
 8016ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	f000 80b4 	beq.w	8016c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	60fb      	str	r3, [r7, #12]
 8016ac6:	4b60      	ldr	r3, [pc, #384]	; (8016c48 <HAL_GPIO_Init+0x30c>)
 8016ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aca:	4a5f      	ldr	r2, [pc, #380]	; (8016c48 <HAL_GPIO_Init+0x30c>)
 8016acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8016ad2:	4b5d      	ldr	r3, [pc, #372]	; (8016c48 <HAL_GPIO_Init+0x30c>)
 8016ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ada:	60fb      	str	r3, [r7, #12]
 8016adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016ade:	4a5b      	ldr	r2, [pc, #364]	; (8016c4c <HAL_GPIO_Init+0x310>)
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	089b      	lsrs	r3, r3, #2
 8016ae4:	3302      	adds	r3, #2
 8016ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016aec:	69fb      	ldr	r3, [r7, #28]
 8016aee:	f003 0303 	and.w	r3, r3, #3
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	220f      	movs	r2, #15
 8016af6:	fa02 f303 	lsl.w	r3, r2, r3
 8016afa:	43db      	mvns	r3, r3
 8016afc:	69ba      	ldr	r2, [r7, #24]
 8016afe:	4013      	ands	r3, r2
 8016b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4a52      	ldr	r2, [pc, #328]	; (8016c50 <HAL_GPIO_Init+0x314>)
 8016b06:	4293      	cmp	r3, r2
 8016b08:	d02b      	beq.n	8016b62 <HAL_GPIO_Init+0x226>
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4a51      	ldr	r2, [pc, #324]	; (8016c54 <HAL_GPIO_Init+0x318>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d025      	beq.n	8016b5e <HAL_GPIO_Init+0x222>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4a50      	ldr	r2, [pc, #320]	; (8016c58 <HAL_GPIO_Init+0x31c>)
 8016b16:	4293      	cmp	r3, r2
 8016b18:	d01f      	beq.n	8016b5a <HAL_GPIO_Init+0x21e>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4a4f      	ldr	r2, [pc, #316]	; (8016c5c <HAL_GPIO_Init+0x320>)
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	d019      	beq.n	8016b56 <HAL_GPIO_Init+0x21a>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	4a4e      	ldr	r2, [pc, #312]	; (8016c60 <HAL_GPIO_Init+0x324>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d013      	beq.n	8016b52 <HAL_GPIO_Init+0x216>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	4a4d      	ldr	r2, [pc, #308]	; (8016c64 <HAL_GPIO_Init+0x328>)
 8016b2e:	4293      	cmp	r3, r2
 8016b30:	d00d      	beq.n	8016b4e <HAL_GPIO_Init+0x212>
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	4a4c      	ldr	r2, [pc, #304]	; (8016c68 <HAL_GPIO_Init+0x32c>)
 8016b36:	4293      	cmp	r3, r2
 8016b38:	d007      	beq.n	8016b4a <HAL_GPIO_Init+0x20e>
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	4a4b      	ldr	r2, [pc, #300]	; (8016c6c <HAL_GPIO_Init+0x330>)
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d101      	bne.n	8016b46 <HAL_GPIO_Init+0x20a>
 8016b42:	2307      	movs	r3, #7
 8016b44:	e00e      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b46:	2308      	movs	r3, #8
 8016b48:	e00c      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b4a:	2306      	movs	r3, #6
 8016b4c:	e00a      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b4e:	2305      	movs	r3, #5
 8016b50:	e008      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b52:	2304      	movs	r3, #4
 8016b54:	e006      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b56:	2303      	movs	r3, #3
 8016b58:	e004      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b5a:	2302      	movs	r3, #2
 8016b5c:	e002      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b5e:	2301      	movs	r3, #1
 8016b60:	e000      	b.n	8016b64 <HAL_GPIO_Init+0x228>
 8016b62:	2300      	movs	r3, #0
 8016b64:	69fa      	ldr	r2, [r7, #28]
 8016b66:	f002 0203 	and.w	r2, r2, #3
 8016b6a:	0092      	lsls	r2, r2, #2
 8016b6c:	4093      	lsls	r3, r2
 8016b6e:	69ba      	ldr	r2, [r7, #24]
 8016b70:	4313      	orrs	r3, r2
 8016b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016b74:	4935      	ldr	r1, [pc, #212]	; (8016c4c <HAL_GPIO_Init+0x310>)
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	089b      	lsrs	r3, r3, #2
 8016b7a:	3302      	adds	r3, #2
 8016b7c:	69ba      	ldr	r2, [r7, #24]
 8016b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016b82:	4b3b      	ldr	r3, [pc, #236]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	43db      	mvns	r3, r3
 8016b8c:	69ba      	ldr	r2, [r7, #24]
 8016b8e:	4013      	ands	r3, r2
 8016b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d003      	beq.n	8016ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8016b9e:	69ba      	ldr	r2, [r7, #24]
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	4313      	orrs	r3, r2
 8016ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8016ba6:	4a32      	ldr	r2, [pc, #200]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016ba8:	69bb      	ldr	r3, [r7, #24]
 8016baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8016bac:	4b30      	ldr	r3, [pc, #192]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	43db      	mvns	r3, r3
 8016bb6:	69ba      	ldr	r2, [r7, #24]
 8016bb8:	4013      	ands	r3, r2
 8016bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d003      	beq.n	8016bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8016bc8:	69ba      	ldr	r2, [r7, #24]
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	4313      	orrs	r3, r2
 8016bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016bd0:	4a27      	ldr	r2, [pc, #156]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016bd6:	4b26      	ldr	r3, [pc, #152]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016bd8:	689b      	ldr	r3, [r3, #8]
 8016bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	43db      	mvns	r3, r3
 8016be0:	69ba      	ldr	r2, [r7, #24]
 8016be2:	4013      	ands	r3, r2
 8016be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d003      	beq.n	8016bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8016bf2:	69ba      	ldr	r2, [r7, #24]
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	4313      	orrs	r3, r2
 8016bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8016bfa:	4a1d      	ldr	r2, [pc, #116]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016c00:	4b1b      	ldr	r3, [pc, #108]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	43db      	mvns	r3, r3
 8016c0a:	69ba      	ldr	r2, [r7, #24]
 8016c0c:	4013      	ands	r3, r2
 8016c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d003      	beq.n	8016c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8016c1c:	69ba      	ldr	r2, [r7, #24]
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	4313      	orrs	r3, r2
 8016c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016c24:	4a12      	ldr	r2, [pc, #72]	; (8016c70 <HAL_GPIO_Init+0x334>)
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	61fb      	str	r3, [r7, #28]
 8016c30:	69fb      	ldr	r3, [r7, #28]
 8016c32:	2b0f      	cmp	r3, #15
 8016c34:	f67f ae90 	bls.w	8016958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016c38:	bf00      	nop
 8016c3a:	bf00      	nop
 8016c3c:	3724      	adds	r7, #36	; 0x24
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop
 8016c48:	40023800 	.word	0x40023800
 8016c4c:	40013800 	.word	0x40013800
 8016c50:	40020000 	.word	0x40020000
 8016c54:	40020400 	.word	0x40020400
 8016c58:	40020800 	.word	0x40020800
 8016c5c:	40020c00 	.word	0x40020c00
 8016c60:	40021000 	.word	0x40021000
 8016c64:	40021400 	.word	0x40021400
 8016c68:	40021800 	.word	0x40021800
 8016c6c:	40021c00 	.word	0x40021c00
 8016c70:	40013c00 	.word	0x40013c00

08016c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b085      	sub	sp, #20
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	691a      	ldr	r2, [r3, #16]
 8016c84:	887b      	ldrh	r3, [r7, #2]
 8016c86:	4013      	ands	r3, r2
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d002      	beq.n	8016c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	73fb      	strb	r3, [r7, #15]
 8016c90:	e001      	b.n	8016c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016c92:	2300      	movs	r3, #0
 8016c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3714      	adds	r7, #20
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	460b      	mov	r3, r1
 8016cae:	807b      	strh	r3, [r7, #2]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016cb4:	787b      	ldrb	r3, [r7, #1]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d003      	beq.n	8016cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016cba:	887a      	ldrh	r2, [r7, #2]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016cc0:	e003      	b.n	8016cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016cc2:	887b      	ldrh	r3, [r7, #2]
 8016cc4:	041a      	lsls	r2, r3, #16
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	619a      	str	r2, [r3, #24]
}
 8016cca:	bf00      	nop
 8016ccc:	370c      	adds	r7, #12
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd4:	4770      	bx	lr

08016cd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016cd6:	b480      	push	{r7}
 8016cd8:	b085      	sub	sp, #20
 8016cda:	af00      	add	r7, sp, #0
 8016cdc:	6078      	str	r0, [r7, #4]
 8016cde:	460b      	mov	r3, r1
 8016ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	695b      	ldr	r3, [r3, #20]
 8016ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8016ce8:	887a      	ldrh	r2, [r7, #2]
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	4013      	ands	r3, r2
 8016cee:	041a      	lsls	r2, r3, #16
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	43d9      	mvns	r1, r3
 8016cf4:	887b      	ldrh	r3, [r7, #2]
 8016cf6:	400b      	ands	r3, r1
 8016cf8:	431a      	orrs	r2, r3
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	619a      	str	r2, [r3, #24]
}
 8016cfe:	bf00      	nop
 8016d00:	3714      	adds	r7, #20
 8016d02:	46bd      	mov	sp, r7
 8016d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d08:	4770      	bx	lr
	...

08016d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	4603      	mov	r3, r0
 8016d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8016d16:	4b08      	ldr	r3, [pc, #32]	; (8016d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016d18:	695a      	ldr	r2, [r3, #20]
 8016d1a:	88fb      	ldrh	r3, [r7, #6]
 8016d1c:	4013      	ands	r3, r2
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d006      	beq.n	8016d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016d22:	4a05      	ldr	r2, [pc, #20]	; (8016d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016d24:	88fb      	ldrh	r3, [r7, #6]
 8016d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016d28:	88fb      	ldrh	r3, [r7, #6]
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f000 f806 	bl	8016d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8016d30:	bf00      	nop
 8016d32:	3708      	adds	r7, #8
 8016d34:	46bd      	mov	sp, r7
 8016d36:	bd80      	pop	{r7, pc}
 8016d38:	40013c00 	.word	0x40013c00

08016d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b083      	sub	sp, #12
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	4603      	mov	r3, r0
 8016d44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8016d46:	bf00      	nop
 8016d48:	370c      	adds	r7, #12
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d50:	4770      	bx	lr
	...

08016d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d101      	bne.n	8016d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	e12b      	b.n	8016fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d6c:	b2db      	uxtb	r3, r3
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d106      	bne.n	8016d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	2200      	movs	r2, #0
 8016d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f7fe f90a 	bl	8014f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2224      	movs	r2, #36	; 0x24
 8016d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	681a      	ldr	r2, [r3, #0]
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	f022 0201 	bic.w	r2, r2, #1
 8016d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016db8:	f002 fd2e 	bl	8019818 <HAL_RCC_GetPCLK1Freq>
 8016dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	4a81      	ldr	r2, [pc, #516]	; (8016fc8 <HAL_I2C_Init+0x274>)
 8016dc4:	4293      	cmp	r3, r2
 8016dc6:	d807      	bhi.n	8016dd8 <HAL_I2C_Init+0x84>
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	4a80      	ldr	r2, [pc, #512]	; (8016fcc <HAL_I2C_Init+0x278>)
 8016dcc:	4293      	cmp	r3, r2
 8016dce:	bf94      	ite	ls
 8016dd0:	2301      	movls	r3, #1
 8016dd2:	2300      	movhi	r3, #0
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	e006      	b.n	8016de6 <HAL_I2C_Init+0x92>
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	4a7d      	ldr	r2, [pc, #500]	; (8016fd0 <HAL_I2C_Init+0x27c>)
 8016ddc:	4293      	cmp	r3, r2
 8016dde:	bf94      	ite	ls
 8016de0:	2301      	movls	r3, #1
 8016de2:	2300      	movhi	r3, #0
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d001      	beq.n	8016dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016dea:	2301      	movs	r3, #1
 8016dec:	e0e7      	b.n	8016fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	4a78      	ldr	r2, [pc, #480]	; (8016fd4 <HAL_I2C_Init+0x280>)
 8016df2:	fba2 2303 	umull	r2, r3, r2, r3
 8016df6:	0c9b      	lsrs	r3, r3, #18
 8016df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	68ba      	ldr	r2, [r7, #8]
 8016e0a:	430a      	orrs	r2, r1
 8016e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	6a1b      	ldr	r3, [r3, #32]
 8016e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	4a6a      	ldr	r2, [pc, #424]	; (8016fc8 <HAL_I2C_Init+0x274>)
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d802      	bhi.n	8016e28 <HAL_I2C_Init+0xd4>
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	3301      	adds	r3, #1
 8016e26:	e009      	b.n	8016e3c <HAL_I2C_Init+0xe8>
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016e2e:	fb02 f303 	mul.w	r3, r2, r3
 8016e32:	4a69      	ldr	r2, [pc, #420]	; (8016fd8 <HAL_I2C_Init+0x284>)
 8016e34:	fba2 2303 	umull	r2, r3, r2, r3
 8016e38:	099b      	lsrs	r3, r3, #6
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	687a      	ldr	r2, [r7, #4]
 8016e3e:	6812      	ldr	r2, [r2, #0]
 8016e40:	430b      	orrs	r3, r1
 8016e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	69db      	ldr	r3, [r3, #28]
 8016e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8016e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	495c      	ldr	r1, [pc, #368]	; (8016fc8 <HAL_I2C_Init+0x274>)
 8016e58:	428b      	cmp	r3, r1
 8016e5a:	d819      	bhi.n	8016e90 <HAL_I2C_Init+0x13c>
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	1e59      	subs	r1, r3, #1
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	685b      	ldr	r3, [r3, #4]
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e6a:	1c59      	adds	r1, r3, #1
 8016e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8016e70:	400b      	ands	r3, r1
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d00a      	beq.n	8016e8c <HAL_I2C_Init+0x138>
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	1e59      	subs	r1, r3, #1
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e84:	3301      	adds	r3, #1
 8016e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e8a:	e051      	b.n	8016f30 <HAL_I2C_Init+0x1dc>
 8016e8c:	2304      	movs	r3, #4
 8016e8e:	e04f      	b.n	8016f30 <HAL_I2C_Init+0x1dc>
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d111      	bne.n	8016ebc <HAL_I2C_Init+0x168>
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	1e58      	subs	r0, r3, #1
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6859      	ldr	r1, [r3, #4]
 8016ea0:	460b      	mov	r3, r1
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	440b      	add	r3, r1
 8016ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8016eaa:	3301      	adds	r3, #1
 8016eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	bf0c      	ite	eq
 8016eb4:	2301      	moveq	r3, #1
 8016eb6:	2300      	movne	r3, #0
 8016eb8:	b2db      	uxtb	r3, r3
 8016eba:	e012      	b.n	8016ee2 <HAL_I2C_Init+0x18e>
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	1e58      	subs	r0, r3, #1
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6859      	ldr	r1, [r3, #4]
 8016ec4:	460b      	mov	r3, r1
 8016ec6:	009b      	lsls	r3, r3, #2
 8016ec8:	440b      	add	r3, r1
 8016eca:	0099      	lsls	r1, r3, #2
 8016ecc:	440b      	add	r3, r1
 8016ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	bf0c      	ite	eq
 8016edc:	2301      	moveq	r3, #1
 8016ede:	2300      	movne	r3, #0
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d001      	beq.n	8016eea <HAL_I2C_Init+0x196>
 8016ee6:	2301      	movs	r3, #1
 8016ee8:	e022      	b.n	8016f30 <HAL_I2C_Init+0x1dc>
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	689b      	ldr	r3, [r3, #8]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d10e      	bne.n	8016f10 <HAL_I2C_Init+0x1bc>
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	1e58      	subs	r0, r3, #1
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6859      	ldr	r1, [r3, #4]
 8016efa:	460b      	mov	r3, r1
 8016efc:	005b      	lsls	r3, r3, #1
 8016efe:	440b      	add	r3, r1
 8016f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8016f04:	3301      	adds	r3, #1
 8016f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016f0e:	e00f      	b.n	8016f30 <HAL_I2C_Init+0x1dc>
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	1e58      	subs	r0, r3, #1
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	6859      	ldr	r1, [r3, #4]
 8016f18:	460b      	mov	r3, r1
 8016f1a:	009b      	lsls	r3, r3, #2
 8016f1c:	440b      	add	r3, r1
 8016f1e:	0099      	lsls	r1, r3, #2
 8016f20:	440b      	add	r3, r1
 8016f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8016f26:	3301      	adds	r3, #1
 8016f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016f30:	6879      	ldr	r1, [r7, #4]
 8016f32:	6809      	ldr	r1, [r1, #0]
 8016f34:	4313      	orrs	r3, r2
 8016f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	69da      	ldr	r2, [r3, #28]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6a1b      	ldr	r3, [r3, #32]
 8016f4a:	431a      	orrs	r2, r3
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	430a      	orrs	r2, r1
 8016f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	689b      	ldr	r3, [r3, #8]
 8016f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8016f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	6911      	ldr	r1, [r2, #16]
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	68d2      	ldr	r2, [r2, #12]
 8016f6a:	4311      	orrs	r1, r2
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	6812      	ldr	r2, [r2, #0]
 8016f70:	430b      	orrs	r3, r1
 8016f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	68db      	ldr	r3, [r3, #12]
 8016f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	695a      	ldr	r2, [r3, #20]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	699b      	ldr	r3, [r3, #24]
 8016f86:	431a      	orrs	r2, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	430a      	orrs	r2, r1
 8016f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	f042 0201 	orr.w	r2, r2, #1
 8016f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2220      	movs	r2, #32
 8016faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016fbc:	2300      	movs	r3, #0
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3710      	adds	r7, #16
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	bf00      	nop
 8016fc8:	000186a0 	.word	0x000186a0
 8016fcc:	001e847f 	.word	0x001e847f
 8016fd0:	003d08ff 	.word	0x003d08ff
 8016fd4:	431bde83 	.word	0x431bde83
 8016fd8:	10624dd3 	.word	0x10624dd3

08016fdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b088      	sub	sp, #32
 8016fe0:	af02      	add	r7, sp, #8
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	607a      	str	r2, [r7, #4]
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	460b      	mov	r3, r1
 8016fea:	817b      	strh	r3, [r7, #10]
 8016fec:	4613      	mov	r3, r2
 8016fee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016ff0:	f7fe fa4c 	bl	801548c <HAL_GetTick>
 8016ff4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b20      	cmp	r3, #32
 8017000:	f040 80e0 	bne.w	80171c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	2319      	movs	r3, #25
 801700a:	2201      	movs	r2, #1
 801700c:	4970      	ldr	r1, [pc, #448]	; (80171d0 <HAL_I2C_Master_Transmit+0x1f4>)
 801700e:	68f8      	ldr	r0, [r7, #12]
 8017010:	f000 fc58 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 8017014:	4603      	mov	r3, r0
 8017016:	2b00      	cmp	r3, #0
 8017018:	d001      	beq.n	801701e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801701a:	2302      	movs	r3, #2
 801701c:	e0d3      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017024:	2b01      	cmp	r3, #1
 8017026:	d101      	bne.n	801702c <HAL_I2C_Master_Transmit+0x50>
 8017028:	2302      	movs	r3, #2
 801702a:	e0cc      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	2201      	movs	r2, #1
 8017030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	f003 0301 	and.w	r3, r3, #1
 801703e:	2b01      	cmp	r3, #1
 8017040:	d007      	beq.n	8017052 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	681a      	ldr	r2, [r3, #0]
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f042 0201 	orr.w	r2, r2, #1
 8017050:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017060:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	2221      	movs	r2, #33	; 0x21
 8017066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2210      	movs	r2, #16
 801706e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	2200      	movs	r2, #0
 8017076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	893a      	ldrh	r2, [r7, #8]
 8017082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017088:	b29a      	uxth	r2, r3
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	4a50      	ldr	r2, [pc, #320]	; (80171d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8017092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017094:	8979      	ldrh	r1, [r7, #10]
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	6a3a      	ldr	r2, [r7, #32]
 801709a:	68f8      	ldr	r0, [r7, #12]
 801709c:	f000 fac2 	bl	8017624 <I2C_MasterRequestWrite>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d001      	beq.n	80170aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80170a6:	2301      	movs	r3, #1
 80170a8:	e08d      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80170aa:	2300      	movs	r3, #0
 80170ac:	613b      	str	r3, [r7, #16]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	695b      	ldr	r3, [r3, #20]
 80170b4:	613b      	str	r3, [r7, #16]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	699b      	ldr	r3, [r3, #24]
 80170bc:	613b      	str	r3, [r7, #16]
 80170be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80170c0:	e066      	b.n	8017190 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80170c2:	697a      	ldr	r2, [r7, #20]
 80170c4:	6a39      	ldr	r1, [r7, #32]
 80170c6:	68f8      	ldr	r0, [r7, #12]
 80170c8:	f000 fcd2 	bl	8017a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80170cc:	4603      	mov	r3, r0
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d00d      	beq.n	80170ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170d6:	2b04      	cmp	r3, #4
 80170d8:	d107      	bne.n	80170ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80170e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80170ea:	2301      	movs	r3, #1
 80170ec:	e06b      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170f2:	781a      	ldrb	r2, [r3, #0]
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170fe:	1c5a      	adds	r2, r3, #1
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017108:	b29b      	uxth	r3, r3
 801710a:	3b01      	subs	r3, #1
 801710c:	b29a      	uxth	r2, r3
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017116:	3b01      	subs	r3, #1
 8017118:	b29a      	uxth	r2, r3
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	695b      	ldr	r3, [r3, #20]
 8017124:	f003 0304 	and.w	r3, r3, #4
 8017128:	2b04      	cmp	r3, #4
 801712a:	d11b      	bne.n	8017164 <HAL_I2C_Master_Transmit+0x188>
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017130:	2b00      	cmp	r3, #0
 8017132:	d017      	beq.n	8017164 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017138:	781a      	ldrb	r2, [r3, #0]
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017144:	1c5a      	adds	r2, r3, #1
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801714e:	b29b      	uxth	r3, r3
 8017150:	3b01      	subs	r3, #1
 8017152:	b29a      	uxth	r2, r3
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801715c:	3b01      	subs	r3, #1
 801715e:	b29a      	uxth	r2, r3
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017164:	697a      	ldr	r2, [r7, #20]
 8017166:	6a39      	ldr	r1, [r7, #32]
 8017168:	68f8      	ldr	r0, [r7, #12]
 801716a:	f000 fcc2 	bl	8017af2 <I2C_WaitOnBTFFlagUntilTimeout>
 801716e:	4603      	mov	r3, r0
 8017170:	2b00      	cmp	r3, #0
 8017172:	d00d      	beq.n	8017190 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017178:	2b04      	cmp	r3, #4
 801717a:	d107      	bne.n	801718c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801718a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801718c:	2301      	movs	r3, #1
 801718e:	e01a      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017194:	2b00      	cmp	r3, #0
 8017196:	d194      	bne.n	80170c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	2220      	movs	r2, #32
 80171ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2200      	movs	r2, #0
 80171b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	2200      	movs	r2, #0
 80171bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80171c0:	2300      	movs	r3, #0
 80171c2:	e000      	b.n	80171c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80171c4:	2302      	movs	r3, #2
  }
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3718      	adds	r7, #24
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	00100002 	.word	0x00100002
 80171d4:	ffff0000 	.word	0xffff0000

080171d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b08c      	sub	sp, #48	; 0x30
 80171dc:	af02      	add	r7, sp, #8
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	607a      	str	r2, [r7, #4]
 80171e2:	461a      	mov	r2, r3
 80171e4:	460b      	mov	r3, r1
 80171e6:	817b      	strh	r3, [r7, #10]
 80171e8:	4613      	mov	r3, r2
 80171ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80171ec:	f7fe f94e 	bl	801548c <HAL_GetTick>
 80171f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	2b20      	cmp	r3, #32
 80171fc:	f040 820b 	bne.w	8017616 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	2319      	movs	r3, #25
 8017206:	2201      	movs	r2, #1
 8017208:	497c      	ldr	r1, [pc, #496]	; (80173fc <HAL_I2C_Master_Receive+0x224>)
 801720a:	68f8      	ldr	r0, [r7, #12]
 801720c:	f000 fb5a 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 8017210:	4603      	mov	r3, r0
 8017212:	2b00      	cmp	r3, #0
 8017214:	d001      	beq.n	801721a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8017216:	2302      	movs	r3, #2
 8017218:	e1fe      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017220:	2b01      	cmp	r3, #1
 8017222:	d101      	bne.n	8017228 <HAL_I2C_Master_Receive+0x50>
 8017224:	2302      	movs	r3, #2
 8017226:	e1f7      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	2201      	movs	r2, #1
 801722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	f003 0301 	and.w	r3, r3, #1
 801723a:	2b01      	cmp	r3, #1
 801723c:	d007      	beq.n	801724e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f042 0201 	orr.w	r2, r2, #1
 801724c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801725c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	2222      	movs	r2, #34	; 0x22
 8017262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	2210      	movs	r2, #16
 801726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	2200      	movs	r2, #0
 8017272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	893a      	ldrh	r2, [r7, #8]
 801727e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017284:	b29a      	uxth	r2, r3
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	4a5c      	ldr	r2, [pc, #368]	; (8017400 <HAL_I2C_Master_Receive+0x228>)
 801728e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017290:	8979      	ldrh	r1, [r7, #10]
 8017292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	f000 fa46 	bl	8017728 <I2C_MasterRequestRead>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d001      	beq.n	80172a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80172a2:	2301      	movs	r3, #1
 80172a4:	e1b8      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d113      	bne.n	80172d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80172ae:	2300      	movs	r3, #0
 80172b0:	623b      	str	r3, [r7, #32]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	695b      	ldr	r3, [r3, #20]
 80172b8:	623b      	str	r3, [r7, #32]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	699b      	ldr	r3, [r3, #24]
 80172c0:	623b      	str	r3, [r7, #32]
 80172c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80172d2:	601a      	str	r2, [r3, #0]
 80172d4:	e18c      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d11b      	bne.n	8017316 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80172ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80172ee:	2300      	movs	r3, #0
 80172f0:	61fb      	str	r3, [r7, #28]
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	695b      	ldr	r3, [r3, #20]
 80172f8:	61fb      	str	r3, [r7, #28]
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	699b      	ldr	r3, [r3, #24]
 8017300:	61fb      	str	r3, [r7, #28]
 8017302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017312:	601a      	str	r2, [r3, #0]
 8017314:	e16c      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801731a:	2b02      	cmp	r3, #2
 801731c:	d11b      	bne.n	8017356 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	681a      	ldr	r2, [r3, #0]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801732c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801733c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801733e:	2300      	movs	r3, #0
 8017340:	61bb      	str	r3, [r7, #24]
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	695b      	ldr	r3, [r3, #20]
 8017348:	61bb      	str	r3, [r7, #24]
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	699b      	ldr	r3, [r3, #24]
 8017350:	61bb      	str	r3, [r7, #24]
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	e14c      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017366:	2300      	movs	r3, #0
 8017368:	617b      	str	r3, [r7, #20]
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	695b      	ldr	r3, [r3, #20]
 8017370:	617b      	str	r3, [r7, #20]
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	699b      	ldr	r3, [r3, #24]
 8017378:	617b      	str	r3, [r7, #20]
 801737a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 801737c:	e138      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017382:	2b03      	cmp	r3, #3
 8017384:	f200 80f1 	bhi.w	801756a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801738c:	2b01      	cmp	r3, #1
 801738e:	d123      	bne.n	80173d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	f000 fbed 	bl	8017b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 801739a:	4603      	mov	r3, r0
 801739c:	2b00      	cmp	r3, #0
 801739e:	d001      	beq.n	80173a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80173a0:	2301      	movs	r3, #1
 80173a2:	e139      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	691a      	ldr	r2, [r3, #16]
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ae:	b2d2      	uxtb	r2, r2
 80173b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173b6:	1c5a      	adds	r2, r3, #1
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173c0:	3b01      	subs	r3, #1
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173cc:	b29b      	uxth	r3, r3
 80173ce:	3b01      	subs	r3, #1
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80173d6:	e10b      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173dc:	2b02      	cmp	r3, #2
 80173de:	d14e      	bne.n	801747e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80173e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e6:	2200      	movs	r2, #0
 80173e8:	4906      	ldr	r1, [pc, #24]	; (8017404 <HAL_I2C_Master_Receive+0x22c>)
 80173ea:	68f8      	ldr	r0, [r7, #12]
 80173ec:	f000 fa6a 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 80173f0:	4603      	mov	r3, r0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d008      	beq.n	8017408 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80173f6:	2301      	movs	r3, #1
 80173f8:	e10e      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
 80173fa:	bf00      	nop
 80173fc:	00100002 	.word	0x00100002
 8017400:	ffff0000 	.word	0xffff0000
 8017404:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	691a      	ldr	r2, [r3, #16]
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017422:	b2d2      	uxtb	r2, r2
 8017424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801742a:	1c5a      	adds	r2, r3, #1
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017434:	3b01      	subs	r3, #1
 8017436:	b29a      	uxth	r2, r3
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017440:	b29b      	uxth	r3, r3
 8017442:	3b01      	subs	r3, #1
 8017444:	b29a      	uxth	r2, r3
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	691a      	ldr	r2, [r3, #16]
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017454:	b2d2      	uxtb	r2, r2
 8017456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801745c:	1c5a      	adds	r2, r3, #1
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017466:	3b01      	subs	r3, #1
 8017468:	b29a      	uxth	r2, r3
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017472:	b29b      	uxth	r3, r3
 8017474:	3b01      	subs	r3, #1
 8017476:	b29a      	uxth	r2, r3
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801747c:	e0b8      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017484:	2200      	movs	r2, #0
 8017486:	4966      	ldr	r1, [pc, #408]	; (8017620 <HAL_I2C_Master_Receive+0x448>)
 8017488:	68f8      	ldr	r0, [r7, #12]
 801748a:	f000 fa1b 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d001      	beq.n	8017498 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8017494:	2301      	movs	r3, #1
 8017496:	e0bf      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80174a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	691a      	ldr	r2, [r3, #16]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b2:	b2d2      	uxtb	r2, r2
 80174b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	1c5a      	adds	r2, r3, #1
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174c4:	3b01      	subs	r3, #1
 80174c6:	b29a      	uxth	r2, r3
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	3b01      	subs	r3, #1
 80174d4:	b29a      	uxth	r2, r3
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80174da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174dc:	9300      	str	r3, [sp, #0]
 80174de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e0:	2200      	movs	r2, #0
 80174e2:	494f      	ldr	r1, [pc, #316]	; (8017620 <HAL_I2C_Master_Receive+0x448>)
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f000 f9ed 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d001      	beq.n	80174f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80174f0:	2301      	movs	r3, #1
 80174f2:	e091      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	681a      	ldr	r2, [r3, #0]
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	691a      	ldr	r2, [r3, #16]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801750e:	b2d2      	uxtb	r2, r2
 8017510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017516:	1c5a      	adds	r2, r3, #1
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017520:	3b01      	subs	r3, #1
 8017522:	b29a      	uxth	r2, r3
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801752c:	b29b      	uxth	r3, r3
 801752e:	3b01      	subs	r3, #1
 8017530:	b29a      	uxth	r2, r3
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	691a      	ldr	r2, [r3, #16]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017540:	b2d2      	uxtb	r2, r2
 8017542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017548:	1c5a      	adds	r2, r3, #1
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017552:	3b01      	subs	r3, #1
 8017554:	b29a      	uxth	r2, r3
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801755e:	b29b      	uxth	r3, r3
 8017560:	3b01      	subs	r3, #1
 8017562:	b29a      	uxth	r2, r3
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017568:	e042      	b.n	80175f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801756a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801756c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801756e:	68f8      	ldr	r0, [r7, #12]
 8017570:	f000 fb00 	bl	8017b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017574:	4603      	mov	r3, r0
 8017576:	2b00      	cmp	r3, #0
 8017578:	d001      	beq.n	801757e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 801757a:	2301      	movs	r3, #1
 801757c:	e04c      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	691a      	ldr	r2, [r3, #16]
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017588:	b2d2      	uxtb	r2, r2
 801758a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017590:	1c5a      	adds	r2, r3, #1
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801759a:	3b01      	subs	r3, #1
 801759c:	b29a      	uxth	r2, r3
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	3b01      	subs	r3, #1
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	695b      	ldr	r3, [r3, #20]
 80175b6:	f003 0304 	and.w	r3, r3, #4
 80175ba:	2b04      	cmp	r3, #4
 80175bc:	d118      	bne.n	80175f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	691a      	ldr	r2, [r3, #16]
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175c8:	b2d2      	uxtb	r2, r2
 80175ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175d0:	1c5a      	adds	r2, r3, #1
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175da:	3b01      	subs	r3, #1
 80175dc:	b29a      	uxth	r2, r3
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175e6:	b29b      	uxth	r3, r3
 80175e8:	3b01      	subs	r3, #1
 80175ea:	b29a      	uxth	r2, r3
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f47f aec2 	bne.w	801737e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2220      	movs	r2, #32
 80175fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	2200      	movs	r2, #0
 8017606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2200      	movs	r2, #0
 801760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017612:	2300      	movs	r3, #0
 8017614:	e000      	b.n	8017618 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017616:	2302      	movs	r3, #2
  }
}
 8017618:	4618      	mov	r0, r3
 801761a:	3728      	adds	r7, #40	; 0x28
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	00010004 	.word	0x00010004

08017624 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b088      	sub	sp, #32
 8017628:	af02      	add	r7, sp, #8
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	607a      	str	r2, [r7, #4]
 801762e:	603b      	str	r3, [r7, #0]
 8017630:	460b      	mov	r3, r1
 8017632:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017638:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	2b08      	cmp	r3, #8
 801763e:	d006      	beq.n	801764e <I2C_MasterRequestWrite+0x2a>
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	2b01      	cmp	r3, #1
 8017644:	d003      	beq.n	801764e <I2C_MasterRequestWrite+0x2a>
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801764c:	d108      	bne.n	8017660 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801765c:	601a      	str	r2, [r3, #0]
 801765e:	e00b      	b.n	8017678 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017664:	2b12      	cmp	r3, #18
 8017666:	d107      	bne.n	8017678 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017676:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	9300      	str	r3, [sp, #0]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2200      	movs	r2, #0
 8017680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f000 f91d 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d00d      	beq.n	80176ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801769a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801769e:	d103      	bne.n	80176a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80176a8:	2303      	movs	r3, #3
 80176aa:	e035      	b.n	8017718 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	691b      	ldr	r3, [r3, #16]
 80176b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80176b4:	d108      	bne.n	80176c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80176b6:	897b      	ldrh	r3, [r7, #10]
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	461a      	mov	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80176c4:	611a      	str	r2, [r3, #16]
 80176c6:	e01b      	b.n	8017700 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80176c8:	897b      	ldrh	r3, [r7, #10]
 80176ca:	11db      	asrs	r3, r3, #7
 80176cc:	b2db      	uxtb	r3, r3
 80176ce:	f003 0306 	and.w	r3, r3, #6
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	f063 030f 	orn	r3, r3, #15
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	490e      	ldr	r1, [pc, #56]	; (8017720 <I2C_MasterRequestWrite+0xfc>)
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f000 f943 	bl	8017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d001      	beq.n	80176f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80176f2:	2301      	movs	r3, #1
 80176f4:	e010      	b.n	8017718 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80176f6:	897b      	ldrh	r3, [r7, #10]
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	4907      	ldr	r1, [pc, #28]	; (8017724 <I2C_MasterRequestWrite+0x100>)
 8017706:	68f8      	ldr	r0, [r7, #12]
 8017708:	f000 f933 	bl	8017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d001      	beq.n	8017716 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8017712:	2301      	movs	r3, #1
 8017714:	e000      	b.n	8017718 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8017716:	2300      	movs	r3, #0
}
 8017718:	4618      	mov	r0, r3
 801771a:	3718      	adds	r7, #24
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}
 8017720:	00010008 	.word	0x00010008
 8017724:	00010002 	.word	0x00010002

08017728 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b088      	sub	sp, #32
 801772c:	af02      	add	r7, sp, #8
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	607a      	str	r2, [r7, #4]
 8017732:	603b      	str	r3, [r7, #0]
 8017734:	460b      	mov	r3, r1
 8017736:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801773c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801774c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	2b08      	cmp	r3, #8
 8017752:	d006      	beq.n	8017762 <I2C_MasterRequestRead+0x3a>
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	2b01      	cmp	r3, #1
 8017758:	d003      	beq.n	8017762 <I2C_MasterRequestRead+0x3a>
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017760:	d108      	bne.n	8017774 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017770:	601a      	str	r2, [r3, #0]
 8017772:	e00b      	b.n	801778c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017778:	2b11      	cmp	r3, #17
 801777a:	d107      	bne.n	801778c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801778a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	9300      	str	r3, [sp, #0]
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2200      	movs	r2, #0
 8017794:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017798:	68f8      	ldr	r0, [r7, #12]
 801779a:	f000 f893 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00d      	beq.n	80177c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177b2:	d103      	bne.n	80177bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80177bc:	2303      	movs	r3, #3
 80177be:	e079      	b.n	80178b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	691b      	ldr	r3, [r3, #16]
 80177c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80177c8:	d108      	bne.n	80177dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80177ca:	897b      	ldrh	r3, [r7, #10]
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	f043 0301 	orr.w	r3, r3, #1
 80177d2:	b2da      	uxtb	r2, r3
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	611a      	str	r2, [r3, #16]
 80177da:	e05f      	b.n	801789c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80177dc:	897b      	ldrh	r3, [r7, #10]
 80177de:	11db      	asrs	r3, r3, #7
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	f003 0306 	and.w	r3, r3, #6
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	f063 030f 	orn	r3, r3, #15
 80177ec:	b2da      	uxtb	r2, r3
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	4930      	ldr	r1, [pc, #192]	; (80178bc <I2C_MasterRequestRead+0x194>)
 80177fa:	68f8      	ldr	r0, [r7, #12]
 80177fc:	f000 f8b9 	bl	8017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017800:	4603      	mov	r3, r0
 8017802:	2b00      	cmp	r3, #0
 8017804:	d001      	beq.n	801780a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8017806:	2301      	movs	r3, #1
 8017808:	e054      	b.n	80178b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801780a:	897b      	ldrh	r3, [r7, #10]
 801780c:	b2da      	uxtb	r2, r3
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	687a      	ldr	r2, [r7, #4]
 8017818:	4929      	ldr	r1, [pc, #164]	; (80178c0 <I2C_MasterRequestRead+0x198>)
 801781a:	68f8      	ldr	r0, [r7, #12]
 801781c:	f000 f8a9 	bl	8017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017820:	4603      	mov	r3, r0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d001      	beq.n	801782a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8017826:	2301      	movs	r3, #1
 8017828:	e044      	b.n	80178b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801782a:	2300      	movs	r3, #0
 801782c:	613b      	str	r3, [r7, #16]
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	695b      	ldr	r3, [r3, #20]
 8017834:	613b      	str	r3, [r7, #16]
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	613b      	str	r3, [r7, #16]
 801783e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801784e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	9300      	str	r3, [sp, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2200      	movs	r2, #0
 8017858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f000 f831 	bl	80178c4 <I2C_WaitOnFlagUntilTimeout>
 8017862:	4603      	mov	r3, r0
 8017864:	2b00      	cmp	r3, #0
 8017866:	d00d      	beq.n	8017884 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017876:	d103      	bne.n	8017880 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801787e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8017880:	2303      	movs	r3, #3
 8017882:	e017      	b.n	80178b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8017884:	897b      	ldrh	r3, [r7, #10]
 8017886:	11db      	asrs	r3, r3, #7
 8017888:	b2db      	uxtb	r3, r3
 801788a:	f003 0306 	and.w	r3, r3, #6
 801788e:	b2db      	uxtb	r3, r3
 8017890:	f063 030e 	orn	r3, r3, #14
 8017894:	b2da      	uxtb	r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	4907      	ldr	r1, [pc, #28]	; (80178c0 <I2C_MasterRequestRead+0x198>)
 80178a2:	68f8      	ldr	r0, [r7, #12]
 80178a4:	f000 f865 	bl	8017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80178a8:	4603      	mov	r3, r0
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d001      	beq.n	80178b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80178ae:	2301      	movs	r3, #1
 80178b0:	e000      	b.n	80178b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80178b2:	2300      	movs	r3, #0
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3718      	adds	r7, #24
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	00010008 	.word	0x00010008
 80178c0:	00010002 	.word	0x00010002

080178c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	603b      	str	r3, [r7, #0]
 80178d0:	4613      	mov	r3, r2
 80178d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80178d4:	e025      	b.n	8017922 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178dc:	d021      	beq.n	8017922 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178de:	f7fd fdd5 	bl	801548c <HAL_GetTick>
 80178e2:	4602      	mov	r2, r0
 80178e4:	69bb      	ldr	r3, [r7, #24]
 80178e6:	1ad3      	subs	r3, r2, r3
 80178e8:	683a      	ldr	r2, [r7, #0]
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d302      	bcc.n	80178f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d116      	bne.n	8017922 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	2200      	movs	r2, #0
 80178f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2220      	movs	r2, #32
 80178fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2200      	movs	r2, #0
 8017906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790e:	f043 0220 	orr.w	r2, r3, #32
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	2200      	movs	r2, #0
 801791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801791e:	2301      	movs	r3, #1
 8017920:	e023      	b.n	801796a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	0c1b      	lsrs	r3, r3, #16
 8017926:	b2db      	uxtb	r3, r3
 8017928:	2b01      	cmp	r3, #1
 801792a:	d10d      	bne.n	8017948 <I2C_WaitOnFlagUntilTimeout+0x84>
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	695b      	ldr	r3, [r3, #20]
 8017932:	43da      	mvns	r2, r3
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	4013      	ands	r3, r2
 8017938:	b29b      	uxth	r3, r3
 801793a:	2b00      	cmp	r3, #0
 801793c:	bf0c      	ite	eq
 801793e:	2301      	moveq	r3, #1
 8017940:	2300      	movne	r3, #0
 8017942:	b2db      	uxtb	r3, r3
 8017944:	461a      	mov	r2, r3
 8017946:	e00c      	b.n	8017962 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	699b      	ldr	r3, [r3, #24]
 801794e:	43da      	mvns	r2, r3
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	4013      	ands	r3, r2
 8017954:	b29b      	uxth	r3, r3
 8017956:	2b00      	cmp	r3, #0
 8017958:	bf0c      	ite	eq
 801795a:	2301      	moveq	r3, #1
 801795c:	2300      	movne	r3, #0
 801795e:	b2db      	uxtb	r3, r3
 8017960:	461a      	mov	r2, r3
 8017962:	79fb      	ldrb	r3, [r7, #7]
 8017964:	429a      	cmp	r2, r3
 8017966:	d0b6      	beq.n	80178d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017968:	2300      	movs	r3, #0
}
 801796a:	4618      	mov	r0, r3
 801796c:	3710      	adds	r7, #16
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}

08017972 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8017972:	b580      	push	{r7, lr}
 8017974:	b084      	sub	sp, #16
 8017976:	af00      	add	r7, sp, #0
 8017978:	60f8      	str	r0, [r7, #12]
 801797a:	60b9      	str	r1, [r7, #8]
 801797c:	607a      	str	r2, [r7, #4]
 801797e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017980:	e051      	b.n	8017a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	695b      	ldr	r3, [r3, #20]
 8017988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801798c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017990:	d123      	bne.n	80179da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	681a      	ldr	r2, [r3, #0]
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80179aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2200      	movs	r2, #0
 80179b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	2220      	movs	r2, #32
 80179b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2200      	movs	r2, #0
 80179be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179c6:	f043 0204 	orr.w	r2, r3, #4
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	2200      	movs	r2, #0
 80179d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80179d6:	2301      	movs	r3, #1
 80179d8:	e046      	b.n	8017a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179e0:	d021      	beq.n	8017a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179e2:	f7fd fd53 	bl	801548c <HAL_GetTick>
 80179e6:	4602      	mov	r2, r0
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	1ad3      	subs	r3, r2, r3
 80179ec:	687a      	ldr	r2, [r7, #4]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d302      	bcc.n	80179f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d116      	bne.n	8017a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2200      	movs	r2, #0
 80179fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	2220      	movs	r2, #32
 8017a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a12:	f043 0220 	orr.w	r2, r3, #32
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017a22:	2301      	movs	r3, #1
 8017a24:	e020      	b.n	8017a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	0c1b      	lsrs	r3, r3, #16
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	2b01      	cmp	r3, #1
 8017a2e:	d10c      	bne.n	8017a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	695b      	ldr	r3, [r3, #20]
 8017a36:	43da      	mvns	r2, r3
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	4013      	ands	r3, r2
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	bf14      	ite	ne
 8017a42:	2301      	movne	r3, #1
 8017a44:	2300      	moveq	r3, #0
 8017a46:	b2db      	uxtb	r3, r3
 8017a48:	e00b      	b.n	8017a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	699b      	ldr	r3, [r3, #24]
 8017a50:	43da      	mvns	r2, r3
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	4013      	ands	r3, r2
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	bf14      	ite	ne
 8017a5c:	2301      	movne	r3, #1
 8017a5e:	2300      	moveq	r3, #0
 8017a60:	b2db      	uxtb	r3, r3
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d18d      	bne.n	8017982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8017a66:	2300      	movs	r3, #0
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3710      	adds	r7, #16
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b084      	sub	sp, #16
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	60f8      	str	r0, [r7, #12]
 8017a78:	60b9      	str	r1, [r7, #8]
 8017a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017a7c:	e02d      	b.n	8017ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017a7e:	68f8      	ldr	r0, [r7, #12]
 8017a80:	f000 f8ce 	bl	8017c20 <I2C_IsAcknowledgeFailed>
 8017a84:	4603      	mov	r3, r0
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d001      	beq.n	8017a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	e02d      	b.n	8017aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a94:	d021      	beq.n	8017ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a96:	f7fd fcf9 	bl	801548c <HAL_GetTick>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	1ad3      	subs	r3, r2, r3
 8017aa0:	68ba      	ldr	r2, [r7, #8]
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	d302      	bcc.n	8017aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d116      	bne.n	8017ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	2200      	movs	r2, #0
 8017ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2220      	movs	r2, #32
 8017ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2200      	movs	r2, #0
 8017abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ac6:	f043 0220 	orr.w	r2, r3, #32
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	e007      	b.n	8017aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	695b      	ldr	r3, [r3, #20]
 8017ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ae4:	2b80      	cmp	r3, #128	; 0x80
 8017ae6:	d1ca      	bne.n	8017a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017ae8:	2300      	movs	r3, #0
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	3710      	adds	r7, #16
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd80      	pop	{r7, pc}

08017af2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017af2:	b580      	push	{r7, lr}
 8017af4:	b084      	sub	sp, #16
 8017af6:	af00      	add	r7, sp, #0
 8017af8:	60f8      	str	r0, [r7, #12]
 8017afa:	60b9      	str	r1, [r7, #8]
 8017afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017afe:	e02d      	b.n	8017b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017b00:	68f8      	ldr	r0, [r7, #12]
 8017b02:	f000 f88d 	bl	8017c20 <I2C_IsAcknowledgeFailed>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d001      	beq.n	8017b10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8017b0c:	2301      	movs	r3, #1
 8017b0e:	e02d      	b.n	8017b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b16:	d021      	beq.n	8017b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017b18:	f7fd fcb8 	bl	801548c <HAL_GetTick>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	1ad3      	subs	r3, r2, r3
 8017b22:	68ba      	ldr	r2, [r7, #8]
 8017b24:	429a      	cmp	r2, r3
 8017b26:	d302      	bcc.n	8017b2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d116      	bne.n	8017b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	2200      	movs	r2, #0
 8017b32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	2220      	movs	r2, #32
 8017b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b48:	f043 0220 	orr.w	r2, r3, #32
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	2200      	movs	r2, #0
 8017b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	e007      	b.n	8017b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	695b      	ldr	r3, [r3, #20]
 8017b62:	f003 0304 	and.w	r3, r3, #4
 8017b66:	2b04      	cmp	r3, #4
 8017b68:	d1ca      	bne.n	8017b00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017b6a:	2300      	movs	r3, #0
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b084      	sub	sp, #16
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017b80:	e042      	b.n	8017c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	695b      	ldr	r3, [r3, #20]
 8017b88:	f003 0310 	and.w	r3, r3, #16
 8017b8c:	2b10      	cmp	r3, #16
 8017b8e:	d119      	bne.n	8017bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	f06f 0210 	mvn.w	r2, #16
 8017b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	2220      	movs	r2, #32
 8017ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2200      	movs	r2, #0
 8017bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	e029      	b.n	8017c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017bc4:	f7fd fc62 	bl	801548c <HAL_GetTick>
 8017bc8:	4602      	mov	r2, r0
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	1ad3      	subs	r3, r2, r3
 8017bce:	68ba      	ldr	r2, [r7, #8]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d302      	bcc.n	8017bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d116      	bne.n	8017c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	2220      	movs	r2, #32
 8017be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	2200      	movs	r2, #0
 8017bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf4:	f043 0220 	orr.w	r2, r3, #32
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8017c04:	2301      	movs	r3, #1
 8017c06:	e007      	b.n	8017c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	695b      	ldr	r3, [r3, #20]
 8017c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c12:	2b40      	cmp	r3, #64	; 0x40
 8017c14:	d1b5      	bne.n	8017b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8017c16:	2300      	movs	r3, #0
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	3710      	adds	r7, #16
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8017c20:	b480      	push	{r7}
 8017c22:	b083      	sub	sp, #12
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c36:	d11b      	bne.n	8017c70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017c40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	2200      	movs	r2, #0
 8017c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2220      	movs	r2, #32
 8017c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2200      	movs	r2, #0
 8017c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c5c:	f043 0204 	orr.w	r2, r3, #4
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2200      	movs	r2, #0
 8017c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e000      	b.n	8017c72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8017c70:	2300      	movs	r3, #0
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	370c      	adds	r7, #12
 8017c76:	46bd      	mov	sp, r7
 8017c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7c:	4770      	bx	lr

08017c7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c80:	b08f      	sub	sp, #60	; 0x3c
 8017c82:	af0a      	add	r7, sp, #40	; 0x28
 8017c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d101      	bne.n	8017c90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	e10f      	b.n	8017eb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8017c9c:	b2db      	uxtb	r3, r3
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d106      	bne.n	8017cb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f009 fe1e 	bl	80218ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2203      	movs	r2, #3
 8017cb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d102      	bne.n	8017cca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f003 fedd 	bl	801ba8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	603b      	str	r3, [r7, #0]
 8017cda:	687e      	ldr	r6, [r7, #4]
 8017cdc:	466d      	mov	r5, sp
 8017cde:	f106 0410 	add.w	r4, r6, #16
 8017ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017cea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017cee:	e885 0003 	stmia.w	r5, {r0, r1}
 8017cf2:	1d33      	adds	r3, r6, #4
 8017cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017cf6:	6838      	ldr	r0, [r7, #0]
 8017cf8:	f003 fdb4 	bl	801b864 <USB_CoreInit>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d005      	beq.n	8017d0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2202      	movs	r2, #2
 8017d06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e0d0      	b.n	8017eb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2100      	movs	r1, #0
 8017d14:	4618      	mov	r0, r3
 8017d16:	f003 fecb 	bl	801bab0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	73fb      	strb	r3, [r7, #15]
 8017d1e:	e04a      	b.n	8017db6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017d20:	7bfa      	ldrb	r2, [r7, #15]
 8017d22:	6879      	ldr	r1, [r7, #4]
 8017d24:	4613      	mov	r3, r2
 8017d26:	00db      	lsls	r3, r3, #3
 8017d28:	1a9b      	subs	r3, r3, r2
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	440b      	add	r3, r1
 8017d2e:	333d      	adds	r3, #61	; 0x3d
 8017d30:	2201      	movs	r2, #1
 8017d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017d34:	7bfa      	ldrb	r2, [r7, #15]
 8017d36:	6879      	ldr	r1, [r7, #4]
 8017d38:	4613      	mov	r3, r2
 8017d3a:	00db      	lsls	r3, r3, #3
 8017d3c:	1a9b      	subs	r3, r3, r2
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	440b      	add	r3, r1
 8017d42:	333c      	adds	r3, #60	; 0x3c
 8017d44:	7bfa      	ldrb	r2, [r7, #15]
 8017d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8017d48:	7bfa      	ldrb	r2, [r7, #15]
 8017d4a:	7bfb      	ldrb	r3, [r7, #15]
 8017d4c:	b298      	uxth	r0, r3
 8017d4e:	6879      	ldr	r1, [r7, #4]
 8017d50:	4613      	mov	r3, r2
 8017d52:	00db      	lsls	r3, r3, #3
 8017d54:	1a9b      	subs	r3, r3, r2
 8017d56:	009b      	lsls	r3, r3, #2
 8017d58:	440b      	add	r3, r1
 8017d5a:	3342      	adds	r3, #66	; 0x42
 8017d5c:	4602      	mov	r2, r0
 8017d5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017d60:	7bfa      	ldrb	r2, [r7, #15]
 8017d62:	6879      	ldr	r1, [r7, #4]
 8017d64:	4613      	mov	r3, r2
 8017d66:	00db      	lsls	r3, r3, #3
 8017d68:	1a9b      	subs	r3, r3, r2
 8017d6a:	009b      	lsls	r3, r3, #2
 8017d6c:	440b      	add	r3, r1
 8017d6e:	333f      	adds	r3, #63	; 0x3f
 8017d70:	2200      	movs	r2, #0
 8017d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017d74:	7bfa      	ldrb	r2, [r7, #15]
 8017d76:	6879      	ldr	r1, [r7, #4]
 8017d78:	4613      	mov	r3, r2
 8017d7a:	00db      	lsls	r3, r3, #3
 8017d7c:	1a9b      	subs	r3, r3, r2
 8017d7e:	009b      	lsls	r3, r3, #2
 8017d80:	440b      	add	r3, r1
 8017d82:	3344      	adds	r3, #68	; 0x44
 8017d84:	2200      	movs	r2, #0
 8017d86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017d88:	7bfa      	ldrb	r2, [r7, #15]
 8017d8a:	6879      	ldr	r1, [r7, #4]
 8017d8c:	4613      	mov	r3, r2
 8017d8e:	00db      	lsls	r3, r3, #3
 8017d90:	1a9b      	subs	r3, r3, r2
 8017d92:	009b      	lsls	r3, r3, #2
 8017d94:	440b      	add	r3, r1
 8017d96:	3348      	adds	r3, #72	; 0x48
 8017d98:	2200      	movs	r2, #0
 8017d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017d9c:	7bfa      	ldrb	r2, [r7, #15]
 8017d9e:	6879      	ldr	r1, [r7, #4]
 8017da0:	4613      	mov	r3, r2
 8017da2:	00db      	lsls	r3, r3, #3
 8017da4:	1a9b      	subs	r3, r3, r2
 8017da6:	009b      	lsls	r3, r3, #2
 8017da8:	440b      	add	r3, r1
 8017daa:	3350      	adds	r3, #80	; 0x50
 8017dac:	2200      	movs	r2, #0
 8017dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017db0:	7bfb      	ldrb	r3, [r7, #15]
 8017db2:	3301      	adds	r3, #1
 8017db4:	73fb      	strb	r3, [r7, #15]
 8017db6:	7bfa      	ldrb	r2, [r7, #15]
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	685b      	ldr	r3, [r3, #4]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d3af      	bcc.n	8017d20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	73fb      	strb	r3, [r7, #15]
 8017dc4:	e044      	b.n	8017e50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017dc6:	7bfa      	ldrb	r2, [r7, #15]
 8017dc8:	6879      	ldr	r1, [r7, #4]
 8017dca:	4613      	mov	r3, r2
 8017dcc:	00db      	lsls	r3, r3, #3
 8017dce:	1a9b      	subs	r3, r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	440b      	add	r3, r1
 8017dd4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8017dd8:	2200      	movs	r2, #0
 8017dda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017ddc:	7bfa      	ldrb	r2, [r7, #15]
 8017dde:	6879      	ldr	r1, [r7, #4]
 8017de0:	4613      	mov	r3, r2
 8017de2:	00db      	lsls	r3, r3, #3
 8017de4:	1a9b      	subs	r3, r3, r2
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	440b      	add	r3, r1
 8017dea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017dee:	7bfa      	ldrb	r2, [r7, #15]
 8017df0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017df2:	7bfa      	ldrb	r2, [r7, #15]
 8017df4:	6879      	ldr	r1, [r7, #4]
 8017df6:	4613      	mov	r3, r2
 8017df8:	00db      	lsls	r3, r3, #3
 8017dfa:	1a9b      	subs	r3, r3, r2
 8017dfc:	009b      	lsls	r3, r3, #2
 8017dfe:	440b      	add	r3, r1
 8017e00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017e04:	2200      	movs	r2, #0
 8017e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017e08:	7bfa      	ldrb	r2, [r7, #15]
 8017e0a:	6879      	ldr	r1, [r7, #4]
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	00db      	lsls	r3, r3, #3
 8017e10:	1a9b      	subs	r3, r3, r2
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	440b      	add	r3, r1
 8017e16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017e1e:	7bfa      	ldrb	r2, [r7, #15]
 8017e20:	6879      	ldr	r1, [r7, #4]
 8017e22:	4613      	mov	r3, r2
 8017e24:	00db      	lsls	r3, r3, #3
 8017e26:	1a9b      	subs	r3, r3, r2
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	440b      	add	r3, r1
 8017e2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017e30:	2200      	movs	r2, #0
 8017e32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017e34:	7bfa      	ldrb	r2, [r7, #15]
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	4613      	mov	r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	1a9b      	subs	r3, r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	440b      	add	r3, r1
 8017e42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8017e46:	2200      	movs	r2, #0
 8017e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017e4a:	7bfb      	ldrb	r3, [r7, #15]
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	73fb      	strb	r3, [r7, #15]
 8017e50:	7bfa      	ldrb	r2, [r7, #15]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d3b5      	bcc.n	8017dc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	603b      	str	r3, [r7, #0]
 8017e60:	687e      	ldr	r6, [r7, #4]
 8017e62:	466d      	mov	r5, sp
 8017e64:	f106 0410 	add.w	r4, r6, #16
 8017e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017e74:	e885 0003 	stmia.w	r5, {r0, r1}
 8017e78:	1d33      	adds	r3, r6, #4
 8017e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017e7c:	6838      	ldr	r0, [r7, #0]
 8017e7e:	f003 fe63 	bl	801bb48 <USB_DevInit>
 8017e82:	4603      	mov	r3, r0
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d005      	beq.n	8017e94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2202      	movs	r2, #2
 8017e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8017e90:	2301      	movs	r3, #1
 8017e92:	e00d      	b.n	8017eb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	2200      	movs	r2, #0
 8017e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f004 fedf 	bl	801cc6c <USB_DevDisconnect>

  return HAL_OK;
 8017eae:	2300      	movs	r3, #0
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3714      	adds	r7, #20
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017eb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d101      	bne.n	8017ed4 <HAL_PCD_Start+0x1c>
 8017ed0:	2302      	movs	r3, #2
 8017ed2:	e020      	b.n	8017f16 <HAL_PCD_Start+0x5e>
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ee0:	2b01      	cmp	r3, #1
 8017ee2:	d109      	bne.n	8017ef8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d005      	beq.n	8017ef8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	4618      	mov	r0, r3
 8017efe:	f003 fdb5 	bl	801ba6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	4618      	mov	r0, r3
 8017f08:	f004 fe8f 	bl	801cc2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8017f14:	2300      	movs	r3, #0
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}

08017f1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8017f1e:	b590      	push	{r4, r7, lr}
 8017f20:	b08d      	sub	sp, #52	; 0x34
 8017f22:	af00      	add	r7, sp, #0
 8017f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017f2c:	6a3b      	ldr	r3, [r7, #32]
 8017f2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	4618      	mov	r0, r3
 8017f36:	f004 ff4d 	bl	801cdd4 <USB_GetMode>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	f040 839d 	bne.w	801867c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f004 feb1 	bl	801ccae <USB_ReadInterrupts>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f000 8393 	beq.w	801867a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f004 fea8 	bl	801ccae <USB_ReadInterrupts>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	f003 0302 	and.w	r3, r3, #2
 8017f64:	2b02      	cmp	r3, #2
 8017f66:	d107      	bne.n	8017f78 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	695a      	ldr	r2, [r3, #20]
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	f002 0202 	and.w	r2, r2, #2
 8017f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f004 fe96 	bl	801ccae <USB_ReadInterrupts>
 8017f82:	4603      	mov	r3, r0
 8017f84:	f003 0310 	and.w	r3, r3, #16
 8017f88:	2b10      	cmp	r3, #16
 8017f8a:	d161      	bne.n	8018050 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	699a      	ldr	r2, [r3, #24]
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	f022 0210 	bic.w	r2, r2, #16
 8017f9a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8017f9c:	6a3b      	ldr	r3, [r7, #32]
 8017f9e:	6a1b      	ldr	r3, [r3, #32]
 8017fa0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	f003 020f 	and.w	r2, r3, #15
 8017fa8:	4613      	mov	r3, r2
 8017faa:	00db      	lsls	r3, r3, #3
 8017fac:	1a9b      	subs	r3, r3, r2
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8017fb4:	687a      	ldr	r2, [r7, #4]
 8017fb6:	4413      	add	r3, r2
 8017fb8:	3304      	adds	r3, #4
 8017fba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	0c5b      	lsrs	r3, r3, #17
 8017fc0:	f003 030f 	and.w	r3, r3, #15
 8017fc4:	2b02      	cmp	r3, #2
 8017fc6:	d124      	bne.n	8018012 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8017fc8:	69ba      	ldr	r2, [r7, #24]
 8017fca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8017fce:	4013      	ands	r3, r2
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d035      	beq.n	8018040 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8017fd8:	69bb      	ldr	r3, [r7, #24]
 8017fda:	091b      	lsrs	r3, r3, #4
 8017fdc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8017fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017fe2:	b29b      	uxth	r3, r3
 8017fe4:	461a      	mov	r2, r3
 8017fe6:	6a38      	ldr	r0, [r7, #32]
 8017fe8:	f004 fccd 	bl	801c986 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	68da      	ldr	r2, [r3, #12]
 8017ff0:	69bb      	ldr	r3, [r7, #24]
 8017ff2:	091b      	lsrs	r3, r3, #4
 8017ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017ff8:	441a      	add	r2, r3
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	699a      	ldr	r2, [r3, #24]
 8018002:	69bb      	ldr	r3, [r7, #24]
 8018004:	091b      	lsrs	r3, r3, #4
 8018006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801800a:	441a      	add	r2, r3
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	619a      	str	r2, [r3, #24]
 8018010:	e016      	b.n	8018040 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8018012:	69bb      	ldr	r3, [r7, #24]
 8018014:	0c5b      	lsrs	r3, r3, #17
 8018016:	f003 030f 	and.w	r3, r3, #15
 801801a:	2b06      	cmp	r3, #6
 801801c:	d110      	bne.n	8018040 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018024:	2208      	movs	r2, #8
 8018026:	4619      	mov	r1, r3
 8018028:	6a38      	ldr	r0, [r7, #32]
 801802a:	f004 fcac 	bl	801c986 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	699a      	ldr	r2, [r3, #24]
 8018032:	69bb      	ldr	r3, [r7, #24]
 8018034:	091b      	lsrs	r3, r3, #4
 8018036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801803a:	441a      	add	r2, r3
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	699a      	ldr	r2, [r3, #24]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	f042 0210 	orr.w	r2, r2, #16
 801804e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4618      	mov	r0, r3
 8018056:	f004 fe2a 	bl	801ccae <USB_ReadInterrupts>
 801805a:	4603      	mov	r3, r0
 801805c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018060:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8018064:	d16e      	bne.n	8018144 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8018066:	2300      	movs	r3, #0
 8018068:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4618      	mov	r0, r3
 8018070:	f004 fe30 	bl	801ccd4 <USB_ReadDevAllOutEpInterrupt>
 8018074:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8018076:	e062      	b.n	801813e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8018078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801807a:	f003 0301 	and.w	r3, r3, #1
 801807e:	2b00      	cmp	r3, #0
 8018080:	d057      	beq.n	8018132 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018088:	b2d2      	uxtb	r2, r2
 801808a:	4611      	mov	r1, r2
 801808c:	4618      	mov	r0, r3
 801808e:	f004 fe55 	bl	801cd3c <USB_ReadDevOutEPInterrupt>
 8018092:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	f003 0301 	and.w	r3, r3, #1
 801809a:	2b00      	cmp	r3, #0
 801809c:	d00c      	beq.n	80180b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a0:	015a      	lsls	r2, r3, #5
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	4413      	add	r3, r2
 80180a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80180aa:	461a      	mov	r2, r3
 80180ac:	2301      	movs	r3, #1
 80180ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80180b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f000 fdb0 	bl	8018c18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80180b8:	693b      	ldr	r3, [r7, #16]
 80180ba:	f003 0308 	and.w	r3, r3, #8
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d00c      	beq.n	80180dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80180c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c4:	015a      	lsls	r2, r3, #5
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	4413      	add	r3, r2
 80180ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80180ce:	461a      	mov	r2, r3
 80180d0:	2308      	movs	r3, #8
 80180d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80180d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	f000 feaa 	bl	8018e30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	f003 0310 	and.w	r3, r3, #16
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d008      	beq.n	80180f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80180e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e8:	015a      	lsls	r2, r3, #5
 80180ea:	69fb      	ldr	r3, [r7, #28]
 80180ec:	4413      	add	r3, r2
 80180ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80180f2:	461a      	mov	r2, r3
 80180f4:	2310      	movs	r3, #16
 80180f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	f003 0320 	and.w	r3, r3, #32
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d008      	beq.n	8018114 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8018102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018104:	015a      	lsls	r2, r3, #5
 8018106:	69fb      	ldr	r3, [r7, #28]
 8018108:	4413      	add	r3, r2
 801810a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801810e:	461a      	mov	r2, r3
 8018110:	2320      	movs	r3, #32
 8018112:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8018114:	693b      	ldr	r3, [r7, #16]
 8018116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801811a:	2b00      	cmp	r3, #0
 801811c:	d009      	beq.n	8018132 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018120:	015a      	lsls	r2, r3, #5
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	4413      	add	r3, r2
 8018126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801812a:	461a      	mov	r2, r3
 801812c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018130:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8018132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018134:	3301      	adds	r3, #1
 8018136:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8018138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801813a:	085b      	lsrs	r3, r3, #1
 801813c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018140:	2b00      	cmp	r3, #0
 8018142:	d199      	bne.n	8018078 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	4618      	mov	r0, r3
 801814a:	f004 fdb0 	bl	801ccae <USB_ReadInterrupts>
 801814e:	4603      	mov	r3, r0
 8018150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018154:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8018158:	f040 80c0 	bne.w	80182dc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4618      	mov	r0, r3
 8018162:	f004 fdd1 	bl	801cd08 <USB_ReadDevAllInEpInterrupt>
 8018166:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8018168:	2300      	movs	r3, #0
 801816a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801816c:	e0b2      	b.n	80182d4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018170:	f003 0301 	and.w	r3, r3, #1
 8018174:	2b00      	cmp	r3, #0
 8018176:	f000 80a7 	beq.w	80182c8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018180:	b2d2      	uxtb	r2, r2
 8018182:	4611      	mov	r1, r2
 8018184:	4618      	mov	r0, r3
 8018186:	f004 fdf7 	bl	801cd78 <USB_ReadDevInEPInterrupt>
 801818a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801818c:	693b      	ldr	r3, [r7, #16]
 801818e:	f003 0301 	and.w	r3, r3, #1
 8018192:	2b00      	cmp	r3, #0
 8018194:	d057      	beq.n	8018246 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	f003 030f 	and.w	r3, r3, #15
 801819c:	2201      	movs	r2, #1
 801819e:	fa02 f303 	lsl.w	r3, r2, r3
 80181a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80181a4:	69fb      	ldr	r3, [r7, #28]
 80181a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80181aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	43db      	mvns	r3, r3
 80181b0:	69f9      	ldr	r1, [r7, #28]
 80181b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80181b6:	4013      	ands	r3, r2
 80181b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80181ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181bc:	015a      	lsls	r2, r3, #5
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	4413      	add	r3, r2
 80181c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80181c6:	461a      	mov	r2, r3
 80181c8:	2301      	movs	r3, #1
 80181ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	691b      	ldr	r3, [r3, #16]
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d132      	bne.n	801823a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80181d4:	6879      	ldr	r1, [r7, #4]
 80181d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181d8:	4613      	mov	r3, r2
 80181da:	00db      	lsls	r3, r3, #3
 80181dc:	1a9b      	subs	r3, r3, r2
 80181de:	009b      	lsls	r3, r3, #2
 80181e0:	440b      	add	r3, r1
 80181e2:	3348      	adds	r3, #72	; 0x48
 80181e4:	6819      	ldr	r1, [r3, #0]
 80181e6:	6878      	ldr	r0, [r7, #4]
 80181e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ea:	4613      	mov	r3, r2
 80181ec:	00db      	lsls	r3, r3, #3
 80181ee:	1a9b      	subs	r3, r3, r2
 80181f0:	009b      	lsls	r3, r3, #2
 80181f2:	4403      	add	r3, r0
 80181f4:	3344      	adds	r3, #68	; 0x44
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	4419      	add	r1, r3
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181fe:	4613      	mov	r3, r2
 8018200:	00db      	lsls	r3, r3, #3
 8018202:	1a9b      	subs	r3, r3, r2
 8018204:	009b      	lsls	r3, r3, #2
 8018206:	4403      	add	r3, r0
 8018208:	3348      	adds	r3, #72	; 0x48
 801820a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820e:	2b00      	cmp	r3, #0
 8018210:	d113      	bne.n	801823a <HAL_PCD_IRQHandler+0x31c>
 8018212:	6879      	ldr	r1, [r7, #4]
 8018214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018216:	4613      	mov	r3, r2
 8018218:	00db      	lsls	r3, r3, #3
 801821a:	1a9b      	subs	r3, r3, r2
 801821c:	009b      	lsls	r3, r3, #2
 801821e:	440b      	add	r3, r1
 8018220:	3350      	adds	r3, #80	; 0x50
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d108      	bne.n	801823a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6818      	ldr	r0, [r3, #0]
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018232:	461a      	mov	r2, r3
 8018234:	2101      	movs	r1, #1
 8018236:	f004 fdff 	bl	801ce38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823c:	b2db      	uxtb	r3, r3
 801823e:	4619      	mov	r1, r3
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f009 fbd4 	bl	80219ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	f003 0308 	and.w	r3, r3, #8
 801824c:	2b00      	cmp	r3, #0
 801824e:	d008      	beq.n	8018262 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8018250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018252:	015a      	lsls	r2, r3, #5
 8018254:	69fb      	ldr	r3, [r7, #28]
 8018256:	4413      	add	r3, r2
 8018258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801825c:	461a      	mov	r2, r3
 801825e:	2308      	movs	r3, #8
 8018260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8018262:	693b      	ldr	r3, [r7, #16]
 8018264:	f003 0310 	and.w	r3, r3, #16
 8018268:	2b00      	cmp	r3, #0
 801826a:	d008      	beq.n	801827e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801826e:	015a      	lsls	r2, r3, #5
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	4413      	add	r3, r2
 8018274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018278:	461a      	mov	r2, r3
 801827a:	2310      	movs	r3, #16
 801827c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801827e:	693b      	ldr	r3, [r7, #16]
 8018280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018284:	2b00      	cmp	r3, #0
 8018286:	d008      	beq.n	801829a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8018288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828a:	015a      	lsls	r2, r3, #5
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	4413      	add	r3, r2
 8018290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018294:	461a      	mov	r2, r3
 8018296:	2340      	movs	r3, #64	; 0x40
 8018298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801829a:	693b      	ldr	r3, [r7, #16]
 801829c:	f003 0302 	and.w	r3, r3, #2
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d008      	beq.n	80182b6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80182a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a6:	015a      	lsls	r2, r3, #5
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	4413      	add	r3, r2
 80182ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80182b0:	461a      	mov	r2, r3
 80182b2:	2302      	movs	r3, #2
 80182b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80182b6:	693b      	ldr	r3, [r7, #16]
 80182b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d003      	beq.n	80182c8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80182c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f000 fc1b 	bl	8018afe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80182c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ca:	3301      	adds	r3, #1
 80182cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80182ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d0:	085b      	lsrs	r3, r3, #1
 80182d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80182d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	f47f af49 	bne.w	801816e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4618      	mov	r0, r3
 80182e2:	f004 fce4 	bl	801ccae <USB_ReadInterrupts>
 80182e6:	4603      	mov	r3, r0
 80182e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80182ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182f0:	d122      	bne.n	8018338 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80182f2:	69fb      	ldr	r3, [r7, #28]
 80182f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80182f8:	685b      	ldr	r3, [r3, #4]
 80182fa:	69fa      	ldr	r2, [r7, #28]
 80182fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018300:	f023 0301 	bic.w	r3, r3, #1
 8018304:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801830c:	2b01      	cmp	r3, #1
 801830e:	d108      	bne.n	8018322 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2200      	movs	r2, #0
 8018314:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8018318:	2100      	movs	r1, #0
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f000 fe26 	bl	8018f6c <HAL_PCDEx_LPM_Callback>
 8018320:	e002      	b.n	8018328 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f009 fbda 	bl	8021adc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	695a      	ldr	r2, [r3, #20]
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8018336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	4618      	mov	r0, r3
 801833e:	f004 fcb6 	bl	801ccae <USB_ReadInterrupts>
 8018342:	4603      	mov	r3, r0
 8018344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801834c:	d112      	bne.n	8018374 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801834e:	69fb      	ldr	r3, [r7, #28]
 8018350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018354:	689b      	ldr	r3, [r3, #8]
 8018356:	f003 0301 	and.w	r3, r3, #1
 801835a:	2b01      	cmp	r3, #1
 801835c:	d102      	bne.n	8018364 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f009 fb96 	bl	8021a90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	695a      	ldr	r2, [r3, #20]
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8018372:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4618      	mov	r0, r3
 801837a:	f004 fc98 	bl	801ccae <USB_ReadInterrupts>
 801837e:	4603      	mov	r3, r0
 8018380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018388:	f040 80c7 	bne.w	801851a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801838c:	69fb      	ldr	r3, [r7, #28]
 801838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	69fa      	ldr	r2, [r7, #28]
 8018396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801839a:	f023 0301 	bic.w	r3, r3, #1
 801839e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	2110      	movs	r1, #16
 80183a6:	4618      	mov	r0, r3
 80183a8:	f003 fd32 	bl	801be10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80183ac:	2300      	movs	r3, #0
 80183ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183b0:	e056      	b.n	8018460 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80183b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183b4:	015a      	lsls	r2, r3, #5
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	4413      	add	r3, r2
 80183ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80183be:	461a      	mov	r2, r3
 80183c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80183c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80183c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c8:	015a      	lsls	r2, r3, #5
 80183ca:	69fb      	ldr	r3, [r7, #28]
 80183cc:	4413      	add	r3, r2
 80183ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183d6:	0151      	lsls	r1, r2, #5
 80183d8:	69fa      	ldr	r2, [r7, #28]
 80183da:	440a      	add	r2, r1
 80183dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80183e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80183e4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80183e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e8:	015a      	lsls	r2, r3, #5
 80183ea:	69fb      	ldr	r3, [r7, #28]
 80183ec:	4413      	add	r3, r2
 80183ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183f6:	0151      	lsls	r1, r2, #5
 80183f8:	69fa      	ldr	r2, [r7, #28]
 80183fa:	440a      	add	r2, r1
 80183fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8018406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018408:	015a      	lsls	r2, r3, #5
 801840a:	69fb      	ldr	r3, [r7, #28]
 801840c:	4413      	add	r3, r2
 801840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018412:	461a      	mov	r2, r3
 8018414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841c:	015a      	lsls	r2, r3, #5
 801841e:	69fb      	ldr	r3, [r7, #28]
 8018420:	4413      	add	r3, r2
 8018422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801842a:	0151      	lsls	r1, r2, #5
 801842c:	69fa      	ldr	r2, [r7, #28]
 801842e:	440a      	add	r2, r1
 8018430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8018434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8018438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801843c:	015a      	lsls	r2, r3, #5
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	4413      	add	r3, r2
 8018442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801844a:	0151      	lsls	r1, r2, #5
 801844c:	69fa      	ldr	r2, [r7, #28]
 801844e:	440a      	add	r2, r1
 8018450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8018454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845c:	3301      	adds	r3, #1
 801845e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018466:	429a      	cmp	r2, r3
 8018468:	d3a3      	bcc.n	80183b2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801846a:	69fb      	ldr	r3, [r7, #28]
 801846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018470:	69db      	ldr	r3, [r3, #28]
 8018472:	69fa      	ldr	r2, [r7, #28]
 8018474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018478:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801847c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018482:	2b00      	cmp	r3, #0
 8018484:	d016      	beq.n	80184b4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8018486:	69fb      	ldr	r3, [r7, #28]
 8018488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801848c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018490:	69fa      	ldr	r2, [r7, #28]
 8018492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018496:	f043 030b 	orr.w	r3, r3, #11
 801849a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801849e:	69fb      	ldr	r3, [r7, #28]
 80184a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80184a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184a6:	69fa      	ldr	r2, [r7, #28]
 80184a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80184ac:	f043 030b 	orr.w	r3, r3, #11
 80184b0:	6453      	str	r3, [r2, #68]	; 0x44
 80184b2:	e015      	b.n	80184e0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80184ba:	695b      	ldr	r3, [r3, #20]
 80184bc:	69fa      	ldr	r2, [r7, #28]
 80184be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80184c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80184c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80184ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80184d2:	691b      	ldr	r3, [r3, #16]
 80184d4:	69fa      	ldr	r2, [r7, #28]
 80184d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80184da:	f043 030b 	orr.w	r3, r3, #11
 80184de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	69fa      	ldr	r2, [r7, #28]
 80184ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80184ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80184f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6818      	ldr	r0, [r3, #0]
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	691b      	ldr	r3, [r3, #16]
 80184fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8018504:	461a      	mov	r2, r3
 8018506:	f004 fc97 	bl	801ce38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	695a      	ldr	r2, [r3, #20]
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8018518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	4618      	mov	r0, r3
 8018520:	f004 fbc5 	bl	801ccae <USB_ReadInterrupts>
 8018524:	4603      	mov	r3, r0
 8018526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801852a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801852e:	d124      	bne.n	801857a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4618      	mov	r0, r3
 8018536:	f004 fc5b 	bl	801cdf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4618      	mov	r0, r3
 8018540:	f003 fcc3 	bl	801beca <USB_GetDevSpeed>
 8018544:	4603      	mov	r3, r0
 8018546:	461a      	mov	r2, r3
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681c      	ldr	r4, [r3, #0]
 8018550:	f001 f956 	bl	8019800 <HAL_RCC_GetHCLKFreq>
 8018554:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801855a:	b2db      	uxtb	r3, r3
 801855c:	461a      	mov	r2, r3
 801855e:	4620      	mov	r0, r4
 8018560:	f003 f9e2 	bl	801b928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	f009 fa6a 	bl	8021a3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	695a      	ldr	r2, [r3, #20]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8018578:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	4618      	mov	r0, r3
 8018580:	f004 fb95 	bl	801ccae <USB_ReadInterrupts>
 8018584:	4603      	mov	r3, r0
 8018586:	f003 0308 	and.w	r3, r3, #8
 801858a:	2b08      	cmp	r3, #8
 801858c:	d10a      	bne.n	80185a4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f009 fa47 	bl	8021a22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	695a      	ldr	r2, [r3, #20]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	f002 0208 	and.w	r2, r2, #8
 80185a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4618      	mov	r0, r3
 80185aa:	f004 fb80 	bl	801ccae <USB_ReadInterrupts>
 80185ae:	4603      	mov	r3, r0
 80185b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80185b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80185b8:	d10f      	bne.n	80185da <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80185ba:	2300      	movs	r3, #0
 80185bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80185be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c0:	b2db      	uxtb	r3, r3
 80185c2:	4619      	mov	r1, r3
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f009 faa9 	bl	8021b1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	695a      	ldr	r2, [r3, #20]
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80185d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	4618      	mov	r0, r3
 80185e0:	f004 fb65 	bl	801ccae <USB_ReadInterrupts>
 80185e4:	4603      	mov	r3, r0
 80185e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80185ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80185ee:	d10f      	bne.n	8018610 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80185f0:	2300      	movs	r3, #0
 80185f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80185f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	4619      	mov	r1, r3
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f009 fa7c 	bl	8021af8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	695a      	ldr	r2, [r3, #20]
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801860e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	4618      	mov	r0, r3
 8018616:	f004 fb4a 	bl	801ccae <USB_ReadInterrupts>
 801861a:	4603      	mov	r3, r0
 801861c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018624:	d10a      	bne.n	801863c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	f009 fa8a 	bl	8021b40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	695a      	ldr	r2, [r3, #20]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801863a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	4618      	mov	r0, r3
 8018642:	f004 fb34 	bl	801ccae <USB_ReadInterrupts>
 8018646:	4603      	mov	r3, r0
 8018648:	f003 0304 	and.w	r3, r3, #4
 801864c:	2b04      	cmp	r3, #4
 801864e:	d115      	bne.n	801867c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	685b      	ldr	r3, [r3, #4]
 8018656:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8018658:	69bb      	ldr	r3, [r7, #24]
 801865a:	f003 0304 	and.w	r3, r3, #4
 801865e:	2b00      	cmp	r3, #0
 8018660:	d002      	beq.n	8018668 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f009 fa7a 	bl	8021b5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	6859      	ldr	r1, [r3, #4]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	69ba      	ldr	r2, [r7, #24]
 8018674:	430a      	orrs	r2, r1
 8018676:	605a      	str	r2, [r3, #4]
 8018678:	e000      	b.n	801867c <HAL_PCD_IRQHandler+0x75e>
      return;
 801867a:	bf00      	nop
    }
  }
}
 801867c:	3734      	adds	r7, #52	; 0x34
 801867e:	46bd      	mov	sp, r7
 8018680:	bd90      	pop	{r4, r7, pc}

08018682 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b082      	sub	sp, #8
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
 801868a:	460b      	mov	r3, r1
 801868c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8018694:	2b01      	cmp	r3, #1
 8018696:	d101      	bne.n	801869c <HAL_PCD_SetAddress+0x1a>
 8018698:	2302      	movs	r3, #2
 801869a:	e013      	b.n	80186c4 <HAL_PCD_SetAddress+0x42>
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2201      	movs	r2, #1
 80186a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	78fa      	ldrb	r2, [r7, #3]
 80186a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	78fa      	ldrb	r2, [r7, #3]
 80186b2:	4611      	mov	r1, r2
 80186b4:	4618      	mov	r0, r3
 80186b6:	f004 fa92 	bl	801cbde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	2200      	movs	r2, #0
 80186be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80186c2:	2300      	movs	r3, #0
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	4608      	mov	r0, r1
 80186d6:	4611      	mov	r1, r2
 80186d8:	461a      	mov	r2, r3
 80186da:	4603      	mov	r3, r0
 80186dc:	70fb      	strb	r3, [r7, #3]
 80186de:	460b      	mov	r3, r1
 80186e0:	803b      	strh	r3, [r7, #0]
 80186e2:	4613      	mov	r3, r2
 80186e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80186e6:	2300      	movs	r3, #0
 80186e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80186ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	da0f      	bge.n	8018712 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80186f2:	78fb      	ldrb	r3, [r7, #3]
 80186f4:	f003 020f 	and.w	r2, r3, #15
 80186f8:	4613      	mov	r3, r2
 80186fa:	00db      	lsls	r3, r3, #3
 80186fc:	1a9b      	subs	r3, r3, r2
 80186fe:	009b      	lsls	r3, r3, #2
 8018700:	3338      	adds	r3, #56	; 0x38
 8018702:	687a      	ldr	r2, [r7, #4]
 8018704:	4413      	add	r3, r2
 8018706:	3304      	adds	r3, #4
 8018708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2201      	movs	r2, #1
 801870e:	705a      	strb	r2, [r3, #1]
 8018710:	e00f      	b.n	8018732 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018712:	78fb      	ldrb	r3, [r7, #3]
 8018714:	f003 020f 	and.w	r2, r3, #15
 8018718:	4613      	mov	r3, r2
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	1a9b      	subs	r3, r3, r2
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	4413      	add	r3, r2
 8018728:	3304      	adds	r3, #4
 801872a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2200      	movs	r2, #0
 8018730:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018732:	78fb      	ldrb	r3, [r7, #3]
 8018734:	f003 030f 	and.w	r3, r3, #15
 8018738:	b2da      	uxtb	r2, r3
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801873e:	883a      	ldrh	r2, [r7, #0]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	78ba      	ldrb	r2, [r7, #2]
 8018748:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	785b      	ldrb	r3, [r3, #1]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d004      	beq.n	801875c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	b29a      	uxth	r2, r3
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801875c:	78bb      	ldrb	r3, [r7, #2]
 801875e:	2b02      	cmp	r3, #2
 8018760:	d102      	bne.n	8018768 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2200      	movs	r2, #0
 8018766:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801876e:	2b01      	cmp	r3, #1
 8018770:	d101      	bne.n	8018776 <HAL_PCD_EP_Open+0xaa>
 8018772:	2302      	movs	r3, #2
 8018774:	e00e      	b.n	8018794 <HAL_PCD_EP_Open+0xc8>
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2201      	movs	r2, #1
 801877a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	68f9      	ldr	r1, [r7, #12]
 8018784:	4618      	mov	r0, r3
 8018786:	f003 fbc5 	bl	801bf14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	2200      	movs	r2, #0
 801878e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8018792:	7afb      	ldrb	r3, [r7, #11]
}
 8018794:	4618      	mov	r0, r3
 8018796:	3710      	adds	r7, #16
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b084      	sub	sp, #16
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	460b      	mov	r3, r1
 80187a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80187a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	da0f      	bge.n	80187d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80187b0:	78fb      	ldrb	r3, [r7, #3]
 80187b2:	f003 020f 	and.w	r2, r3, #15
 80187b6:	4613      	mov	r3, r2
 80187b8:	00db      	lsls	r3, r3, #3
 80187ba:	1a9b      	subs	r3, r3, r2
 80187bc:	009b      	lsls	r3, r3, #2
 80187be:	3338      	adds	r3, #56	; 0x38
 80187c0:	687a      	ldr	r2, [r7, #4]
 80187c2:	4413      	add	r3, r2
 80187c4:	3304      	adds	r3, #4
 80187c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2201      	movs	r2, #1
 80187cc:	705a      	strb	r2, [r3, #1]
 80187ce:	e00f      	b.n	80187f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80187d0:	78fb      	ldrb	r3, [r7, #3]
 80187d2:	f003 020f 	and.w	r2, r3, #15
 80187d6:	4613      	mov	r3, r2
 80187d8:	00db      	lsls	r3, r3, #3
 80187da:	1a9b      	subs	r3, r3, r2
 80187dc:	009b      	lsls	r3, r3, #2
 80187de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	4413      	add	r3, r2
 80187e6:	3304      	adds	r3, #4
 80187e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	2200      	movs	r2, #0
 80187ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80187f0:	78fb      	ldrb	r3, [r7, #3]
 80187f2:	f003 030f 	and.w	r3, r3, #15
 80187f6:	b2da      	uxtb	r2, r3
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8018802:	2b01      	cmp	r3, #1
 8018804:	d101      	bne.n	801880a <HAL_PCD_EP_Close+0x6e>
 8018806:	2302      	movs	r3, #2
 8018808:	e00e      	b.n	8018828 <HAL_PCD_EP_Close+0x8c>
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2201      	movs	r2, #1
 801880e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	68f9      	ldr	r1, [r7, #12]
 8018818:	4618      	mov	r0, r3
 801881a:	f003 fc03 	bl	801c024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	2200      	movs	r2, #0
 8018822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8018826:	2300      	movs	r3, #0
}
 8018828:	4618      	mov	r0, r3
 801882a:	3710      	adds	r7, #16
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}

08018830 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b086      	sub	sp, #24
 8018834:	af00      	add	r7, sp, #0
 8018836:	60f8      	str	r0, [r7, #12]
 8018838:	607a      	str	r2, [r7, #4]
 801883a:	603b      	str	r3, [r7, #0]
 801883c:	460b      	mov	r3, r1
 801883e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018840:	7afb      	ldrb	r3, [r7, #11]
 8018842:	f003 020f 	and.w	r2, r3, #15
 8018846:	4613      	mov	r3, r2
 8018848:	00db      	lsls	r3, r3, #3
 801884a:	1a9b      	subs	r3, r3, r2
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8018852:	68fa      	ldr	r2, [r7, #12]
 8018854:	4413      	add	r3, r2
 8018856:	3304      	adds	r3, #4
 8018858:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	687a      	ldr	r2, [r7, #4]
 801885e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	683a      	ldr	r2, [r7, #0]
 8018864:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	2200      	movs	r2, #0
 801886a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801886c:	697b      	ldr	r3, [r7, #20]
 801886e:	2200      	movs	r2, #0
 8018870:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018872:	7afb      	ldrb	r3, [r7, #11]
 8018874:	f003 030f 	and.w	r3, r3, #15
 8018878:	b2da      	uxtb	r2, r3
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	691b      	ldr	r3, [r3, #16]
 8018882:	2b01      	cmp	r3, #1
 8018884:	d102      	bne.n	801888c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8018886:	687a      	ldr	r2, [r7, #4]
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801888c:	7afb      	ldrb	r3, [r7, #11]
 801888e:	f003 030f 	and.w	r3, r3, #15
 8018892:	2b00      	cmp	r3, #0
 8018894:	d109      	bne.n	80188aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	6818      	ldr	r0, [r3, #0]
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	b2db      	uxtb	r3, r3
 80188a0:	461a      	mov	r2, r3
 80188a2:	6979      	ldr	r1, [r7, #20]
 80188a4:	f003 fede 	bl	801c664 <USB_EP0StartXfer>
 80188a8:	e008      	b.n	80188bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	6818      	ldr	r0, [r3, #0]
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	691b      	ldr	r3, [r3, #16]
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	461a      	mov	r2, r3
 80188b6:	6979      	ldr	r1, [r7, #20]
 80188b8:	f003 fc90 	bl	801c1dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80188bc:	2300      	movs	r3, #0
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3718      	adds	r7, #24
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}

080188c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80188c6:	b480      	push	{r7}
 80188c8:	b083      	sub	sp, #12
 80188ca:	af00      	add	r7, sp, #0
 80188cc:	6078      	str	r0, [r7, #4]
 80188ce:	460b      	mov	r3, r1
 80188d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80188d2:	78fb      	ldrb	r3, [r7, #3]
 80188d4:	f003 020f 	and.w	r2, r3, #15
 80188d8:	6879      	ldr	r1, [r7, #4]
 80188da:	4613      	mov	r3, r2
 80188dc:	00db      	lsls	r3, r3, #3
 80188de:	1a9b      	subs	r3, r3, r2
 80188e0:	009b      	lsls	r3, r3, #2
 80188e2:	440b      	add	r3, r1
 80188e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80188e8:	681b      	ldr	r3, [r3, #0]
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	370c      	adds	r7, #12
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr

080188f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80188f6:	b580      	push	{r7, lr}
 80188f8:	b086      	sub	sp, #24
 80188fa:	af00      	add	r7, sp, #0
 80188fc:	60f8      	str	r0, [r7, #12]
 80188fe:	607a      	str	r2, [r7, #4]
 8018900:	603b      	str	r3, [r7, #0]
 8018902:	460b      	mov	r3, r1
 8018904:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018906:	7afb      	ldrb	r3, [r7, #11]
 8018908:	f003 020f 	and.w	r2, r3, #15
 801890c:	4613      	mov	r3, r2
 801890e:	00db      	lsls	r3, r3, #3
 8018910:	1a9b      	subs	r3, r3, r2
 8018912:	009b      	lsls	r3, r3, #2
 8018914:	3338      	adds	r3, #56	; 0x38
 8018916:	68fa      	ldr	r2, [r7, #12]
 8018918:	4413      	add	r3, r2
 801891a:	3304      	adds	r3, #4
 801891c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801891e:	697b      	ldr	r3, [r7, #20]
 8018920:	687a      	ldr	r2, [r7, #4]
 8018922:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8018924:	697b      	ldr	r3, [r7, #20]
 8018926:	683a      	ldr	r2, [r7, #0]
 8018928:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801892a:	697b      	ldr	r3, [r7, #20]
 801892c:	2200      	movs	r2, #0
 801892e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8018930:	697b      	ldr	r3, [r7, #20]
 8018932:	2201      	movs	r2, #1
 8018934:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018936:	7afb      	ldrb	r3, [r7, #11]
 8018938:	f003 030f 	and.w	r3, r3, #15
 801893c:	b2da      	uxtb	r2, r3
 801893e:	697b      	ldr	r3, [r7, #20]
 8018940:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	691b      	ldr	r3, [r3, #16]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d102      	bne.n	8018950 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801894a:	687a      	ldr	r2, [r7, #4]
 801894c:	697b      	ldr	r3, [r7, #20]
 801894e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8018950:	7afb      	ldrb	r3, [r7, #11]
 8018952:	f003 030f 	and.w	r3, r3, #15
 8018956:	2b00      	cmp	r3, #0
 8018958:	d109      	bne.n	801896e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	6818      	ldr	r0, [r3, #0]
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	691b      	ldr	r3, [r3, #16]
 8018962:	b2db      	uxtb	r3, r3
 8018964:	461a      	mov	r2, r3
 8018966:	6979      	ldr	r1, [r7, #20]
 8018968:	f003 fe7c 	bl	801c664 <USB_EP0StartXfer>
 801896c:	e008      	b.n	8018980 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	6818      	ldr	r0, [r3, #0]
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	691b      	ldr	r3, [r3, #16]
 8018976:	b2db      	uxtb	r3, r3
 8018978:	461a      	mov	r2, r3
 801897a:	6979      	ldr	r1, [r7, #20]
 801897c:	f003 fc2e 	bl	801c1dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8018980:	2300      	movs	r3, #0
}
 8018982:	4618      	mov	r0, r3
 8018984:	3718      	adds	r7, #24
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}

0801898a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801898a:	b580      	push	{r7, lr}
 801898c:	b084      	sub	sp, #16
 801898e:	af00      	add	r7, sp, #0
 8018990:	6078      	str	r0, [r7, #4]
 8018992:	460b      	mov	r3, r1
 8018994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018996:	78fb      	ldrb	r3, [r7, #3]
 8018998:	f003 020f 	and.w	r2, r3, #15
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	685b      	ldr	r3, [r3, #4]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d901      	bls.n	80189a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80189a4:	2301      	movs	r3, #1
 80189a6:	e050      	b.n	8018a4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80189a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	da0f      	bge.n	80189d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80189b0:	78fb      	ldrb	r3, [r7, #3]
 80189b2:	f003 020f 	and.w	r2, r3, #15
 80189b6:	4613      	mov	r3, r2
 80189b8:	00db      	lsls	r3, r3, #3
 80189ba:	1a9b      	subs	r3, r3, r2
 80189bc:	009b      	lsls	r3, r3, #2
 80189be:	3338      	adds	r3, #56	; 0x38
 80189c0:	687a      	ldr	r2, [r7, #4]
 80189c2:	4413      	add	r3, r2
 80189c4:	3304      	adds	r3, #4
 80189c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	2201      	movs	r2, #1
 80189cc:	705a      	strb	r2, [r3, #1]
 80189ce:	e00d      	b.n	80189ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80189d0:	78fa      	ldrb	r2, [r7, #3]
 80189d2:	4613      	mov	r3, r2
 80189d4:	00db      	lsls	r3, r3, #3
 80189d6:	1a9b      	subs	r3, r3, r2
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80189de:	687a      	ldr	r2, [r7, #4]
 80189e0:	4413      	add	r3, r2
 80189e2:	3304      	adds	r3, #4
 80189e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2200      	movs	r2, #0
 80189ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2201      	movs	r2, #1
 80189f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80189f2:	78fb      	ldrb	r3, [r7, #3]
 80189f4:	f003 030f 	and.w	r3, r3, #15
 80189f8:	b2da      	uxtb	r2, r3
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d101      	bne.n	8018a0c <HAL_PCD_EP_SetStall+0x82>
 8018a08:	2302      	movs	r3, #2
 8018a0a:	e01e      	b.n	8018a4a <HAL_PCD_EP_SetStall+0xc0>
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2201      	movs	r2, #1
 8018a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	68f9      	ldr	r1, [r7, #12]
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f004 f80b 	bl	801ca36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8018a20:	78fb      	ldrb	r3, [r7, #3]
 8018a22:	f003 030f 	and.w	r3, r3, #15
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d10a      	bne.n	8018a40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6818      	ldr	r0, [r3, #0]
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	691b      	ldr	r3, [r3, #16]
 8018a32:	b2d9      	uxtb	r1, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018a3a:	461a      	mov	r2, r3
 8018a3c:	f004 f9fc 	bl	801ce38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	2200      	movs	r2, #0
 8018a44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8018a48:	2300      	movs	r3, #0
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	3710      	adds	r7, #16
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}

08018a52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018a52:	b580      	push	{r7, lr}
 8018a54:	b084      	sub	sp, #16
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	6078      	str	r0, [r7, #4]
 8018a5a:	460b      	mov	r3, r1
 8018a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018a5e:	78fb      	ldrb	r3, [r7, #3]
 8018a60:	f003 020f 	and.w	r2, r3, #15
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	d901      	bls.n	8018a70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	e042      	b.n	8018af6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	da0f      	bge.n	8018a98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018a78:	78fb      	ldrb	r3, [r7, #3]
 8018a7a:	f003 020f 	and.w	r2, r3, #15
 8018a7e:	4613      	mov	r3, r2
 8018a80:	00db      	lsls	r3, r3, #3
 8018a82:	1a9b      	subs	r3, r3, r2
 8018a84:	009b      	lsls	r3, r3, #2
 8018a86:	3338      	adds	r3, #56	; 0x38
 8018a88:	687a      	ldr	r2, [r7, #4]
 8018a8a:	4413      	add	r3, r2
 8018a8c:	3304      	adds	r3, #4
 8018a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2201      	movs	r2, #1
 8018a94:	705a      	strb	r2, [r3, #1]
 8018a96:	e00f      	b.n	8018ab8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018a98:	78fb      	ldrb	r3, [r7, #3]
 8018a9a:	f003 020f 	and.w	r2, r3, #15
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	00db      	lsls	r3, r3, #3
 8018aa2:	1a9b      	subs	r3, r3, r2
 8018aa4:	009b      	lsls	r3, r3, #2
 8018aa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8018aaa:	687a      	ldr	r2, [r7, #4]
 8018aac:	4413      	add	r3, r2
 8018aae:	3304      	adds	r3, #4
 8018ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	2200      	movs	r2, #0
 8018abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018abe:	78fb      	ldrb	r3, [r7, #3]
 8018ac0:	f003 030f 	and.w	r3, r3, #15
 8018ac4:	b2da      	uxtb	r2, r3
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8018ad0:	2b01      	cmp	r3, #1
 8018ad2:	d101      	bne.n	8018ad8 <HAL_PCD_EP_ClrStall+0x86>
 8018ad4:	2302      	movs	r3, #2
 8018ad6:	e00e      	b.n	8018af6 <HAL_PCD_EP_ClrStall+0xa4>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2201      	movs	r2, #1
 8018adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	68f9      	ldr	r1, [r7, #12]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f004 f813 	bl	801cb12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	2200      	movs	r2, #0
 8018af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8018af4:	2300      	movs	r3, #0
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3710      	adds	r7, #16
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}

08018afe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8018afe:	b580      	push	{r7, lr}
 8018b00:	b08a      	sub	sp, #40	; 0x28
 8018b02:	af02      	add	r7, sp, #8
 8018b04:	6078      	str	r0, [r7, #4]
 8018b06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8018b12:	683a      	ldr	r2, [r7, #0]
 8018b14:	4613      	mov	r3, r2
 8018b16:	00db      	lsls	r3, r3, #3
 8018b18:	1a9b      	subs	r3, r3, r2
 8018b1a:	009b      	lsls	r3, r3, #2
 8018b1c:	3338      	adds	r3, #56	; 0x38
 8018b1e:	687a      	ldr	r2, [r7, #4]
 8018b20:	4413      	add	r3, r2
 8018b22:	3304      	adds	r3, #4
 8018b24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	699a      	ldr	r2, [r3, #24]
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	695b      	ldr	r3, [r3, #20]
 8018b2e:	429a      	cmp	r2, r3
 8018b30:	d901      	bls.n	8018b36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8018b32:	2301      	movs	r3, #1
 8018b34:	e06c      	b.n	8018c10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	695a      	ldr	r2, [r3, #20]
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	699b      	ldr	r3, [r3, #24]
 8018b3e:	1ad3      	subs	r3, r2, r3
 8018b40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	689b      	ldr	r3, [r3, #8]
 8018b46:	69fa      	ldr	r2, [r7, #28]
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d902      	bls.n	8018b52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	689b      	ldr	r3, [r3, #8]
 8018b50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	3303      	adds	r3, #3
 8018b56:	089b      	lsrs	r3, r3, #2
 8018b58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018b5a:	e02b      	b.n	8018bb4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	695a      	ldr	r2, [r3, #20]
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	699b      	ldr	r3, [r3, #24]
 8018b64:	1ad3      	subs	r3, r2, r3
 8018b66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	689b      	ldr	r3, [r3, #8]
 8018b6c:	69fa      	ldr	r2, [r7, #28]
 8018b6e:	429a      	cmp	r2, r3
 8018b70:	d902      	bls.n	8018b78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	689b      	ldr	r3, [r3, #8]
 8018b76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	3303      	adds	r3, #3
 8018b7c:	089b      	lsrs	r3, r3, #2
 8018b7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	68d9      	ldr	r1, [r3, #12]
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	b2da      	uxtb	r2, r3
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	9300      	str	r3, [sp, #0]
 8018b94:	4603      	mov	r3, r0
 8018b96:	6978      	ldr	r0, [r7, #20]
 8018b98:	f003 feb7 	bl	801c90a <USB_WritePacket>

    ep->xfer_buff  += len;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	68da      	ldr	r2, [r3, #12]
 8018ba0:	69fb      	ldr	r3, [r7, #28]
 8018ba2:	441a      	add	r2, r3
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	699a      	ldr	r2, [r3, #24]
 8018bac:	69fb      	ldr	r3, [r7, #28]
 8018bae:	441a      	add	r2, r3
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018bb4:	683b      	ldr	r3, [r7, #0]
 8018bb6:	015a      	lsls	r2, r3, #5
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	4413      	add	r3, r2
 8018bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018bc0:	699b      	ldr	r3, [r3, #24]
 8018bc2:	b29b      	uxth	r3, r3
 8018bc4:	69ba      	ldr	r2, [r7, #24]
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d809      	bhi.n	8018bde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	699a      	ldr	r2, [r3, #24]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d203      	bcs.n	8018bde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	695b      	ldr	r3, [r3, #20]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d1be      	bne.n	8018b5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	695a      	ldr	r2, [r3, #20]
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	699b      	ldr	r3, [r3, #24]
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d811      	bhi.n	8018c0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	f003 030f 	and.w	r3, r3, #15
 8018bf0:	2201      	movs	r2, #1
 8018bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8018bf6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8018bf8:	693b      	ldr	r3, [r7, #16]
 8018bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	43db      	mvns	r3, r3
 8018c04:	6939      	ldr	r1, [r7, #16]
 8018c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018c0a:	4013      	ands	r3, r2
 8018c0c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8018c0e:	2300      	movs	r3, #0
}
 8018c10:	4618      	mov	r0, r3
 8018c12:	3720      	adds	r7, #32
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b086      	sub	sp, #24
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018c28:	697b      	ldr	r3, [r7, #20]
 8018c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	333c      	adds	r3, #60	; 0x3c
 8018c30:	3304      	adds	r3, #4
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	015a      	lsls	r2, r3, #5
 8018c3a:	693b      	ldr	r3, [r7, #16]
 8018c3c:	4413      	add	r3, r2
 8018c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c42:	689b      	ldr	r3, [r3, #8]
 8018c44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	2b01      	cmp	r3, #1
 8018c4c:	f040 80a0 	bne.w	8018d90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8018c50:	68bb      	ldr	r3, [r7, #8]
 8018c52:	f003 0308 	and.w	r3, r3, #8
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d015      	beq.n	8018c86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	4a72      	ldr	r2, [pc, #456]	; (8018e28 <PCD_EP_OutXfrComplete_int+0x210>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	f240 80dd 	bls.w	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	f000 80d7 	beq.w	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	015a      	lsls	r2, r3, #5
 8018c74:	693b      	ldr	r3, [r7, #16]
 8018c76:	4413      	add	r3, r2
 8018c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c7c:	461a      	mov	r2, r3
 8018c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018c82:	6093      	str	r3, [r2, #8]
 8018c84:	e0cb      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	f003 0320 	and.w	r3, r3, #32
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d009      	beq.n	8018ca4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	015a      	lsls	r2, r3, #5
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	4413      	add	r3, r2
 8018c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c9c:	461a      	mov	r2, r3
 8018c9e:	2320      	movs	r3, #32
 8018ca0:	6093      	str	r3, [r2, #8]
 8018ca2:	e0bc      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	f040 80b7 	bne.w	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	4a5d      	ldr	r2, [pc, #372]	; (8018e28 <PCD_EP_OutXfrComplete_int+0x210>)
 8018cb4:	4293      	cmp	r3, r2
 8018cb6:	d90f      	bls.n	8018cd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d00a      	beq.n	8018cd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	015a      	lsls	r2, r3, #5
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	4413      	add	r3, r2
 8018cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018cce:	461a      	mov	r2, r3
 8018cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018cd4:	6093      	str	r3, [r2, #8]
 8018cd6:	e0a2      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8018cd8:	6879      	ldr	r1, [r7, #4]
 8018cda:	683a      	ldr	r2, [r7, #0]
 8018cdc:	4613      	mov	r3, r2
 8018cde:	00db      	lsls	r3, r3, #3
 8018ce0:	1a9b      	subs	r3, r3, r2
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	440b      	add	r3, r1
 8018ce6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8018cea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	0159      	lsls	r1, r3, #5
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	440b      	add	r3, r1
 8018cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018cf8:	691b      	ldr	r3, [r3, #16]
 8018cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8018cfe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	683a      	ldr	r2, [r7, #0]
 8018d04:	4613      	mov	r3, r2
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	1a9b      	subs	r3, r3, r2
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4403      	add	r3, r0
 8018d0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8018d12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8018d14:	6879      	ldr	r1, [r7, #4]
 8018d16:	683a      	ldr	r2, [r7, #0]
 8018d18:	4613      	mov	r3, r2
 8018d1a:	00db      	lsls	r3, r3, #3
 8018d1c:	1a9b      	subs	r3, r3, r2
 8018d1e:	009b      	lsls	r3, r3, #2
 8018d20:	440b      	add	r3, r1
 8018d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018d26:	6819      	ldr	r1, [r3, #0]
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	683a      	ldr	r2, [r7, #0]
 8018d2c:	4613      	mov	r3, r2
 8018d2e:	00db      	lsls	r3, r3, #3
 8018d30:	1a9b      	subs	r3, r3, r2
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	4403      	add	r3, r0
 8018d36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	4419      	add	r1, r3
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	683a      	ldr	r2, [r7, #0]
 8018d42:	4613      	mov	r3, r2
 8018d44:	00db      	lsls	r3, r3, #3
 8018d46:	1a9b      	subs	r3, r3, r2
 8018d48:	009b      	lsls	r3, r3, #2
 8018d4a:	4403      	add	r3, r0
 8018d4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018d50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8018d52:	683b      	ldr	r3, [r7, #0]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d114      	bne.n	8018d82 <PCD_EP_OutXfrComplete_int+0x16a>
 8018d58:	6879      	ldr	r1, [r7, #4]
 8018d5a:	683a      	ldr	r2, [r7, #0]
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	00db      	lsls	r3, r3, #3
 8018d60:	1a9b      	subs	r3, r3, r2
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	440b      	add	r3, r1
 8018d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d108      	bne.n	8018d82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6818      	ldr	r0, [r3, #0]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	2101      	movs	r1, #1
 8018d7e:	f004 f85b 	bl	801ce38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	b2db      	uxtb	r3, r3
 8018d86:	4619      	mov	r1, r3
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	f008 fe15 	bl	80219b8 <HAL_PCD_DataOutStageCallback>
 8018d8e:	e046      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	4a26      	ldr	r2, [pc, #152]	; (8018e2c <PCD_EP_OutXfrComplete_int+0x214>)
 8018d94:	4293      	cmp	r3, r2
 8018d96:	d124      	bne.n	8018de2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d00a      	beq.n	8018db8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	015a      	lsls	r2, r3, #5
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	4413      	add	r3, r2
 8018daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018dae:	461a      	mov	r2, r3
 8018db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018db4:	6093      	str	r3, [r2, #8]
 8018db6:	e032      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	f003 0320 	and.w	r3, r3, #32
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d008      	beq.n	8018dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	015a      	lsls	r2, r3, #5
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	4413      	add	r3, r2
 8018dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018dce:	461a      	mov	r2, r3
 8018dd0:	2320      	movs	r3, #32
 8018dd2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	4619      	mov	r1, r3
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f008 fdec 	bl	80219b8 <HAL_PCD_DataOutStageCallback>
 8018de0:	e01d      	b.n	8018e1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d114      	bne.n	8018e12 <PCD_EP_OutXfrComplete_int+0x1fa>
 8018de8:	6879      	ldr	r1, [r7, #4]
 8018dea:	683a      	ldr	r2, [r7, #0]
 8018dec:	4613      	mov	r3, r2
 8018dee:	00db      	lsls	r3, r3, #3
 8018df0:	1a9b      	subs	r3, r3, r2
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	440b      	add	r3, r1
 8018df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d108      	bne.n	8018e12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	6818      	ldr	r0, [r3, #0]
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	2100      	movs	r1, #0
 8018e0e:	f004 f813 	bl	801ce38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	b2db      	uxtb	r3, r3
 8018e16:	4619      	mov	r1, r3
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	f008 fdcd 	bl	80219b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8018e1e:	2300      	movs	r3, #0
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3718      	adds	r7, #24
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}
 8018e28:	4f54300a 	.word	0x4f54300a
 8018e2c:	4f54310a 	.word	0x4f54310a

08018e30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	333c      	adds	r3, #60	; 0x3c
 8018e48:	3304      	adds	r3, #4
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	015a      	lsls	r2, r3, #5
 8018e52:	693b      	ldr	r3, [r7, #16]
 8018e54:	4413      	add	r3, r2
 8018e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018e5a:	689b      	ldr	r3, [r3, #8]
 8018e5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	4a15      	ldr	r2, [pc, #84]	; (8018eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8018e62:	4293      	cmp	r3, r2
 8018e64:	d90e      	bls.n	8018e84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d009      	beq.n	8018e84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018e70:	683b      	ldr	r3, [r7, #0]
 8018e72:	015a      	lsls	r2, r3, #5
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	4413      	add	r3, r2
 8018e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018e7c:	461a      	mov	r2, r3
 8018e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8018e84:	6878      	ldr	r0, [r7, #4]
 8018e86:	f008 fd85 	bl	8021994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	4a0a      	ldr	r2, [pc, #40]	; (8018eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8018e8e:	4293      	cmp	r3, r2
 8018e90:	d90c      	bls.n	8018eac <PCD_EP_OutSetupPacket_int+0x7c>
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	691b      	ldr	r3, [r3, #16]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d108      	bne.n	8018eac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6818      	ldr	r0, [r3, #0]
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	f003 ffc6 	bl	801ce38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8018eac:	2300      	movs	r3, #0
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	3718      	adds	r7, #24
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bd80      	pop	{r7, pc}
 8018eb6:	bf00      	nop
 8018eb8:	4f54300a 	.word	0x4f54300a

08018ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8018ebc:	b480      	push	{r7}
 8018ebe:	b085      	sub	sp, #20
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	70fb      	strb	r3, [r7, #3]
 8018ec8:	4613      	mov	r3, r2
 8018eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8018ed4:	78fb      	ldrb	r3, [r7, #3]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d107      	bne.n	8018eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8018eda:	883b      	ldrh	r3, [r7, #0]
 8018edc:	0419      	lsls	r1, r3, #16
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	68ba      	ldr	r2, [r7, #8]
 8018ee4:	430a      	orrs	r2, r1
 8018ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8018ee8:	e028      	b.n	8018f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ef0:	0c1b      	lsrs	r3, r3, #16
 8018ef2:	68ba      	ldr	r2, [r7, #8]
 8018ef4:	4413      	add	r3, r2
 8018ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8018ef8:	2300      	movs	r3, #0
 8018efa:	73fb      	strb	r3, [r7, #15]
 8018efc:	e00d      	b.n	8018f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681a      	ldr	r2, [r3, #0]
 8018f02:	7bfb      	ldrb	r3, [r7, #15]
 8018f04:	3340      	adds	r3, #64	; 0x40
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	4413      	add	r3, r2
 8018f0a:	685b      	ldr	r3, [r3, #4]
 8018f0c:	0c1b      	lsrs	r3, r3, #16
 8018f0e:	68ba      	ldr	r2, [r7, #8]
 8018f10:	4413      	add	r3, r2
 8018f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8018f14:	7bfb      	ldrb	r3, [r7, #15]
 8018f16:	3301      	adds	r3, #1
 8018f18:	73fb      	strb	r3, [r7, #15]
 8018f1a:	7bfa      	ldrb	r2, [r7, #15]
 8018f1c:	78fb      	ldrb	r3, [r7, #3]
 8018f1e:	3b01      	subs	r3, #1
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d3ec      	bcc.n	8018efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8018f24:	883b      	ldrh	r3, [r7, #0]
 8018f26:	0418      	lsls	r0, r3, #16
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6819      	ldr	r1, [r3, #0]
 8018f2c:	78fb      	ldrb	r3, [r7, #3]
 8018f2e:	3b01      	subs	r3, #1
 8018f30:	68ba      	ldr	r2, [r7, #8]
 8018f32:	4302      	orrs	r2, r0
 8018f34:	3340      	adds	r3, #64	; 0x40
 8018f36:	009b      	lsls	r3, r3, #2
 8018f38:	440b      	add	r3, r1
 8018f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3714      	adds	r7, #20
 8018f42:	46bd      	mov	sp, r7
 8018f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f48:	4770      	bx	lr

08018f4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8018f4a:	b480      	push	{r7}
 8018f4c:	b083      	sub	sp, #12
 8018f4e:	af00      	add	r7, sp, #0
 8018f50:	6078      	str	r0, [r7, #4]
 8018f52:	460b      	mov	r3, r1
 8018f54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	887a      	ldrh	r2, [r7, #2]
 8018f5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8018f5e:	2300      	movs	r3, #0
}
 8018f60:	4618      	mov	r0, r3
 8018f62:	370c      	adds	r7, #12
 8018f64:	46bd      	mov	sp, r7
 8018f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6a:	4770      	bx	lr

08018f6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018f6c:	b480      	push	{r7}
 8018f6e:	b083      	sub	sp, #12
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	460b      	mov	r3, r1
 8018f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8018f78:	bf00      	nop
 8018f7a:	370c      	adds	r7, #12
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f82:	4770      	bx	lr

08018f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b086      	sub	sp, #24
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d101      	bne.n	8018f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8018f92:	2301      	movs	r3, #1
 8018f94:	e264      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f003 0301 	and.w	r3, r3, #1
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d075      	beq.n	801908e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8018fa2:	4ba3      	ldr	r3, [pc, #652]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018fa4:	689b      	ldr	r3, [r3, #8]
 8018fa6:	f003 030c 	and.w	r3, r3, #12
 8018faa:	2b04      	cmp	r3, #4
 8018fac:	d00c      	beq.n	8018fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018fae:	4ba0      	ldr	r3, [pc, #640]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018fb0:	689b      	ldr	r3, [r3, #8]
 8018fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8018fb6:	2b08      	cmp	r3, #8
 8018fb8:	d112      	bne.n	8018fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018fba:	4b9d      	ldr	r3, [pc, #628]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018fc6:	d10b      	bne.n	8018fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018fc8:	4b99      	ldr	r3, [pc, #612]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d05b      	beq.n	801908c <HAL_RCC_OscConfig+0x108>
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d157      	bne.n	801908c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8018fdc:	2301      	movs	r3, #1
 8018fde:	e23f      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018fe8:	d106      	bne.n	8018ff8 <HAL_RCC_OscConfig+0x74>
 8018fea:	4b91      	ldr	r3, [pc, #580]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	4a90      	ldr	r2, [pc, #576]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8018ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018ff4:	6013      	str	r3, [r2, #0]
 8018ff6:	e01d      	b.n	8019034 <HAL_RCC_OscConfig+0xb0>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	685b      	ldr	r3, [r3, #4]
 8018ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019000:	d10c      	bne.n	801901c <HAL_RCC_OscConfig+0x98>
 8019002:	4b8b      	ldr	r3, [pc, #556]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	4a8a      	ldr	r2, [pc, #552]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801900c:	6013      	str	r3, [r2, #0]
 801900e:	4b88      	ldr	r3, [pc, #544]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	4a87      	ldr	r2, [pc, #540]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019018:	6013      	str	r3, [r2, #0]
 801901a:	e00b      	b.n	8019034 <HAL_RCC_OscConfig+0xb0>
 801901c:	4b84      	ldr	r3, [pc, #528]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	4a83      	ldr	r2, [pc, #524]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019026:	6013      	str	r3, [r2, #0]
 8019028:	4b81      	ldr	r3, [pc, #516]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	4a80      	ldr	r2, [pc, #512]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 801902e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d013      	beq.n	8019064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801903c:	f7fc fa26 	bl	801548c <HAL_GetTick>
 8019040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019042:	e008      	b.n	8019056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019044:	f7fc fa22 	bl	801548c <HAL_GetTick>
 8019048:	4602      	mov	r2, r0
 801904a:	693b      	ldr	r3, [r7, #16]
 801904c:	1ad3      	subs	r3, r2, r3
 801904e:	2b64      	cmp	r3, #100	; 0x64
 8019050:	d901      	bls.n	8019056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019052:	2303      	movs	r3, #3
 8019054:	e204      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019056:	4b76      	ldr	r3, [pc, #472]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0f0      	beq.n	8019044 <HAL_RCC_OscConfig+0xc0>
 8019062:	e014      	b.n	801908e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019064:	f7fc fa12 	bl	801548c <HAL_GetTick>
 8019068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801906a:	e008      	b.n	801907e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801906c:	f7fc fa0e 	bl	801548c <HAL_GetTick>
 8019070:	4602      	mov	r2, r0
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	1ad3      	subs	r3, r2, r3
 8019076:	2b64      	cmp	r3, #100	; 0x64
 8019078:	d901      	bls.n	801907e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801907a:	2303      	movs	r3, #3
 801907c:	e1f0      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801907e:	4b6c      	ldr	r3, [pc, #432]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1f0      	bne.n	801906c <HAL_RCC_OscConfig+0xe8>
 801908a:	e000      	b.n	801908e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801908c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f003 0302 	and.w	r3, r3, #2
 8019096:	2b00      	cmp	r3, #0
 8019098:	d063      	beq.n	8019162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801909a:	4b65      	ldr	r3, [pc, #404]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 801909c:	689b      	ldr	r3, [r3, #8]
 801909e:	f003 030c 	and.w	r3, r3, #12
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d00b      	beq.n	80190be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80190a6:	4b62      	ldr	r3, [pc, #392]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80190a8:	689b      	ldr	r3, [r3, #8]
 80190aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80190ae:	2b08      	cmp	r3, #8
 80190b0:	d11c      	bne.n	80190ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80190b2:	4b5f      	ldr	r3, [pc, #380]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d116      	bne.n	80190ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80190be:	4b5c      	ldr	r3, [pc, #368]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f003 0302 	and.w	r3, r3, #2
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d005      	beq.n	80190d6 <HAL_RCC_OscConfig+0x152>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	68db      	ldr	r3, [r3, #12]
 80190ce:	2b01      	cmp	r3, #1
 80190d0:	d001      	beq.n	80190d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80190d2:	2301      	movs	r3, #1
 80190d4:	e1c4      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80190d6:	4b56      	ldr	r3, [pc, #344]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	691b      	ldr	r3, [r3, #16]
 80190e2:	00db      	lsls	r3, r3, #3
 80190e4:	4952      	ldr	r1, [pc, #328]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80190e6:	4313      	orrs	r3, r2
 80190e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80190ea:	e03a      	b.n	8019162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	68db      	ldr	r3, [r3, #12]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d020      	beq.n	8019136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80190f4:	4b4f      	ldr	r3, [pc, #316]	; (8019234 <HAL_RCC_OscConfig+0x2b0>)
 80190f6:	2201      	movs	r2, #1
 80190f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190fa:	f7fc f9c7 	bl	801548c <HAL_GetTick>
 80190fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019100:	e008      	b.n	8019114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019102:	f7fc f9c3 	bl	801548c <HAL_GetTick>
 8019106:	4602      	mov	r2, r0
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	2b02      	cmp	r3, #2
 801910e:	d901      	bls.n	8019114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019110:	2303      	movs	r3, #3
 8019112:	e1a5      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019114:	4b46      	ldr	r3, [pc, #280]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	f003 0302 	and.w	r3, r3, #2
 801911c:	2b00      	cmp	r3, #0
 801911e:	d0f0      	beq.n	8019102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019120:	4b43      	ldr	r3, [pc, #268]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	691b      	ldr	r3, [r3, #16]
 801912c:	00db      	lsls	r3, r3, #3
 801912e:	4940      	ldr	r1, [pc, #256]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019130:	4313      	orrs	r3, r2
 8019132:	600b      	str	r3, [r1, #0]
 8019134:	e015      	b.n	8019162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019136:	4b3f      	ldr	r3, [pc, #252]	; (8019234 <HAL_RCC_OscConfig+0x2b0>)
 8019138:	2200      	movs	r2, #0
 801913a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801913c:	f7fc f9a6 	bl	801548c <HAL_GetTick>
 8019140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019142:	e008      	b.n	8019156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019144:	f7fc f9a2 	bl	801548c <HAL_GetTick>
 8019148:	4602      	mov	r2, r0
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	2b02      	cmp	r3, #2
 8019150:	d901      	bls.n	8019156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019152:	2303      	movs	r3, #3
 8019154:	e184      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019156:	4b36      	ldr	r3, [pc, #216]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f003 0302 	and.w	r3, r3, #2
 801915e:	2b00      	cmp	r3, #0
 8019160:	d1f0      	bne.n	8019144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	f003 0308 	and.w	r3, r3, #8
 801916a:	2b00      	cmp	r3, #0
 801916c:	d030      	beq.n	80191d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	695b      	ldr	r3, [r3, #20]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d016      	beq.n	80191a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019176:	4b30      	ldr	r3, [pc, #192]	; (8019238 <HAL_RCC_OscConfig+0x2b4>)
 8019178:	2201      	movs	r2, #1
 801917a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801917c:	f7fc f986 	bl	801548c <HAL_GetTick>
 8019180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019182:	e008      	b.n	8019196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019184:	f7fc f982 	bl	801548c <HAL_GetTick>
 8019188:	4602      	mov	r2, r0
 801918a:	693b      	ldr	r3, [r7, #16]
 801918c:	1ad3      	subs	r3, r2, r3
 801918e:	2b02      	cmp	r3, #2
 8019190:	d901      	bls.n	8019196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8019192:	2303      	movs	r3, #3
 8019194:	e164      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019196:	4b26      	ldr	r3, [pc, #152]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801919a:	f003 0302 	and.w	r3, r3, #2
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d0f0      	beq.n	8019184 <HAL_RCC_OscConfig+0x200>
 80191a2:	e015      	b.n	80191d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80191a4:	4b24      	ldr	r3, [pc, #144]	; (8019238 <HAL_RCC_OscConfig+0x2b4>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80191aa:	f7fc f96f 	bl	801548c <HAL_GetTick>
 80191ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80191b0:	e008      	b.n	80191c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80191b2:	f7fc f96b 	bl	801548c <HAL_GetTick>
 80191b6:	4602      	mov	r2, r0
 80191b8:	693b      	ldr	r3, [r7, #16]
 80191ba:	1ad3      	subs	r3, r2, r3
 80191bc:	2b02      	cmp	r3, #2
 80191be:	d901      	bls.n	80191c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80191c0:	2303      	movs	r3, #3
 80191c2:	e14d      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80191c4:	4b1a      	ldr	r3, [pc, #104]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80191c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80191c8:	f003 0302 	and.w	r3, r3, #2
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d1f0      	bne.n	80191b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f003 0304 	and.w	r3, r3, #4
 80191d8:	2b00      	cmp	r3, #0
 80191da:	f000 80a0 	beq.w	801931e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80191de:	2300      	movs	r3, #0
 80191e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80191e2:	4b13      	ldr	r3, [pc, #76]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80191e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d10f      	bne.n	801920e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80191ee:	2300      	movs	r3, #0
 80191f0:	60bb      	str	r3, [r7, #8]
 80191f2:	4b0f      	ldr	r3, [pc, #60]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80191f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191f6:	4a0e      	ldr	r2, [pc, #56]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 80191f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80191fc:	6413      	str	r3, [r2, #64]	; 0x40
 80191fe:	4b0c      	ldr	r3, [pc, #48]	; (8019230 <HAL_RCC_OscConfig+0x2ac>)
 8019200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019206:	60bb      	str	r3, [r7, #8]
 8019208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801920a:	2301      	movs	r3, #1
 801920c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801920e:	4b0b      	ldr	r3, [pc, #44]	; (801923c <HAL_RCC_OscConfig+0x2b8>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019216:	2b00      	cmp	r3, #0
 8019218:	d121      	bne.n	801925e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801921a:	4b08      	ldr	r3, [pc, #32]	; (801923c <HAL_RCC_OscConfig+0x2b8>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	4a07      	ldr	r2, [pc, #28]	; (801923c <HAL_RCC_OscConfig+0x2b8>)
 8019220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019226:	f7fc f931 	bl	801548c <HAL_GetTick>
 801922a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801922c:	e011      	b.n	8019252 <HAL_RCC_OscConfig+0x2ce>
 801922e:	bf00      	nop
 8019230:	40023800 	.word	0x40023800
 8019234:	42470000 	.word	0x42470000
 8019238:	42470e80 	.word	0x42470e80
 801923c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019240:	f7fc f924 	bl	801548c <HAL_GetTick>
 8019244:	4602      	mov	r2, r0
 8019246:	693b      	ldr	r3, [r7, #16]
 8019248:	1ad3      	subs	r3, r2, r3
 801924a:	2b02      	cmp	r3, #2
 801924c:	d901      	bls.n	8019252 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801924e:	2303      	movs	r3, #3
 8019250:	e106      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019252:	4b85      	ldr	r3, [pc, #532]	; (8019468 <HAL_RCC_OscConfig+0x4e4>)
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801925a:	2b00      	cmp	r3, #0
 801925c:	d0f0      	beq.n	8019240 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	689b      	ldr	r3, [r3, #8]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d106      	bne.n	8019274 <HAL_RCC_OscConfig+0x2f0>
 8019266:	4b81      	ldr	r3, [pc, #516]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801926a:	4a80      	ldr	r2, [pc, #512]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801926c:	f043 0301 	orr.w	r3, r3, #1
 8019270:	6713      	str	r3, [r2, #112]	; 0x70
 8019272:	e01c      	b.n	80192ae <HAL_RCC_OscConfig+0x32a>
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	689b      	ldr	r3, [r3, #8]
 8019278:	2b05      	cmp	r3, #5
 801927a:	d10c      	bne.n	8019296 <HAL_RCC_OscConfig+0x312>
 801927c:	4b7b      	ldr	r3, [pc, #492]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019280:	4a7a      	ldr	r2, [pc, #488]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019282:	f043 0304 	orr.w	r3, r3, #4
 8019286:	6713      	str	r3, [r2, #112]	; 0x70
 8019288:	4b78      	ldr	r3, [pc, #480]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801928c:	4a77      	ldr	r2, [pc, #476]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801928e:	f043 0301 	orr.w	r3, r3, #1
 8019292:	6713      	str	r3, [r2, #112]	; 0x70
 8019294:	e00b      	b.n	80192ae <HAL_RCC_OscConfig+0x32a>
 8019296:	4b75      	ldr	r3, [pc, #468]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801929a:	4a74      	ldr	r2, [pc, #464]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801929c:	f023 0301 	bic.w	r3, r3, #1
 80192a0:	6713      	str	r3, [r2, #112]	; 0x70
 80192a2:	4b72      	ldr	r3, [pc, #456]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80192a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192a6:	4a71      	ldr	r2, [pc, #452]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80192a8:	f023 0304 	bic.w	r3, r3, #4
 80192ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	689b      	ldr	r3, [r3, #8]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d015      	beq.n	80192e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80192b6:	f7fc f8e9 	bl	801548c <HAL_GetTick>
 80192ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80192bc:	e00a      	b.n	80192d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80192be:	f7fc f8e5 	bl	801548c <HAL_GetTick>
 80192c2:	4602      	mov	r2, r0
 80192c4:	693b      	ldr	r3, [r7, #16]
 80192c6:	1ad3      	subs	r3, r2, r3
 80192c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d901      	bls.n	80192d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80192d0:	2303      	movs	r3, #3
 80192d2:	e0c5      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80192d4:	4b65      	ldr	r3, [pc, #404]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80192d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192d8:	f003 0302 	and.w	r3, r3, #2
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d0ee      	beq.n	80192be <HAL_RCC_OscConfig+0x33a>
 80192e0:	e014      	b.n	801930c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80192e2:	f7fc f8d3 	bl	801548c <HAL_GetTick>
 80192e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80192e8:	e00a      	b.n	8019300 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80192ea:	f7fc f8cf 	bl	801548c <HAL_GetTick>
 80192ee:	4602      	mov	r2, r0
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	1ad3      	subs	r3, r2, r3
 80192f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80192f8:	4293      	cmp	r3, r2
 80192fa:	d901      	bls.n	8019300 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80192fc:	2303      	movs	r3, #3
 80192fe:	e0af      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019300:	4b5a      	ldr	r3, [pc, #360]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019304:	f003 0302 	and.w	r3, r3, #2
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1ee      	bne.n	80192ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801930c:	7dfb      	ldrb	r3, [r7, #23]
 801930e:	2b01      	cmp	r3, #1
 8019310:	d105      	bne.n	801931e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019312:	4b56      	ldr	r3, [pc, #344]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019316:	4a55      	ldr	r2, [pc, #340]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 8019318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801931c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	699b      	ldr	r3, [r3, #24]
 8019322:	2b00      	cmp	r3, #0
 8019324:	f000 809b 	beq.w	801945e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019328:	4b50      	ldr	r3, [pc, #320]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	f003 030c 	and.w	r3, r3, #12
 8019330:	2b08      	cmp	r3, #8
 8019332:	d05c      	beq.n	80193ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	699b      	ldr	r3, [r3, #24]
 8019338:	2b02      	cmp	r3, #2
 801933a:	d141      	bne.n	80193c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801933c:	4b4c      	ldr	r3, [pc, #304]	; (8019470 <HAL_RCC_OscConfig+0x4ec>)
 801933e:	2200      	movs	r2, #0
 8019340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019342:	f7fc f8a3 	bl	801548c <HAL_GetTick>
 8019346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019348:	e008      	b.n	801935c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801934a:	f7fc f89f 	bl	801548c <HAL_GetTick>
 801934e:	4602      	mov	r2, r0
 8019350:	693b      	ldr	r3, [r7, #16]
 8019352:	1ad3      	subs	r3, r2, r3
 8019354:	2b02      	cmp	r3, #2
 8019356:	d901      	bls.n	801935c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8019358:	2303      	movs	r3, #3
 801935a:	e081      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801935c:	4b43      	ldr	r3, [pc, #268]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019364:	2b00      	cmp	r3, #0
 8019366:	d1f0      	bne.n	801934a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	69da      	ldr	r2, [r3, #28]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6a1b      	ldr	r3, [r3, #32]
 8019370:	431a      	orrs	r2, r3
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019376:	019b      	lsls	r3, r3, #6
 8019378:	431a      	orrs	r2, r3
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801937e:	085b      	lsrs	r3, r3, #1
 8019380:	3b01      	subs	r3, #1
 8019382:	041b      	lsls	r3, r3, #16
 8019384:	431a      	orrs	r2, r3
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801938a:	061b      	lsls	r3, r3, #24
 801938c:	4937      	ldr	r1, [pc, #220]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 801938e:	4313      	orrs	r3, r2
 8019390:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019392:	4b37      	ldr	r3, [pc, #220]	; (8019470 <HAL_RCC_OscConfig+0x4ec>)
 8019394:	2201      	movs	r2, #1
 8019396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019398:	f7fc f878 	bl	801548c <HAL_GetTick>
 801939c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801939e:	e008      	b.n	80193b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80193a0:	f7fc f874 	bl	801548c <HAL_GetTick>
 80193a4:	4602      	mov	r2, r0
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	1ad3      	subs	r3, r2, r3
 80193aa:	2b02      	cmp	r3, #2
 80193ac:	d901      	bls.n	80193b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80193ae:	2303      	movs	r3, #3
 80193b0:	e056      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80193b2:	4b2e      	ldr	r3, [pc, #184]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d0f0      	beq.n	80193a0 <HAL_RCC_OscConfig+0x41c>
 80193be:	e04e      	b.n	801945e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80193c0:	4b2b      	ldr	r3, [pc, #172]	; (8019470 <HAL_RCC_OscConfig+0x4ec>)
 80193c2:	2200      	movs	r2, #0
 80193c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80193c6:	f7fc f861 	bl	801548c <HAL_GetTick>
 80193ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80193cc:	e008      	b.n	80193e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80193ce:	f7fc f85d 	bl	801548c <HAL_GetTick>
 80193d2:	4602      	mov	r2, r0
 80193d4:	693b      	ldr	r3, [r7, #16]
 80193d6:	1ad3      	subs	r3, r2, r3
 80193d8:	2b02      	cmp	r3, #2
 80193da:	d901      	bls.n	80193e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80193dc:	2303      	movs	r3, #3
 80193de:	e03f      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80193e0:	4b22      	ldr	r3, [pc, #136]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d1f0      	bne.n	80193ce <HAL_RCC_OscConfig+0x44a>
 80193ec:	e037      	b.n	801945e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	699b      	ldr	r3, [r3, #24]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d101      	bne.n	80193fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80193f6:	2301      	movs	r3, #1
 80193f8:	e032      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80193fa:	4b1c      	ldr	r3, [pc, #112]	; (801946c <HAL_RCC_OscConfig+0x4e8>)
 80193fc:	685b      	ldr	r3, [r3, #4]
 80193fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	699b      	ldr	r3, [r3, #24]
 8019404:	2b01      	cmp	r3, #1
 8019406:	d028      	beq.n	801945a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019412:	429a      	cmp	r2, r3
 8019414:	d121      	bne.n	801945a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019420:	429a      	cmp	r2, r3
 8019422:	d11a      	bne.n	801945a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019424:	68fa      	ldr	r2, [r7, #12]
 8019426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801942a:	4013      	ands	r3, r2
 801942c:	687a      	ldr	r2, [r7, #4]
 801942e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019430:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019432:	4293      	cmp	r3, r2
 8019434:	d111      	bne.n	801945a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019440:	085b      	lsrs	r3, r3, #1
 8019442:	3b01      	subs	r3, #1
 8019444:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019446:	429a      	cmp	r2, r3
 8019448:	d107      	bne.n	801945a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019454:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019456:	429a      	cmp	r2, r3
 8019458:	d001      	beq.n	801945e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801945a:	2301      	movs	r3, #1
 801945c:	e000      	b.n	8019460 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801945e:	2300      	movs	r3, #0
}
 8019460:	4618      	mov	r0, r3
 8019462:	3718      	adds	r7, #24
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}
 8019468:	40007000 	.word	0x40007000
 801946c:	40023800 	.word	0x40023800
 8019470:	42470060 	.word	0x42470060

08019474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
 801947c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d101      	bne.n	8019488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019484:	2301      	movs	r3, #1
 8019486:	e0cc      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019488:	4b68      	ldr	r3, [pc, #416]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f003 0307 	and.w	r3, r3, #7
 8019490:	683a      	ldr	r2, [r7, #0]
 8019492:	429a      	cmp	r2, r3
 8019494:	d90c      	bls.n	80194b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019496:	4b65      	ldr	r3, [pc, #404]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 8019498:	683a      	ldr	r2, [r7, #0]
 801949a:	b2d2      	uxtb	r2, r2
 801949c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801949e:	4b63      	ldr	r3, [pc, #396]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	f003 0307 	and.w	r3, r3, #7
 80194a6:	683a      	ldr	r2, [r7, #0]
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d001      	beq.n	80194b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80194ac:	2301      	movs	r3, #1
 80194ae:	e0b8      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	f003 0302 	and.w	r3, r3, #2
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d020      	beq.n	80194fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	f003 0304 	and.w	r3, r3, #4
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d005      	beq.n	80194d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80194c8:	4b59      	ldr	r3, [pc, #356]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194ca:	689b      	ldr	r3, [r3, #8]
 80194cc:	4a58      	ldr	r2, [pc, #352]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80194d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	f003 0308 	and.w	r3, r3, #8
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d005      	beq.n	80194ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80194e0:	4b53      	ldr	r3, [pc, #332]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194e2:	689b      	ldr	r3, [r3, #8]
 80194e4:	4a52      	ldr	r2, [pc, #328]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80194ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80194ec:	4b50      	ldr	r3, [pc, #320]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194ee:	689b      	ldr	r3, [r3, #8]
 80194f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	689b      	ldr	r3, [r3, #8]
 80194f8:	494d      	ldr	r1, [pc, #308]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80194fa:	4313      	orrs	r3, r2
 80194fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f003 0301 	and.w	r3, r3, #1
 8019506:	2b00      	cmp	r3, #0
 8019508:	d044      	beq.n	8019594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	2b01      	cmp	r3, #1
 8019510:	d107      	bne.n	8019522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019512:	4b47      	ldr	r3, [pc, #284]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801951a:	2b00      	cmp	r3, #0
 801951c:	d119      	bne.n	8019552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801951e:	2301      	movs	r3, #1
 8019520:	e07f      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	2b02      	cmp	r3, #2
 8019528:	d003      	beq.n	8019532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801952e:	2b03      	cmp	r3, #3
 8019530:	d107      	bne.n	8019542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019532:	4b3f      	ldr	r3, [pc, #252]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801953a:	2b00      	cmp	r3, #0
 801953c:	d109      	bne.n	8019552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801953e:	2301      	movs	r3, #1
 8019540:	e06f      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019542:	4b3b      	ldr	r3, [pc, #236]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	f003 0302 	and.w	r3, r3, #2
 801954a:	2b00      	cmp	r3, #0
 801954c:	d101      	bne.n	8019552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801954e:	2301      	movs	r3, #1
 8019550:	e067      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019552:	4b37      	ldr	r3, [pc, #220]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019554:	689b      	ldr	r3, [r3, #8]
 8019556:	f023 0203 	bic.w	r2, r3, #3
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	4934      	ldr	r1, [pc, #208]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019560:	4313      	orrs	r3, r2
 8019562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019564:	f7fb ff92 	bl	801548c <HAL_GetTick>
 8019568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801956a:	e00a      	b.n	8019582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801956c:	f7fb ff8e 	bl	801548c <HAL_GetTick>
 8019570:	4602      	mov	r2, r0
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	1ad3      	subs	r3, r2, r3
 8019576:	f241 3288 	movw	r2, #5000	; 0x1388
 801957a:	4293      	cmp	r3, r2
 801957c:	d901      	bls.n	8019582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801957e:	2303      	movs	r3, #3
 8019580:	e04f      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019582:	4b2b      	ldr	r3, [pc, #172]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019584:	689b      	ldr	r3, [r3, #8]
 8019586:	f003 020c 	and.w	r2, r3, #12
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	009b      	lsls	r3, r3, #2
 8019590:	429a      	cmp	r2, r3
 8019592:	d1eb      	bne.n	801956c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019594:	4b25      	ldr	r3, [pc, #148]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	f003 0307 	and.w	r3, r3, #7
 801959c:	683a      	ldr	r2, [r7, #0]
 801959e:	429a      	cmp	r2, r3
 80195a0:	d20c      	bcs.n	80195bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80195a2:	4b22      	ldr	r3, [pc, #136]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 80195a4:	683a      	ldr	r2, [r7, #0]
 80195a6:	b2d2      	uxtb	r2, r2
 80195a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80195aa:	4b20      	ldr	r3, [pc, #128]	; (801962c <HAL_RCC_ClockConfig+0x1b8>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	f003 0307 	and.w	r3, r3, #7
 80195b2:	683a      	ldr	r2, [r7, #0]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d001      	beq.n	80195bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80195b8:	2301      	movs	r3, #1
 80195ba:	e032      	b.n	8019622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	f003 0304 	and.w	r3, r3, #4
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d008      	beq.n	80195da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80195c8:	4b19      	ldr	r3, [pc, #100]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80195ca:	689b      	ldr	r3, [r3, #8]
 80195cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	68db      	ldr	r3, [r3, #12]
 80195d4:	4916      	ldr	r1, [pc, #88]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80195d6:	4313      	orrs	r3, r2
 80195d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	f003 0308 	and.w	r3, r3, #8
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d009      	beq.n	80195fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80195e6:	4b12      	ldr	r3, [pc, #72]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80195e8:	689b      	ldr	r3, [r3, #8]
 80195ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	691b      	ldr	r3, [r3, #16]
 80195f2:	00db      	lsls	r3, r3, #3
 80195f4:	490e      	ldr	r1, [pc, #56]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 80195f6:	4313      	orrs	r3, r2
 80195f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80195fa:	f000 f821 	bl	8019640 <HAL_RCC_GetSysClockFreq>
 80195fe:	4602      	mov	r2, r0
 8019600:	4b0b      	ldr	r3, [pc, #44]	; (8019630 <HAL_RCC_ClockConfig+0x1bc>)
 8019602:	689b      	ldr	r3, [r3, #8]
 8019604:	091b      	lsrs	r3, r3, #4
 8019606:	f003 030f 	and.w	r3, r3, #15
 801960a:	490a      	ldr	r1, [pc, #40]	; (8019634 <HAL_RCC_ClockConfig+0x1c0>)
 801960c:	5ccb      	ldrb	r3, [r1, r3]
 801960e:	fa22 f303 	lsr.w	r3, r2, r3
 8019612:	4a09      	ldr	r2, [pc, #36]	; (8019638 <HAL_RCC_ClockConfig+0x1c4>)
 8019614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8019616:	4b09      	ldr	r3, [pc, #36]	; (801963c <HAL_RCC_ClockConfig+0x1c8>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	4618      	mov	r0, r3
 801961c:	f7fb fe0a 	bl	8015234 <HAL_InitTick>

  return HAL_OK;
 8019620:	2300      	movs	r3, #0
}
 8019622:	4618      	mov	r0, r3
 8019624:	3710      	adds	r7, #16
 8019626:	46bd      	mov	sp, r7
 8019628:	bd80      	pop	{r7, pc}
 801962a:	bf00      	nop
 801962c:	40023c00 	.word	0x40023c00
 8019630:	40023800 	.word	0x40023800
 8019634:	080222a4 	.word	0x080222a4
 8019638:	20000148 	.word	0x20000148
 801963c:	2000014c 	.word	0x2000014c

08019640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019644:	b084      	sub	sp, #16
 8019646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8019648:	2300      	movs	r3, #0
 801964a:	607b      	str	r3, [r7, #4]
 801964c:	2300      	movs	r3, #0
 801964e:	60fb      	str	r3, [r7, #12]
 8019650:	2300      	movs	r3, #0
 8019652:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8019654:	2300      	movs	r3, #0
 8019656:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019658:	4b67      	ldr	r3, [pc, #412]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801965a:	689b      	ldr	r3, [r3, #8]
 801965c:	f003 030c 	and.w	r3, r3, #12
 8019660:	2b08      	cmp	r3, #8
 8019662:	d00d      	beq.n	8019680 <HAL_RCC_GetSysClockFreq+0x40>
 8019664:	2b08      	cmp	r3, #8
 8019666:	f200 80bd 	bhi.w	80197e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 801966a:	2b00      	cmp	r3, #0
 801966c:	d002      	beq.n	8019674 <HAL_RCC_GetSysClockFreq+0x34>
 801966e:	2b04      	cmp	r3, #4
 8019670:	d003      	beq.n	801967a <HAL_RCC_GetSysClockFreq+0x3a>
 8019672:	e0b7      	b.n	80197e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019674:	4b61      	ldr	r3, [pc, #388]	; (80197fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8019676:	60bb      	str	r3, [r7, #8]
       break;
 8019678:	e0b7      	b.n	80197ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801967a:	4b60      	ldr	r3, [pc, #384]	; (80197fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 801967c:	60bb      	str	r3, [r7, #8]
      break;
 801967e:	e0b4      	b.n	80197ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019680:	4b5d      	ldr	r3, [pc, #372]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019688:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801968a:	4b5b      	ldr	r3, [pc, #364]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019692:	2b00      	cmp	r3, #0
 8019694:	d04d      	beq.n	8019732 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019696:	4b58      	ldr	r3, [pc, #352]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019698:	685b      	ldr	r3, [r3, #4]
 801969a:	099b      	lsrs	r3, r3, #6
 801969c:	461a      	mov	r2, r3
 801969e:	f04f 0300 	mov.w	r3, #0
 80196a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80196a6:	f04f 0100 	mov.w	r1, #0
 80196aa:	ea02 0800 	and.w	r8, r2, r0
 80196ae:	ea03 0901 	and.w	r9, r3, r1
 80196b2:	4640      	mov	r0, r8
 80196b4:	4649      	mov	r1, r9
 80196b6:	f04f 0200 	mov.w	r2, #0
 80196ba:	f04f 0300 	mov.w	r3, #0
 80196be:	014b      	lsls	r3, r1, #5
 80196c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80196c4:	0142      	lsls	r2, r0, #5
 80196c6:	4610      	mov	r0, r2
 80196c8:	4619      	mov	r1, r3
 80196ca:	ebb0 0008 	subs.w	r0, r0, r8
 80196ce:	eb61 0109 	sbc.w	r1, r1, r9
 80196d2:	f04f 0200 	mov.w	r2, #0
 80196d6:	f04f 0300 	mov.w	r3, #0
 80196da:	018b      	lsls	r3, r1, #6
 80196dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80196e0:	0182      	lsls	r2, r0, #6
 80196e2:	1a12      	subs	r2, r2, r0
 80196e4:	eb63 0301 	sbc.w	r3, r3, r1
 80196e8:	f04f 0000 	mov.w	r0, #0
 80196ec:	f04f 0100 	mov.w	r1, #0
 80196f0:	00d9      	lsls	r1, r3, #3
 80196f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80196f6:	00d0      	lsls	r0, r2, #3
 80196f8:	4602      	mov	r2, r0
 80196fa:	460b      	mov	r3, r1
 80196fc:	eb12 0208 	adds.w	r2, r2, r8
 8019700:	eb43 0309 	adc.w	r3, r3, r9
 8019704:	f04f 0000 	mov.w	r0, #0
 8019708:	f04f 0100 	mov.w	r1, #0
 801970c:	0299      	lsls	r1, r3, #10
 801970e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8019712:	0290      	lsls	r0, r2, #10
 8019714:	4602      	mov	r2, r0
 8019716:	460b      	mov	r3, r1
 8019718:	4610      	mov	r0, r2
 801971a:	4619      	mov	r1, r3
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	461a      	mov	r2, r3
 8019720:	f04f 0300 	mov.w	r3, #0
 8019724:	f7e7 fa42 	bl	8000bac <__aeabi_uldivmod>
 8019728:	4602      	mov	r2, r0
 801972a:	460b      	mov	r3, r1
 801972c:	4613      	mov	r3, r2
 801972e:	60fb      	str	r3, [r7, #12]
 8019730:	e04a      	b.n	80197c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019732:	4b31      	ldr	r3, [pc, #196]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019734:	685b      	ldr	r3, [r3, #4]
 8019736:	099b      	lsrs	r3, r3, #6
 8019738:	461a      	mov	r2, r3
 801973a:	f04f 0300 	mov.w	r3, #0
 801973e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019742:	f04f 0100 	mov.w	r1, #0
 8019746:	ea02 0400 	and.w	r4, r2, r0
 801974a:	ea03 0501 	and.w	r5, r3, r1
 801974e:	4620      	mov	r0, r4
 8019750:	4629      	mov	r1, r5
 8019752:	f04f 0200 	mov.w	r2, #0
 8019756:	f04f 0300 	mov.w	r3, #0
 801975a:	014b      	lsls	r3, r1, #5
 801975c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8019760:	0142      	lsls	r2, r0, #5
 8019762:	4610      	mov	r0, r2
 8019764:	4619      	mov	r1, r3
 8019766:	1b00      	subs	r0, r0, r4
 8019768:	eb61 0105 	sbc.w	r1, r1, r5
 801976c:	f04f 0200 	mov.w	r2, #0
 8019770:	f04f 0300 	mov.w	r3, #0
 8019774:	018b      	lsls	r3, r1, #6
 8019776:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801977a:	0182      	lsls	r2, r0, #6
 801977c:	1a12      	subs	r2, r2, r0
 801977e:	eb63 0301 	sbc.w	r3, r3, r1
 8019782:	f04f 0000 	mov.w	r0, #0
 8019786:	f04f 0100 	mov.w	r1, #0
 801978a:	00d9      	lsls	r1, r3, #3
 801978c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019790:	00d0      	lsls	r0, r2, #3
 8019792:	4602      	mov	r2, r0
 8019794:	460b      	mov	r3, r1
 8019796:	1912      	adds	r2, r2, r4
 8019798:	eb45 0303 	adc.w	r3, r5, r3
 801979c:	f04f 0000 	mov.w	r0, #0
 80197a0:	f04f 0100 	mov.w	r1, #0
 80197a4:	0299      	lsls	r1, r3, #10
 80197a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80197aa:	0290      	lsls	r0, r2, #10
 80197ac:	4602      	mov	r2, r0
 80197ae:	460b      	mov	r3, r1
 80197b0:	4610      	mov	r0, r2
 80197b2:	4619      	mov	r1, r3
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	461a      	mov	r2, r3
 80197b8:	f04f 0300 	mov.w	r3, #0
 80197bc:	f7e7 f9f6 	bl	8000bac <__aeabi_uldivmod>
 80197c0:	4602      	mov	r2, r0
 80197c2:	460b      	mov	r3, r1
 80197c4:	4613      	mov	r3, r2
 80197c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80197c8:	4b0b      	ldr	r3, [pc, #44]	; (80197f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	0c1b      	lsrs	r3, r3, #16
 80197ce:	f003 0303 	and.w	r3, r3, #3
 80197d2:	3301      	adds	r3, #1
 80197d4:	005b      	lsls	r3, r3, #1
 80197d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80197d8:	68fa      	ldr	r2, [r7, #12]
 80197da:	683b      	ldr	r3, [r7, #0]
 80197dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80197e0:	60bb      	str	r3, [r7, #8]
      break;
 80197e2:	e002      	b.n	80197ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80197e4:	4b05      	ldr	r3, [pc, #20]	; (80197fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80197e6:	60bb      	str	r3, [r7, #8]
      break;
 80197e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80197ea:	68bb      	ldr	r3, [r7, #8]
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3710      	adds	r7, #16
 80197f0:	46bd      	mov	sp, r7
 80197f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80197f6:	bf00      	nop
 80197f8:	40023800 	.word	0x40023800
 80197fc:	00f42400 	.word	0x00f42400

08019800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019800:	b480      	push	{r7}
 8019802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019804:	4b03      	ldr	r3, [pc, #12]	; (8019814 <HAL_RCC_GetHCLKFreq+0x14>)
 8019806:	681b      	ldr	r3, [r3, #0]
}
 8019808:	4618      	mov	r0, r3
 801980a:	46bd      	mov	sp, r7
 801980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019810:	4770      	bx	lr
 8019812:	bf00      	nop
 8019814:	20000148 	.word	0x20000148

08019818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801981c:	f7ff fff0 	bl	8019800 <HAL_RCC_GetHCLKFreq>
 8019820:	4602      	mov	r2, r0
 8019822:	4b05      	ldr	r3, [pc, #20]	; (8019838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019824:	689b      	ldr	r3, [r3, #8]
 8019826:	0a9b      	lsrs	r3, r3, #10
 8019828:	f003 0307 	and.w	r3, r3, #7
 801982c:	4903      	ldr	r1, [pc, #12]	; (801983c <HAL_RCC_GetPCLK1Freq+0x24>)
 801982e:	5ccb      	ldrb	r3, [r1, r3]
 8019830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019834:	4618      	mov	r0, r3
 8019836:	bd80      	pop	{r7, pc}
 8019838:	40023800 	.word	0x40023800
 801983c:	080222b4 	.word	0x080222b4

08019840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8019844:	f7ff ffdc 	bl	8019800 <HAL_RCC_GetHCLKFreq>
 8019848:	4602      	mov	r2, r0
 801984a:	4b05      	ldr	r3, [pc, #20]	; (8019860 <HAL_RCC_GetPCLK2Freq+0x20>)
 801984c:	689b      	ldr	r3, [r3, #8]
 801984e:	0b5b      	lsrs	r3, r3, #13
 8019850:	f003 0307 	and.w	r3, r3, #7
 8019854:	4903      	ldr	r1, [pc, #12]	; (8019864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019856:	5ccb      	ldrb	r3, [r1, r3]
 8019858:	fa22 f303 	lsr.w	r3, r2, r3
}
 801985c:	4618      	mov	r0, r3
 801985e:	bd80      	pop	{r7, pc}
 8019860:	40023800 	.word	0x40023800
 8019864:	080222b4 	.word	0x080222b4

08019868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8019868:	b480      	push	{r7}
 801986a:	b083      	sub	sp, #12
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	220f      	movs	r2, #15
 8019876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8019878:	4b12      	ldr	r3, [pc, #72]	; (80198c4 <HAL_RCC_GetClockConfig+0x5c>)
 801987a:	689b      	ldr	r3, [r3, #8]
 801987c:	f003 0203 	and.w	r2, r3, #3
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019884:	4b0f      	ldr	r3, [pc, #60]	; (80198c4 <HAL_RCC_GetClockConfig+0x5c>)
 8019886:	689b      	ldr	r3, [r3, #8]
 8019888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019890:	4b0c      	ldr	r3, [pc, #48]	; (80198c4 <HAL_RCC_GetClockConfig+0x5c>)
 8019892:	689b      	ldr	r3, [r3, #8]
 8019894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801989c:	4b09      	ldr	r3, [pc, #36]	; (80198c4 <HAL_RCC_GetClockConfig+0x5c>)
 801989e:	689b      	ldr	r3, [r3, #8]
 80198a0:	08db      	lsrs	r3, r3, #3
 80198a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80198aa:	4b07      	ldr	r3, [pc, #28]	; (80198c8 <HAL_RCC_GetClockConfig+0x60>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	f003 0207 	and.w	r2, r3, #7
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	601a      	str	r2, [r3, #0]
}
 80198b6:	bf00      	nop
 80198b8:	370c      	adds	r7, #12
 80198ba:	46bd      	mov	sp, r7
 80198bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c0:	4770      	bx	lr
 80198c2:	bf00      	nop
 80198c4:	40023800 	.word	0x40023800
 80198c8:	40023c00 	.word	0x40023c00

080198cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b082      	sub	sp, #8
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d101      	bne.n	80198de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80198da:	2301      	movs	r3, #1
 80198dc:	e041      	b.n	8019962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80198e4:	b2db      	uxtb	r3, r3
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d106      	bne.n	80198f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	2200      	movs	r2, #0
 80198ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80198f2:	6878      	ldr	r0, [r7, #4]
 80198f4:	f7fb fb96 	bl	8015024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2202      	movs	r2, #2
 80198fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681a      	ldr	r2, [r3, #0]
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	3304      	adds	r3, #4
 8019908:	4619      	mov	r1, r3
 801990a:	4610      	mov	r0, r2
 801990c:	f000 fc7a 	bl	801a204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	2201      	movs	r2, #1
 8019914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2201      	movs	r2, #1
 801991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2201      	movs	r2, #1
 8019924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	2201      	movs	r2, #1
 801992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2201      	movs	r2, #1
 8019934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2201      	movs	r2, #1
 801993c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2201      	movs	r2, #1
 8019944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2201      	movs	r2, #1
 801994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	2201      	movs	r2, #1
 8019954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	2201      	movs	r2, #1
 801995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019960:	2300      	movs	r3, #0
}
 8019962:	4618      	mov	r0, r3
 8019964:	3708      	adds	r7, #8
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}
	...

0801996c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801996c:	b480      	push	{r7}
 801996e:	b085      	sub	sp, #20
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801997a:	b2db      	uxtb	r3, r3
 801997c:	2b01      	cmp	r3, #1
 801997e:	d001      	beq.n	8019984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019980:	2301      	movs	r3, #1
 8019982:	e04e      	b.n	8019a22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2202      	movs	r2, #2
 8019988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	68da      	ldr	r2, [r3, #12]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f042 0201 	orr.w	r2, r2, #1
 801999a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	4a23      	ldr	r2, [pc, #140]	; (8019a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80199a2:	4293      	cmp	r3, r2
 80199a4:	d022      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80199ae:	d01d      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	4a1f      	ldr	r2, [pc, #124]	; (8019a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d018      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	4a1e      	ldr	r2, [pc, #120]	; (8019a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80199c0:	4293      	cmp	r3, r2
 80199c2:	d013      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	4a1c      	ldr	r2, [pc, #112]	; (8019a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d00e      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	4a1b      	ldr	r2, [pc, #108]	; (8019a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80199d4:	4293      	cmp	r3, r2
 80199d6:	d009      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	4a19      	ldr	r2, [pc, #100]	; (8019a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80199de:	4293      	cmp	r3, r2
 80199e0:	d004      	beq.n	80199ec <HAL_TIM_Base_Start_IT+0x80>
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	4a18      	ldr	r2, [pc, #96]	; (8019a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80199e8:	4293      	cmp	r3, r2
 80199ea:	d111      	bne.n	8019a10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	689b      	ldr	r3, [r3, #8]
 80199f2:	f003 0307 	and.w	r3, r3, #7
 80199f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	2b06      	cmp	r3, #6
 80199fc:	d010      	beq.n	8019a20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	681a      	ldr	r2, [r3, #0]
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f042 0201 	orr.w	r2, r2, #1
 8019a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019a0e:	e007      	b.n	8019a20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	681a      	ldr	r2, [r3, #0]
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	f042 0201 	orr.w	r2, r2, #1
 8019a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019a20:	2300      	movs	r3, #0
}
 8019a22:	4618      	mov	r0, r3
 8019a24:	3714      	adds	r7, #20
 8019a26:	46bd      	mov	sp, r7
 8019a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a2c:	4770      	bx	lr
 8019a2e:	bf00      	nop
 8019a30:	40010000 	.word	0x40010000
 8019a34:	40000400 	.word	0x40000400
 8019a38:	40000800 	.word	0x40000800
 8019a3c:	40000c00 	.word	0x40000c00
 8019a40:	40010400 	.word	0x40010400
 8019a44:	40014000 	.word	0x40014000
 8019a48:	40001800 	.word	0x40001800

08019a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b082      	sub	sp, #8
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d101      	bne.n	8019a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	e041      	b.n	8019ae2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019a64:	b2db      	uxtb	r3, r3
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d106      	bne.n	8019a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	2200      	movs	r2, #0
 8019a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f000 f839 	bl	8019aea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2202      	movs	r2, #2
 8019a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681a      	ldr	r2, [r3, #0]
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	3304      	adds	r3, #4
 8019a88:	4619      	mov	r1, r3
 8019a8a:	4610      	mov	r0, r2
 8019a8c:	f000 fbba 	bl	801a204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2201      	movs	r2, #1
 8019a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2201      	movs	r2, #1
 8019a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2201      	movs	r2, #1
 8019aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	2201      	movs	r2, #1
 8019aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2201      	movs	r2, #1
 8019ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2201      	movs	r2, #1
 8019abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2201      	movs	r2, #1
 8019ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2201      	movs	r2, #1
 8019acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2201      	movs	r2, #1
 8019ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2201      	movs	r2, #1
 8019adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019ae0:	2300      	movs	r3, #0
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3708      	adds	r7, #8
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}

08019aea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8019aea:	b480      	push	{r7}
 8019aec:	b083      	sub	sp, #12
 8019aee:	af00      	add	r7, sp, #0
 8019af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8019af2:	bf00      	nop
 8019af4:	370c      	adds	r7, #12
 8019af6:	46bd      	mov	sp, r7
 8019af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afc:	4770      	bx	lr
	...

08019b00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b084      	sub	sp, #16
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d109      	bne.n	8019b24 <HAL_TIM_PWM_Start+0x24>
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019b16:	b2db      	uxtb	r3, r3
 8019b18:	2b01      	cmp	r3, #1
 8019b1a:	bf14      	ite	ne
 8019b1c:	2301      	movne	r3, #1
 8019b1e:	2300      	moveq	r3, #0
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	e022      	b.n	8019b6a <HAL_TIM_PWM_Start+0x6a>
 8019b24:	683b      	ldr	r3, [r7, #0]
 8019b26:	2b04      	cmp	r3, #4
 8019b28:	d109      	bne.n	8019b3e <HAL_TIM_PWM_Start+0x3e>
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019b30:	b2db      	uxtb	r3, r3
 8019b32:	2b01      	cmp	r3, #1
 8019b34:	bf14      	ite	ne
 8019b36:	2301      	movne	r3, #1
 8019b38:	2300      	moveq	r3, #0
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	e015      	b.n	8019b6a <HAL_TIM_PWM_Start+0x6a>
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	2b08      	cmp	r3, #8
 8019b42:	d109      	bne.n	8019b58 <HAL_TIM_PWM_Start+0x58>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019b4a:	b2db      	uxtb	r3, r3
 8019b4c:	2b01      	cmp	r3, #1
 8019b4e:	bf14      	ite	ne
 8019b50:	2301      	movne	r3, #1
 8019b52:	2300      	moveq	r3, #0
 8019b54:	b2db      	uxtb	r3, r3
 8019b56:	e008      	b.n	8019b6a <HAL_TIM_PWM_Start+0x6a>
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	2b01      	cmp	r3, #1
 8019b62:	bf14      	ite	ne
 8019b64:	2301      	movne	r3, #1
 8019b66:	2300      	moveq	r3, #0
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d001      	beq.n	8019b72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e07c      	b.n	8019c6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d104      	bne.n	8019b82 <HAL_TIM_PWM_Start+0x82>
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	2202      	movs	r2, #2
 8019b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019b80:	e013      	b.n	8019baa <HAL_TIM_PWM_Start+0xaa>
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	2b04      	cmp	r3, #4
 8019b86:	d104      	bne.n	8019b92 <HAL_TIM_PWM_Start+0x92>
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2202      	movs	r2, #2
 8019b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019b90:	e00b      	b.n	8019baa <HAL_TIM_PWM_Start+0xaa>
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	2b08      	cmp	r3, #8
 8019b96:	d104      	bne.n	8019ba2 <HAL_TIM_PWM_Start+0xa2>
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	2202      	movs	r2, #2
 8019b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019ba0:	e003      	b.n	8019baa <HAL_TIM_PWM_Start+0xaa>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	2202      	movs	r2, #2
 8019ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	2201      	movs	r2, #1
 8019bb0:	6839      	ldr	r1, [r7, #0]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f000 fe10 	bl	801a7d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	4a2d      	ldr	r2, [pc, #180]	; (8019c74 <HAL_TIM_PWM_Start+0x174>)
 8019bbe:	4293      	cmp	r3, r2
 8019bc0:	d004      	beq.n	8019bcc <HAL_TIM_PWM_Start+0xcc>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	4a2c      	ldr	r2, [pc, #176]	; (8019c78 <HAL_TIM_PWM_Start+0x178>)
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d101      	bne.n	8019bd0 <HAL_TIM_PWM_Start+0xd0>
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e000      	b.n	8019bd2 <HAL_TIM_PWM_Start+0xd2>
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d007      	beq.n	8019be6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	4a22      	ldr	r2, [pc, #136]	; (8019c74 <HAL_TIM_PWM_Start+0x174>)
 8019bec:	4293      	cmp	r3, r2
 8019bee:	d022      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019bf8:	d01d      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	4a1f      	ldr	r2, [pc, #124]	; (8019c7c <HAL_TIM_PWM_Start+0x17c>)
 8019c00:	4293      	cmp	r3, r2
 8019c02:	d018      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	4a1d      	ldr	r2, [pc, #116]	; (8019c80 <HAL_TIM_PWM_Start+0x180>)
 8019c0a:	4293      	cmp	r3, r2
 8019c0c:	d013      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	4a1c      	ldr	r2, [pc, #112]	; (8019c84 <HAL_TIM_PWM_Start+0x184>)
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d00e      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	4a16      	ldr	r2, [pc, #88]	; (8019c78 <HAL_TIM_PWM_Start+0x178>)
 8019c1e:	4293      	cmp	r3, r2
 8019c20:	d009      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	4a18      	ldr	r2, [pc, #96]	; (8019c88 <HAL_TIM_PWM_Start+0x188>)
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	d004      	beq.n	8019c36 <HAL_TIM_PWM_Start+0x136>
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	4a16      	ldr	r2, [pc, #88]	; (8019c8c <HAL_TIM_PWM_Start+0x18c>)
 8019c32:	4293      	cmp	r3, r2
 8019c34:	d111      	bne.n	8019c5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	689b      	ldr	r3, [r3, #8]
 8019c3c:	f003 0307 	and.w	r3, r3, #7
 8019c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	2b06      	cmp	r3, #6
 8019c46:	d010      	beq.n	8019c6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	681a      	ldr	r2, [r3, #0]
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	f042 0201 	orr.w	r2, r2, #1
 8019c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c58:	e007      	b.n	8019c6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f042 0201 	orr.w	r2, r2, #1
 8019c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019c6a:	2300      	movs	r3, #0
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3710      	adds	r7, #16
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}
 8019c74:	40010000 	.word	0x40010000
 8019c78:	40010400 	.word	0x40010400
 8019c7c:	40000400 	.word	0x40000400
 8019c80:	40000800 	.word	0x40000800
 8019c84:	40000c00 	.word	0x40000c00
 8019c88:	40014000 	.word	0x40014000
 8019c8c:	40001800 	.word	0x40001800

08019c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	691b      	ldr	r3, [r3, #16]
 8019c9e:	f003 0302 	and.w	r3, r3, #2
 8019ca2:	2b02      	cmp	r3, #2
 8019ca4:	d122      	bne.n	8019cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	68db      	ldr	r3, [r3, #12]
 8019cac:	f003 0302 	and.w	r3, r3, #2
 8019cb0:	2b02      	cmp	r3, #2
 8019cb2:	d11b      	bne.n	8019cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	f06f 0202 	mvn.w	r2, #2
 8019cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	2201      	movs	r2, #1
 8019cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	699b      	ldr	r3, [r3, #24]
 8019cca:	f003 0303 	and.w	r3, r3, #3
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d003      	beq.n	8019cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f000 fa77 	bl	801a1c6 <HAL_TIM_IC_CaptureCallback>
 8019cd8:	e005      	b.n	8019ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019cda:	6878      	ldr	r0, [r7, #4]
 8019cdc:	f000 fa69 	bl	801a1b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f000 fa7a 	bl	801a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	691b      	ldr	r3, [r3, #16]
 8019cf2:	f003 0304 	and.w	r3, r3, #4
 8019cf6:	2b04      	cmp	r3, #4
 8019cf8:	d122      	bne.n	8019d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	f003 0304 	and.w	r3, r3, #4
 8019d04:	2b04      	cmp	r3, #4
 8019d06:	d11b      	bne.n	8019d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	f06f 0204 	mvn.w	r2, #4
 8019d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	2202      	movs	r2, #2
 8019d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	699b      	ldr	r3, [r3, #24]
 8019d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d003      	beq.n	8019d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019d26:	6878      	ldr	r0, [r7, #4]
 8019d28:	f000 fa4d 	bl	801a1c6 <HAL_TIM_IC_CaptureCallback>
 8019d2c:	e005      	b.n	8019d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019d2e:	6878      	ldr	r0, [r7, #4]
 8019d30:	f000 fa3f 	bl	801a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019d34:	6878      	ldr	r0, [r7, #4]
 8019d36:	f000 fa50 	bl	801a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	691b      	ldr	r3, [r3, #16]
 8019d46:	f003 0308 	and.w	r3, r3, #8
 8019d4a:	2b08      	cmp	r3, #8
 8019d4c:	d122      	bne.n	8019d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	68db      	ldr	r3, [r3, #12]
 8019d54:	f003 0308 	and.w	r3, r3, #8
 8019d58:	2b08      	cmp	r3, #8
 8019d5a:	d11b      	bne.n	8019d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f06f 0208 	mvn.w	r2, #8
 8019d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	2204      	movs	r2, #4
 8019d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	69db      	ldr	r3, [r3, #28]
 8019d72:	f003 0303 	and.w	r3, r3, #3
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d003      	beq.n	8019d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f000 fa23 	bl	801a1c6 <HAL_TIM_IC_CaptureCallback>
 8019d80:	e005      	b.n	8019d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f000 fa15 	bl	801a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019d88:	6878      	ldr	r0, [r7, #4]
 8019d8a:	f000 fa26 	bl	801a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	2200      	movs	r2, #0
 8019d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	691b      	ldr	r3, [r3, #16]
 8019d9a:	f003 0310 	and.w	r3, r3, #16
 8019d9e:	2b10      	cmp	r3, #16
 8019da0:	d122      	bne.n	8019de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	68db      	ldr	r3, [r3, #12]
 8019da8:	f003 0310 	and.w	r3, r3, #16
 8019dac:	2b10      	cmp	r3, #16
 8019dae:	d11b      	bne.n	8019de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	f06f 0210 	mvn.w	r2, #16
 8019db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	2208      	movs	r2, #8
 8019dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	69db      	ldr	r3, [r3, #28]
 8019dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d003      	beq.n	8019dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f000 f9f9 	bl	801a1c6 <HAL_TIM_IC_CaptureCallback>
 8019dd4:	e005      	b.n	8019de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	f000 f9eb 	bl	801a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	f000 f9fc 	bl	801a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2200      	movs	r2, #0
 8019de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	691b      	ldr	r3, [r3, #16]
 8019dee:	f003 0301 	and.w	r3, r3, #1
 8019df2:	2b01      	cmp	r3, #1
 8019df4:	d10e      	bne.n	8019e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	f003 0301 	and.w	r3, r3, #1
 8019e00:	2b01      	cmp	r3, #1
 8019e02:	d107      	bne.n	8019e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	f06f 0201 	mvn.w	r2, #1
 8019e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019e0e:	6878      	ldr	r0, [r7, #4]
 8019e10:	f7fa fc72 	bl	80146f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	691b      	ldr	r3, [r3, #16]
 8019e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e1e:	2b80      	cmp	r3, #128	; 0x80
 8019e20:	d10e      	bne.n	8019e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e2c:	2b80      	cmp	r3, #128	; 0x80
 8019e2e:	d107      	bne.n	8019e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8019e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	f000 fcfb 	bl	801a836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	691b      	ldr	r3, [r3, #16]
 8019e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e4a:	2b40      	cmp	r3, #64	; 0x40
 8019e4c:	d10e      	bne.n	8019e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	68db      	ldr	r3, [r3, #12]
 8019e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e58:	2b40      	cmp	r3, #64	; 0x40
 8019e5a:	d107      	bne.n	8019e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f000 f9c1 	bl	801a1ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	691b      	ldr	r3, [r3, #16]
 8019e72:	f003 0320 	and.w	r3, r3, #32
 8019e76:	2b20      	cmp	r3, #32
 8019e78:	d10e      	bne.n	8019e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	f003 0320 	and.w	r3, r3, #32
 8019e84:	2b20      	cmp	r3, #32
 8019e86:	d107      	bne.n	8019e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	f06f 0220 	mvn.w	r2, #32
 8019e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019e92:	6878      	ldr	r0, [r7, #4]
 8019e94:	f000 fcc5 	bl	801a822 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019e98:	bf00      	nop
 8019e9a:	3708      	adds	r7, #8
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	bd80      	pop	{r7, pc}

08019ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	60f8      	str	r0, [r7, #12]
 8019ea8:	60b9      	str	r1, [r7, #8]
 8019eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019eac:	2300      	movs	r3, #0
 8019eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019eb6:	2b01      	cmp	r3, #1
 8019eb8:	d101      	bne.n	8019ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8019eba:	2302      	movs	r3, #2
 8019ebc:	e0ae      	b.n	801a01c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	2201      	movs	r2, #1
 8019ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2b0c      	cmp	r3, #12
 8019eca:	f200 809f 	bhi.w	801a00c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8019ece:	a201      	add	r2, pc, #4	; (adr r2, 8019ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8019ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ed4:	08019f09 	.word	0x08019f09
 8019ed8:	0801a00d 	.word	0x0801a00d
 8019edc:	0801a00d 	.word	0x0801a00d
 8019ee0:	0801a00d 	.word	0x0801a00d
 8019ee4:	08019f49 	.word	0x08019f49
 8019ee8:	0801a00d 	.word	0x0801a00d
 8019eec:	0801a00d 	.word	0x0801a00d
 8019ef0:	0801a00d 	.word	0x0801a00d
 8019ef4:	08019f8b 	.word	0x08019f8b
 8019ef8:	0801a00d 	.word	0x0801a00d
 8019efc:	0801a00d 	.word	0x0801a00d
 8019f00:	0801a00d 	.word	0x0801a00d
 8019f04:	08019fcb 	.word	0x08019fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	68b9      	ldr	r1, [r7, #8]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f000 fa18 	bl	801a344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	699a      	ldr	r2, [r3, #24]
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f042 0208 	orr.w	r2, r2, #8
 8019f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	699a      	ldr	r2, [r3, #24]
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f022 0204 	bic.w	r2, r2, #4
 8019f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	6999      	ldr	r1, [r3, #24]
 8019f3a:	68bb      	ldr	r3, [r7, #8]
 8019f3c:	691a      	ldr	r2, [r3, #16]
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	430a      	orrs	r2, r1
 8019f44:	619a      	str	r2, [r3, #24]
      break;
 8019f46:	e064      	b.n	801a012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	68b9      	ldr	r1, [r7, #8]
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f000 fa68 	bl	801a424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	699a      	ldr	r2, [r3, #24]
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	699a      	ldr	r2, [r3, #24]
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	6999      	ldr	r1, [r3, #24]
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	691b      	ldr	r3, [r3, #16]
 8019f7e:	021a      	lsls	r2, r3, #8
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	430a      	orrs	r2, r1
 8019f86:	619a      	str	r2, [r3, #24]
      break;
 8019f88:	e043      	b.n	801a012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	68b9      	ldr	r1, [r7, #8]
 8019f90:	4618      	mov	r0, r3
 8019f92:	f000 fabd 	bl	801a510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	69da      	ldr	r2, [r3, #28]
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	f042 0208 	orr.w	r2, r2, #8
 8019fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	69da      	ldr	r2, [r3, #28]
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	f022 0204 	bic.w	r2, r2, #4
 8019fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	69d9      	ldr	r1, [r3, #28]
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	691a      	ldr	r2, [r3, #16]
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	430a      	orrs	r2, r1
 8019fc6:	61da      	str	r2, [r3, #28]
      break;
 8019fc8:	e023      	b.n	801a012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	68b9      	ldr	r1, [r7, #8]
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f000 fb11 	bl	801a5f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	69da      	ldr	r2, [r3, #28]
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	69da      	ldr	r2, [r3, #28]
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	69d9      	ldr	r1, [r3, #28]
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	691b      	ldr	r3, [r3, #16]
 801a000:	021a      	lsls	r2, r3, #8
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	430a      	orrs	r2, r1
 801a008:	61da      	str	r2, [r3, #28]
      break;
 801a00a:	e002      	b.n	801a012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801a00c:	2301      	movs	r3, #1
 801a00e:	75fb      	strb	r3, [r7, #23]
      break;
 801a010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	2200      	movs	r2, #0
 801a016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a01a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3718      	adds	r7, #24
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a02e:	2300      	movs	r3, #0
 801a030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a038:	2b01      	cmp	r3, #1
 801a03a:	d101      	bne.n	801a040 <HAL_TIM_ConfigClockSource+0x1c>
 801a03c:	2302      	movs	r3, #2
 801a03e:	e0b4      	b.n	801a1aa <HAL_TIM_ConfigClockSource+0x186>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2201      	movs	r2, #1
 801a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	2202      	movs	r2, #2
 801a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	689b      	ldr	r3, [r3, #8]
 801a056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a05e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	68ba      	ldr	r2, [r7, #8]
 801a06e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a078:	d03e      	beq.n	801a0f8 <HAL_TIM_ConfigClockSource+0xd4>
 801a07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a07e:	f200 8087 	bhi.w	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a086:	f000 8086 	beq.w	801a196 <HAL_TIM_ConfigClockSource+0x172>
 801a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a08e:	d87f      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a090:	2b70      	cmp	r3, #112	; 0x70
 801a092:	d01a      	beq.n	801a0ca <HAL_TIM_ConfigClockSource+0xa6>
 801a094:	2b70      	cmp	r3, #112	; 0x70
 801a096:	d87b      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a098:	2b60      	cmp	r3, #96	; 0x60
 801a09a:	d050      	beq.n	801a13e <HAL_TIM_ConfigClockSource+0x11a>
 801a09c:	2b60      	cmp	r3, #96	; 0x60
 801a09e:	d877      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a0a0:	2b50      	cmp	r3, #80	; 0x50
 801a0a2:	d03c      	beq.n	801a11e <HAL_TIM_ConfigClockSource+0xfa>
 801a0a4:	2b50      	cmp	r3, #80	; 0x50
 801a0a6:	d873      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a0a8:	2b40      	cmp	r3, #64	; 0x40
 801a0aa:	d058      	beq.n	801a15e <HAL_TIM_ConfigClockSource+0x13a>
 801a0ac:	2b40      	cmp	r3, #64	; 0x40
 801a0ae:	d86f      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a0b0:	2b30      	cmp	r3, #48	; 0x30
 801a0b2:	d064      	beq.n	801a17e <HAL_TIM_ConfigClockSource+0x15a>
 801a0b4:	2b30      	cmp	r3, #48	; 0x30
 801a0b6:	d86b      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a0b8:	2b20      	cmp	r3, #32
 801a0ba:	d060      	beq.n	801a17e <HAL_TIM_ConfigClockSource+0x15a>
 801a0bc:	2b20      	cmp	r3, #32
 801a0be:	d867      	bhi.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d05c      	beq.n	801a17e <HAL_TIM_ConfigClockSource+0x15a>
 801a0c4:	2b10      	cmp	r3, #16
 801a0c6:	d05a      	beq.n	801a17e <HAL_TIM_ConfigClockSource+0x15a>
 801a0c8:	e062      	b.n	801a190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	6818      	ldr	r0, [r3, #0]
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	6899      	ldr	r1, [r3, #8]
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	685a      	ldr	r2, [r3, #4]
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	68db      	ldr	r3, [r3, #12]
 801a0da:	f000 fb5d 	bl	801a798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	689b      	ldr	r3, [r3, #8]
 801a0e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a0ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	68ba      	ldr	r2, [r7, #8]
 801a0f4:	609a      	str	r2, [r3, #8]
      break;
 801a0f6:	e04f      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	6818      	ldr	r0, [r3, #0]
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	6899      	ldr	r1, [r3, #8]
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	685a      	ldr	r2, [r3, #4]
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	68db      	ldr	r3, [r3, #12]
 801a108:	f000 fb46 	bl	801a798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	689a      	ldr	r2, [r3, #8]
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a11a:	609a      	str	r2, [r3, #8]
      break;
 801a11c:	e03c      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6818      	ldr	r0, [r3, #0]
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	6859      	ldr	r1, [r3, #4]
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	68db      	ldr	r3, [r3, #12]
 801a12a:	461a      	mov	r2, r3
 801a12c:	f000 faba 	bl	801a6a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2150      	movs	r1, #80	; 0x50
 801a136:	4618      	mov	r0, r3
 801a138:	f000 fb13 	bl	801a762 <TIM_ITRx_SetConfig>
      break;
 801a13c:	e02c      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	6818      	ldr	r0, [r3, #0]
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	6859      	ldr	r1, [r3, #4]
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	461a      	mov	r2, r3
 801a14c:	f000 fad9 	bl	801a702 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	2160      	movs	r1, #96	; 0x60
 801a156:	4618      	mov	r0, r3
 801a158:	f000 fb03 	bl	801a762 <TIM_ITRx_SetConfig>
      break;
 801a15c:	e01c      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	6818      	ldr	r0, [r3, #0]
 801a162:	683b      	ldr	r3, [r7, #0]
 801a164:	6859      	ldr	r1, [r3, #4]
 801a166:	683b      	ldr	r3, [r7, #0]
 801a168:	68db      	ldr	r3, [r3, #12]
 801a16a:	461a      	mov	r2, r3
 801a16c:	f000 fa9a 	bl	801a6a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	2140      	movs	r1, #64	; 0x40
 801a176:	4618      	mov	r0, r3
 801a178:	f000 faf3 	bl	801a762 <TIM_ITRx_SetConfig>
      break;
 801a17c:	e00c      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681a      	ldr	r2, [r3, #0]
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	4619      	mov	r1, r3
 801a188:	4610      	mov	r0, r2
 801a18a:	f000 faea 	bl	801a762 <TIM_ITRx_SetConfig>
      break;
 801a18e:	e003      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801a190:	2301      	movs	r3, #1
 801a192:	73fb      	strb	r3, [r7, #15]
      break;
 801a194:	e000      	b.n	801a198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801a196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2201      	movs	r2, #1
 801a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3710      	adds	r7, #16
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}

0801a1b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a1b2:	b480      	push	{r7}
 801a1b4:	b083      	sub	sp, #12
 801a1b6:	af00      	add	r7, sp, #0
 801a1b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a1ba:	bf00      	nop
 801a1bc:	370c      	adds	r7, #12
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c4:	4770      	bx	lr

0801a1c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a1c6:	b480      	push	{r7}
 801a1c8:	b083      	sub	sp, #12
 801a1ca:	af00      	add	r7, sp, #0
 801a1cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a1ce:	bf00      	nop
 801a1d0:	370c      	adds	r7, #12
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d8:	4770      	bx	lr

0801a1da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a1da:	b480      	push	{r7}
 801a1dc:	b083      	sub	sp, #12
 801a1de:	af00      	add	r7, sp, #0
 801a1e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a1e2:	bf00      	nop
 801a1e4:	370c      	adds	r7, #12
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ec:	4770      	bx	lr

0801a1ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a1ee:	b480      	push	{r7}
 801a1f0:	b083      	sub	sp, #12
 801a1f2:	af00      	add	r7, sp, #0
 801a1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a1f6:	bf00      	nop
 801a1f8:	370c      	adds	r7, #12
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a200:	4770      	bx	lr
	...

0801a204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801a204:	b480      	push	{r7}
 801a206:	b085      	sub	sp, #20
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
 801a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	4a40      	ldr	r2, [pc, #256]	; (801a318 <TIM_Base_SetConfig+0x114>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d013      	beq.n	801a244 <TIM_Base_SetConfig+0x40>
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a222:	d00f      	beq.n	801a244 <TIM_Base_SetConfig+0x40>
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	4a3d      	ldr	r2, [pc, #244]	; (801a31c <TIM_Base_SetConfig+0x118>)
 801a228:	4293      	cmp	r3, r2
 801a22a:	d00b      	beq.n	801a244 <TIM_Base_SetConfig+0x40>
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	4a3c      	ldr	r2, [pc, #240]	; (801a320 <TIM_Base_SetConfig+0x11c>)
 801a230:	4293      	cmp	r3, r2
 801a232:	d007      	beq.n	801a244 <TIM_Base_SetConfig+0x40>
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	4a3b      	ldr	r2, [pc, #236]	; (801a324 <TIM_Base_SetConfig+0x120>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d003      	beq.n	801a244 <TIM_Base_SetConfig+0x40>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	4a3a      	ldr	r2, [pc, #232]	; (801a328 <TIM_Base_SetConfig+0x124>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d108      	bne.n	801a256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	68fa      	ldr	r2, [r7, #12]
 801a252:	4313      	orrs	r3, r2
 801a254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	4a2f      	ldr	r2, [pc, #188]	; (801a318 <TIM_Base_SetConfig+0x114>)
 801a25a:	4293      	cmp	r3, r2
 801a25c:	d02b      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a264:	d027      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	4a2c      	ldr	r2, [pc, #176]	; (801a31c <TIM_Base_SetConfig+0x118>)
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d023      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	4a2b      	ldr	r2, [pc, #172]	; (801a320 <TIM_Base_SetConfig+0x11c>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d01f      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	4a2a      	ldr	r2, [pc, #168]	; (801a324 <TIM_Base_SetConfig+0x120>)
 801a27a:	4293      	cmp	r3, r2
 801a27c:	d01b      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	4a29      	ldr	r2, [pc, #164]	; (801a328 <TIM_Base_SetConfig+0x124>)
 801a282:	4293      	cmp	r3, r2
 801a284:	d017      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	4a28      	ldr	r2, [pc, #160]	; (801a32c <TIM_Base_SetConfig+0x128>)
 801a28a:	4293      	cmp	r3, r2
 801a28c:	d013      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	4a27      	ldr	r2, [pc, #156]	; (801a330 <TIM_Base_SetConfig+0x12c>)
 801a292:	4293      	cmp	r3, r2
 801a294:	d00f      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	4a26      	ldr	r2, [pc, #152]	; (801a334 <TIM_Base_SetConfig+0x130>)
 801a29a:	4293      	cmp	r3, r2
 801a29c:	d00b      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	4a25      	ldr	r2, [pc, #148]	; (801a338 <TIM_Base_SetConfig+0x134>)
 801a2a2:	4293      	cmp	r3, r2
 801a2a4:	d007      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	4a24      	ldr	r2, [pc, #144]	; (801a33c <TIM_Base_SetConfig+0x138>)
 801a2aa:	4293      	cmp	r3, r2
 801a2ac:	d003      	beq.n	801a2b6 <TIM_Base_SetConfig+0xb2>
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	4a23      	ldr	r2, [pc, #140]	; (801a340 <TIM_Base_SetConfig+0x13c>)
 801a2b2:	4293      	cmp	r3, r2
 801a2b4:	d108      	bne.n	801a2c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a2be:	683b      	ldr	r3, [r7, #0]
 801a2c0:	68db      	ldr	r3, [r3, #12]
 801a2c2:	68fa      	ldr	r2, [r7, #12]
 801a2c4:	4313      	orrs	r3, r2
 801a2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	695b      	ldr	r3, [r3, #20]
 801a2d2:	4313      	orrs	r3, r2
 801a2d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	68fa      	ldr	r2, [r7, #12]
 801a2da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a2dc:	683b      	ldr	r3, [r7, #0]
 801a2de:	689a      	ldr	r2, [r3, #8]
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	681a      	ldr	r2, [r3, #0]
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	4a0a      	ldr	r2, [pc, #40]	; (801a318 <TIM_Base_SetConfig+0x114>)
 801a2f0:	4293      	cmp	r3, r2
 801a2f2:	d003      	beq.n	801a2fc <TIM_Base_SetConfig+0xf8>
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	4a0c      	ldr	r2, [pc, #48]	; (801a328 <TIM_Base_SetConfig+0x124>)
 801a2f8:	4293      	cmp	r3, r2
 801a2fa:	d103      	bne.n	801a304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	691a      	ldr	r2, [r3, #16]
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2201      	movs	r2, #1
 801a308:	615a      	str	r2, [r3, #20]
}
 801a30a:	bf00      	nop
 801a30c:	3714      	adds	r7, #20
 801a30e:	46bd      	mov	sp, r7
 801a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a314:	4770      	bx	lr
 801a316:	bf00      	nop
 801a318:	40010000 	.word	0x40010000
 801a31c:	40000400 	.word	0x40000400
 801a320:	40000800 	.word	0x40000800
 801a324:	40000c00 	.word	0x40000c00
 801a328:	40010400 	.word	0x40010400
 801a32c:	40014000 	.word	0x40014000
 801a330:	40014400 	.word	0x40014400
 801a334:	40014800 	.word	0x40014800
 801a338:	40001800 	.word	0x40001800
 801a33c:	40001c00 	.word	0x40001c00
 801a340:	40002000 	.word	0x40002000

0801a344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a344:	b480      	push	{r7}
 801a346:	b087      	sub	sp, #28
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6a1b      	ldr	r3, [r3, #32]
 801a352:	f023 0201 	bic.w	r2, r3, #1
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	6a1b      	ldr	r3, [r3, #32]
 801a35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	685b      	ldr	r3, [r3, #4]
 801a364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	699b      	ldr	r3, [r3, #24]
 801a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	f023 0303 	bic.w	r3, r3, #3
 801a37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	68fa      	ldr	r2, [r7, #12]
 801a382:	4313      	orrs	r3, r2
 801a384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	f023 0302 	bic.w	r3, r3, #2
 801a38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a38e:	683b      	ldr	r3, [r7, #0]
 801a390:	689b      	ldr	r3, [r3, #8]
 801a392:	697a      	ldr	r2, [r7, #20]
 801a394:	4313      	orrs	r3, r2
 801a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	4a20      	ldr	r2, [pc, #128]	; (801a41c <TIM_OC1_SetConfig+0xd8>)
 801a39c:	4293      	cmp	r3, r2
 801a39e:	d003      	beq.n	801a3a8 <TIM_OC1_SetConfig+0x64>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	4a1f      	ldr	r2, [pc, #124]	; (801a420 <TIM_OC1_SetConfig+0xdc>)
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	d10c      	bne.n	801a3c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a3a8:	697b      	ldr	r3, [r7, #20]
 801a3aa:	f023 0308 	bic.w	r3, r3, #8
 801a3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a3b0:	683b      	ldr	r3, [r7, #0]
 801a3b2:	68db      	ldr	r3, [r3, #12]
 801a3b4:	697a      	ldr	r2, [r7, #20]
 801a3b6:	4313      	orrs	r3, r2
 801a3b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a3ba:	697b      	ldr	r3, [r7, #20]
 801a3bc:	f023 0304 	bic.w	r3, r3, #4
 801a3c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	4a15      	ldr	r2, [pc, #84]	; (801a41c <TIM_OC1_SetConfig+0xd8>)
 801a3c6:	4293      	cmp	r3, r2
 801a3c8:	d003      	beq.n	801a3d2 <TIM_OC1_SetConfig+0x8e>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	4a14      	ldr	r2, [pc, #80]	; (801a420 <TIM_OC1_SetConfig+0xdc>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d111      	bne.n	801a3f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a3d2:	693b      	ldr	r3, [r7, #16]
 801a3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a3da:	693b      	ldr	r3, [r7, #16]
 801a3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	695b      	ldr	r3, [r3, #20]
 801a3e6:	693a      	ldr	r2, [r7, #16]
 801a3e8:	4313      	orrs	r3, r2
 801a3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	699b      	ldr	r3, [r3, #24]
 801a3f0:	693a      	ldr	r2, [r7, #16]
 801a3f2:	4313      	orrs	r3, r2
 801a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	693a      	ldr	r2, [r7, #16]
 801a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	68fa      	ldr	r2, [r7, #12]
 801a400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	685a      	ldr	r2, [r3, #4]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	697a      	ldr	r2, [r7, #20]
 801a40e:	621a      	str	r2, [r3, #32]
}
 801a410:	bf00      	nop
 801a412:	371c      	adds	r7, #28
 801a414:	46bd      	mov	sp, r7
 801a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a41a:	4770      	bx	lr
 801a41c:	40010000 	.word	0x40010000
 801a420:	40010400 	.word	0x40010400

0801a424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a424:	b480      	push	{r7}
 801a426:	b087      	sub	sp, #28
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
 801a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	6a1b      	ldr	r3, [r3, #32]
 801a432:	f023 0210 	bic.w	r2, r3, #16
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	6a1b      	ldr	r3, [r3, #32]
 801a43e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	685b      	ldr	r3, [r3, #4]
 801a444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	699b      	ldr	r3, [r3, #24]
 801a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a45c:	683b      	ldr	r3, [r7, #0]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	021b      	lsls	r3, r3, #8
 801a462:	68fa      	ldr	r2, [r7, #12]
 801a464:	4313      	orrs	r3, r2
 801a466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a468:	697b      	ldr	r3, [r7, #20]
 801a46a:	f023 0320 	bic.w	r3, r3, #32
 801a46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	689b      	ldr	r3, [r3, #8]
 801a474:	011b      	lsls	r3, r3, #4
 801a476:	697a      	ldr	r2, [r7, #20]
 801a478:	4313      	orrs	r3, r2
 801a47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	4a22      	ldr	r2, [pc, #136]	; (801a508 <TIM_OC2_SetConfig+0xe4>)
 801a480:	4293      	cmp	r3, r2
 801a482:	d003      	beq.n	801a48c <TIM_OC2_SetConfig+0x68>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	4a21      	ldr	r2, [pc, #132]	; (801a50c <TIM_OC2_SetConfig+0xe8>)
 801a488:	4293      	cmp	r3, r2
 801a48a:	d10d      	bne.n	801a4a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	68db      	ldr	r3, [r3, #12]
 801a498:	011b      	lsls	r3, r3, #4
 801a49a:	697a      	ldr	r2, [r7, #20]
 801a49c:	4313      	orrs	r3, r2
 801a49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a4a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	4a17      	ldr	r2, [pc, #92]	; (801a508 <TIM_OC2_SetConfig+0xe4>)
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	d003      	beq.n	801a4b8 <TIM_OC2_SetConfig+0x94>
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	4a16      	ldr	r2, [pc, #88]	; (801a50c <TIM_OC2_SetConfig+0xe8>)
 801a4b4:	4293      	cmp	r3, r2
 801a4b6:	d113      	bne.n	801a4e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a4b8:	693b      	ldr	r3, [r7, #16]
 801a4ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a4be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	695b      	ldr	r3, [r3, #20]
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	693a      	ldr	r2, [r7, #16]
 801a4d0:	4313      	orrs	r3, r2
 801a4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	699b      	ldr	r3, [r3, #24]
 801a4d8:	009b      	lsls	r3, r3, #2
 801a4da:	693a      	ldr	r2, [r7, #16]
 801a4dc:	4313      	orrs	r3, r2
 801a4de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	693a      	ldr	r2, [r7, #16]
 801a4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	68fa      	ldr	r2, [r7, #12]
 801a4ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	685a      	ldr	r2, [r3, #4]
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	697a      	ldr	r2, [r7, #20]
 801a4f8:	621a      	str	r2, [r3, #32]
}
 801a4fa:	bf00      	nop
 801a4fc:	371c      	adds	r7, #28
 801a4fe:	46bd      	mov	sp, r7
 801a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a504:	4770      	bx	lr
 801a506:	bf00      	nop
 801a508:	40010000 	.word	0x40010000
 801a50c:	40010400 	.word	0x40010400

0801a510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a510:	b480      	push	{r7}
 801a512:	b087      	sub	sp, #28
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
 801a518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6a1b      	ldr	r3, [r3, #32]
 801a51e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	6a1b      	ldr	r3, [r3, #32]
 801a52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	685b      	ldr	r3, [r3, #4]
 801a530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	69db      	ldr	r3, [r3, #28]
 801a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	f023 0303 	bic.w	r3, r3, #3
 801a546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	68fa      	ldr	r2, [r7, #12]
 801a54e:	4313      	orrs	r3, r2
 801a550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a552:	697b      	ldr	r3, [r7, #20]
 801a554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a55a:	683b      	ldr	r3, [r7, #0]
 801a55c:	689b      	ldr	r3, [r3, #8]
 801a55e:	021b      	lsls	r3, r3, #8
 801a560:	697a      	ldr	r2, [r7, #20]
 801a562:	4313      	orrs	r3, r2
 801a564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	4a21      	ldr	r2, [pc, #132]	; (801a5f0 <TIM_OC3_SetConfig+0xe0>)
 801a56a:	4293      	cmp	r3, r2
 801a56c:	d003      	beq.n	801a576 <TIM_OC3_SetConfig+0x66>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	4a20      	ldr	r2, [pc, #128]	; (801a5f4 <TIM_OC3_SetConfig+0xe4>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d10d      	bne.n	801a592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a57c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	68db      	ldr	r3, [r3, #12]
 801a582:	021b      	lsls	r3, r3, #8
 801a584:	697a      	ldr	r2, [r7, #20]
 801a586:	4313      	orrs	r3, r2
 801a588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801a58a:	697b      	ldr	r3, [r7, #20]
 801a58c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	4a16      	ldr	r2, [pc, #88]	; (801a5f0 <TIM_OC3_SetConfig+0xe0>)
 801a596:	4293      	cmp	r3, r2
 801a598:	d003      	beq.n	801a5a2 <TIM_OC3_SetConfig+0x92>
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	4a15      	ldr	r2, [pc, #84]	; (801a5f4 <TIM_OC3_SetConfig+0xe4>)
 801a59e:	4293      	cmp	r3, r2
 801a5a0:	d113      	bne.n	801a5ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801a5a2:	693b      	ldr	r3, [r7, #16]
 801a5a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	695b      	ldr	r3, [r3, #20]
 801a5b6:	011b      	lsls	r3, r3, #4
 801a5b8:	693a      	ldr	r2, [r7, #16]
 801a5ba:	4313      	orrs	r3, r2
 801a5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	699b      	ldr	r3, [r3, #24]
 801a5c2:	011b      	lsls	r3, r3, #4
 801a5c4:	693a      	ldr	r2, [r7, #16]
 801a5c6:	4313      	orrs	r3, r2
 801a5c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	693a      	ldr	r2, [r7, #16]
 801a5ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	68fa      	ldr	r2, [r7, #12]
 801a5d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	685a      	ldr	r2, [r3, #4]
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	697a      	ldr	r2, [r7, #20]
 801a5e2:	621a      	str	r2, [r3, #32]
}
 801a5e4:	bf00      	nop
 801a5e6:	371c      	adds	r7, #28
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ee:	4770      	bx	lr
 801a5f0:	40010000 	.word	0x40010000
 801a5f4:	40010400 	.word	0x40010400

0801a5f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a5f8:	b480      	push	{r7}
 801a5fa:	b087      	sub	sp, #28
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
 801a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	6a1b      	ldr	r3, [r3, #32]
 801a606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	6a1b      	ldr	r3, [r3, #32]
 801a612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	69db      	ldr	r3, [r3, #28]
 801a61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	021b      	lsls	r3, r3, #8
 801a636:	68fa      	ldr	r2, [r7, #12]
 801a638:	4313      	orrs	r3, r2
 801a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a63c:	693b      	ldr	r3, [r7, #16]
 801a63e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	689b      	ldr	r3, [r3, #8]
 801a648:	031b      	lsls	r3, r3, #12
 801a64a:	693a      	ldr	r2, [r7, #16]
 801a64c:	4313      	orrs	r3, r2
 801a64e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	4a12      	ldr	r2, [pc, #72]	; (801a69c <TIM_OC4_SetConfig+0xa4>)
 801a654:	4293      	cmp	r3, r2
 801a656:	d003      	beq.n	801a660 <TIM_OC4_SetConfig+0x68>
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	4a11      	ldr	r2, [pc, #68]	; (801a6a0 <TIM_OC4_SetConfig+0xa8>)
 801a65c:	4293      	cmp	r3, r2
 801a65e:	d109      	bne.n	801a674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801a660:	697b      	ldr	r3, [r7, #20]
 801a662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	695b      	ldr	r3, [r3, #20]
 801a66c:	019b      	lsls	r3, r3, #6
 801a66e:	697a      	ldr	r2, [r7, #20]
 801a670:	4313      	orrs	r3, r2
 801a672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	697a      	ldr	r2, [r7, #20]
 801a678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	68fa      	ldr	r2, [r7, #12]
 801a67e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	685a      	ldr	r2, [r3, #4]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	693a      	ldr	r2, [r7, #16]
 801a68c:	621a      	str	r2, [r3, #32]
}
 801a68e:	bf00      	nop
 801a690:	371c      	adds	r7, #28
 801a692:	46bd      	mov	sp, r7
 801a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a698:	4770      	bx	lr
 801a69a:	bf00      	nop
 801a69c:	40010000 	.word	0x40010000
 801a6a0:	40010400 	.word	0x40010400

0801a6a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b087      	sub	sp, #28
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	6a1b      	ldr	r3, [r3, #32]
 801a6b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	6a1b      	ldr	r3, [r3, #32]
 801a6ba:	f023 0201 	bic.w	r2, r3, #1
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	699b      	ldr	r3, [r3, #24]
 801a6c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a6c8:	693b      	ldr	r3, [r7, #16]
 801a6ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a6ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	011b      	lsls	r3, r3, #4
 801a6d4:	693a      	ldr	r2, [r7, #16]
 801a6d6:	4313      	orrs	r3, r2
 801a6d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	f023 030a 	bic.w	r3, r3, #10
 801a6e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a6e2:	697a      	ldr	r2, [r7, #20]
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	4313      	orrs	r3, r2
 801a6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	693a      	ldr	r2, [r7, #16]
 801a6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	697a      	ldr	r2, [r7, #20]
 801a6f4:	621a      	str	r2, [r3, #32]
}
 801a6f6:	bf00      	nop
 801a6f8:	371c      	adds	r7, #28
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a700:	4770      	bx	lr

0801a702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a702:	b480      	push	{r7}
 801a704:	b087      	sub	sp, #28
 801a706:	af00      	add	r7, sp, #0
 801a708:	60f8      	str	r0, [r7, #12]
 801a70a:	60b9      	str	r1, [r7, #8]
 801a70c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	6a1b      	ldr	r3, [r3, #32]
 801a712:	f023 0210 	bic.w	r2, r3, #16
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	699b      	ldr	r3, [r3, #24]
 801a71e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	6a1b      	ldr	r3, [r3, #32]
 801a724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a72c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	031b      	lsls	r3, r3, #12
 801a732:	697a      	ldr	r2, [r7, #20]
 801a734:	4313      	orrs	r3, r2
 801a736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801a73e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a740:	68bb      	ldr	r3, [r7, #8]
 801a742:	011b      	lsls	r3, r3, #4
 801a744:	693a      	ldr	r2, [r7, #16]
 801a746:	4313      	orrs	r3, r2
 801a748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	697a      	ldr	r2, [r7, #20]
 801a74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	693a      	ldr	r2, [r7, #16]
 801a754:	621a      	str	r2, [r3, #32]
}
 801a756:	bf00      	nop
 801a758:	371c      	adds	r7, #28
 801a75a:	46bd      	mov	sp, r7
 801a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a760:	4770      	bx	lr

0801a762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801a762:	b480      	push	{r7}
 801a764:	b085      	sub	sp, #20
 801a766:	af00      	add	r7, sp, #0
 801a768:	6078      	str	r0, [r7, #4]
 801a76a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	689b      	ldr	r3, [r3, #8]
 801a770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a77a:	683a      	ldr	r2, [r7, #0]
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	4313      	orrs	r3, r2
 801a780:	f043 0307 	orr.w	r3, r3, #7
 801a784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	68fa      	ldr	r2, [r7, #12]
 801a78a:	609a      	str	r2, [r3, #8]
}
 801a78c:	bf00      	nop
 801a78e:	3714      	adds	r7, #20
 801a790:	46bd      	mov	sp, r7
 801a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a796:	4770      	bx	lr

0801a798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a798:	b480      	push	{r7}
 801a79a:	b087      	sub	sp, #28
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	607a      	str	r2, [r7, #4]
 801a7a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	689b      	ldr	r3, [r3, #8]
 801a7aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a7ac:	697b      	ldr	r3, [r7, #20]
 801a7ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a7b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a7b4:	683b      	ldr	r3, [r7, #0]
 801a7b6:	021a      	lsls	r2, r3, #8
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	431a      	orrs	r2, r3
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	4313      	orrs	r3, r2
 801a7c0:	697a      	ldr	r2, [r7, #20]
 801a7c2:	4313      	orrs	r3, r2
 801a7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	697a      	ldr	r2, [r7, #20]
 801a7ca:	609a      	str	r2, [r3, #8]
}
 801a7cc:	bf00      	nop
 801a7ce:	371c      	adds	r7, #28
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d6:	4770      	bx	lr

0801a7d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a7d8:	b480      	push	{r7}
 801a7da:	b087      	sub	sp, #28
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	f003 031f 	and.w	r3, r3, #31
 801a7ea:	2201      	movs	r2, #1
 801a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 801a7f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	6a1a      	ldr	r2, [r3, #32]
 801a7f6:	697b      	ldr	r3, [r7, #20]
 801a7f8:	43db      	mvns	r3, r3
 801a7fa:	401a      	ands	r2, r3
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	6a1a      	ldr	r2, [r3, #32]
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	f003 031f 	and.w	r3, r3, #31
 801a80a:	6879      	ldr	r1, [r7, #4]
 801a80c:	fa01 f303 	lsl.w	r3, r1, r3
 801a810:	431a      	orrs	r2, r3
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	621a      	str	r2, [r3, #32]
}
 801a816:	bf00      	nop
 801a818:	371c      	adds	r7, #28
 801a81a:	46bd      	mov	sp, r7
 801a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a820:	4770      	bx	lr

0801a822 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a822:	b480      	push	{r7}
 801a824:	b083      	sub	sp, #12
 801a826:	af00      	add	r7, sp, #0
 801a828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a82a:	bf00      	nop
 801a82c:	370c      	adds	r7, #12
 801a82e:	46bd      	mov	sp, r7
 801a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a834:	4770      	bx	lr

0801a836 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a836:	b480      	push	{r7}
 801a838:	b083      	sub	sp, #12
 801a83a:	af00      	add	r7, sp, #0
 801a83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a83e:	bf00      	nop
 801a840:	370c      	adds	r7, #12
 801a842:	46bd      	mov	sp, r7
 801a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a848:	4770      	bx	lr

0801a84a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a84a:	b580      	push	{r7, lr}
 801a84c:	b082      	sub	sp, #8
 801a84e:	af00      	add	r7, sp, #0
 801a850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d101      	bne.n	801a85c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a858:	2301      	movs	r3, #1
 801a85a:	e03f      	b.n	801a8dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a862:	b2db      	uxtb	r3, r3
 801a864:	2b00      	cmp	r3, #0
 801a866:	d106      	bne.n	801a876 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	2200      	movs	r2, #0
 801a86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	f7fa fc33 	bl	80150dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	2224      	movs	r2, #36	; 0x24
 801a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	68da      	ldr	r2, [r3, #12]
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a88c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f000 fe20 	bl	801b4d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	691a      	ldr	r2, [r3, #16]
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a8a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	695a      	ldr	r2, [r3, #20]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a8b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	68da      	ldr	r2, [r3, #12]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a8c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	2220      	movs	r2, #32
 801a8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2220      	movs	r2, #32
 801a8d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801a8da:	2300      	movs	r3, #0
}
 801a8dc:	4618      	mov	r0, r3
 801a8de:	3708      	adds	r7, #8
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}

0801a8e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b08a      	sub	sp, #40	; 0x28
 801a8e8:	af02      	add	r7, sp, #8
 801a8ea:	60f8      	str	r0, [r7, #12]
 801a8ec:	60b9      	str	r1, [r7, #8]
 801a8ee:	603b      	str	r3, [r7, #0]
 801a8f0:	4613      	mov	r3, r2
 801a8f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a8fe:	b2db      	uxtb	r3, r3
 801a900:	2b20      	cmp	r3, #32
 801a902:	d17c      	bne.n	801a9fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d002      	beq.n	801a910 <HAL_UART_Transmit+0x2c>
 801a90a:	88fb      	ldrh	r3, [r7, #6]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d101      	bne.n	801a914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801a910:	2301      	movs	r3, #1
 801a912:	e075      	b.n	801aa00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a91a:	2b01      	cmp	r3, #1
 801a91c:	d101      	bne.n	801a922 <HAL_UART_Transmit+0x3e>
 801a91e:	2302      	movs	r3, #2
 801a920:	e06e      	b.n	801aa00 <HAL_UART_Transmit+0x11c>
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	2201      	movs	r2, #1
 801a926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	2200      	movs	r2, #0
 801a92e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	2221      	movs	r2, #33	; 0x21
 801a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801a938:	f7fa fda8 	bl	801548c <HAL_GetTick>
 801a93c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	88fa      	ldrh	r2, [r7, #6]
 801a942:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	88fa      	ldrh	r2, [r7, #6]
 801a948:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	689b      	ldr	r3, [r3, #8]
 801a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a952:	d108      	bne.n	801a966 <HAL_UART_Transmit+0x82>
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	691b      	ldr	r3, [r3, #16]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d104      	bne.n	801a966 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801a95c:	2300      	movs	r3, #0
 801a95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	61bb      	str	r3, [r7, #24]
 801a964:	e003      	b.n	801a96e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801a96a:	2300      	movs	r3, #0
 801a96c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	2200      	movs	r2, #0
 801a972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801a976:	e02a      	b.n	801a9ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a978:	683b      	ldr	r3, [r7, #0]
 801a97a:	9300      	str	r3, [sp, #0]
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	2200      	movs	r2, #0
 801a980:	2180      	movs	r1, #128	; 0x80
 801a982:	68f8      	ldr	r0, [r7, #12]
 801a984:	f000 fb64 	bl	801b050 <UART_WaitOnFlagUntilTimeout>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d001      	beq.n	801a992 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801a98e:	2303      	movs	r3, #3
 801a990:	e036      	b.n	801aa00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801a992:	69fb      	ldr	r3, [r7, #28]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d10b      	bne.n	801a9b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	881b      	ldrh	r3, [r3, #0]
 801a99c:	461a      	mov	r2, r3
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a9a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	3302      	adds	r3, #2
 801a9ac:	61bb      	str	r3, [r7, #24]
 801a9ae:	e007      	b.n	801a9c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801a9b0:	69fb      	ldr	r3, [r7, #28]
 801a9b2:	781a      	ldrb	r2, [r3, #0]
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801a9ba:	69fb      	ldr	r3, [r7, #28]
 801a9bc:	3301      	adds	r3, #1
 801a9be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	3b01      	subs	r3, #1
 801a9c8:	b29a      	uxth	r2, r3
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d1cf      	bne.n	801a978 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	697b      	ldr	r3, [r7, #20]
 801a9de:	2200      	movs	r2, #0
 801a9e0:	2140      	movs	r1, #64	; 0x40
 801a9e2:	68f8      	ldr	r0, [r7, #12]
 801a9e4:	f000 fb34 	bl	801b050 <UART_WaitOnFlagUntilTimeout>
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d001      	beq.n	801a9f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801a9ee:	2303      	movs	r3, #3
 801a9f0:	e006      	b.n	801aa00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2220      	movs	r2, #32
 801a9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	e000      	b.n	801aa00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801a9fe:	2302      	movs	r3, #2
  }
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3720      	adds	r7, #32
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b085      	sub	sp, #20
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	60f8      	str	r0, [r7, #12]
 801aa10:	60b9      	str	r1, [r7, #8]
 801aa12:	4613      	mov	r3, r2
 801aa14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa1c:	b2db      	uxtb	r3, r3
 801aa1e:	2b20      	cmp	r3, #32
 801aa20:	d130      	bne.n	801aa84 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d002      	beq.n	801aa2e <HAL_UART_Transmit_IT+0x26>
 801aa28:	88fb      	ldrh	r3, [r7, #6]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d101      	bne.n	801aa32 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801aa2e:	2301      	movs	r3, #1
 801aa30:	e029      	b.n	801aa86 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d101      	bne.n	801aa40 <HAL_UART_Transmit_IT+0x38>
 801aa3c:	2302      	movs	r3, #2
 801aa3e:	e022      	b.n	801aa86 <HAL_UART_Transmit_IT+0x7e>
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	2201      	movs	r2, #1
 801aa44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	68ba      	ldr	r2, [r7, #8]
 801aa4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	88fa      	ldrh	r2, [r7, #6]
 801aa52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	88fa      	ldrh	r2, [r7, #6]
 801aa58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	2221      	movs	r2, #33	; 0x21
 801aa64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	68da      	ldr	r2, [r3, #12]
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801aa7e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801aa80:	2300      	movs	r3, #0
 801aa82:	e000      	b.n	801aa86 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801aa84:	2302      	movs	r3, #2
  }
}
 801aa86:	4618      	mov	r0, r3
 801aa88:	3714      	adds	r7, #20
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa90:	4770      	bx	lr

0801aa92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801aa92:	b580      	push	{r7, lr}
 801aa94:	b084      	sub	sp, #16
 801aa96:	af00      	add	r7, sp, #0
 801aa98:	60f8      	str	r0, [r7, #12]
 801aa9a:	60b9      	str	r1, [r7, #8]
 801aa9c:	4613      	mov	r3, r2
 801aa9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aaa6:	b2db      	uxtb	r3, r3
 801aaa8:	2b20      	cmp	r3, #32
 801aaaa:	d11d      	bne.n	801aae8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d002      	beq.n	801aab8 <HAL_UART_Receive_IT+0x26>
 801aab2:	88fb      	ldrh	r3, [r7, #6]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d101      	bne.n	801aabc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801aab8:	2301      	movs	r3, #1
 801aaba:	e016      	b.n	801aaea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aac2:	2b01      	cmp	r3, #1
 801aac4:	d101      	bne.n	801aaca <HAL_UART_Receive_IT+0x38>
 801aac6:	2302      	movs	r3, #2
 801aac8:	e00f      	b.n	801aaea <HAL_UART_Receive_IT+0x58>
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	2201      	movs	r2, #1
 801aace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	2200      	movs	r2, #0
 801aad6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801aad8:	88fb      	ldrh	r3, [r7, #6]
 801aada:	461a      	mov	r2, r3
 801aadc:	68b9      	ldr	r1, [r7, #8]
 801aade:	68f8      	ldr	r0, [r7, #12]
 801aae0:	f000 fb24 	bl	801b12c <UART_Start_Receive_IT>
 801aae4:	4603      	mov	r3, r0
 801aae6:	e000      	b.n	801aaea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801aae8:	2302      	movs	r3, #2
  }
}
 801aaea:	4618      	mov	r0, r3
 801aaec:	3710      	adds	r7, #16
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd80      	pop	{r7, pc}
	...

0801aaf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b0ba      	sub	sp, #232	; 0xe8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	68db      	ldr	r3, [r3, #12]
 801ab0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	695b      	ldr	r3, [r3, #20]
 801ab16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801ab20:	2300      	movs	r3, #0
 801ab22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801ab26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ab2a:	f003 030f 	and.w	r3, r3, #15
 801ab2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801ab32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d10f      	bne.n	801ab5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801ab3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ab3e:	f003 0320 	and.w	r3, r3, #32
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d009      	beq.n	801ab5a <HAL_UART_IRQHandler+0x66>
 801ab46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ab4a:	f003 0320 	and.w	r3, r3, #32
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d003      	beq.n	801ab5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801ab52:	6878      	ldr	r0, [r7, #4]
 801ab54:	f000 fc03 	bl	801b35e <UART_Receive_IT>
      return;
 801ab58:	e256      	b.n	801b008 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801ab5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	f000 80de 	beq.w	801ad20 <HAL_UART_IRQHandler+0x22c>
 801ab64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ab68:	f003 0301 	and.w	r3, r3, #1
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d106      	bne.n	801ab7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801ab70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ab74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	f000 80d1 	beq.w	801ad20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801ab7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ab82:	f003 0301 	and.w	r3, r3, #1
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d00b      	beq.n	801aba2 <HAL_UART_IRQHandler+0xae>
 801ab8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ab8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d005      	beq.n	801aba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab9a:	f043 0201 	orr.w	r2, r3, #1
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801aba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aba6:	f003 0304 	and.w	r3, r3, #4
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d00b      	beq.n	801abc6 <HAL_UART_IRQHandler+0xd2>
 801abae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801abb2:	f003 0301 	and.w	r3, r3, #1
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d005      	beq.n	801abc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abbe:	f043 0202 	orr.w	r2, r3, #2
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801abc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801abca:	f003 0302 	and.w	r3, r3, #2
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d00b      	beq.n	801abea <HAL_UART_IRQHandler+0xf6>
 801abd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801abd6:	f003 0301 	and.w	r3, r3, #1
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d005      	beq.n	801abea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abe2:	f043 0204 	orr.w	r2, r3, #4
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801abea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801abee:	f003 0308 	and.w	r3, r3, #8
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d011      	beq.n	801ac1a <HAL_UART_IRQHandler+0x126>
 801abf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801abfa:	f003 0320 	and.w	r3, r3, #32
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d105      	bne.n	801ac0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801ac02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ac06:	f003 0301 	and.w	r3, r3, #1
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d005      	beq.n	801ac1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac12:	f043 0208 	orr.w	r2, r3, #8
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	f000 81ed 	beq.w	801affe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801ac24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ac28:	f003 0320 	and.w	r3, r3, #32
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d008      	beq.n	801ac42 <HAL_UART_IRQHandler+0x14e>
 801ac30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ac34:	f003 0320 	and.w	r3, r3, #32
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d002      	beq.n	801ac42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801ac3c:	6878      	ldr	r0, [r7, #4]
 801ac3e:	f000 fb8e 	bl	801b35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	695b      	ldr	r3, [r3, #20]
 801ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac4c:	2b40      	cmp	r3, #64	; 0x40
 801ac4e:	bf0c      	ite	eq
 801ac50:	2301      	moveq	r3, #1
 801ac52:	2300      	movne	r3, #0
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac5e:	f003 0308 	and.w	r3, r3, #8
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d103      	bne.n	801ac6e <HAL_UART_IRQHandler+0x17a>
 801ac66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d04f      	beq.n	801ad0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801ac6e:	6878      	ldr	r0, [r7, #4]
 801ac70:	f000 fa96 	bl	801b1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	695b      	ldr	r3, [r3, #20]
 801ac7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac7e:	2b40      	cmp	r3, #64	; 0x40
 801ac80:	d141      	bne.n	801ad06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	3314      	adds	r3, #20
 801ac88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ac90:	e853 3f00 	ldrex	r3, [r3]
 801ac94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801ac98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ac9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	3314      	adds	r3, #20
 801acaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801acae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801acb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801acb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801acba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801acbe:	e841 2300 	strex	r3, r2, [r1]
 801acc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801acc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801acca:	2b00      	cmp	r3, #0
 801accc:	d1d9      	bne.n	801ac82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d013      	beq.n	801acfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acda:	4a7d      	ldr	r2, [pc, #500]	; (801aed0 <HAL_UART_IRQHandler+0x3dc>)
 801acdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7fb fb9e 	bl	8016424 <HAL_DMA_Abort_IT>
 801ace8:	4603      	mov	r3, r0
 801acea:	2b00      	cmp	r3, #0
 801acec:	d016      	beq.n	801ad1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acf4:	687a      	ldr	r2, [r7, #4]
 801acf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801acf8:	4610      	mov	r0, r2
 801acfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801acfc:	e00e      	b.n	801ad1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f000 f990 	bl	801b024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ad04:	e00a      	b.n	801ad1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801ad06:	6878      	ldr	r0, [r7, #4]
 801ad08:	f000 f98c 	bl	801b024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ad0c:	e006      	b.n	801ad1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801ad0e:	6878      	ldr	r0, [r7, #4]
 801ad10:	f000 f988 	bl	801b024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2200      	movs	r2, #0
 801ad18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801ad1a:	e170      	b.n	801affe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ad1c:	bf00      	nop
    return;
 801ad1e:	e16e      	b.n	801affe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad24:	2b01      	cmp	r3, #1
 801ad26:	f040 814a 	bne.w	801afbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801ad2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ad2e:	f003 0310 	and.w	r3, r3, #16
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	f000 8143 	beq.w	801afbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801ad38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ad3c:	f003 0310 	and.w	r3, r3, #16
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	f000 813c 	beq.w	801afbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801ad46:	2300      	movs	r3, #0
 801ad48:	60bb      	str	r3, [r7, #8]
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	60bb      	str	r3, [r7, #8]
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	60bb      	str	r3, [r7, #8]
 801ad5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	695b      	ldr	r3, [r3, #20]
 801ad62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad66:	2b40      	cmp	r3, #64	; 0x40
 801ad68:	f040 80b4 	bne.w	801aed4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	685b      	ldr	r3, [r3, #4]
 801ad74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801ad78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	f000 8140 	beq.w	801b002 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ad86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	f080 8139 	bcs.w	801b002 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ad96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad9c:	69db      	ldr	r3, [r3, #28]
 801ad9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ada2:	f000 8088 	beq.w	801aeb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	330c      	adds	r3, #12
 801adac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801adb4:	e853 3f00 	ldrex	r3, [r3]
 801adb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801adbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801adc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801adc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	330c      	adds	r3, #12
 801adce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801add2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801add6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801adda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801adde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ade2:	e841 2300 	strex	r3, r2, [r1]
 801ade6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801adea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d1d9      	bne.n	801ada6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	3314      	adds	r3, #20
 801adf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801adfc:	e853 3f00 	ldrex	r3, [r3]
 801ae00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801ae02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae04:	f023 0301 	bic.w	r3, r3, #1
 801ae08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	3314      	adds	r3, #20
 801ae12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ae16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801ae1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801ae1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ae22:	e841 2300 	strex	r3, r2, [r1]
 801ae26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801ae28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d1e1      	bne.n	801adf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	3314      	adds	r3, #20
 801ae34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ae38:	e853 3f00 	ldrex	r3, [r3]
 801ae3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ae3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ae40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ae44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	3314      	adds	r3, #20
 801ae4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801ae52:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ae54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801ae58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ae5a:	e841 2300 	strex	r3, r2, [r1]
 801ae5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801ae60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d1e3      	bne.n	801ae2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2220      	movs	r2, #32
 801ae6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2200      	movs	r2, #0
 801ae72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	330c      	adds	r3, #12
 801ae7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae7e:	e853 3f00 	ldrex	r3, [r3]
 801ae82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ae84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae86:	f023 0310 	bic.w	r3, r3, #16
 801ae8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	330c      	adds	r3, #12
 801ae94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ae98:	65ba      	str	r2, [r7, #88]	; 0x58
 801ae9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ae9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aea0:	e841 2300 	strex	r3, r2, [r1]
 801aea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801aea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d1e3      	bne.n	801ae74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f7fb fa47 	bl	8016344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	1ad3      	subs	r3, r2, r3
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	4619      	mov	r1, r3
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	f000 f8b6 	bl	801b038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801aecc:	e099      	b.n	801b002 <HAL_UART_IRQHandler+0x50e>
 801aece:	bf00      	nop
 801aed0:	0801b267 	.word	0x0801b267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801aedc:	b29b      	uxth	r3, r3
 801aede:	1ad3      	subs	r3, r2, r3
 801aee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	f000 808b 	beq.w	801b006 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801aef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	f000 8086 	beq.w	801b006 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	330c      	adds	r3, #12
 801af00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af04:	e853 3f00 	ldrex	r3, [r3]
 801af08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801af10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	330c      	adds	r3, #12
 801af1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801af1e:	647a      	str	r2, [r7, #68]	; 0x44
 801af20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801af24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801af26:	e841 2300 	strex	r3, r2, [r1]
 801af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d1e3      	bne.n	801aefa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	3314      	adds	r3, #20
 801af38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af3c:	e853 3f00 	ldrex	r3, [r3]
 801af40:	623b      	str	r3, [r7, #32]
   return(result);
 801af42:	6a3b      	ldr	r3, [r7, #32]
 801af44:	f023 0301 	bic.w	r3, r3, #1
 801af48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	3314      	adds	r3, #20
 801af52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801af56:	633a      	str	r2, [r7, #48]	; 0x30
 801af58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801af5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af5e:	e841 2300 	strex	r3, r2, [r1]
 801af62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af66:	2b00      	cmp	r3, #0
 801af68:	d1e3      	bne.n	801af32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	2220      	movs	r2, #32
 801af6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2200      	movs	r2, #0
 801af76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	330c      	adds	r3, #12
 801af7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af80:	693b      	ldr	r3, [r7, #16]
 801af82:	e853 3f00 	ldrex	r3, [r3]
 801af86:	60fb      	str	r3, [r7, #12]
   return(result);
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	f023 0310 	bic.w	r3, r3, #16
 801af8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	330c      	adds	r3, #12
 801af98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801af9c:	61fa      	str	r2, [r7, #28]
 801af9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afa0:	69b9      	ldr	r1, [r7, #24]
 801afa2:	69fa      	ldr	r2, [r7, #28]
 801afa4:	e841 2300 	strex	r3, r2, [r1]
 801afa8:	617b      	str	r3, [r7, #20]
   return(result);
 801afaa:	697b      	ldr	r3, [r7, #20]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d1e3      	bne.n	801af78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801afb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801afb4:	4619      	mov	r1, r3
 801afb6:	6878      	ldr	r0, [r7, #4]
 801afb8:	f000 f83e 	bl	801b038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801afbc:	e023      	b.n	801b006 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801afbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d009      	beq.n	801afde <HAL_UART_IRQHandler+0x4ea>
 801afca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801afce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d003      	beq.n	801afde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801afd6:	6878      	ldr	r0, [r7, #4]
 801afd8:	f000 f959 	bl	801b28e <UART_Transmit_IT>
    return;
 801afdc:	e014      	b.n	801b008 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801afde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d00e      	beq.n	801b008 <HAL_UART_IRQHandler+0x514>
 801afea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801afee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d008      	beq.n	801b008 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f000 f999 	bl	801b32e <UART_EndTransmit_IT>
    return;
 801affc:	e004      	b.n	801b008 <HAL_UART_IRQHandler+0x514>
    return;
 801affe:	bf00      	nop
 801b000:	e002      	b.n	801b008 <HAL_UART_IRQHandler+0x514>
      return;
 801b002:	bf00      	nop
 801b004:	e000      	b.n	801b008 <HAL_UART_IRQHandler+0x514>
      return;
 801b006:	bf00      	nop
  }
}
 801b008:	37e8      	adds	r7, #232	; 0xe8
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}
 801b00e:	bf00      	nop

0801b010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b010:	b480      	push	{r7}
 801b012:	b083      	sub	sp, #12
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801b018:	bf00      	nop
 801b01a:	370c      	adds	r7, #12
 801b01c:	46bd      	mov	sp, r7
 801b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b022:	4770      	bx	lr

0801b024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b024:	b480      	push	{r7}
 801b026:	b083      	sub	sp, #12
 801b028:	af00      	add	r7, sp, #0
 801b02a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801b02c:	bf00      	nop
 801b02e:	370c      	adds	r7, #12
 801b030:	46bd      	mov	sp, r7
 801b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b036:	4770      	bx	lr

0801b038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b038:	b480      	push	{r7}
 801b03a:	b083      	sub	sp, #12
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	460b      	mov	r3, r1
 801b042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b044:	bf00      	nop
 801b046:	370c      	adds	r7, #12
 801b048:	46bd      	mov	sp, r7
 801b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b04e:	4770      	bx	lr

0801b050 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801b050:	b580      	push	{r7, lr}
 801b052:	b090      	sub	sp, #64	; 0x40
 801b054:	af00      	add	r7, sp, #0
 801b056:	60f8      	str	r0, [r7, #12]
 801b058:	60b9      	str	r1, [r7, #8]
 801b05a:	603b      	str	r3, [r7, #0]
 801b05c:	4613      	mov	r3, r2
 801b05e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b060:	e050      	b.n	801b104 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b064:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b068:	d04c      	beq.n	801b104 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801b06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d007      	beq.n	801b080 <UART_WaitOnFlagUntilTimeout+0x30>
 801b070:	f7fa fa0c 	bl	801548c <HAL_GetTick>
 801b074:	4602      	mov	r2, r0
 801b076:	683b      	ldr	r3, [r7, #0]
 801b078:	1ad3      	subs	r3, r2, r3
 801b07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b07c:	429a      	cmp	r2, r3
 801b07e:	d241      	bcs.n	801b104 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	330c      	adds	r3, #12
 801b086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b08a:	e853 3f00 	ldrex	r3, [r3]
 801b08e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b092:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801b096:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	330c      	adds	r3, #12
 801b09e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b0a0:	637a      	str	r2, [r7, #52]	; 0x34
 801b0a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b0a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b0a8:	e841 2300 	strex	r3, r2, [r1]
 801b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d1e5      	bne.n	801b080 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	3314      	adds	r3, #20
 801b0ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0bc:	697b      	ldr	r3, [r7, #20]
 801b0be:	e853 3f00 	ldrex	r3, [r3]
 801b0c2:	613b      	str	r3, [r7, #16]
   return(result);
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	f023 0301 	bic.w	r3, r3, #1
 801b0ca:	63bb      	str	r3, [r7, #56]	; 0x38
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	3314      	adds	r3, #20
 801b0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0d4:	623a      	str	r2, [r7, #32]
 801b0d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0d8:	69f9      	ldr	r1, [r7, #28]
 801b0da:	6a3a      	ldr	r2, [r7, #32]
 801b0dc:	e841 2300 	strex	r3, r2, [r1]
 801b0e0:	61bb      	str	r3, [r7, #24]
   return(result);
 801b0e2:	69bb      	ldr	r3, [r7, #24]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d1e5      	bne.n	801b0b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	2220      	movs	r2, #32
 801b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	2220      	movs	r2, #32
 801b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801b100:	2303      	movs	r3, #3
 801b102:	e00f      	b.n	801b124 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	681a      	ldr	r2, [r3, #0]
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	4013      	ands	r3, r2
 801b10e:	68ba      	ldr	r2, [r7, #8]
 801b110:	429a      	cmp	r2, r3
 801b112:	bf0c      	ite	eq
 801b114:	2301      	moveq	r3, #1
 801b116:	2300      	movne	r3, #0
 801b118:	b2db      	uxtb	r3, r3
 801b11a:	461a      	mov	r2, r3
 801b11c:	79fb      	ldrb	r3, [r7, #7]
 801b11e:	429a      	cmp	r2, r3
 801b120:	d09f      	beq.n	801b062 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801b122:	2300      	movs	r3, #0
}
 801b124:	4618      	mov	r0, r3
 801b126:	3740      	adds	r7, #64	; 0x40
 801b128:	46bd      	mov	sp, r7
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b12c:	b480      	push	{r7}
 801b12e:	b085      	sub	sp, #20
 801b130:	af00      	add	r7, sp, #0
 801b132:	60f8      	str	r0, [r7, #12]
 801b134:	60b9      	str	r1, [r7, #8]
 801b136:	4613      	mov	r3, r2
 801b138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	68ba      	ldr	r2, [r7, #8]
 801b13e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	88fa      	ldrh	r2, [r7, #6]
 801b144:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	88fa      	ldrh	r2, [r7, #6]
 801b14a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	2200      	movs	r2, #0
 801b150:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	2222      	movs	r2, #34	; 0x22
 801b156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	2200      	movs	r2, #0
 801b15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	68da      	ldr	r2, [r3, #12]
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b170:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	695a      	ldr	r2, [r3, #20]
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	f042 0201 	orr.w	r2, r2, #1
 801b180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	68da      	ldr	r2, [r3, #12]
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	f042 0220 	orr.w	r2, r2, #32
 801b190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b192:	2300      	movs	r3, #0
}
 801b194:	4618      	mov	r0, r3
 801b196:	3714      	adds	r7, #20
 801b198:	46bd      	mov	sp, r7
 801b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19e:	4770      	bx	lr

0801b1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b1a0:	b480      	push	{r7}
 801b1a2:	b095      	sub	sp, #84	; 0x54
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	330c      	adds	r3, #12
 801b1ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b1b2:	e853 3f00 	ldrex	r3, [r3]
 801b1b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	330c      	adds	r3, #12
 801b1c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b1c8:	643a      	str	r2, [r7, #64]	; 0x40
 801b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b1ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b1d0:	e841 2300 	strex	r3, r2, [r1]
 801b1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d1e5      	bne.n	801b1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	3314      	adds	r3, #20
 801b1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1e4:	6a3b      	ldr	r3, [r7, #32]
 801b1e6:	e853 3f00 	ldrex	r3, [r3]
 801b1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 801b1ec:	69fb      	ldr	r3, [r7, #28]
 801b1ee:	f023 0301 	bic.w	r3, r3, #1
 801b1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	3314      	adds	r3, #20
 801b1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b204:	e841 2300 	strex	r3, r2, [r1]
 801b208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d1e5      	bne.n	801b1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b214:	2b01      	cmp	r3, #1
 801b216:	d119      	bne.n	801b24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	330c      	adds	r3, #12
 801b21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	e853 3f00 	ldrex	r3, [r3]
 801b226:	60bb      	str	r3, [r7, #8]
   return(result);
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	f023 0310 	bic.w	r3, r3, #16
 801b22e:	647b      	str	r3, [r7, #68]	; 0x44
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	330c      	adds	r3, #12
 801b236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b238:	61ba      	str	r2, [r7, #24]
 801b23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b23c:	6979      	ldr	r1, [r7, #20]
 801b23e:	69ba      	ldr	r2, [r7, #24]
 801b240:	e841 2300 	strex	r3, r2, [r1]
 801b244:	613b      	str	r3, [r7, #16]
   return(result);
 801b246:	693b      	ldr	r3, [r7, #16]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d1e5      	bne.n	801b218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	2220      	movs	r2, #32
 801b250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	2200      	movs	r2, #0
 801b258:	631a      	str	r2, [r3, #48]	; 0x30
}
 801b25a:	bf00      	nop
 801b25c:	3754      	adds	r7, #84	; 0x54
 801b25e:	46bd      	mov	sp, r7
 801b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b264:	4770      	bx	lr

0801b266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b266:	b580      	push	{r7, lr}
 801b268:	b084      	sub	sp, #16
 801b26a:	af00      	add	r7, sp, #0
 801b26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	2200      	movs	r2, #0
 801b278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	2200      	movs	r2, #0
 801b27e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b280:	68f8      	ldr	r0, [r7, #12]
 801b282:	f7ff fecf 	bl	801b024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b286:	bf00      	nop
 801b288:	3710      	adds	r7, #16
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}

0801b28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801b28e:	b480      	push	{r7}
 801b290:	b085      	sub	sp, #20
 801b292:	af00      	add	r7, sp, #0
 801b294:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b29c:	b2db      	uxtb	r3, r3
 801b29e:	2b21      	cmp	r3, #33	; 0x21
 801b2a0:	d13e      	bne.n	801b320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	689b      	ldr	r3, [r3, #8]
 801b2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b2aa:	d114      	bne.n	801b2d6 <UART_Transmit_IT+0x48>
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	691b      	ldr	r3, [r3, #16]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d110      	bne.n	801b2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6a1b      	ldr	r3, [r3, #32]
 801b2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	881b      	ldrh	r3, [r3, #0]
 801b2be:	461a      	mov	r2, r3
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	6a1b      	ldr	r3, [r3, #32]
 801b2ce:	1c9a      	adds	r2, r3, #2
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	621a      	str	r2, [r3, #32]
 801b2d4:	e008      	b.n	801b2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6a1b      	ldr	r3, [r3, #32]
 801b2da:	1c59      	adds	r1, r3, #1
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	6211      	str	r1, [r2, #32]
 801b2e0:	781a      	ldrb	r2, [r3, #0]
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b2ec:	b29b      	uxth	r3, r3
 801b2ee:	3b01      	subs	r3, #1
 801b2f0:	b29b      	uxth	r3, r3
 801b2f2:	687a      	ldr	r2, [r7, #4]
 801b2f4:	4619      	mov	r1, r3
 801b2f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d10f      	bne.n	801b31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	68da      	ldr	r2, [r3, #12]
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	68da      	ldr	r2, [r3, #12]
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801b31c:	2300      	movs	r3, #0
 801b31e:	e000      	b.n	801b322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801b320:	2302      	movs	r3, #2
  }
}
 801b322:	4618      	mov	r0, r3
 801b324:	3714      	adds	r7, #20
 801b326:	46bd      	mov	sp, r7
 801b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32c:	4770      	bx	lr

0801b32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b32e:	b580      	push	{r7, lr}
 801b330:	b082      	sub	sp, #8
 801b332:	af00      	add	r7, sp, #0
 801b334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	68da      	ldr	r2, [r3, #12]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2220      	movs	r2, #32
 801b34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b34e:	6878      	ldr	r0, [r7, #4]
 801b350:	f7ff fe5e 	bl	801b010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801b354:	2300      	movs	r3, #0
}
 801b356:	4618      	mov	r0, r3
 801b358:	3708      	adds	r7, #8
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}

0801b35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801b35e:	b580      	push	{r7, lr}
 801b360:	b08c      	sub	sp, #48	; 0x30
 801b362:	af00      	add	r7, sp, #0
 801b364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b36c:	b2db      	uxtb	r3, r3
 801b36e:	2b22      	cmp	r3, #34	; 0x22
 801b370:	f040 80ab 	bne.w	801b4ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	689b      	ldr	r3, [r3, #8]
 801b378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b37c:	d117      	bne.n	801b3ae <UART_Receive_IT+0x50>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	691b      	ldr	r3, [r3, #16]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d113      	bne.n	801b3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801b386:	2300      	movs	r3, #0
 801b388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b38e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	685b      	ldr	r3, [r3, #4]
 801b396:	b29b      	uxth	r3, r3
 801b398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b39c:	b29a      	uxth	r2, r3
 801b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3a6:	1c9a      	adds	r2, r3, #2
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	629a      	str	r2, [r3, #40]	; 0x28
 801b3ac:	e026      	b.n	801b3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	689b      	ldr	r3, [r3, #8]
 801b3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b3c0:	d007      	beq.n	801b3d2 <UART_Receive_IT+0x74>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	689b      	ldr	r3, [r3, #8]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d10a      	bne.n	801b3e0 <UART_Receive_IT+0x82>
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	691b      	ldr	r3, [r3, #16]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d106      	bne.n	801b3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	685b      	ldr	r3, [r3, #4]
 801b3d8:	b2da      	uxtb	r2, r3
 801b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3dc:	701a      	strb	r2, [r3, #0]
 801b3de:	e008      	b.n	801b3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	685b      	ldr	r3, [r3, #4]
 801b3e6:	b2db      	uxtb	r3, r3
 801b3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b3ec:	b2da      	uxtb	r2, r3
 801b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3f6:	1c5a      	adds	r2, r3, #1
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b400:	b29b      	uxth	r3, r3
 801b402:	3b01      	subs	r3, #1
 801b404:	b29b      	uxth	r3, r3
 801b406:	687a      	ldr	r2, [r7, #4]
 801b408:	4619      	mov	r1, r3
 801b40a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d15a      	bne.n	801b4c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	68da      	ldr	r2, [r3, #12]
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	f022 0220 	bic.w	r2, r2, #32
 801b41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	68da      	ldr	r2, [r3, #12]
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	695a      	ldr	r2, [r3, #20]
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	f022 0201 	bic.w	r2, r2, #1
 801b43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	2220      	movs	r2, #32
 801b444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b44c:	2b01      	cmp	r3, #1
 801b44e:	d135      	bne.n	801b4bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2200      	movs	r2, #0
 801b454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	330c      	adds	r3, #12
 801b45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b45e:	697b      	ldr	r3, [r7, #20]
 801b460:	e853 3f00 	ldrex	r3, [r3]
 801b464:	613b      	str	r3, [r7, #16]
   return(result);
 801b466:	693b      	ldr	r3, [r7, #16]
 801b468:	f023 0310 	bic.w	r3, r3, #16
 801b46c:	627b      	str	r3, [r7, #36]	; 0x24
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	330c      	adds	r3, #12
 801b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b476:	623a      	str	r2, [r7, #32]
 801b478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b47a:	69f9      	ldr	r1, [r7, #28]
 801b47c:	6a3a      	ldr	r2, [r7, #32]
 801b47e:	e841 2300 	strex	r3, r2, [r1]
 801b482:	61bb      	str	r3, [r7, #24]
   return(result);
 801b484:	69bb      	ldr	r3, [r7, #24]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d1e5      	bne.n	801b456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	f003 0310 	and.w	r3, r3, #16
 801b494:	2b10      	cmp	r3, #16
 801b496:	d10a      	bne.n	801b4ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801b498:	2300      	movs	r3, #0
 801b49a:	60fb      	str	r3, [r7, #12]
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	60fb      	str	r3, [r7, #12]
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	60fb      	str	r3, [r7, #12]
 801b4ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b4b2:	4619      	mov	r1, r3
 801b4b4:	6878      	ldr	r0, [r7, #4]
 801b4b6:	f7ff fdbf 	bl	801b038 <HAL_UARTEx_RxEventCallback>
 801b4ba:	e002      	b.n	801b4c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7f5 fc91 	bl	8010de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	e002      	b.n	801b4cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	e000      	b.n	801b4cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801b4ca:	2302      	movs	r3, #2
  }
}
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	3730      	adds	r7, #48	; 0x30
 801b4d0:	46bd      	mov	sp, r7
 801b4d2:	bd80      	pop	{r7, pc}

0801b4d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d8:	b09f      	sub	sp, #124	; 0x7c
 801b4da:	af00      	add	r7, sp, #0
 801b4dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b4de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	691b      	ldr	r3, [r3, #16]
 801b4e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801b4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4ea:	68d9      	ldr	r1, [r3, #12]
 801b4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4ee:	681a      	ldr	r2, [r3, #0]
 801b4f0:	ea40 0301 	orr.w	r3, r0, r1
 801b4f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801b4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4f8:	689a      	ldr	r2, [r3, #8]
 801b4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4fc:	691b      	ldr	r3, [r3, #16]
 801b4fe:	431a      	orrs	r2, r3
 801b500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b502:	695b      	ldr	r3, [r3, #20]
 801b504:	431a      	orrs	r2, r3
 801b506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b508:	69db      	ldr	r3, [r3, #28]
 801b50a:	4313      	orrs	r3, r2
 801b50c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801b50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801b518:	f021 010c 	bic.w	r1, r1, #12
 801b51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b51e:	681a      	ldr	r2, [r3, #0]
 801b520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b522:	430b      	orrs	r3, r1
 801b524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801b526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	695b      	ldr	r3, [r3, #20]
 801b52c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801b530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b532:	6999      	ldr	r1, [r3, #24]
 801b534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b536:	681a      	ldr	r2, [r3, #0]
 801b538:	ea40 0301 	orr.w	r3, r0, r1
 801b53c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801b53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	4bc5      	ldr	r3, [pc, #788]	; (801b858 <UART_SetConfig+0x384>)
 801b544:	429a      	cmp	r2, r3
 801b546:	d004      	beq.n	801b552 <UART_SetConfig+0x7e>
 801b548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b54a:	681a      	ldr	r2, [r3, #0]
 801b54c:	4bc3      	ldr	r3, [pc, #780]	; (801b85c <UART_SetConfig+0x388>)
 801b54e:	429a      	cmp	r2, r3
 801b550:	d103      	bne.n	801b55a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801b552:	f7fe f975 	bl	8019840 <HAL_RCC_GetPCLK2Freq>
 801b556:	6778      	str	r0, [r7, #116]	; 0x74
 801b558:	e002      	b.n	801b560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801b55a:	f7fe f95d 	bl	8019818 <HAL_RCC_GetPCLK1Freq>
 801b55e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b562:	69db      	ldr	r3, [r3, #28]
 801b564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b568:	f040 80b6 	bne.w	801b6d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801b56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b56e:	461c      	mov	r4, r3
 801b570:	f04f 0500 	mov.w	r5, #0
 801b574:	4622      	mov	r2, r4
 801b576:	462b      	mov	r3, r5
 801b578:	1891      	adds	r1, r2, r2
 801b57a:	6439      	str	r1, [r7, #64]	; 0x40
 801b57c:	415b      	adcs	r3, r3
 801b57e:	647b      	str	r3, [r7, #68]	; 0x44
 801b580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b584:	1912      	adds	r2, r2, r4
 801b586:	eb45 0303 	adc.w	r3, r5, r3
 801b58a:	f04f 0000 	mov.w	r0, #0
 801b58e:	f04f 0100 	mov.w	r1, #0
 801b592:	00d9      	lsls	r1, r3, #3
 801b594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b598:	00d0      	lsls	r0, r2, #3
 801b59a:	4602      	mov	r2, r0
 801b59c:	460b      	mov	r3, r1
 801b59e:	1911      	adds	r1, r2, r4
 801b5a0:	6639      	str	r1, [r7, #96]	; 0x60
 801b5a2:	416b      	adcs	r3, r5
 801b5a4:	667b      	str	r3, [r7, #100]	; 0x64
 801b5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5a8:	685b      	ldr	r3, [r3, #4]
 801b5aa:	461a      	mov	r2, r3
 801b5ac:	f04f 0300 	mov.w	r3, #0
 801b5b0:	1891      	adds	r1, r2, r2
 801b5b2:	63b9      	str	r1, [r7, #56]	; 0x38
 801b5b4:	415b      	adcs	r3, r3
 801b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b5b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b5bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801b5c0:	f7e5 faf4 	bl	8000bac <__aeabi_uldivmod>
 801b5c4:	4602      	mov	r2, r0
 801b5c6:	460b      	mov	r3, r1
 801b5c8:	4ba5      	ldr	r3, [pc, #660]	; (801b860 <UART_SetConfig+0x38c>)
 801b5ca:	fba3 2302 	umull	r2, r3, r3, r2
 801b5ce:	095b      	lsrs	r3, r3, #5
 801b5d0:	011e      	lsls	r6, r3, #4
 801b5d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b5d4:	461c      	mov	r4, r3
 801b5d6:	f04f 0500 	mov.w	r5, #0
 801b5da:	4622      	mov	r2, r4
 801b5dc:	462b      	mov	r3, r5
 801b5de:	1891      	adds	r1, r2, r2
 801b5e0:	6339      	str	r1, [r7, #48]	; 0x30
 801b5e2:	415b      	adcs	r3, r3
 801b5e4:	637b      	str	r3, [r7, #52]	; 0x34
 801b5e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801b5ea:	1912      	adds	r2, r2, r4
 801b5ec:	eb45 0303 	adc.w	r3, r5, r3
 801b5f0:	f04f 0000 	mov.w	r0, #0
 801b5f4:	f04f 0100 	mov.w	r1, #0
 801b5f8:	00d9      	lsls	r1, r3, #3
 801b5fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b5fe:	00d0      	lsls	r0, r2, #3
 801b600:	4602      	mov	r2, r0
 801b602:	460b      	mov	r3, r1
 801b604:	1911      	adds	r1, r2, r4
 801b606:	65b9      	str	r1, [r7, #88]	; 0x58
 801b608:	416b      	adcs	r3, r5
 801b60a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b60e:	685b      	ldr	r3, [r3, #4]
 801b610:	461a      	mov	r2, r3
 801b612:	f04f 0300 	mov.w	r3, #0
 801b616:	1891      	adds	r1, r2, r2
 801b618:	62b9      	str	r1, [r7, #40]	; 0x28
 801b61a:	415b      	adcs	r3, r3
 801b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b61e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801b626:	f7e5 fac1 	bl	8000bac <__aeabi_uldivmod>
 801b62a:	4602      	mov	r2, r0
 801b62c:	460b      	mov	r3, r1
 801b62e:	4b8c      	ldr	r3, [pc, #560]	; (801b860 <UART_SetConfig+0x38c>)
 801b630:	fba3 1302 	umull	r1, r3, r3, r2
 801b634:	095b      	lsrs	r3, r3, #5
 801b636:	2164      	movs	r1, #100	; 0x64
 801b638:	fb01 f303 	mul.w	r3, r1, r3
 801b63c:	1ad3      	subs	r3, r2, r3
 801b63e:	00db      	lsls	r3, r3, #3
 801b640:	3332      	adds	r3, #50	; 0x32
 801b642:	4a87      	ldr	r2, [pc, #540]	; (801b860 <UART_SetConfig+0x38c>)
 801b644:	fba2 2303 	umull	r2, r3, r2, r3
 801b648:	095b      	lsrs	r3, r3, #5
 801b64a:	005b      	lsls	r3, r3, #1
 801b64c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801b650:	441e      	add	r6, r3
 801b652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b654:	4618      	mov	r0, r3
 801b656:	f04f 0100 	mov.w	r1, #0
 801b65a:	4602      	mov	r2, r0
 801b65c:	460b      	mov	r3, r1
 801b65e:	1894      	adds	r4, r2, r2
 801b660:	623c      	str	r4, [r7, #32]
 801b662:	415b      	adcs	r3, r3
 801b664:	627b      	str	r3, [r7, #36]	; 0x24
 801b666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b66a:	1812      	adds	r2, r2, r0
 801b66c:	eb41 0303 	adc.w	r3, r1, r3
 801b670:	f04f 0400 	mov.w	r4, #0
 801b674:	f04f 0500 	mov.w	r5, #0
 801b678:	00dd      	lsls	r5, r3, #3
 801b67a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b67e:	00d4      	lsls	r4, r2, #3
 801b680:	4622      	mov	r2, r4
 801b682:	462b      	mov	r3, r5
 801b684:	1814      	adds	r4, r2, r0
 801b686:	653c      	str	r4, [r7, #80]	; 0x50
 801b688:	414b      	adcs	r3, r1
 801b68a:	657b      	str	r3, [r7, #84]	; 0x54
 801b68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b68e:	685b      	ldr	r3, [r3, #4]
 801b690:	461a      	mov	r2, r3
 801b692:	f04f 0300 	mov.w	r3, #0
 801b696:	1891      	adds	r1, r2, r2
 801b698:	61b9      	str	r1, [r7, #24]
 801b69a:	415b      	adcs	r3, r3
 801b69c:	61fb      	str	r3, [r7, #28]
 801b69e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b6a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801b6a6:	f7e5 fa81 	bl	8000bac <__aeabi_uldivmod>
 801b6aa:	4602      	mov	r2, r0
 801b6ac:	460b      	mov	r3, r1
 801b6ae:	4b6c      	ldr	r3, [pc, #432]	; (801b860 <UART_SetConfig+0x38c>)
 801b6b0:	fba3 1302 	umull	r1, r3, r3, r2
 801b6b4:	095b      	lsrs	r3, r3, #5
 801b6b6:	2164      	movs	r1, #100	; 0x64
 801b6b8:	fb01 f303 	mul.w	r3, r1, r3
 801b6bc:	1ad3      	subs	r3, r2, r3
 801b6be:	00db      	lsls	r3, r3, #3
 801b6c0:	3332      	adds	r3, #50	; 0x32
 801b6c2:	4a67      	ldr	r2, [pc, #412]	; (801b860 <UART_SetConfig+0x38c>)
 801b6c4:	fba2 2303 	umull	r2, r3, r2, r3
 801b6c8:	095b      	lsrs	r3, r3, #5
 801b6ca:	f003 0207 	and.w	r2, r3, #7
 801b6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	4432      	add	r2, r6
 801b6d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801b6d6:	e0b9      	b.n	801b84c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b6d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b6da:	461c      	mov	r4, r3
 801b6dc:	f04f 0500 	mov.w	r5, #0
 801b6e0:	4622      	mov	r2, r4
 801b6e2:	462b      	mov	r3, r5
 801b6e4:	1891      	adds	r1, r2, r2
 801b6e6:	6139      	str	r1, [r7, #16]
 801b6e8:	415b      	adcs	r3, r3
 801b6ea:	617b      	str	r3, [r7, #20]
 801b6ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b6f0:	1912      	adds	r2, r2, r4
 801b6f2:	eb45 0303 	adc.w	r3, r5, r3
 801b6f6:	f04f 0000 	mov.w	r0, #0
 801b6fa:	f04f 0100 	mov.w	r1, #0
 801b6fe:	00d9      	lsls	r1, r3, #3
 801b700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b704:	00d0      	lsls	r0, r2, #3
 801b706:	4602      	mov	r2, r0
 801b708:	460b      	mov	r3, r1
 801b70a:	eb12 0804 	adds.w	r8, r2, r4
 801b70e:	eb43 0905 	adc.w	r9, r3, r5
 801b712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b714:	685b      	ldr	r3, [r3, #4]
 801b716:	4618      	mov	r0, r3
 801b718:	f04f 0100 	mov.w	r1, #0
 801b71c:	f04f 0200 	mov.w	r2, #0
 801b720:	f04f 0300 	mov.w	r3, #0
 801b724:	008b      	lsls	r3, r1, #2
 801b726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b72a:	0082      	lsls	r2, r0, #2
 801b72c:	4640      	mov	r0, r8
 801b72e:	4649      	mov	r1, r9
 801b730:	f7e5 fa3c 	bl	8000bac <__aeabi_uldivmod>
 801b734:	4602      	mov	r2, r0
 801b736:	460b      	mov	r3, r1
 801b738:	4b49      	ldr	r3, [pc, #292]	; (801b860 <UART_SetConfig+0x38c>)
 801b73a:	fba3 2302 	umull	r2, r3, r3, r2
 801b73e:	095b      	lsrs	r3, r3, #5
 801b740:	011e      	lsls	r6, r3, #4
 801b742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b744:	4618      	mov	r0, r3
 801b746:	f04f 0100 	mov.w	r1, #0
 801b74a:	4602      	mov	r2, r0
 801b74c:	460b      	mov	r3, r1
 801b74e:	1894      	adds	r4, r2, r2
 801b750:	60bc      	str	r4, [r7, #8]
 801b752:	415b      	adcs	r3, r3
 801b754:	60fb      	str	r3, [r7, #12]
 801b756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b75a:	1812      	adds	r2, r2, r0
 801b75c:	eb41 0303 	adc.w	r3, r1, r3
 801b760:	f04f 0400 	mov.w	r4, #0
 801b764:	f04f 0500 	mov.w	r5, #0
 801b768:	00dd      	lsls	r5, r3, #3
 801b76a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b76e:	00d4      	lsls	r4, r2, #3
 801b770:	4622      	mov	r2, r4
 801b772:	462b      	mov	r3, r5
 801b774:	1814      	adds	r4, r2, r0
 801b776:	64bc      	str	r4, [r7, #72]	; 0x48
 801b778:	414b      	adcs	r3, r1
 801b77a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b77e:	685b      	ldr	r3, [r3, #4]
 801b780:	4618      	mov	r0, r3
 801b782:	f04f 0100 	mov.w	r1, #0
 801b786:	f04f 0200 	mov.w	r2, #0
 801b78a:	f04f 0300 	mov.w	r3, #0
 801b78e:	008b      	lsls	r3, r1, #2
 801b790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b794:	0082      	lsls	r2, r0, #2
 801b796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801b79a:	f7e5 fa07 	bl	8000bac <__aeabi_uldivmod>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	4b2f      	ldr	r3, [pc, #188]	; (801b860 <UART_SetConfig+0x38c>)
 801b7a4:	fba3 1302 	umull	r1, r3, r3, r2
 801b7a8:	095b      	lsrs	r3, r3, #5
 801b7aa:	2164      	movs	r1, #100	; 0x64
 801b7ac:	fb01 f303 	mul.w	r3, r1, r3
 801b7b0:	1ad3      	subs	r3, r2, r3
 801b7b2:	011b      	lsls	r3, r3, #4
 801b7b4:	3332      	adds	r3, #50	; 0x32
 801b7b6:	4a2a      	ldr	r2, [pc, #168]	; (801b860 <UART_SetConfig+0x38c>)
 801b7b8:	fba2 2303 	umull	r2, r3, r2, r3
 801b7bc:	095b      	lsrs	r3, r3, #5
 801b7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b7c2:	441e      	add	r6, r3
 801b7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f04f 0100 	mov.w	r1, #0
 801b7cc:	4602      	mov	r2, r0
 801b7ce:	460b      	mov	r3, r1
 801b7d0:	1894      	adds	r4, r2, r2
 801b7d2:	603c      	str	r4, [r7, #0]
 801b7d4:	415b      	adcs	r3, r3
 801b7d6:	607b      	str	r3, [r7, #4]
 801b7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b7dc:	1812      	adds	r2, r2, r0
 801b7de:	eb41 0303 	adc.w	r3, r1, r3
 801b7e2:	f04f 0400 	mov.w	r4, #0
 801b7e6:	f04f 0500 	mov.w	r5, #0
 801b7ea:	00dd      	lsls	r5, r3, #3
 801b7ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b7f0:	00d4      	lsls	r4, r2, #3
 801b7f2:	4622      	mov	r2, r4
 801b7f4:	462b      	mov	r3, r5
 801b7f6:	eb12 0a00 	adds.w	sl, r2, r0
 801b7fa:	eb43 0b01 	adc.w	fp, r3, r1
 801b7fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	4618      	mov	r0, r3
 801b804:	f04f 0100 	mov.w	r1, #0
 801b808:	f04f 0200 	mov.w	r2, #0
 801b80c:	f04f 0300 	mov.w	r3, #0
 801b810:	008b      	lsls	r3, r1, #2
 801b812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b816:	0082      	lsls	r2, r0, #2
 801b818:	4650      	mov	r0, sl
 801b81a:	4659      	mov	r1, fp
 801b81c:	f7e5 f9c6 	bl	8000bac <__aeabi_uldivmod>
 801b820:	4602      	mov	r2, r0
 801b822:	460b      	mov	r3, r1
 801b824:	4b0e      	ldr	r3, [pc, #56]	; (801b860 <UART_SetConfig+0x38c>)
 801b826:	fba3 1302 	umull	r1, r3, r3, r2
 801b82a:	095b      	lsrs	r3, r3, #5
 801b82c:	2164      	movs	r1, #100	; 0x64
 801b82e:	fb01 f303 	mul.w	r3, r1, r3
 801b832:	1ad3      	subs	r3, r2, r3
 801b834:	011b      	lsls	r3, r3, #4
 801b836:	3332      	adds	r3, #50	; 0x32
 801b838:	4a09      	ldr	r2, [pc, #36]	; (801b860 <UART_SetConfig+0x38c>)
 801b83a:	fba2 2303 	umull	r2, r3, r2, r3
 801b83e:	095b      	lsrs	r3, r3, #5
 801b840:	f003 020f 	and.w	r2, r3, #15
 801b844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	4432      	add	r2, r6
 801b84a:	609a      	str	r2, [r3, #8]
}
 801b84c:	bf00      	nop
 801b84e:	377c      	adds	r7, #124	; 0x7c
 801b850:	46bd      	mov	sp, r7
 801b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b856:	bf00      	nop
 801b858:	40011000 	.word	0x40011000
 801b85c:	40011400 	.word	0x40011400
 801b860:	51eb851f 	.word	0x51eb851f

0801b864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b864:	b084      	sub	sp, #16
 801b866:	b580      	push	{r7, lr}
 801b868:	b084      	sub	sp, #16
 801b86a:	af00      	add	r7, sp, #0
 801b86c:	6078      	str	r0, [r7, #4]
 801b86e:	f107 001c 	add.w	r0, r7, #28
 801b872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b878:	2b01      	cmp	r3, #1
 801b87a:	d122      	bne.n	801b8c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801b890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b894:	687a      	ldr	r2, [r7, #4]
 801b896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	68db      	ldr	r3, [r3, #12]
 801b89c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801b8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8a6:	2b01      	cmp	r3, #1
 801b8a8:	d105      	bne.n	801b8b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	68db      	ldr	r3, [r3, #12]
 801b8ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b8b6:	6878      	ldr	r0, [r7, #4]
 801b8b8:	f001 fb1c 	bl	801cef4 <USB_CoreReset>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	73fb      	strb	r3, [r7, #15]
 801b8c0:	e01a      	b.n	801b8f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	68db      	ldr	r3, [r3, #12]
 801b8c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	f001 fb10 	bl	801cef4 <USB_CoreReset>
 801b8d4:	4603      	mov	r3, r0
 801b8d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801b8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d106      	bne.n	801b8ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	639a      	str	r2, [r3, #56]	; 0x38
 801b8ea:	e005      	b.n	801b8f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8fa:	2b01      	cmp	r3, #1
 801b8fc:	d10b      	bne.n	801b916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	689b      	ldr	r3, [r3, #8]
 801b902:	f043 0206 	orr.w	r2, r3, #6
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	689b      	ldr	r3, [r3, #8]
 801b90e:	f043 0220 	orr.w	r2, r3, #32
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801b916:	7bfb      	ldrb	r3, [r7, #15]
}
 801b918:	4618      	mov	r0, r3
 801b91a:	3710      	adds	r7, #16
 801b91c:	46bd      	mov	sp, r7
 801b91e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b922:	b004      	add	sp, #16
 801b924:	4770      	bx	lr
	...

0801b928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801b928:	b480      	push	{r7}
 801b92a:	b087      	sub	sp, #28
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	60f8      	str	r0, [r7, #12]
 801b930:	60b9      	str	r1, [r7, #8]
 801b932:	4613      	mov	r3, r2
 801b934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801b936:	79fb      	ldrb	r3, [r7, #7]
 801b938:	2b02      	cmp	r3, #2
 801b93a:	d165      	bne.n	801ba08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	4a41      	ldr	r2, [pc, #260]	; (801ba44 <USB_SetTurnaroundTime+0x11c>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d906      	bls.n	801b952 <USB_SetTurnaroundTime+0x2a>
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	4a40      	ldr	r2, [pc, #256]	; (801ba48 <USB_SetTurnaroundTime+0x120>)
 801b948:	4293      	cmp	r3, r2
 801b94a:	d202      	bcs.n	801b952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801b94c:	230f      	movs	r3, #15
 801b94e:	617b      	str	r3, [r7, #20]
 801b950:	e062      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	4a3c      	ldr	r2, [pc, #240]	; (801ba48 <USB_SetTurnaroundTime+0x120>)
 801b956:	4293      	cmp	r3, r2
 801b958:	d306      	bcc.n	801b968 <USB_SetTurnaroundTime+0x40>
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	4a3b      	ldr	r2, [pc, #236]	; (801ba4c <USB_SetTurnaroundTime+0x124>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d202      	bcs.n	801b968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801b962:	230e      	movs	r3, #14
 801b964:	617b      	str	r3, [r7, #20]
 801b966:	e057      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801b968:	68bb      	ldr	r3, [r7, #8]
 801b96a:	4a38      	ldr	r2, [pc, #224]	; (801ba4c <USB_SetTurnaroundTime+0x124>)
 801b96c:	4293      	cmp	r3, r2
 801b96e:	d306      	bcc.n	801b97e <USB_SetTurnaroundTime+0x56>
 801b970:	68bb      	ldr	r3, [r7, #8]
 801b972:	4a37      	ldr	r2, [pc, #220]	; (801ba50 <USB_SetTurnaroundTime+0x128>)
 801b974:	4293      	cmp	r3, r2
 801b976:	d202      	bcs.n	801b97e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801b978:	230d      	movs	r3, #13
 801b97a:	617b      	str	r3, [r7, #20]
 801b97c:	e04c      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	4a33      	ldr	r2, [pc, #204]	; (801ba50 <USB_SetTurnaroundTime+0x128>)
 801b982:	4293      	cmp	r3, r2
 801b984:	d306      	bcc.n	801b994 <USB_SetTurnaroundTime+0x6c>
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	4a32      	ldr	r2, [pc, #200]	; (801ba54 <USB_SetTurnaroundTime+0x12c>)
 801b98a:	4293      	cmp	r3, r2
 801b98c:	d802      	bhi.n	801b994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801b98e:	230c      	movs	r3, #12
 801b990:	617b      	str	r3, [r7, #20]
 801b992:	e041      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	4a2f      	ldr	r2, [pc, #188]	; (801ba54 <USB_SetTurnaroundTime+0x12c>)
 801b998:	4293      	cmp	r3, r2
 801b99a:	d906      	bls.n	801b9aa <USB_SetTurnaroundTime+0x82>
 801b99c:	68bb      	ldr	r3, [r7, #8]
 801b99e:	4a2e      	ldr	r2, [pc, #184]	; (801ba58 <USB_SetTurnaroundTime+0x130>)
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	d802      	bhi.n	801b9aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801b9a4:	230b      	movs	r3, #11
 801b9a6:	617b      	str	r3, [r7, #20]
 801b9a8:	e036      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	4a2a      	ldr	r2, [pc, #168]	; (801ba58 <USB_SetTurnaroundTime+0x130>)
 801b9ae:	4293      	cmp	r3, r2
 801b9b0:	d906      	bls.n	801b9c0 <USB_SetTurnaroundTime+0x98>
 801b9b2:	68bb      	ldr	r3, [r7, #8]
 801b9b4:	4a29      	ldr	r2, [pc, #164]	; (801ba5c <USB_SetTurnaroundTime+0x134>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d802      	bhi.n	801b9c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801b9ba:	230a      	movs	r3, #10
 801b9bc:	617b      	str	r3, [r7, #20]
 801b9be:	e02b      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801b9c0:	68bb      	ldr	r3, [r7, #8]
 801b9c2:	4a26      	ldr	r2, [pc, #152]	; (801ba5c <USB_SetTurnaroundTime+0x134>)
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	d906      	bls.n	801b9d6 <USB_SetTurnaroundTime+0xae>
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	4a25      	ldr	r2, [pc, #148]	; (801ba60 <USB_SetTurnaroundTime+0x138>)
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	d202      	bcs.n	801b9d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801b9d0:	2309      	movs	r3, #9
 801b9d2:	617b      	str	r3, [r7, #20]
 801b9d4:	e020      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	4a21      	ldr	r2, [pc, #132]	; (801ba60 <USB_SetTurnaroundTime+0x138>)
 801b9da:	4293      	cmp	r3, r2
 801b9dc:	d306      	bcc.n	801b9ec <USB_SetTurnaroundTime+0xc4>
 801b9de:	68bb      	ldr	r3, [r7, #8]
 801b9e0:	4a20      	ldr	r2, [pc, #128]	; (801ba64 <USB_SetTurnaroundTime+0x13c>)
 801b9e2:	4293      	cmp	r3, r2
 801b9e4:	d802      	bhi.n	801b9ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b9e6:	2308      	movs	r3, #8
 801b9e8:	617b      	str	r3, [r7, #20]
 801b9ea:	e015      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b9ec:	68bb      	ldr	r3, [r7, #8]
 801b9ee:	4a1d      	ldr	r2, [pc, #116]	; (801ba64 <USB_SetTurnaroundTime+0x13c>)
 801b9f0:	4293      	cmp	r3, r2
 801b9f2:	d906      	bls.n	801ba02 <USB_SetTurnaroundTime+0xda>
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	4a1c      	ldr	r2, [pc, #112]	; (801ba68 <USB_SetTurnaroundTime+0x140>)
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	d202      	bcs.n	801ba02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b9fc:	2307      	movs	r3, #7
 801b9fe:	617b      	str	r3, [r7, #20]
 801ba00:	e00a      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801ba02:	2306      	movs	r3, #6
 801ba04:	617b      	str	r3, [r7, #20]
 801ba06:	e007      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801ba08:	79fb      	ldrb	r3, [r7, #7]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d102      	bne.n	801ba14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801ba0e:	2309      	movs	r3, #9
 801ba10:	617b      	str	r3, [r7, #20]
 801ba12:	e001      	b.n	801ba18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801ba14:	2309      	movs	r3, #9
 801ba16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	68db      	ldr	r3, [r3, #12]
 801ba1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	68da      	ldr	r2, [r3, #12]
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	029b      	lsls	r3, r3, #10
 801ba2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801ba30:	431a      	orrs	r2, r3
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801ba36:	2300      	movs	r3, #0
}
 801ba38:	4618      	mov	r0, r3
 801ba3a:	371c      	adds	r7, #28
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba42:	4770      	bx	lr
 801ba44:	00d8acbf 	.word	0x00d8acbf
 801ba48:	00e4e1c0 	.word	0x00e4e1c0
 801ba4c:	00f42400 	.word	0x00f42400
 801ba50:	01067380 	.word	0x01067380
 801ba54:	011a499f 	.word	0x011a499f
 801ba58:	01312cff 	.word	0x01312cff
 801ba5c:	014ca43f 	.word	0x014ca43f
 801ba60:	016e3600 	.word	0x016e3600
 801ba64:	01a6ab1f 	.word	0x01a6ab1f
 801ba68:	01e84800 	.word	0x01e84800

0801ba6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ba6c:	b480      	push	{r7}
 801ba6e:	b083      	sub	sp, #12
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	689b      	ldr	r3, [r3, #8]
 801ba78:	f043 0201 	orr.w	r2, r3, #1
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801ba80:	2300      	movs	r3, #0
}
 801ba82:	4618      	mov	r0, r3
 801ba84:	370c      	adds	r7, #12
 801ba86:	46bd      	mov	sp, r7
 801ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba8c:	4770      	bx	lr

0801ba8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ba8e:	b480      	push	{r7}
 801ba90:	b083      	sub	sp, #12
 801ba92:	af00      	add	r7, sp, #0
 801ba94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	689b      	ldr	r3, [r3, #8]
 801ba9a:	f023 0201 	bic.w	r2, r3, #1
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801baa2:	2300      	movs	r3, #0
}
 801baa4:	4618      	mov	r0, r3
 801baa6:	370c      	adds	r7, #12
 801baa8:	46bd      	mov	sp, r7
 801baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baae:	4770      	bx	lr

0801bab0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b084      	sub	sp, #16
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	6078      	str	r0, [r7, #4]
 801bab8:	460b      	mov	r3, r1
 801baba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801babc:	2300      	movs	r3, #0
 801babe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	68db      	ldr	r3, [r3, #12]
 801bac4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801bacc:	78fb      	ldrb	r3, [r7, #3]
 801bace:	2b01      	cmp	r3, #1
 801bad0:	d115      	bne.n	801bafe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	68db      	ldr	r3, [r3, #12]
 801bad6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801bade:	2001      	movs	r0, #1
 801bae0:	f7f9 fce0 	bl	80154a4 <HAL_Delay>
      ms++;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	3301      	adds	r3, #1
 801bae8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801baea:	6878      	ldr	r0, [r7, #4]
 801baec:	f001 f972 	bl	801cdd4 <USB_GetMode>
 801baf0:	4603      	mov	r3, r0
 801baf2:	2b01      	cmp	r3, #1
 801baf4:	d01e      	beq.n	801bb34 <USB_SetCurrentMode+0x84>
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	2b31      	cmp	r3, #49	; 0x31
 801bafa:	d9f0      	bls.n	801bade <USB_SetCurrentMode+0x2e>
 801bafc:	e01a      	b.n	801bb34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801bafe:	78fb      	ldrb	r3, [r7, #3]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d115      	bne.n	801bb30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	68db      	ldr	r3, [r3, #12]
 801bb08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801bb10:	2001      	movs	r0, #1
 801bb12:	f7f9 fcc7 	bl	80154a4 <HAL_Delay>
      ms++;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	3301      	adds	r3, #1
 801bb1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801bb1c:	6878      	ldr	r0, [r7, #4]
 801bb1e:	f001 f959 	bl	801cdd4 <USB_GetMode>
 801bb22:	4603      	mov	r3, r0
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d005      	beq.n	801bb34 <USB_SetCurrentMode+0x84>
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	2b31      	cmp	r3, #49	; 0x31
 801bb2c:	d9f0      	bls.n	801bb10 <USB_SetCurrentMode+0x60>
 801bb2e:	e001      	b.n	801bb34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801bb30:	2301      	movs	r3, #1
 801bb32:	e005      	b.n	801bb40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	2b32      	cmp	r3, #50	; 0x32
 801bb38:	d101      	bne.n	801bb3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	e000      	b.n	801bb40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801bb3e:	2300      	movs	r3, #0
}
 801bb40:	4618      	mov	r0, r3
 801bb42:	3710      	adds	r7, #16
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bd80      	pop	{r7, pc}

0801bb48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801bb48:	b084      	sub	sp, #16
 801bb4a:	b580      	push	{r7, lr}
 801bb4c:	b086      	sub	sp, #24
 801bb4e:	af00      	add	r7, sp, #0
 801bb50:	6078      	str	r0, [r7, #4]
 801bb52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801bb56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801bb62:	2300      	movs	r3, #0
 801bb64:	613b      	str	r3, [r7, #16]
 801bb66:	e009      	b.n	801bb7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801bb68:	687a      	ldr	r2, [r7, #4]
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	3340      	adds	r3, #64	; 0x40
 801bb6e:	009b      	lsls	r3, r3, #2
 801bb70:	4413      	add	r3, r2
 801bb72:	2200      	movs	r2, #0
 801bb74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801bb76:	693b      	ldr	r3, [r7, #16]
 801bb78:	3301      	adds	r3, #1
 801bb7a:	613b      	str	r3, [r7, #16]
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	2b0e      	cmp	r3, #14
 801bb80:	d9f2      	bls.n	801bb68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801bb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d11c      	bne.n	801bbc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	68fa      	ldr	r2, [r7, #12]
 801bb92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bb96:	f043 0302 	orr.w	r3, r3, #2
 801bb9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bba0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	639a      	str	r2, [r3, #56]	; 0x38
 801bbc0:	e00b      	b.n	801bbda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bbe0:	461a      	mov	r2, r3
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbec:	4619      	mov	r1, r3
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	680b      	ldr	r3, [r1, #0]
 801bbf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbfc:	2b01      	cmp	r3, #1
 801bbfe:	d10c      	bne.n	801bc1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d104      	bne.n	801bc10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801bc06:	2100      	movs	r1, #0
 801bc08:	6878      	ldr	r0, [r7, #4]
 801bc0a:	f000 f945 	bl	801be98 <USB_SetDevSpeed>
 801bc0e:	e008      	b.n	801bc22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801bc10:	2101      	movs	r1, #1
 801bc12:	6878      	ldr	r0, [r7, #4]
 801bc14:	f000 f940 	bl	801be98 <USB_SetDevSpeed>
 801bc18:	e003      	b.n	801bc22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801bc1a:	2103      	movs	r1, #3
 801bc1c:	6878      	ldr	r0, [r7, #4]
 801bc1e:	f000 f93b 	bl	801be98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801bc22:	2110      	movs	r1, #16
 801bc24:	6878      	ldr	r0, [r7, #4]
 801bc26:	f000 f8f3 	bl	801be10 <USB_FlushTxFifo>
 801bc2a:	4603      	mov	r3, r0
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d001      	beq.n	801bc34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801bc30:	2301      	movs	r3, #1
 801bc32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801bc34:	6878      	ldr	r0, [r7, #4]
 801bc36:	f000 f90f 	bl	801be58 <USB_FlushRxFifo>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d001      	beq.n	801bc44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801bc40:	2301      	movs	r3, #1
 801bc42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc4a:	461a      	mov	r2, r3
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc56:	461a      	mov	r2, r3
 801bc58:	2300      	movs	r3, #0
 801bc5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc62:	461a      	mov	r2, r3
 801bc64:	2300      	movs	r3, #0
 801bc66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801bc68:	2300      	movs	r3, #0
 801bc6a:	613b      	str	r3, [r7, #16]
 801bc6c:	e043      	b.n	801bcf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801bc6e:	693b      	ldr	r3, [r7, #16]
 801bc70:	015a      	lsls	r2, r3, #5
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	4413      	add	r3, r2
 801bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bc80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bc84:	d118      	bne.n	801bcb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 801bc86:	693b      	ldr	r3, [r7, #16]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d10a      	bne.n	801bca2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801bc8c:	693b      	ldr	r3, [r7, #16]
 801bc8e:	015a      	lsls	r2, r3, #5
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	4413      	add	r3, r2
 801bc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc98:	461a      	mov	r2, r3
 801bc9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801bc9e:	6013      	str	r3, [r2, #0]
 801bca0:	e013      	b.n	801bcca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801bca2:	693b      	ldr	r3, [r7, #16]
 801bca4:	015a      	lsls	r2, r3, #5
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	4413      	add	r3, r2
 801bcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcae:	461a      	mov	r2, r3
 801bcb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801bcb4:	6013      	str	r3, [r2, #0]
 801bcb6:	e008      	b.n	801bcca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801bcb8:	693b      	ldr	r3, [r7, #16]
 801bcba:	015a      	lsls	r2, r3, #5
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	4413      	add	r3, r2
 801bcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcc4:	461a      	mov	r2, r3
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801bcca:	693b      	ldr	r3, [r7, #16]
 801bccc:	015a      	lsls	r2, r3, #5
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	4413      	add	r3, r2
 801bcd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcd6:	461a      	mov	r2, r3
 801bcd8:	2300      	movs	r3, #0
 801bcda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801bcdc:	693b      	ldr	r3, [r7, #16]
 801bcde:	015a      	lsls	r2, r3, #5
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	4413      	add	r3, r2
 801bce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bce8:	461a      	mov	r2, r3
 801bcea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801bcee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	3301      	adds	r3, #1
 801bcf4:	613b      	str	r3, [r7, #16]
 801bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcf8:	693a      	ldr	r2, [r7, #16]
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	d3b7      	bcc.n	801bc6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801bcfe:	2300      	movs	r3, #0
 801bd00:	613b      	str	r3, [r7, #16]
 801bd02:	e043      	b.n	801bd8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801bd04:	693b      	ldr	r3, [r7, #16]
 801bd06:	015a      	lsls	r2, r3, #5
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	4413      	add	r3, r2
 801bd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bd16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bd1a:	d118      	bne.n	801bd4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801bd1c:	693b      	ldr	r3, [r7, #16]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d10a      	bne.n	801bd38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	015a      	lsls	r2, r3, #5
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	4413      	add	r3, r2
 801bd2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd2e:	461a      	mov	r2, r3
 801bd30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801bd34:	6013      	str	r3, [r2, #0]
 801bd36:	e013      	b.n	801bd60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	015a      	lsls	r2, r3, #5
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	4413      	add	r3, r2
 801bd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd44:	461a      	mov	r2, r3
 801bd46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801bd4a:	6013      	str	r3, [r2, #0]
 801bd4c:	e008      	b.n	801bd60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801bd4e:	693b      	ldr	r3, [r7, #16]
 801bd50:	015a      	lsls	r2, r3, #5
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	4413      	add	r3, r2
 801bd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd5a:	461a      	mov	r2, r3
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801bd60:	693b      	ldr	r3, [r7, #16]
 801bd62:	015a      	lsls	r2, r3, #5
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	4413      	add	r3, r2
 801bd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd6c:	461a      	mov	r2, r3
 801bd6e:	2300      	movs	r3, #0
 801bd70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	015a      	lsls	r2, r3, #5
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	4413      	add	r3, r2
 801bd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd7e:	461a      	mov	r2, r3
 801bd80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801bd84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801bd86:	693b      	ldr	r3, [r7, #16]
 801bd88:	3301      	adds	r3, #1
 801bd8a:	613b      	str	r3, [r7, #16]
 801bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd8e:	693a      	ldr	r2, [r7, #16]
 801bd90:	429a      	cmp	r2, r3
 801bd92:	d3b7      	bcc.n	801bd04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd9a:	691b      	ldr	r3, [r3, #16]
 801bd9c:	68fa      	ldr	r2, [r7, #12]
 801bd9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bda2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bda6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	2200      	movs	r2, #0
 801bdac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801bdb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d105      	bne.n	801bdc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	699b      	ldr	r3, [r3, #24]
 801bdc0:	f043 0210 	orr.w	r2, r3, #16
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	699a      	ldr	r2, [r3, #24]
 801bdcc:	4b0f      	ldr	r3, [pc, #60]	; (801be0c <USB_DevInit+0x2c4>)
 801bdce:	4313      	orrs	r3, r2
 801bdd0:	687a      	ldr	r2, [r7, #4]
 801bdd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d005      	beq.n	801bde6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	699b      	ldr	r3, [r3, #24]
 801bdde:	f043 0208 	orr.w	r2, r3, #8
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801bde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bde8:	2b01      	cmp	r3, #1
 801bdea:	d107      	bne.n	801bdfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	699b      	ldr	r3, [r3, #24]
 801bdf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801bdf4:	f043 0304 	orr.w	r3, r3, #4
 801bdf8:	687a      	ldr	r2, [r7, #4]
 801bdfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801bdfc:	7dfb      	ldrb	r3, [r7, #23]
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	3718      	adds	r7, #24
 801be02:	46bd      	mov	sp, r7
 801be04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801be08:	b004      	add	sp, #16
 801be0a:	4770      	bx	lr
 801be0c:	803c3800 	.word	0x803c3800

0801be10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801be10:	b480      	push	{r7}
 801be12:	b085      	sub	sp, #20
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
 801be18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801be1a:	2300      	movs	r3, #0
 801be1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801be1e:	683b      	ldr	r3, [r7, #0]
 801be20:	019b      	lsls	r3, r3, #6
 801be22:	f043 0220 	orr.w	r2, r3, #32
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	3301      	adds	r3, #1
 801be2e:	60fb      	str	r3, [r7, #12]
 801be30:	4a08      	ldr	r2, [pc, #32]	; (801be54 <USB_FlushTxFifo+0x44>)
 801be32:	4293      	cmp	r3, r2
 801be34:	d901      	bls.n	801be3a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801be36:	2303      	movs	r3, #3
 801be38:	e006      	b.n	801be48 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	691b      	ldr	r3, [r3, #16]
 801be3e:	f003 0320 	and.w	r3, r3, #32
 801be42:	2b20      	cmp	r3, #32
 801be44:	d0f1      	beq.n	801be2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801be46:	2300      	movs	r3, #0
}
 801be48:	4618      	mov	r0, r3
 801be4a:	3714      	adds	r7, #20
 801be4c:	46bd      	mov	sp, r7
 801be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be52:	4770      	bx	lr
 801be54:	00030d40 	.word	0x00030d40

0801be58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801be58:	b480      	push	{r7}
 801be5a:	b085      	sub	sp, #20
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801be60:	2300      	movs	r3, #0
 801be62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	2210      	movs	r2, #16
 801be68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	3301      	adds	r3, #1
 801be6e:	60fb      	str	r3, [r7, #12]
 801be70:	4a08      	ldr	r2, [pc, #32]	; (801be94 <USB_FlushRxFifo+0x3c>)
 801be72:	4293      	cmp	r3, r2
 801be74:	d901      	bls.n	801be7a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801be76:	2303      	movs	r3, #3
 801be78:	e006      	b.n	801be88 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	691b      	ldr	r3, [r3, #16]
 801be7e:	f003 0310 	and.w	r3, r3, #16
 801be82:	2b10      	cmp	r3, #16
 801be84:	d0f1      	beq.n	801be6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801be86:	2300      	movs	r3, #0
}
 801be88:	4618      	mov	r0, r3
 801be8a:	3714      	adds	r7, #20
 801be8c:	46bd      	mov	sp, r7
 801be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be92:	4770      	bx	lr
 801be94:	00030d40 	.word	0x00030d40

0801be98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801be98:	b480      	push	{r7}
 801be9a:	b085      	sub	sp, #20
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
 801bea0:	460b      	mov	r3, r1
 801bea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801beae:	681a      	ldr	r2, [r3, #0]
 801beb0:	78fb      	ldrb	r3, [r7, #3]
 801beb2:	68f9      	ldr	r1, [r7, #12]
 801beb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801beb8:	4313      	orrs	r3, r2
 801beba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801bebc:	2300      	movs	r3, #0
}
 801bebe:	4618      	mov	r0, r3
 801bec0:	3714      	adds	r7, #20
 801bec2:	46bd      	mov	sp, r7
 801bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec8:	4770      	bx	lr

0801beca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801beca:	b480      	push	{r7}
 801becc:	b087      	sub	sp, #28
 801bece:	af00      	add	r7, sp, #0
 801bed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bedc:	689b      	ldr	r3, [r3, #8]
 801bede:	f003 0306 	and.w	r3, r3, #6
 801bee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d102      	bne.n	801bef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801beea:	2300      	movs	r3, #0
 801beec:	75fb      	strb	r3, [r7, #23]
 801beee:	e00a      	b.n	801bf06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	2b02      	cmp	r3, #2
 801bef4:	d002      	beq.n	801befc <USB_GetDevSpeed+0x32>
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	2b06      	cmp	r3, #6
 801befa:	d102      	bne.n	801bf02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801befc:	2302      	movs	r3, #2
 801befe:	75fb      	strb	r3, [r7, #23]
 801bf00:	e001      	b.n	801bf06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801bf02:	230f      	movs	r3, #15
 801bf04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801bf06:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	371c      	adds	r7, #28
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf12:	4770      	bx	lr

0801bf14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bf14:	b480      	push	{r7}
 801bf16:	b085      	sub	sp, #20
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
 801bf1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	781b      	ldrb	r3, [r3, #0]
 801bf26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bf28:	683b      	ldr	r3, [r7, #0]
 801bf2a:	785b      	ldrb	r3, [r3, #1]
 801bf2c:	2b01      	cmp	r3, #1
 801bf2e:	d13a      	bne.n	801bfa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bf36:	69da      	ldr	r2, [r3, #28]
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	781b      	ldrb	r3, [r3, #0]
 801bf3c:	f003 030f 	and.w	r3, r3, #15
 801bf40:	2101      	movs	r1, #1
 801bf42:	fa01 f303 	lsl.w	r3, r1, r3
 801bf46:	b29b      	uxth	r3, r3
 801bf48:	68f9      	ldr	r1, [r7, #12]
 801bf4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bf4e:	4313      	orrs	r3, r2
 801bf50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801bf52:	68bb      	ldr	r3, [r7, #8]
 801bf54:	015a      	lsls	r2, r3, #5
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	4413      	add	r3, r2
 801bf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d155      	bne.n	801c014 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	015a      	lsls	r2, r3, #5
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	4413      	add	r3, r2
 801bf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf74:	681a      	ldr	r2, [r3, #0]
 801bf76:	683b      	ldr	r3, [r7, #0]
 801bf78:	689b      	ldr	r3, [r3, #8]
 801bf7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801bf7e:	683b      	ldr	r3, [r7, #0]
 801bf80:	78db      	ldrb	r3, [r3, #3]
 801bf82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801bf84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801bf86:	68bb      	ldr	r3, [r7, #8]
 801bf88:	059b      	lsls	r3, r3, #22
 801bf8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801bf8c:	4313      	orrs	r3, r2
 801bf8e:	68ba      	ldr	r2, [r7, #8]
 801bf90:	0151      	lsls	r1, r2, #5
 801bf92:	68fa      	ldr	r2, [r7, #12]
 801bf94:	440a      	add	r2, r1
 801bf96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bf9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bf9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801bfa2:	6013      	str	r3, [r2, #0]
 801bfa4:	e036      	b.n	801c014 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bfac:	69da      	ldr	r2, [r3, #28]
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	781b      	ldrb	r3, [r3, #0]
 801bfb2:	f003 030f 	and.w	r3, r3, #15
 801bfb6:	2101      	movs	r1, #1
 801bfb8:	fa01 f303 	lsl.w	r3, r1, r3
 801bfbc:	041b      	lsls	r3, r3, #16
 801bfbe:	68f9      	ldr	r1, [r7, #12]
 801bfc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bfc4:	4313      	orrs	r3, r2
 801bfc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801bfc8:	68bb      	ldr	r3, [r7, #8]
 801bfca:	015a      	lsls	r2, r3, #5
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	4413      	add	r3, r2
 801bfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d11a      	bne.n	801c014 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	015a      	lsls	r2, r3, #5
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	4413      	add	r3, r2
 801bfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfea:	681a      	ldr	r2, [r3, #0]
 801bfec:	683b      	ldr	r3, [r7, #0]
 801bfee:	689b      	ldr	r3, [r3, #8]
 801bff0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801bff4:	683b      	ldr	r3, [r7, #0]
 801bff6:	78db      	ldrb	r3, [r3, #3]
 801bff8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801bffa:	430b      	orrs	r3, r1
 801bffc:	4313      	orrs	r3, r2
 801bffe:	68ba      	ldr	r2, [r7, #8]
 801c000:	0151      	lsls	r1, r2, #5
 801c002:	68fa      	ldr	r2, [r7, #12]
 801c004:	440a      	add	r2, r1
 801c006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c00a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c012:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801c014:	2300      	movs	r3, #0
}
 801c016:	4618      	mov	r0, r3
 801c018:	3714      	adds	r7, #20
 801c01a:	46bd      	mov	sp, r7
 801c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c020:	4770      	bx	lr
	...

0801c024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801c024:	b480      	push	{r7}
 801c026:	b085      	sub	sp, #20
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
 801c02c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	781b      	ldrb	r3, [r3, #0]
 801c036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801c038:	683b      	ldr	r3, [r7, #0]
 801c03a:	785b      	ldrb	r3, [r3, #1]
 801c03c:	2b01      	cmp	r3, #1
 801c03e:	d161      	bne.n	801c104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	015a      	lsls	r2, r3, #5
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	4413      	add	r3, r2
 801c048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c056:	d11f      	bne.n	801c098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	015a      	lsls	r2, r3, #5
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	4413      	add	r3, r2
 801c060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	68ba      	ldr	r2, [r7, #8]
 801c068:	0151      	lsls	r1, r2, #5
 801c06a:	68fa      	ldr	r2, [r7, #12]
 801c06c:	440a      	add	r2, r1
 801c06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801c078:	68bb      	ldr	r3, [r7, #8]
 801c07a:	015a      	lsls	r2, r3, #5
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	4413      	add	r3, r2
 801c080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	68ba      	ldr	r2, [r7, #8]
 801c088:	0151      	lsls	r1, r2, #5
 801c08a:	68fa      	ldr	r2, [r7, #12]
 801c08c:	440a      	add	r2, r1
 801c08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801c096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	f003 030f 	and.w	r3, r3, #15
 801c0a8:	2101      	movs	r1, #1
 801c0aa:	fa01 f303 	lsl.w	r3, r1, r3
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	43db      	mvns	r3, r3
 801c0b2:	68f9      	ldr	r1, [r7, #12]
 801c0b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c0c2:	69da      	ldr	r2, [r3, #28]
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	781b      	ldrb	r3, [r3, #0]
 801c0c8:	f003 030f 	and.w	r3, r3, #15
 801c0cc:	2101      	movs	r1, #1
 801c0ce:	fa01 f303 	lsl.w	r3, r1, r3
 801c0d2:	b29b      	uxth	r3, r3
 801c0d4:	43db      	mvns	r3, r3
 801c0d6:	68f9      	ldr	r1, [r7, #12]
 801c0d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c0dc:	4013      	ands	r3, r2
 801c0de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	015a      	lsls	r2, r3, #5
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	4413      	add	r3, r2
 801c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0ec:	681a      	ldr	r2, [r3, #0]
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	0159      	lsls	r1, r3, #5
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	440b      	add	r3, r1
 801c0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0fa:	4619      	mov	r1, r3
 801c0fc:	4b35      	ldr	r3, [pc, #212]	; (801c1d4 <USB_DeactivateEndpoint+0x1b0>)
 801c0fe:	4013      	ands	r3, r2
 801c100:	600b      	str	r3, [r1, #0]
 801c102:	e060      	b.n	801c1c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c104:	68bb      	ldr	r3, [r7, #8]
 801c106:	015a      	lsls	r2, r3, #5
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	4413      	add	r3, r2
 801c10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c11a:	d11f      	bne.n	801c15c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	015a      	lsls	r2, r3, #5
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	4413      	add	r3, r2
 801c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	68ba      	ldr	r2, [r7, #8]
 801c12c:	0151      	lsls	r1, r2, #5
 801c12e:	68fa      	ldr	r2, [r7, #12]
 801c130:	440a      	add	r2, r1
 801c132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c13a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801c13c:	68bb      	ldr	r3, [r7, #8]
 801c13e:	015a      	lsls	r2, r3, #5
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	4413      	add	r3, r2
 801c144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	68ba      	ldr	r2, [r7, #8]
 801c14c:	0151      	lsls	r1, r2, #5
 801c14e:	68fa      	ldr	r2, [r7, #12]
 801c150:	440a      	add	r2, r1
 801c152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801c15a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c164:	683b      	ldr	r3, [r7, #0]
 801c166:	781b      	ldrb	r3, [r3, #0]
 801c168:	f003 030f 	and.w	r3, r3, #15
 801c16c:	2101      	movs	r1, #1
 801c16e:	fa01 f303 	lsl.w	r3, r1, r3
 801c172:	041b      	lsls	r3, r3, #16
 801c174:	43db      	mvns	r3, r3
 801c176:	68f9      	ldr	r1, [r7, #12]
 801c178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c17c:	4013      	ands	r3, r2
 801c17e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c186:	69da      	ldr	r2, [r3, #28]
 801c188:	683b      	ldr	r3, [r7, #0]
 801c18a:	781b      	ldrb	r3, [r3, #0]
 801c18c:	f003 030f 	and.w	r3, r3, #15
 801c190:	2101      	movs	r1, #1
 801c192:	fa01 f303 	lsl.w	r3, r1, r3
 801c196:	041b      	lsls	r3, r3, #16
 801c198:	43db      	mvns	r3, r3
 801c19a:	68f9      	ldr	r1, [r7, #12]
 801c19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c1a0:	4013      	ands	r3, r2
 801c1a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801c1a4:	68bb      	ldr	r3, [r7, #8]
 801c1a6:	015a      	lsls	r2, r3, #5
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	4413      	add	r3, r2
 801c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c1b0:	681a      	ldr	r2, [r3, #0]
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	0159      	lsls	r1, r3, #5
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	440b      	add	r3, r1
 801c1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c1be:	4619      	mov	r1, r3
 801c1c0:	4b05      	ldr	r3, [pc, #20]	; (801c1d8 <USB_DeactivateEndpoint+0x1b4>)
 801c1c2:	4013      	ands	r3, r2
 801c1c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801c1c6:	2300      	movs	r3, #0
}
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	3714      	adds	r7, #20
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d2:	4770      	bx	lr
 801c1d4:	ec337800 	.word	0xec337800
 801c1d8:	eff37800 	.word	0xeff37800

0801c1dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b08a      	sub	sp, #40	; 0x28
 801c1e0:	af02      	add	r7, sp, #8
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	4613      	mov	r3, r2
 801c1e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801c1ee:	68bb      	ldr	r3, [r7, #8]
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	785b      	ldrb	r3, [r3, #1]
 801c1f8:	2b01      	cmp	r3, #1
 801c1fa:	f040 815c 	bne.w	801c4b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	695b      	ldr	r3, [r3, #20]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d132      	bne.n	801c26c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801c206:	69bb      	ldr	r3, [r7, #24]
 801c208:	015a      	lsls	r2, r3, #5
 801c20a:	69fb      	ldr	r3, [r7, #28]
 801c20c:	4413      	add	r3, r2
 801c20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c212:	691b      	ldr	r3, [r3, #16]
 801c214:	69ba      	ldr	r2, [r7, #24]
 801c216:	0151      	lsls	r1, r2, #5
 801c218:	69fa      	ldr	r2, [r7, #28]
 801c21a:	440a      	add	r2, r1
 801c21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801c22a:	69bb      	ldr	r3, [r7, #24]
 801c22c:	015a      	lsls	r2, r3, #5
 801c22e:	69fb      	ldr	r3, [r7, #28]
 801c230:	4413      	add	r3, r2
 801c232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c236:	691b      	ldr	r3, [r3, #16]
 801c238:	69ba      	ldr	r2, [r7, #24]
 801c23a:	0151      	lsls	r1, r2, #5
 801c23c:	69fa      	ldr	r2, [r7, #28]
 801c23e:	440a      	add	r2, r1
 801c240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801c24a:	69bb      	ldr	r3, [r7, #24]
 801c24c:	015a      	lsls	r2, r3, #5
 801c24e:	69fb      	ldr	r3, [r7, #28]
 801c250:	4413      	add	r3, r2
 801c252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c256:	691b      	ldr	r3, [r3, #16]
 801c258:	69ba      	ldr	r2, [r7, #24]
 801c25a:	0151      	lsls	r1, r2, #5
 801c25c:	69fa      	ldr	r2, [r7, #28]
 801c25e:	440a      	add	r2, r1
 801c260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c264:	0cdb      	lsrs	r3, r3, #19
 801c266:	04db      	lsls	r3, r3, #19
 801c268:	6113      	str	r3, [r2, #16]
 801c26a:	e074      	b.n	801c356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801c26c:	69bb      	ldr	r3, [r7, #24]
 801c26e:	015a      	lsls	r2, r3, #5
 801c270:	69fb      	ldr	r3, [r7, #28]
 801c272:	4413      	add	r3, r2
 801c274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c278:	691b      	ldr	r3, [r3, #16]
 801c27a:	69ba      	ldr	r2, [r7, #24]
 801c27c:	0151      	lsls	r1, r2, #5
 801c27e:	69fa      	ldr	r2, [r7, #28]
 801c280:	440a      	add	r2, r1
 801c282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c286:	0cdb      	lsrs	r3, r3, #19
 801c288:	04db      	lsls	r3, r3, #19
 801c28a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801c28c:	69bb      	ldr	r3, [r7, #24]
 801c28e:	015a      	lsls	r2, r3, #5
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	4413      	add	r3, r2
 801c294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c298:	691b      	ldr	r3, [r3, #16]
 801c29a:	69ba      	ldr	r2, [r7, #24]
 801c29c:	0151      	lsls	r1, r2, #5
 801c29e:	69fa      	ldr	r2, [r7, #28]
 801c2a0:	440a      	add	r2, r1
 801c2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c2a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c2aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801c2b0:	69bb      	ldr	r3, [r7, #24]
 801c2b2:	015a      	lsls	r2, r3, #5
 801c2b4:	69fb      	ldr	r3, [r7, #28]
 801c2b6:	4413      	add	r3, r2
 801c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c2bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801c2be:	68bb      	ldr	r3, [r7, #8]
 801c2c0:	6959      	ldr	r1, [r3, #20]
 801c2c2:	68bb      	ldr	r3, [r7, #8]
 801c2c4:	689b      	ldr	r3, [r3, #8]
 801c2c6:	440b      	add	r3, r1
 801c2c8:	1e59      	subs	r1, r3, #1
 801c2ca:	68bb      	ldr	r3, [r7, #8]
 801c2cc:	689b      	ldr	r3, [r3, #8]
 801c2ce:	fbb1 f3f3 	udiv	r3, r1, r3
 801c2d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801c2d4:	4b9d      	ldr	r3, [pc, #628]	; (801c54c <USB_EPStartXfer+0x370>)
 801c2d6:	400b      	ands	r3, r1
 801c2d8:	69b9      	ldr	r1, [r7, #24]
 801c2da:	0148      	lsls	r0, r1, #5
 801c2dc:	69f9      	ldr	r1, [r7, #28]
 801c2de:	4401      	add	r1, r0
 801c2e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801c2e4:	4313      	orrs	r3, r2
 801c2e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801c2e8:	69bb      	ldr	r3, [r7, #24]
 801c2ea:	015a      	lsls	r2, r3, #5
 801c2ec:	69fb      	ldr	r3, [r7, #28]
 801c2ee:	4413      	add	r3, r2
 801c2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c2f4:	691a      	ldr	r2, [r3, #16]
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	695b      	ldr	r3, [r3, #20]
 801c2fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c2fe:	69b9      	ldr	r1, [r7, #24]
 801c300:	0148      	lsls	r0, r1, #5
 801c302:	69f9      	ldr	r1, [r7, #28]
 801c304:	4401      	add	r1, r0
 801c306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801c30a:	4313      	orrs	r3, r2
 801c30c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801c30e:	68bb      	ldr	r3, [r7, #8]
 801c310:	78db      	ldrb	r3, [r3, #3]
 801c312:	2b01      	cmp	r3, #1
 801c314:	d11f      	bne.n	801c356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801c316:	69bb      	ldr	r3, [r7, #24]
 801c318:	015a      	lsls	r2, r3, #5
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	4413      	add	r3, r2
 801c31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c322:	691b      	ldr	r3, [r3, #16]
 801c324:	69ba      	ldr	r2, [r7, #24]
 801c326:	0151      	lsls	r1, r2, #5
 801c328:	69fa      	ldr	r2, [r7, #28]
 801c32a:	440a      	add	r2, r1
 801c32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801c334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801c336:	69bb      	ldr	r3, [r7, #24]
 801c338:	015a      	lsls	r2, r3, #5
 801c33a:	69fb      	ldr	r3, [r7, #28]
 801c33c:	4413      	add	r3, r2
 801c33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c342:	691b      	ldr	r3, [r3, #16]
 801c344:	69ba      	ldr	r2, [r7, #24]
 801c346:	0151      	lsls	r1, r2, #5
 801c348:	69fa      	ldr	r2, [r7, #28]
 801c34a:	440a      	add	r2, r1
 801c34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801c354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801c356:	79fb      	ldrb	r3, [r7, #7]
 801c358:	2b01      	cmp	r3, #1
 801c35a:	d14b      	bne.n	801c3f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	691b      	ldr	r3, [r3, #16]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d009      	beq.n	801c378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801c364:	69bb      	ldr	r3, [r7, #24]
 801c366:	015a      	lsls	r2, r3, #5
 801c368:	69fb      	ldr	r3, [r7, #28]
 801c36a:	4413      	add	r3, r2
 801c36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c370:	461a      	mov	r2, r3
 801c372:	68bb      	ldr	r3, [r7, #8]
 801c374:	691b      	ldr	r3, [r3, #16]
 801c376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801c378:	68bb      	ldr	r3, [r7, #8]
 801c37a:	78db      	ldrb	r3, [r3, #3]
 801c37c:	2b01      	cmp	r3, #1
 801c37e:	d128      	bne.n	801c3d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801c380:	69fb      	ldr	r3, [r7, #28]
 801c382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c386:	689b      	ldr	r3, [r3, #8]
 801c388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d110      	bne.n	801c3b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	015a      	lsls	r2, r3, #5
 801c394:	69fb      	ldr	r3, [r7, #28]
 801c396:	4413      	add	r3, r2
 801c398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	69ba      	ldr	r2, [r7, #24]
 801c3a0:	0151      	lsls	r1, r2, #5
 801c3a2:	69fa      	ldr	r2, [r7, #28]
 801c3a4:	440a      	add	r2, r1
 801c3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c3aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801c3ae:	6013      	str	r3, [r2, #0]
 801c3b0:	e00f      	b.n	801c3d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801c3b2:	69bb      	ldr	r3, [r7, #24]
 801c3b4:	015a      	lsls	r2, r3, #5
 801c3b6:	69fb      	ldr	r3, [r7, #28]
 801c3b8:	4413      	add	r3, r2
 801c3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	69ba      	ldr	r2, [r7, #24]
 801c3c2:	0151      	lsls	r1, r2, #5
 801c3c4:	69fa      	ldr	r2, [r7, #28]
 801c3c6:	440a      	add	r2, r1
 801c3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c3cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c3d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801c3d2:	69bb      	ldr	r3, [r7, #24]
 801c3d4:	015a      	lsls	r2, r3, #5
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	4413      	add	r3, r2
 801c3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	69ba      	ldr	r2, [r7, #24]
 801c3e2:	0151      	lsls	r1, r2, #5
 801c3e4:	69fa      	ldr	r2, [r7, #28]
 801c3e6:	440a      	add	r2, r1
 801c3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c3ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c3f0:	6013      	str	r3, [r2, #0]
 801c3f2:	e12f      	b.n	801c654 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	015a      	lsls	r2, r3, #5
 801c3f8:	69fb      	ldr	r3, [r7, #28]
 801c3fa:	4413      	add	r3, r2
 801c3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	69ba      	ldr	r2, [r7, #24]
 801c404:	0151      	lsls	r1, r2, #5
 801c406:	69fa      	ldr	r2, [r7, #28]
 801c408:	440a      	add	r2, r1
 801c40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	78db      	ldrb	r3, [r3, #3]
 801c418:	2b01      	cmp	r3, #1
 801c41a:	d015      	beq.n	801c448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801c41c:	68bb      	ldr	r3, [r7, #8]
 801c41e:	695b      	ldr	r3, [r3, #20]
 801c420:	2b00      	cmp	r3, #0
 801c422:	f000 8117 	beq.w	801c654 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801c426:	69fb      	ldr	r3, [r7, #28]
 801c428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c42c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c42e:	68bb      	ldr	r3, [r7, #8]
 801c430:	781b      	ldrb	r3, [r3, #0]
 801c432:	f003 030f 	and.w	r3, r3, #15
 801c436:	2101      	movs	r1, #1
 801c438:	fa01 f303 	lsl.w	r3, r1, r3
 801c43c:	69f9      	ldr	r1, [r7, #28]
 801c43e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c442:	4313      	orrs	r3, r2
 801c444:	634b      	str	r3, [r1, #52]	; 0x34
 801c446:	e105      	b.n	801c654 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801c448:	69fb      	ldr	r3, [r7, #28]
 801c44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c44e:	689b      	ldr	r3, [r3, #8]
 801c450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c454:	2b00      	cmp	r3, #0
 801c456:	d110      	bne.n	801c47a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	015a      	lsls	r2, r3, #5
 801c45c:	69fb      	ldr	r3, [r7, #28]
 801c45e:	4413      	add	r3, r2
 801c460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	69ba      	ldr	r2, [r7, #24]
 801c468:	0151      	lsls	r1, r2, #5
 801c46a:	69fa      	ldr	r2, [r7, #28]
 801c46c:	440a      	add	r2, r1
 801c46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801c476:	6013      	str	r3, [r2, #0]
 801c478:	e00f      	b.n	801c49a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801c47a:	69bb      	ldr	r3, [r7, #24]
 801c47c:	015a      	lsls	r2, r3, #5
 801c47e:	69fb      	ldr	r3, [r7, #28]
 801c480:	4413      	add	r3, r2
 801c482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	69ba      	ldr	r2, [r7, #24]
 801c48a:	0151      	lsls	r1, r2, #5
 801c48c:	69fa      	ldr	r2, [r7, #28]
 801c48e:	440a      	add	r2, r1
 801c490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	68d9      	ldr	r1, [r3, #12]
 801c49e:	68bb      	ldr	r3, [r7, #8]
 801c4a0:	781a      	ldrb	r2, [r3, #0]
 801c4a2:	68bb      	ldr	r3, [r7, #8]
 801c4a4:	695b      	ldr	r3, [r3, #20]
 801c4a6:	b298      	uxth	r0, r3
 801c4a8:	79fb      	ldrb	r3, [r7, #7]
 801c4aa:	9300      	str	r3, [sp, #0]
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	68f8      	ldr	r0, [r7, #12]
 801c4b0:	f000 fa2b 	bl	801c90a <USB_WritePacket>
 801c4b4:	e0ce      	b.n	801c654 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801c4b6:	69bb      	ldr	r3, [r7, #24]
 801c4b8:	015a      	lsls	r2, r3, #5
 801c4ba:	69fb      	ldr	r3, [r7, #28]
 801c4bc:	4413      	add	r3, r2
 801c4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4c2:	691b      	ldr	r3, [r3, #16]
 801c4c4:	69ba      	ldr	r2, [r7, #24]
 801c4c6:	0151      	lsls	r1, r2, #5
 801c4c8:	69fa      	ldr	r2, [r7, #28]
 801c4ca:	440a      	add	r2, r1
 801c4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c4d0:	0cdb      	lsrs	r3, r3, #19
 801c4d2:	04db      	lsls	r3, r3, #19
 801c4d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801c4d6:	69bb      	ldr	r3, [r7, #24]
 801c4d8:	015a      	lsls	r2, r3, #5
 801c4da:	69fb      	ldr	r3, [r7, #28]
 801c4dc:	4413      	add	r3, r2
 801c4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4e2:	691b      	ldr	r3, [r3, #16]
 801c4e4:	69ba      	ldr	r2, [r7, #24]
 801c4e6:	0151      	lsls	r1, r2, #5
 801c4e8:	69fa      	ldr	r2, [r7, #28]
 801c4ea:	440a      	add	r2, r1
 801c4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c4f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c4f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c4f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	695b      	ldr	r3, [r3, #20]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d126      	bne.n	801c550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801c502:	69bb      	ldr	r3, [r7, #24]
 801c504:	015a      	lsls	r2, r3, #5
 801c506:	69fb      	ldr	r3, [r7, #28]
 801c508:	4413      	add	r3, r2
 801c50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c50e:	691a      	ldr	r2, [r3, #16]
 801c510:	68bb      	ldr	r3, [r7, #8]
 801c512:	689b      	ldr	r3, [r3, #8]
 801c514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c518:	69b9      	ldr	r1, [r7, #24]
 801c51a:	0148      	lsls	r0, r1, #5
 801c51c:	69f9      	ldr	r1, [r7, #28]
 801c51e:	4401      	add	r1, r0
 801c520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801c524:	4313      	orrs	r3, r2
 801c526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c528:	69bb      	ldr	r3, [r7, #24]
 801c52a:	015a      	lsls	r2, r3, #5
 801c52c:	69fb      	ldr	r3, [r7, #28]
 801c52e:	4413      	add	r3, r2
 801c530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c534:	691b      	ldr	r3, [r3, #16]
 801c536:	69ba      	ldr	r2, [r7, #24]
 801c538:	0151      	lsls	r1, r2, #5
 801c53a:	69fa      	ldr	r2, [r7, #28]
 801c53c:	440a      	add	r2, r1
 801c53e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c546:	6113      	str	r3, [r2, #16]
 801c548:	e036      	b.n	801c5b8 <USB_EPStartXfer+0x3dc>
 801c54a:	bf00      	nop
 801c54c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801c550:	68bb      	ldr	r3, [r7, #8]
 801c552:	695a      	ldr	r2, [r3, #20]
 801c554:	68bb      	ldr	r3, [r7, #8]
 801c556:	689b      	ldr	r3, [r3, #8]
 801c558:	4413      	add	r3, r2
 801c55a:	1e5a      	subs	r2, r3, #1
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	689b      	ldr	r3, [r3, #8]
 801c560:	fbb2 f3f3 	udiv	r3, r2, r3
 801c564:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801c566:	69bb      	ldr	r3, [r7, #24]
 801c568:	015a      	lsls	r2, r3, #5
 801c56a:	69fb      	ldr	r3, [r7, #28]
 801c56c:	4413      	add	r3, r2
 801c56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c572:	691a      	ldr	r2, [r3, #16]
 801c574:	8afb      	ldrh	r3, [r7, #22]
 801c576:	04d9      	lsls	r1, r3, #19
 801c578:	4b39      	ldr	r3, [pc, #228]	; (801c660 <USB_EPStartXfer+0x484>)
 801c57a:	400b      	ands	r3, r1
 801c57c:	69b9      	ldr	r1, [r7, #24]
 801c57e:	0148      	lsls	r0, r1, #5
 801c580:	69f9      	ldr	r1, [r7, #28]
 801c582:	4401      	add	r1, r0
 801c584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801c588:	4313      	orrs	r3, r2
 801c58a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801c58c:	69bb      	ldr	r3, [r7, #24]
 801c58e:	015a      	lsls	r2, r3, #5
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	4413      	add	r3, r2
 801c594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c598:	691a      	ldr	r2, [r3, #16]
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	689b      	ldr	r3, [r3, #8]
 801c59e:	8af9      	ldrh	r1, [r7, #22]
 801c5a0:	fb01 f303 	mul.w	r3, r1, r3
 801c5a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c5a8:	69b9      	ldr	r1, [r7, #24]
 801c5aa:	0148      	lsls	r0, r1, #5
 801c5ac:	69f9      	ldr	r1, [r7, #28]
 801c5ae:	4401      	add	r1, r0
 801c5b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801c5b4:	4313      	orrs	r3, r2
 801c5b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801c5b8:	79fb      	ldrb	r3, [r7, #7]
 801c5ba:	2b01      	cmp	r3, #1
 801c5bc:	d10d      	bne.n	801c5da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801c5be:	68bb      	ldr	r3, [r7, #8]
 801c5c0:	68db      	ldr	r3, [r3, #12]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d009      	beq.n	801c5da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801c5c6:	68bb      	ldr	r3, [r7, #8]
 801c5c8:	68d9      	ldr	r1, [r3, #12]
 801c5ca:	69bb      	ldr	r3, [r7, #24]
 801c5cc:	015a      	lsls	r2, r3, #5
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c5d6:	460a      	mov	r2, r1
 801c5d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	78db      	ldrb	r3, [r3, #3]
 801c5de:	2b01      	cmp	r3, #1
 801c5e0:	d128      	bne.n	801c634 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801c5e2:	69fb      	ldr	r3, [r7, #28]
 801c5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c5e8:	689b      	ldr	r3, [r3, #8]
 801c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d110      	bne.n	801c614 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801c5f2:	69bb      	ldr	r3, [r7, #24]
 801c5f4:	015a      	lsls	r2, r3, #5
 801c5f6:	69fb      	ldr	r3, [r7, #28]
 801c5f8:	4413      	add	r3, r2
 801c5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	69ba      	ldr	r2, [r7, #24]
 801c602:	0151      	lsls	r1, r2, #5
 801c604:	69fa      	ldr	r2, [r7, #28]
 801c606:	440a      	add	r2, r1
 801c608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c60c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801c610:	6013      	str	r3, [r2, #0]
 801c612:	e00f      	b.n	801c634 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801c614:	69bb      	ldr	r3, [r7, #24]
 801c616:	015a      	lsls	r2, r3, #5
 801c618:	69fb      	ldr	r3, [r7, #28]
 801c61a:	4413      	add	r3, r2
 801c61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	69ba      	ldr	r2, [r7, #24]
 801c624:	0151      	lsls	r1, r2, #5
 801c626:	69fa      	ldr	r2, [r7, #28]
 801c628:	440a      	add	r2, r1
 801c62a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c62e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801c634:	69bb      	ldr	r3, [r7, #24]
 801c636:	015a      	lsls	r2, r3, #5
 801c638:	69fb      	ldr	r3, [r7, #28]
 801c63a:	4413      	add	r3, r2
 801c63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	69ba      	ldr	r2, [r7, #24]
 801c644:	0151      	lsls	r1, r2, #5
 801c646:	69fa      	ldr	r2, [r7, #28]
 801c648:	440a      	add	r2, r1
 801c64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c64e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c654:	2300      	movs	r3, #0
}
 801c656:	4618      	mov	r0, r3
 801c658:	3720      	adds	r7, #32
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	bf00      	nop
 801c660:	1ff80000 	.word	0x1ff80000

0801c664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801c664:	b480      	push	{r7}
 801c666:	b087      	sub	sp, #28
 801c668:	af00      	add	r7, sp, #0
 801c66a:	60f8      	str	r0, [r7, #12]
 801c66c:	60b9      	str	r1, [r7, #8]
 801c66e:	4613      	mov	r3, r2
 801c670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801c676:	68bb      	ldr	r3, [r7, #8]
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c67c:	68bb      	ldr	r3, [r7, #8]
 801c67e:	785b      	ldrb	r3, [r3, #1]
 801c680:	2b01      	cmp	r3, #1
 801c682:	f040 80cd 	bne.w	801c820 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801c686:	68bb      	ldr	r3, [r7, #8]
 801c688:	695b      	ldr	r3, [r3, #20]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d132      	bne.n	801c6f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	015a      	lsls	r2, r3, #5
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	4413      	add	r3, r2
 801c696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c69a:	691b      	ldr	r3, [r3, #16]
 801c69c:	693a      	ldr	r2, [r7, #16]
 801c69e:	0151      	lsls	r1, r2, #5
 801c6a0:	697a      	ldr	r2, [r7, #20]
 801c6a2:	440a      	add	r2, r1
 801c6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c6a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c6ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c6b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801c6b2:	693b      	ldr	r3, [r7, #16]
 801c6b4:	015a      	lsls	r2, r3, #5
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	4413      	add	r3, r2
 801c6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c6be:	691b      	ldr	r3, [r3, #16]
 801c6c0:	693a      	ldr	r2, [r7, #16]
 801c6c2:	0151      	lsls	r1, r2, #5
 801c6c4:	697a      	ldr	r2, [r7, #20]
 801c6c6:	440a      	add	r2, r1
 801c6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c6cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c6d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801c6d2:	693b      	ldr	r3, [r7, #16]
 801c6d4:	015a      	lsls	r2, r3, #5
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	4413      	add	r3, r2
 801c6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c6de:	691b      	ldr	r3, [r3, #16]
 801c6e0:	693a      	ldr	r2, [r7, #16]
 801c6e2:	0151      	lsls	r1, r2, #5
 801c6e4:	697a      	ldr	r2, [r7, #20]
 801c6e6:	440a      	add	r2, r1
 801c6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c6ec:	0cdb      	lsrs	r3, r3, #19
 801c6ee:	04db      	lsls	r3, r3, #19
 801c6f0:	6113      	str	r3, [r2, #16]
 801c6f2:	e04e      	b.n	801c792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801c6f4:	693b      	ldr	r3, [r7, #16]
 801c6f6:	015a      	lsls	r2, r3, #5
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	4413      	add	r3, r2
 801c6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c700:	691b      	ldr	r3, [r3, #16]
 801c702:	693a      	ldr	r2, [r7, #16]
 801c704:	0151      	lsls	r1, r2, #5
 801c706:	697a      	ldr	r2, [r7, #20]
 801c708:	440a      	add	r2, r1
 801c70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c70e:	0cdb      	lsrs	r3, r3, #19
 801c710:	04db      	lsls	r3, r3, #19
 801c712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801c714:	693b      	ldr	r3, [r7, #16]
 801c716:	015a      	lsls	r2, r3, #5
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	4413      	add	r3, r2
 801c71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c720:	691b      	ldr	r3, [r3, #16]
 801c722:	693a      	ldr	r2, [r7, #16]
 801c724:	0151      	lsls	r1, r2, #5
 801c726:	697a      	ldr	r2, [r7, #20]
 801c728:	440a      	add	r2, r1
 801c72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c72e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801c738:	68bb      	ldr	r3, [r7, #8]
 801c73a:	695a      	ldr	r2, [r3, #20]
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	689b      	ldr	r3, [r3, #8]
 801c740:	429a      	cmp	r2, r3
 801c742:	d903      	bls.n	801c74c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801c744:	68bb      	ldr	r3, [r7, #8]
 801c746:	689a      	ldr	r2, [r3, #8]
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801c74c:	693b      	ldr	r3, [r7, #16]
 801c74e:	015a      	lsls	r2, r3, #5
 801c750:	697b      	ldr	r3, [r7, #20]
 801c752:	4413      	add	r3, r2
 801c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c758:	691b      	ldr	r3, [r3, #16]
 801c75a:	693a      	ldr	r2, [r7, #16]
 801c75c:	0151      	lsls	r1, r2, #5
 801c75e:	697a      	ldr	r2, [r7, #20]
 801c760:	440a      	add	r2, r1
 801c762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c76a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801c76c:	693b      	ldr	r3, [r7, #16]
 801c76e:	015a      	lsls	r2, r3, #5
 801c770:	697b      	ldr	r3, [r7, #20]
 801c772:	4413      	add	r3, r2
 801c774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c778:	691a      	ldr	r2, [r3, #16]
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	695b      	ldr	r3, [r3, #20]
 801c77e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c782:	6939      	ldr	r1, [r7, #16]
 801c784:	0148      	lsls	r0, r1, #5
 801c786:	6979      	ldr	r1, [r7, #20]
 801c788:	4401      	add	r1, r0
 801c78a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801c78e:	4313      	orrs	r3, r2
 801c790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801c792:	79fb      	ldrb	r3, [r7, #7]
 801c794:	2b01      	cmp	r3, #1
 801c796:	d11e      	bne.n	801c7d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801c798:	68bb      	ldr	r3, [r7, #8]
 801c79a:	691b      	ldr	r3, [r3, #16]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d009      	beq.n	801c7b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	015a      	lsls	r2, r3, #5
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	4413      	add	r3, r2
 801c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c7ac:	461a      	mov	r2, r3
 801c7ae:	68bb      	ldr	r3, [r7, #8]
 801c7b0:	691b      	ldr	r3, [r3, #16]
 801c7b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801c7b4:	693b      	ldr	r3, [r7, #16]
 801c7b6:	015a      	lsls	r2, r3, #5
 801c7b8:	697b      	ldr	r3, [r7, #20]
 801c7ba:	4413      	add	r3, r2
 801c7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	693a      	ldr	r2, [r7, #16]
 801c7c4:	0151      	lsls	r1, r2, #5
 801c7c6:	697a      	ldr	r2, [r7, #20]
 801c7c8:	440a      	add	r2, r1
 801c7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c7ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c7d2:	6013      	str	r3, [r2, #0]
 801c7d4:	e092      	b.n	801c8fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	015a      	lsls	r2, r3, #5
 801c7da:	697b      	ldr	r3, [r7, #20]
 801c7dc:	4413      	add	r3, r2
 801c7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	693a      	ldr	r2, [r7, #16]
 801c7e6:	0151      	lsls	r1, r2, #5
 801c7e8:	697a      	ldr	r2, [r7, #20]
 801c7ea:	440a      	add	r2, r1
 801c7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c7f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c7f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801c7f6:	68bb      	ldr	r3, [r7, #8]
 801c7f8:	695b      	ldr	r3, [r3, #20]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d07e      	beq.n	801c8fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801c7fe:	697b      	ldr	r3, [r7, #20]
 801c800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c806:	68bb      	ldr	r3, [r7, #8]
 801c808:	781b      	ldrb	r3, [r3, #0]
 801c80a:	f003 030f 	and.w	r3, r3, #15
 801c80e:	2101      	movs	r1, #1
 801c810:	fa01 f303 	lsl.w	r3, r1, r3
 801c814:	6979      	ldr	r1, [r7, #20]
 801c816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c81a:	4313      	orrs	r3, r2
 801c81c:	634b      	str	r3, [r1, #52]	; 0x34
 801c81e:	e06d      	b.n	801c8fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801c820:	693b      	ldr	r3, [r7, #16]
 801c822:	015a      	lsls	r2, r3, #5
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	4413      	add	r3, r2
 801c828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c82c:	691b      	ldr	r3, [r3, #16]
 801c82e:	693a      	ldr	r2, [r7, #16]
 801c830:	0151      	lsls	r1, r2, #5
 801c832:	697a      	ldr	r2, [r7, #20]
 801c834:	440a      	add	r2, r1
 801c836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c83a:	0cdb      	lsrs	r3, r3, #19
 801c83c:	04db      	lsls	r3, r3, #19
 801c83e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801c840:	693b      	ldr	r3, [r7, #16]
 801c842:	015a      	lsls	r2, r3, #5
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	4413      	add	r3, r2
 801c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c84c:	691b      	ldr	r3, [r3, #16]
 801c84e:	693a      	ldr	r2, [r7, #16]
 801c850:	0151      	lsls	r1, r2, #5
 801c852:	697a      	ldr	r2, [r7, #20]
 801c854:	440a      	add	r2, r1
 801c856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c85a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c85e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c862:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801c864:	68bb      	ldr	r3, [r7, #8]
 801c866:	695b      	ldr	r3, [r3, #20]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d003      	beq.n	801c874 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	689a      	ldr	r2, [r3, #8]
 801c870:	68bb      	ldr	r3, [r7, #8]
 801c872:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	015a      	lsls	r2, r3, #5
 801c878:	697b      	ldr	r3, [r7, #20]
 801c87a:	4413      	add	r3, r2
 801c87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c880:	691b      	ldr	r3, [r3, #16]
 801c882:	693a      	ldr	r2, [r7, #16]
 801c884:	0151      	lsls	r1, r2, #5
 801c886:	697a      	ldr	r2, [r7, #20]
 801c888:	440a      	add	r2, r1
 801c88a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c88e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801c894:	693b      	ldr	r3, [r7, #16]
 801c896:	015a      	lsls	r2, r3, #5
 801c898:	697b      	ldr	r3, [r7, #20]
 801c89a:	4413      	add	r3, r2
 801c89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c8a0:	691a      	ldr	r2, [r3, #16]
 801c8a2:	68bb      	ldr	r3, [r7, #8]
 801c8a4:	689b      	ldr	r3, [r3, #8]
 801c8a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c8aa:	6939      	ldr	r1, [r7, #16]
 801c8ac:	0148      	lsls	r0, r1, #5
 801c8ae:	6979      	ldr	r1, [r7, #20]
 801c8b0:	4401      	add	r1, r0
 801c8b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801c8b6:	4313      	orrs	r3, r2
 801c8b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801c8ba:	79fb      	ldrb	r3, [r7, #7]
 801c8bc:	2b01      	cmp	r3, #1
 801c8be:	d10d      	bne.n	801c8dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801c8c0:	68bb      	ldr	r3, [r7, #8]
 801c8c2:	68db      	ldr	r3, [r3, #12]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d009      	beq.n	801c8dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801c8c8:	68bb      	ldr	r3, [r7, #8]
 801c8ca:	68d9      	ldr	r1, [r3, #12]
 801c8cc:	693b      	ldr	r3, [r7, #16]
 801c8ce:	015a      	lsls	r2, r3, #5
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	4413      	add	r3, r2
 801c8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c8d8:	460a      	mov	r2, r1
 801c8da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801c8dc:	693b      	ldr	r3, [r7, #16]
 801c8de:	015a      	lsls	r2, r3, #5
 801c8e0:	697b      	ldr	r3, [r7, #20]
 801c8e2:	4413      	add	r3, r2
 801c8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	693a      	ldr	r2, [r7, #16]
 801c8ec:	0151      	lsls	r1, r2, #5
 801c8ee:	697a      	ldr	r2, [r7, #20]
 801c8f0:	440a      	add	r2, r1
 801c8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c8f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801c8fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c8fc:	2300      	movs	r3, #0
}
 801c8fe:	4618      	mov	r0, r3
 801c900:	371c      	adds	r7, #28
 801c902:	46bd      	mov	sp, r7
 801c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c908:	4770      	bx	lr

0801c90a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801c90a:	b480      	push	{r7}
 801c90c:	b089      	sub	sp, #36	; 0x24
 801c90e:	af00      	add	r7, sp, #0
 801c910:	60f8      	str	r0, [r7, #12]
 801c912:	60b9      	str	r1, [r7, #8]
 801c914:	4611      	mov	r1, r2
 801c916:	461a      	mov	r2, r3
 801c918:	460b      	mov	r3, r1
 801c91a:	71fb      	strb	r3, [r7, #7]
 801c91c:	4613      	mov	r3, r2
 801c91e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801c928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d123      	bne.n	801c978 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801c930:	88bb      	ldrh	r3, [r7, #4]
 801c932:	3303      	adds	r3, #3
 801c934:	089b      	lsrs	r3, r3, #2
 801c936:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801c938:	2300      	movs	r3, #0
 801c93a:	61bb      	str	r3, [r7, #24]
 801c93c:	e018      	b.n	801c970 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801c93e:	79fb      	ldrb	r3, [r7, #7]
 801c940:	031a      	lsls	r2, r3, #12
 801c942:	697b      	ldr	r3, [r7, #20]
 801c944:	4413      	add	r3, r2
 801c946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c94a:	461a      	mov	r2, r3
 801c94c:	69fb      	ldr	r3, [r7, #28]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	6013      	str	r3, [r2, #0]
      pSrc++;
 801c952:	69fb      	ldr	r3, [r7, #28]
 801c954:	3301      	adds	r3, #1
 801c956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c958:	69fb      	ldr	r3, [r7, #28]
 801c95a:	3301      	adds	r3, #1
 801c95c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	3301      	adds	r3, #1
 801c962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c964:	69fb      	ldr	r3, [r7, #28]
 801c966:	3301      	adds	r3, #1
 801c968:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801c96a:	69bb      	ldr	r3, [r7, #24]
 801c96c:	3301      	adds	r3, #1
 801c96e:	61bb      	str	r3, [r7, #24]
 801c970:	69ba      	ldr	r2, [r7, #24]
 801c972:	693b      	ldr	r3, [r7, #16]
 801c974:	429a      	cmp	r2, r3
 801c976:	d3e2      	bcc.n	801c93e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801c978:	2300      	movs	r3, #0
}
 801c97a:	4618      	mov	r0, r3
 801c97c:	3724      	adds	r7, #36	; 0x24
 801c97e:	46bd      	mov	sp, r7
 801c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c984:	4770      	bx	lr

0801c986 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801c986:	b480      	push	{r7}
 801c988:	b08b      	sub	sp, #44	; 0x2c
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	60f8      	str	r0, [r7, #12]
 801c98e:	60b9      	str	r1, [r7, #8]
 801c990:	4613      	mov	r3, r2
 801c992:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801c998:	68bb      	ldr	r3, [r7, #8]
 801c99a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801c99c:	88fb      	ldrh	r3, [r7, #6]
 801c99e:	089b      	lsrs	r3, r3, #2
 801c9a0:	b29b      	uxth	r3, r3
 801c9a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801c9a4:	88fb      	ldrh	r3, [r7, #6]
 801c9a6:	f003 0303 	and.w	r3, r3, #3
 801c9aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	623b      	str	r3, [r7, #32]
 801c9b0:	e014      	b.n	801c9dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801c9b2:	69bb      	ldr	r3, [r7, #24]
 801c9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c9b8:	681a      	ldr	r2, [r3, #0]
 801c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9bc:	601a      	str	r2, [r3, #0]
    pDest++;
 801c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9c0:	3301      	adds	r3, #1
 801c9c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9c6:	3301      	adds	r3, #1
 801c9c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9cc:	3301      	adds	r3, #1
 801c9ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d2:	3301      	adds	r3, #1
 801c9d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801c9d6:	6a3b      	ldr	r3, [r7, #32]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	623b      	str	r3, [r7, #32]
 801c9dc:	6a3a      	ldr	r2, [r7, #32]
 801c9de:	697b      	ldr	r3, [r7, #20]
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	d3e6      	bcc.n	801c9b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801c9e4:	8bfb      	ldrh	r3, [r7, #30]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d01e      	beq.n	801ca28 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801c9ee:	69bb      	ldr	r3, [r7, #24]
 801c9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801c9f4:	461a      	mov	r2, r3
 801c9f6:	f107 0310 	add.w	r3, r7, #16
 801c9fa:	6812      	ldr	r2, [r2, #0]
 801c9fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801c9fe:	693a      	ldr	r2, [r7, #16]
 801ca00:	6a3b      	ldr	r3, [r7, #32]
 801ca02:	b2db      	uxtb	r3, r3
 801ca04:	00db      	lsls	r3, r3, #3
 801ca06:	fa22 f303 	lsr.w	r3, r2, r3
 801ca0a:	b2da      	uxtb	r2, r3
 801ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0e:	701a      	strb	r2, [r3, #0]
      i++;
 801ca10:	6a3b      	ldr	r3, [r7, #32]
 801ca12:	3301      	adds	r3, #1
 801ca14:	623b      	str	r3, [r7, #32]
      pDest++;
 801ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca18:	3301      	adds	r3, #1
 801ca1a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ca1c:	8bfb      	ldrh	r3, [r7, #30]
 801ca1e:	3b01      	subs	r3, #1
 801ca20:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ca22:	8bfb      	ldrh	r3, [r7, #30]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d1ea      	bne.n	801c9fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	372c      	adds	r7, #44	; 0x2c
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca34:	4770      	bx	lr

0801ca36 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ca36:	b480      	push	{r7}
 801ca38:	b085      	sub	sp, #20
 801ca3a:	af00      	add	r7, sp, #0
 801ca3c:	6078      	str	r0, [r7, #4]
 801ca3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ca44:	683b      	ldr	r3, [r7, #0]
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	785b      	ldrb	r3, [r3, #1]
 801ca4e:	2b01      	cmp	r3, #1
 801ca50:	d12c      	bne.n	801caac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ca52:	68bb      	ldr	r3, [r7, #8]
 801ca54:	015a      	lsls	r2, r3, #5
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	4413      	add	r3, r2
 801ca5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	db12      	blt.n	801ca8a <USB_EPSetStall+0x54>
 801ca64:	68bb      	ldr	r3, [r7, #8]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d00f      	beq.n	801ca8a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ca6a:	68bb      	ldr	r3, [r7, #8]
 801ca6c:	015a      	lsls	r2, r3, #5
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	4413      	add	r3, r2
 801ca72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	68ba      	ldr	r2, [r7, #8]
 801ca7a:	0151      	lsls	r1, r2, #5
 801ca7c:	68fa      	ldr	r2, [r7, #12]
 801ca7e:	440a      	add	r2, r1
 801ca80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ca84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ca88:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ca8a:	68bb      	ldr	r3, [r7, #8]
 801ca8c:	015a      	lsls	r2, r3, #5
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	4413      	add	r3, r2
 801ca92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	68ba      	ldr	r2, [r7, #8]
 801ca9a:	0151      	lsls	r1, r2, #5
 801ca9c:	68fa      	ldr	r2, [r7, #12]
 801ca9e:	440a      	add	r2, r1
 801caa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801caa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801caa8:	6013      	str	r3, [r2, #0]
 801caaa:	e02b      	b.n	801cb04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801caac:	68bb      	ldr	r3, [r7, #8]
 801caae:	015a      	lsls	r2, r3, #5
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	4413      	add	r3, r2
 801cab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	db12      	blt.n	801cae4 <USB_EPSetStall+0xae>
 801cabe:	68bb      	ldr	r3, [r7, #8]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d00f      	beq.n	801cae4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801cac4:	68bb      	ldr	r3, [r7, #8]
 801cac6:	015a      	lsls	r2, r3, #5
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	4413      	add	r3, r2
 801cacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	68ba      	ldr	r2, [r7, #8]
 801cad4:	0151      	lsls	r1, r2, #5
 801cad6:	68fa      	ldr	r2, [r7, #12]
 801cad8:	440a      	add	r2, r1
 801cada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801cae2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801cae4:	68bb      	ldr	r3, [r7, #8]
 801cae6:	015a      	lsls	r2, r3, #5
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	4413      	add	r3, r2
 801caec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	68ba      	ldr	r2, [r7, #8]
 801caf4:	0151      	lsls	r1, r2, #5
 801caf6:	68fa      	ldr	r2, [r7, #12]
 801caf8:	440a      	add	r2, r1
 801cafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cafe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801cb02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801cb04:	2300      	movs	r3, #0
}
 801cb06:	4618      	mov	r0, r3
 801cb08:	3714      	adds	r7, #20
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb10:	4770      	bx	lr

0801cb12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801cb12:	b480      	push	{r7}
 801cb14:	b085      	sub	sp, #20
 801cb16:	af00      	add	r7, sp, #0
 801cb18:	6078      	str	r0, [r7, #4]
 801cb1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801cb26:	683b      	ldr	r3, [r7, #0]
 801cb28:	785b      	ldrb	r3, [r3, #1]
 801cb2a:	2b01      	cmp	r3, #1
 801cb2c:	d128      	bne.n	801cb80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	015a      	lsls	r2, r3, #5
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	4413      	add	r3, r2
 801cb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	68ba      	ldr	r2, [r7, #8]
 801cb3e:	0151      	lsls	r1, r2, #5
 801cb40:	68fa      	ldr	r2, [r7, #12]
 801cb42:	440a      	add	r2, r1
 801cb44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cb48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801cb4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	78db      	ldrb	r3, [r3, #3]
 801cb52:	2b03      	cmp	r3, #3
 801cb54:	d003      	beq.n	801cb5e <USB_EPClearStall+0x4c>
 801cb56:	683b      	ldr	r3, [r7, #0]
 801cb58:	78db      	ldrb	r3, [r3, #3]
 801cb5a:	2b02      	cmp	r3, #2
 801cb5c:	d138      	bne.n	801cbd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801cb5e:	68bb      	ldr	r3, [r7, #8]
 801cb60:	015a      	lsls	r2, r3, #5
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	4413      	add	r3, r2
 801cb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	68ba      	ldr	r2, [r7, #8]
 801cb6e:	0151      	lsls	r1, r2, #5
 801cb70:	68fa      	ldr	r2, [r7, #12]
 801cb72:	440a      	add	r2, r1
 801cb74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cb7c:	6013      	str	r3, [r2, #0]
 801cb7e:	e027      	b.n	801cbd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801cb80:	68bb      	ldr	r3, [r7, #8]
 801cb82:	015a      	lsls	r2, r3, #5
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	4413      	add	r3, r2
 801cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	68ba      	ldr	r2, [r7, #8]
 801cb90:	0151      	lsls	r1, r2, #5
 801cb92:	68fa      	ldr	r2, [r7, #12]
 801cb94:	440a      	add	r2, r1
 801cb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cb9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801cb9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	78db      	ldrb	r3, [r3, #3]
 801cba4:	2b03      	cmp	r3, #3
 801cba6:	d003      	beq.n	801cbb0 <USB_EPClearStall+0x9e>
 801cba8:	683b      	ldr	r3, [r7, #0]
 801cbaa:	78db      	ldrb	r3, [r3, #3]
 801cbac:	2b02      	cmp	r3, #2
 801cbae:	d10f      	bne.n	801cbd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801cbb0:	68bb      	ldr	r3, [r7, #8]
 801cbb2:	015a      	lsls	r2, r3, #5
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	4413      	add	r3, r2
 801cbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	68ba      	ldr	r2, [r7, #8]
 801cbc0:	0151      	lsls	r1, r2, #5
 801cbc2:	68fa      	ldr	r2, [r7, #12]
 801cbc4:	440a      	add	r2, r1
 801cbc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cbca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cbce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801cbd0:	2300      	movs	r3, #0
}
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	3714      	adds	r7, #20
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbdc:	4770      	bx	lr

0801cbde <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801cbde:	b480      	push	{r7}
 801cbe0:	b085      	sub	sp, #20
 801cbe2:	af00      	add	r7, sp, #0
 801cbe4:	6078      	str	r0, [r7, #4]
 801cbe6:	460b      	mov	r3, r1
 801cbe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	68fa      	ldr	r2, [r7, #12]
 801cbf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cbfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801cc00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cc08:	681a      	ldr	r2, [r3, #0]
 801cc0a:	78fb      	ldrb	r3, [r7, #3]
 801cc0c:	011b      	lsls	r3, r3, #4
 801cc0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801cc12:	68f9      	ldr	r1, [r7, #12]
 801cc14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801cc1c:	2300      	movs	r3, #0
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	3714      	adds	r7, #20
 801cc22:	46bd      	mov	sp, r7
 801cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc28:	4770      	bx	lr

0801cc2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801cc2a:	b480      	push	{r7}
 801cc2c:	b085      	sub	sp, #20
 801cc2e:	af00      	add	r7, sp, #0
 801cc30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	68fa      	ldr	r2, [r7, #12]
 801cc40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801cc44:	f023 0303 	bic.w	r3, r3, #3
 801cc48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cc50:	685b      	ldr	r3, [r3, #4]
 801cc52:	68fa      	ldr	r2, [r7, #12]
 801cc54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cc58:	f023 0302 	bic.w	r3, r3, #2
 801cc5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801cc5e:	2300      	movs	r3, #0
}
 801cc60:	4618      	mov	r0, r3
 801cc62:	3714      	adds	r7, #20
 801cc64:	46bd      	mov	sp, r7
 801cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc6a:	4770      	bx	lr

0801cc6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801cc6c:	b480      	push	{r7}
 801cc6e:	b085      	sub	sp, #20
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	68fa      	ldr	r2, [r7, #12]
 801cc82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801cc86:	f023 0303 	bic.w	r3, r3, #3
 801cc8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cc92:	685b      	ldr	r3, [r3, #4]
 801cc94:	68fa      	ldr	r2, [r7, #12]
 801cc96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cc9a:	f043 0302 	orr.w	r3, r3, #2
 801cc9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801cca0:	2300      	movs	r3, #0
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3714      	adds	r7, #20
 801cca6:	46bd      	mov	sp, r7
 801cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccac:	4770      	bx	lr

0801ccae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801ccae:	b480      	push	{r7}
 801ccb0:	b085      	sub	sp, #20
 801ccb2:	af00      	add	r7, sp, #0
 801ccb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	695b      	ldr	r3, [r3, #20]
 801ccba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	699b      	ldr	r3, [r3, #24]
 801ccc0:	68fa      	ldr	r2, [r7, #12]
 801ccc2:	4013      	ands	r3, r2
 801ccc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801ccc6:	68fb      	ldr	r3, [r7, #12]
}
 801ccc8:	4618      	mov	r0, r3
 801ccca:	3714      	adds	r7, #20
 801cccc:	46bd      	mov	sp, r7
 801ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd2:	4770      	bx	lr

0801ccd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801ccd4:	b480      	push	{r7}
 801ccd6:	b085      	sub	sp, #20
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cce6:	699b      	ldr	r3, [r3, #24]
 801cce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ccf0:	69db      	ldr	r3, [r3, #28]
 801ccf2:	68ba      	ldr	r2, [r7, #8]
 801ccf4:	4013      	ands	r3, r2
 801ccf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801ccf8:	68bb      	ldr	r3, [r7, #8]
 801ccfa:	0c1b      	lsrs	r3, r3, #16
}
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	3714      	adds	r7, #20
 801cd00:	46bd      	mov	sp, r7
 801cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd06:	4770      	bx	lr

0801cd08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801cd08:	b480      	push	{r7}
 801cd0a:	b085      	sub	sp, #20
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cd1a:	699b      	ldr	r3, [r3, #24]
 801cd1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cd24:	69db      	ldr	r3, [r3, #28]
 801cd26:	68ba      	ldr	r2, [r7, #8]
 801cd28:	4013      	ands	r3, r2
 801cd2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801cd2c:	68bb      	ldr	r3, [r7, #8]
 801cd2e:	b29b      	uxth	r3, r3
}
 801cd30:	4618      	mov	r0, r3
 801cd32:	3714      	adds	r7, #20
 801cd34:	46bd      	mov	sp, r7
 801cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd3a:	4770      	bx	lr

0801cd3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801cd3c:	b480      	push	{r7}
 801cd3e:	b085      	sub	sp, #20
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	6078      	str	r0, [r7, #4]
 801cd44:	460b      	mov	r3, r1
 801cd46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801cd4c:	78fb      	ldrb	r3, [r7, #3]
 801cd4e:	015a      	lsls	r2, r3, #5
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	4413      	add	r3, r2
 801cd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cd58:	689b      	ldr	r3, [r3, #8]
 801cd5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cd62:	695b      	ldr	r3, [r3, #20]
 801cd64:	68ba      	ldr	r2, [r7, #8]
 801cd66:	4013      	ands	r3, r2
 801cd68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801cd6a:	68bb      	ldr	r3, [r7, #8]
}
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	3714      	adds	r7, #20
 801cd70:	46bd      	mov	sp, r7
 801cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd76:	4770      	bx	lr

0801cd78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801cd78:	b480      	push	{r7}
 801cd7a:	b087      	sub	sp, #28
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
 801cd80:	460b      	mov	r3, r1
 801cd82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801cd88:	697b      	ldr	r3, [r7, #20]
 801cd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cd8e:	691b      	ldr	r3, [r3, #16]
 801cd90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801cd92:	697b      	ldr	r3, [r7, #20]
 801cd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801cd9c:	78fb      	ldrb	r3, [r7, #3]
 801cd9e:	f003 030f 	and.w	r3, r3, #15
 801cda2:	68fa      	ldr	r2, [r7, #12]
 801cda4:	fa22 f303 	lsr.w	r3, r2, r3
 801cda8:	01db      	lsls	r3, r3, #7
 801cdaa:	b2db      	uxtb	r3, r3
 801cdac:	693a      	ldr	r2, [r7, #16]
 801cdae:	4313      	orrs	r3, r2
 801cdb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801cdb2:	78fb      	ldrb	r3, [r7, #3]
 801cdb4:	015a      	lsls	r2, r3, #5
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	4413      	add	r3, r2
 801cdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cdbe:	689b      	ldr	r3, [r3, #8]
 801cdc0:	693a      	ldr	r2, [r7, #16]
 801cdc2:	4013      	ands	r3, r2
 801cdc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801cdc6:	68bb      	ldr	r3, [r7, #8]
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	371c      	adds	r7, #28
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdd2:	4770      	bx	lr

0801cdd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801cdd4:	b480      	push	{r7}
 801cdd6:	b083      	sub	sp, #12
 801cdd8:	af00      	add	r7, sp, #0
 801cdda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	695b      	ldr	r3, [r3, #20]
 801cde0:	f003 0301 	and.w	r3, r3, #1
}
 801cde4:	4618      	mov	r0, r3
 801cde6:	370c      	adds	r7, #12
 801cde8:	46bd      	mov	sp, r7
 801cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdee:	4770      	bx	lr

0801cdf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801cdf0:	b480      	push	{r7}
 801cdf2:	b085      	sub	sp, #20
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	68fa      	ldr	r2, [r7, #12]
 801ce06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ce0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ce0e:	f023 0307 	bic.w	r3, r3, #7
 801ce12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ce1a:	685b      	ldr	r3, [r3, #4]
 801ce1c:	68fa      	ldr	r2, [r7, #12]
 801ce1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ce22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ce26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ce28:	2300      	movs	r3, #0
}
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	3714      	adds	r7, #20
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce34:	4770      	bx	lr
	...

0801ce38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801ce38:	b480      	push	{r7}
 801ce3a:	b087      	sub	sp, #28
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	60f8      	str	r0, [r7, #12]
 801ce40:	460b      	mov	r3, r1
 801ce42:	607a      	str	r2, [r7, #4]
 801ce44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	333c      	adds	r3, #60	; 0x3c
 801ce4e:	3304      	adds	r3, #4
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801ce54:	693b      	ldr	r3, [r7, #16]
 801ce56:	4a26      	ldr	r2, [pc, #152]	; (801cef0 <USB_EP0_OutStart+0xb8>)
 801ce58:	4293      	cmp	r3, r2
 801ce5a:	d90a      	bls.n	801ce72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ce68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ce6c:	d101      	bne.n	801ce72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	e037      	b.n	801cee2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ce72:	697b      	ldr	r3, [r7, #20]
 801ce74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce78:	461a      	mov	r2, r3
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ce7e:	697b      	ldr	r3, [r7, #20]
 801ce80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce84:	691b      	ldr	r3, [r3, #16]
 801ce86:	697a      	ldr	r2, [r7, #20]
 801ce88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ce8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ce90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801ce92:	697b      	ldr	r3, [r7, #20]
 801ce94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce98:	691b      	ldr	r3, [r3, #16]
 801ce9a:	697a      	ldr	r2, [r7, #20]
 801ce9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cea0:	f043 0318 	orr.w	r3, r3, #24
 801cea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801cea6:	697b      	ldr	r3, [r7, #20]
 801cea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ceac:	691b      	ldr	r3, [r3, #16]
 801ceae:	697a      	ldr	r2, [r7, #20]
 801ceb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ceb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801ceb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801ceba:	7afb      	ldrb	r3, [r7, #11]
 801cebc:	2b01      	cmp	r3, #1
 801cebe:	d10f      	bne.n	801cee0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801cec0:	697b      	ldr	r3, [r7, #20]
 801cec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cec6:	461a      	mov	r2, r3
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801cecc:	697b      	ldr	r3, [r7, #20]
 801cece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	697a      	ldr	r2, [r7, #20]
 801ced6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ceda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801cede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801cee0:	2300      	movs	r3, #0
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	371c      	adds	r7, #28
 801cee6:	46bd      	mov	sp, r7
 801cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceec:	4770      	bx	lr
 801ceee:	bf00      	nop
 801cef0:	4f54300a 	.word	0x4f54300a

0801cef4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801cef4:	b480      	push	{r7}
 801cef6:	b085      	sub	sp, #20
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801cefc:	2300      	movs	r3, #0
 801cefe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	3301      	adds	r3, #1
 801cf04:	60fb      	str	r3, [r7, #12]
 801cf06:	4a13      	ldr	r2, [pc, #76]	; (801cf54 <USB_CoreReset+0x60>)
 801cf08:	4293      	cmp	r3, r2
 801cf0a:	d901      	bls.n	801cf10 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801cf0c:	2303      	movs	r3, #3
 801cf0e:	e01a      	b.n	801cf46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	691b      	ldr	r3, [r3, #16]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	daf3      	bge.n	801cf00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801cf18:	2300      	movs	r3, #0
 801cf1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	691b      	ldr	r3, [r3, #16]
 801cf20:	f043 0201 	orr.w	r2, r3, #1
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	3301      	adds	r3, #1
 801cf2c:	60fb      	str	r3, [r7, #12]
 801cf2e:	4a09      	ldr	r2, [pc, #36]	; (801cf54 <USB_CoreReset+0x60>)
 801cf30:	4293      	cmp	r3, r2
 801cf32:	d901      	bls.n	801cf38 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801cf34:	2303      	movs	r3, #3
 801cf36:	e006      	b.n	801cf46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	691b      	ldr	r3, [r3, #16]
 801cf3c:	f003 0301 	and.w	r3, r3, #1
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	d0f1      	beq.n	801cf28 <USB_CoreReset+0x34>

  return HAL_OK;
 801cf44:	2300      	movs	r3, #0
}
 801cf46:	4618      	mov	r0, r3
 801cf48:	3714      	adds	r7, #20
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf50:	4770      	bx	lr
 801cf52:	bf00      	nop
 801cf54:	00030d40 	.word	0x00030d40

0801cf58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b084      	sub	sp, #16
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	6078      	str	r0, [r7, #4]
 801cf60:	460b      	mov	r3, r1
 801cf62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801cf64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801cf68:	f004 ff90 	bl	8021e8c <USBD_static_malloc>
 801cf6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d105      	bne.n	801cf80 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	2200      	movs	r2, #0
 801cf78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801cf7c:	2302      	movs	r3, #2
 801cf7e:	e066      	b.n	801d04e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	68fa      	ldr	r2, [r7, #12]
 801cf84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	7c1b      	ldrb	r3, [r3, #16]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d119      	bne.n	801cfc4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801cf90:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cf94:	2202      	movs	r2, #2
 801cf96:	2181      	movs	r1, #129	; 0x81
 801cf98:	6878      	ldr	r0, [r7, #4]
 801cf9a:	f004 fe54 	bl	8021c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2201      	movs	r2, #1
 801cfa2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801cfa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cfa8:	2202      	movs	r2, #2
 801cfaa:	2101      	movs	r1, #1
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f004 fe4a 	bl	8021c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2201      	movs	r2, #1
 801cfb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	2210      	movs	r2, #16
 801cfbe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801cfc2:	e016      	b.n	801cff2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801cfc4:	2340      	movs	r3, #64	; 0x40
 801cfc6:	2202      	movs	r2, #2
 801cfc8:	2181      	movs	r1, #129	; 0x81
 801cfca:	6878      	ldr	r0, [r7, #4]
 801cfcc:	f004 fe3b 	bl	8021c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	2201      	movs	r2, #1
 801cfd4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801cfd6:	2340      	movs	r3, #64	; 0x40
 801cfd8:	2202      	movs	r2, #2
 801cfda:	2101      	movs	r1, #1
 801cfdc:	6878      	ldr	r0, [r7, #4]
 801cfde:	f004 fe32 	bl	8021c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	2201      	movs	r2, #1
 801cfe6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	2210      	movs	r2, #16
 801cfee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801cff2:	2308      	movs	r3, #8
 801cff4:	2203      	movs	r2, #3
 801cff6:	2182      	movs	r1, #130	; 0x82
 801cff8:	6878      	ldr	r0, [r7, #4]
 801cffa:	f004 fe24 	bl	8021c46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	2201      	movs	r2, #1
 801d002:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	2200      	movs	r2, #0
 801d014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	2200      	movs	r2, #0
 801d01c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	7c1b      	ldrb	r3, [r3, #16]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d109      	bne.n	801d03c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d02e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d032:	2101      	movs	r1, #1
 801d034:	6878      	ldr	r0, [r7, #4]
 801d036:	f004 fef5 	bl	8021e24 <USBD_LL_PrepareReceive>
 801d03a:	e007      	b.n	801d04c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d042:	2340      	movs	r3, #64	; 0x40
 801d044:	2101      	movs	r1, #1
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	f004 feec 	bl	8021e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801d04c:	2300      	movs	r3, #0
}
 801d04e:	4618      	mov	r0, r3
 801d050:	3710      	adds	r7, #16
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}

0801d056 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d056:	b580      	push	{r7, lr}
 801d058:	b082      	sub	sp, #8
 801d05a:	af00      	add	r7, sp, #0
 801d05c:	6078      	str	r0, [r7, #4]
 801d05e:	460b      	mov	r3, r1
 801d060:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801d062:	2181      	movs	r1, #129	; 0x81
 801d064:	6878      	ldr	r0, [r7, #4]
 801d066:	f004 fe14 	bl	8021c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	2200      	movs	r2, #0
 801d06e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801d070:	2101      	movs	r1, #1
 801d072:	6878      	ldr	r0, [r7, #4]
 801d074:	f004 fe0d 	bl	8021c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2200      	movs	r2, #0
 801d07c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801d080:	2182      	movs	r1, #130	; 0x82
 801d082:	6878      	ldr	r0, [r7, #4]
 801d084:	f004 fe05 	bl	8021c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2200      	movs	r2, #0
 801d08c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	2200      	movs	r2, #0
 801d094:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d00e      	beq.n	801d0c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d0a8:	685b      	ldr	r3, [r3, #4]
 801d0aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f004 fef8 	bl	8021ea8 <USBD_static_free>
    pdev->pClassData = NULL;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801d0c0:	2300      	movs	r3, #0
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3708      	adds	r7, #8
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
	...

0801d0cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b086      	sub	sp, #24
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
 801d0d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d0dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801d0e2:	2300      	movs	r3, #0
 801d0e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801d0e6:	2300      	movs	r3, #0
 801d0e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801d0ea:	693b      	ldr	r3, [r7, #16]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d101      	bne.n	801d0f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801d0f0:	2303      	movs	r3, #3
 801d0f2:	e0af      	b.n	801d254 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d0f4:	683b      	ldr	r3, [r7, #0]
 801d0f6:	781b      	ldrb	r3, [r3, #0]
 801d0f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d03f      	beq.n	801d180 <USBD_CDC_Setup+0xb4>
 801d100:	2b20      	cmp	r3, #32
 801d102:	f040 809f 	bne.w	801d244 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801d106:	683b      	ldr	r3, [r7, #0]
 801d108:	88db      	ldrh	r3, [r3, #6]
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d02e      	beq.n	801d16c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	781b      	ldrb	r3, [r3, #0]
 801d112:	b25b      	sxtb	r3, r3
 801d114:	2b00      	cmp	r3, #0
 801d116:	da16      	bge.n	801d146 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d11e:	689b      	ldr	r3, [r3, #8]
 801d120:	683a      	ldr	r2, [r7, #0]
 801d122:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801d124:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d126:	683a      	ldr	r2, [r7, #0]
 801d128:	88d2      	ldrh	r2, [r2, #6]
 801d12a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	88db      	ldrh	r3, [r3, #6]
 801d130:	2b07      	cmp	r3, #7
 801d132:	bf28      	it	cs
 801d134:	2307      	movcs	r3, #7
 801d136:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801d138:	693b      	ldr	r3, [r7, #16]
 801d13a:	89fa      	ldrh	r2, [r7, #14]
 801d13c:	4619      	mov	r1, r3
 801d13e:	6878      	ldr	r0, [r7, #4]
 801d140:	f001 fb19 	bl	801e776 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801d144:	e085      	b.n	801d252 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	785a      	ldrb	r2, [r3, #1]
 801d14a:	693b      	ldr	r3, [r7, #16]
 801d14c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801d150:	683b      	ldr	r3, [r7, #0]
 801d152:	88db      	ldrh	r3, [r3, #6]
 801d154:	b2da      	uxtb	r2, r3
 801d156:	693b      	ldr	r3, [r7, #16]
 801d158:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801d15c:	6939      	ldr	r1, [r7, #16]
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	88db      	ldrh	r3, [r3, #6]
 801d162:	461a      	mov	r2, r3
 801d164:	6878      	ldr	r0, [r7, #4]
 801d166:	f001 fb32 	bl	801e7ce <USBD_CtlPrepareRx>
      break;
 801d16a:	e072      	b.n	801d252 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d172:	689b      	ldr	r3, [r3, #8]
 801d174:	683a      	ldr	r2, [r7, #0]
 801d176:	7850      	ldrb	r0, [r2, #1]
 801d178:	2200      	movs	r2, #0
 801d17a:	6839      	ldr	r1, [r7, #0]
 801d17c:	4798      	blx	r3
      break;
 801d17e:	e068      	b.n	801d252 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d180:	683b      	ldr	r3, [r7, #0]
 801d182:	785b      	ldrb	r3, [r3, #1]
 801d184:	2b0b      	cmp	r3, #11
 801d186:	d852      	bhi.n	801d22e <USBD_CDC_Setup+0x162>
 801d188:	a201      	add	r2, pc, #4	; (adr r2, 801d190 <USBD_CDC_Setup+0xc4>)
 801d18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d18e:	bf00      	nop
 801d190:	0801d1c1 	.word	0x0801d1c1
 801d194:	0801d23d 	.word	0x0801d23d
 801d198:	0801d22f 	.word	0x0801d22f
 801d19c:	0801d22f 	.word	0x0801d22f
 801d1a0:	0801d22f 	.word	0x0801d22f
 801d1a4:	0801d22f 	.word	0x0801d22f
 801d1a8:	0801d22f 	.word	0x0801d22f
 801d1ac:	0801d22f 	.word	0x0801d22f
 801d1b0:	0801d22f 	.word	0x0801d22f
 801d1b4:	0801d22f 	.word	0x0801d22f
 801d1b8:	0801d1eb 	.word	0x0801d1eb
 801d1bc:	0801d215 	.word	0x0801d215
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1c6:	b2db      	uxtb	r3, r3
 801d1c8:	2b03      	cmp	r3, #3
 801d1ca:	d107      	bne.n	801d1dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801d1cc:	f107 030a 	add.w	r3, r7, #10
 801d1d0:	2202      	movs	r2, #2
 801d1d2:	4619      	mov	r1, r3
 801d1d4:	6878      	ldr	r0, [r7, #4]
 801d1d6:	f001 face 	bl	801e776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801d1da:	e032      	b.n	801d242 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801d1dc:	6839      	ldr	r1, [r7, #0]
 801d1de:	6878      	ldr	r0, [r7, #4]
 801d1e0:	f001 fa58 	bl	801e694 <USBD_CtlError>
            ret = USBD_FAIL;
 801d1e4:	2303      	movs	r3, #3
 801d1e6:	75fb      	strb	r3, [r7, #23]
          break;
 801d1e8:	e02b      	b.n	801d242 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1f0:	b2db      	uxtb	r3, r3
 801d1f2:	2b03      	cmp	r3, #3
 801d1f4:	d107      	bne.n	801d206 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801d1f6:	f107 030d 	add.w	r3, r7, #13
 801d1fa:	2201      	movs	r2, #1
 801d1fc:	4619      	mov	r1, r3
 801d1fe:	6878      	ldr	r0, [r7, #4]
 801d200:	f001 fab9 	bl	801e776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801d204:	e01d      	b.n	801d242 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801d206:	6839      	ldr	r1, [r7, #0]
 801d208:	6878      	ldr	r0, [r7, #4]
 801d20a:	f001 fa43 	bl	801e694 <USBD_CtlError>
            ret = USBD_FAIL;
 801d20e:	2303      	movs	r3, #3
 801d210:	75fb      	strb	r3, [r7, #23]
          break;
 801d212:	e016      	b.n	801d242 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d21a:	b2db      	uxtb	r3, r3
 801d21c:	2b03      	cmp	r3, #3
 801d21e:	d00f      	beq.n	801d240 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801d220:	6839      	ldr	r1, [r7, #0]
 801d222:	6878      	ldr	r0, [r7, #4]
 801d224:	f001 fa36 	bl	801e694 <USBD_CtlError>
            ret = USBD_FAIL;
 801d228:	2303      	movs	r3, #3
 801d22a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801d22c:	e008      	b.n	801d240 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801d22e:	6839      	ldr	r1, [r7, #0]
 801d230:	6878      	ldr	r0, [r7, #4]
 801d232:	f001 fa2f 	bl	801e694 <USBD_CtlError>
          ret = USBD_FAIL;
 801d236:	2303      	movs	r3, #3
 801d238:	75fb      	strb	r3, [r7, #23]
          break;
 801d23a:	e002      	b.n	801d242 <USBD_CDC_Setup+0x176>
          break;
 801d23c:	bf00      	nop
 801d23e:	e008      	b.n	801d252 <USBD_CDC_Setup+0x186>
          break;
 801d240:	bf00      	nop
      }
      break;
 801d242:	e006      	b.n	801d252 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801d244:	6839      	ldr	r1, [r7, #0]
 801d246:	6878      	ldr	r0, [r7, #4]
 801d248:	f001 fa24 	bl	801e694 <USBD_CtlError>
      ret = USBD_FAIL;
 801d24c:	2303      	movs	r3, #3
 801d24e:	75fb      	strb	r3, [r7, #23]
      break;
 801d250:	bf00      	nop
  }

  return (uint8_t)ret;
 801d252:	7dfb      	ldrb	r3, [r7, #23]
}
 801d254:	4618      	mov	r0, r3
 801d256:	3718      	adds	r7, #24
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}

0801d25c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b084      	sub	sp, #16
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	460b      	mov	r3, r1
 801d266:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d26e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d276:	2b00      	cmp	r3, #0
 801d278:	d101      	bne.n	801d27e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801d27a:	2303      	movs	r3, #3
 801d27c:	e04f      	b.n	801d31e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801d286:	78fa      	ldrb	r2, [r7, #3]
 801d288:	6879      	ldr	r1, [r7, #4]
 801d28a:	4613      	mov	r3, r2
 801d28c:	009b      	lsls	r3, r3, #2
 801d28e:	4413      	add	r3, r2
 801d290:	009b      	lsls	r3, r3, #2
 801d292:	440b      	add	r3, r1
 801d294:	3318      	adds	r3, #24
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d029      	beq.n	801d2f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801d29c:	78fa      	ldrb	r2, [r7, #3]
 801d29e:	6879      	ldr	r1, [r7, #4]
 801d2a0:	4613      	mov	r3, r2
 801d2a2:	009b      	lsls	r3, r3, #2
 801d2a4:	4413      	add	r3, r2
 801d2a6:	009b      	lsls	r3, r3, #2
 801d2a8:	440b      	add	r3, r1
 801d2aa:	3318      	adds	r3, #24
 801d2ac:	681a      	ldr	r2, [r3, #0]
 801d2ae:	78f9      	ldrb	r1, [r7, #3]
 801d2b0:	68f8      	ldr	r0, [r7, #12]
 801d2b2:	460b      	mov	r3, r1
 801d2b4:	00db      	lsls	r3, r3, #3
 801d2b6:	1a5b      	subs	r3, r3, r1
 801d2b8:	009b      	lsls	r3, r3, #2
 801d2ba:	4403      	add	r3, r0
 801d2bc:	3344      	adds	r3, #68	; 0x44
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	fbb2 f1f3 	udiv	r1, r2, r3
 801d2c4:	fb03 f301 	mul.w	r3, r3, r1
 801d2c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d110      	bne.n	801d2f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801d2ce:	78fa      	ldrb	r2, [r7, #3]
 801d2d0:	6879      	ldr	r1, [r7, #4]
 801d2d2:	4613      	mov	r3, r2
 801d2d4:	009b      	lsls	r3, r3, #2
 801d2d6:	4413      	add	r3, r2
 801d2d8:	009b      	lsls	r3, r3, #2
 801d2da:	440b      	add	r3, r1
 801d2dc:	3318      	adds	r3, #24
 801d2de:	2200      	movs	r2, #0
 801d2e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801d2e2:	78f9      	ldrb	r1, [r7, #3]
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f004 fd7a 	bl	8021de2 <USBD_LL_Transmit>
 801d2ee:	e015      	b.n	801d31c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801d2f0:	68bb      	ldr	r3, [r7, #8]
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d2fe:	691b      	ldr	r3, [r3, #16]
 801d300:	2b00      	cmp	r3, #0
 801d302:	d00b      	beq.n	801d31c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d30a:	691b      	ldr	r3, [r3, #16]
 801d30c:	68ba      	ldr	r2, [r7, #8]
 801d30e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801d312:	68ba      	ldr	r2, [r7, #8]
 801d314:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801d318:	78fa      	ldrb	r2, [r7, #3]
 801d31a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801d31c:	2300      	movs	r3, #0
}
 801d31e:	4618      	mov	r0, r3
 801d320:	3710      	adds	r7, #16
 801d322:	46bd      	mov	sp, r7
 801d324:	bd80      	pop	{r7, pc}

0801d326 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801d326:	b580      	push	{r7, lr}
 801d328:	b084      	sub	sp, #16
 801d32a:	af00      	add	r7, sp, #0
 801d32c:	6078      	str	r0, [r7, #4]
 801d32e:	460b      	mov	r3, r1
 801d330:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d338:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d340:	2b00      	cmp	r3, #0
 801d342:	d101      	bne.n	801d348 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801d344:	2303      	movs	r3, #3
 801d346:	e015      	b.n	801d374 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801d348:	78fb      	ldrb	r3, [r7, #3]
 801d34a:	4619      	mov	r1, r3
 801d34c:	6878      	ldr	r0, [r7, #4]
 801d34e:	f004 fd8a 	bl	8021e66 <USBD_LL_GetRxDataSize>
 801d352:	4602      	mov	r2, r0
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d360:	68db      	ldr	r3, [r3, #12]
 801d362:	68fa      	ldr	r2, [r7, #12]
 801d364:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801d368:	68fa      	ldr	r2, [r7, #12]
 801d36a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801d36e:	4611      	mov	r1, r2
 801d370:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801d372:	2300      	movs	r3, #0
}
 801d374:	4618      	mov	r0, r3
 801d376:	3710      	adds	r7, #16
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}

0801d37c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b084      	sub	sp, #16
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d38a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d101      	bne.n	801d396 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801d392:	2303      	movs	r3, #3
 801d394:	e01b      	b.n	801d3ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d015      	beq.n	801d3cc <USBD_CDC_EP0_RxReady+0x50>
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801d3a6:	2bff      	cmp	r3, #255	; 0xff
 801d3a8:	d010      	beq.n	801d3cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d3b0:	689b      	ldr	r3, [r3, #8]
 801d3b2:	68fa      	ldr	r2, [r7, #12]
 801d3b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801d3b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801d3ba:	68fa      	ldr	r2, [r7, #12]
 801d3bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801d3c0:	b292      	uxth	r2, r2
 801d3c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	22ff      	movs	r2, #255	; 0xff
 801d3c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801d3cc:	2300      	movs	r3, #0
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	3710      	adds	r7, #16
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd80      	pop	{r7, pc}
	...

0801d3d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801d3d8:	b480      	push	{r7}
 801d3da:	b083      	sub	sp, #12
 801d3dc:	af00      	add	r7, sp, #0
 801d3de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	2243      	movs	r2, #67	; 0x43
 801d3e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801d3e6:	4b03      	ldr	r3, [pc, #12]	; (801d3f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	370c      	adds	r7, #12
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f2:	4770      	bx	lr
 801d3f4:	200001dc 	.word	0x200001dc

0801d3f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801d3f8:	b480      	push	{r7}
 801d3fa:	b083      	sub	sp, #12
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	2243      	movs	r2, #67	; 0x43
 801d404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801d406:	4b03      	ldr	r3, [pc, #12]	; (801d414 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801d408:	4618      	mov	r0, r3
 801d40a:	370c      	adds	r7, #12
 801d40c:	46bd      	mov	sp, r7
 801d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d412:	4770      	bx	lr
 801d414:	20000198 	.word	0x20000198

0801d418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801d418:	b480      	push	{r7}
 801d41a:	b083      	sub	sp, #12
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	2243      	movs	r2, #67	; 0x43
 801d424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801d426:	4b03      	ldr	r3, [pc, #12]	; (801d434 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801d428:	4618      	mov	r0, r3
 801d42a:	370c      	adds	r7, #12
 801d42c:	46bd      	mov	sp, r7
 801d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d432:	4770      	bx	lr
 801d434:	20000220 	.word	0x20000220

0801d438 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801d438:	b480      	push	{r7}
 801d43a:	b083      	sub	sp, #12
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	220a      	movs	r2, #10
 801d444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801d446:	4b03      	ldr	r3, [pc, #12]	; (801d454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801d448:	4618      	mov	r0, r3
 801d44a:	370c      	adds	r7, #12
 801d44c:	46bd      	mov	sp, r7
 801d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d452:	4770      	bx	lr
 801d454:	20000154 	.word	0x20000154

0801d458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801d458:	b480      	push	{r7}
 801d45a:	b083      	sub	sp, #12
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	2b00      	cmp	r3, #0
 801d466:	d101      	bne.n	801d46c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801d468:	2303      	movs	r3, #3
 801d46a:	e004      	b.n	801d476 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	683a      	ldr	r2, [r7, #0]
 801d470:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801d474:	2300      	movs	r3, #0
}
 801d476:	4618      	mov	r0, r3
 801d478:	370c      	adds	r7, #12
 801d47a:	46bd      	mov	sp, r7
 801d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d480:	4770      	bx	lr

0801d482 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801d482:	b480      	push	{r7}
 801d484:	b087      	sub	sp, #28
 801d486:	af00      	add	r7, sp, #0
 801d488:	60f8      	str	r0, [r7, #12]
 801d48a:	60b9      	str	r1, [r7, #8]
 801d48c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d494:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801d496:	697b      	ldr	r3, [r7, #20]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d101      	bne.n	801d4a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801d49c:	2303      	movs	r3, #3
 801d49e:	e008      	b.n	801d4b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801d4a0:	697b      	ldr	r3, [r7, #20]
 801d4a2:	68ba      	ldr	r2, [r7, #8]
 801d4a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801d4a8:	697b      	ldr	r3, [r7, #20]
 801d4aa:	687a      	ldr	r2, [r7, #4]
 801d4ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801d4b0:	2300      	movs	r3, #0
}
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	371c      	adds	r7, #28
 801d4b6:	46bd      	mov	sp, r7
 801d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4bc:	4770      	bx	lr

0801d4be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801d4be:	b480      	push	{r7}
 801d4c0:	b085      	sub	sp, #20
 801d4c2:	af00      	add	r7, sp, #0
 801d4c4:	6078      	str	r0, [r7, #4]
 801d4c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d4ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d101      	bne.n	801d4da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801d4d6:	2303      	movs	r3, #3
 801d4d8:	e004      	b.n	801d4e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	683a      	ldr	r2, [r7, #0]
 801d4de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801d4e2:	2300      	movs	r3, #0
}
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	3714      	adds	r7, #20
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ee:	4770      	bx	lr

0801d4f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b084      	sub	sp, #16
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d4fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801d500:	2301      	movs	r3, #1
 801d502:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d101      	bne.n	801d512 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801d50e:	2303      	movs	r3, #3
 801d510:	e01a      	b.n	801d548 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d114      	bne.n	801d546 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	2201      	movs	r2, #1
 801d520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801d52e:	68bb      	ldr	r3, [r7, #8]
 801d530:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801d534:	68bb      	ldr	r3, [r7, #8]
 801d536:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801d53a:	2181      	movs	r1, #129	; 0x81
 801d53c:	6878      	ldr	r0, [r7, #4]
 801d53e:	f004 fc50 	bl	8021de2 <USBD_LL_Transmit>

    ret = USBD_OK;
 801d542:	2300      	movs	r3, #0
 801d544:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801d546:	7bfb      	ldrb	r3, [r7, #15]
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3710      	adds	r7, #16
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}

0801d550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801d550:	b580      	push	{r7, lr}
 801d552:	b084      	sub	sp, #16
 801d554:	af00      	add	r7, sp, #0
 801d556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d55e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d566:	2b00      	cmp	r3, #0
 801d568:	d101      	bne.n	801d56e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801d56a:	2303      	movs	r3, #3
 801d56c:	e016      	b.n	801d59c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	7c1b      	ldrb	r3, [r3, #16]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d109      	bne.n	801d58a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d580:	2101      	movs	r1, #1
 801d582:	6878      	ldr	r0, [r7, #4]
 801d584:	f004 fc4e 	bl	8021e24 <USBD_LL_PrepareReceive>
 801d588:	e007      	b.n	801d59a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d590:	2340      	movs	r3, #64	; 0x40
 801d592:	2101      	movs	r1, #1
 801d594:	6878      	ldr	r0, [r7, #4]
 801d596:	f004 fc45 	bl	8021e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801d59a:	2300      	movs	r3, #0
}
 801d59c:	4618      	mov	r0, r3
 801d59e:	3710      	adds	r7, #16
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	bd80      	pop	{r7, pc}

0801d5a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b086      	sub	sp, #24
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	60f8      	str	r0, [r7, #12]
 801d5ac:	60b9      	str	r1, [r7, #8]
 801d5ae:	4613      	mov	r3, r2
 801d5b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d101      	bne.n	801d5bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801d5b8:	2303      	movs	r3, #3
 801d5ba:	e01f      	b.n	801d5fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	2200      	movs	r2, #0
 801d5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	2200      	movs	r2, #0
 801d5c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801d5d4:	68bb      	ldr	r3, [r7, #8]
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d003      	beq.n	801d5e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	68ba      	ldr	r2, [r7, #8]
 801d5de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	2201      	movs	r2, #1
 801d5e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	79fa      	ldrb	r2, [r7, #7]
 801d5ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801d5f0:	68f8      	ldr	r0, [r7, #12]
 801d5f2:	f004 fac1 	bl	8021b78 <USBD_LL_Init>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 801d5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	3718      	adds	r7, #24
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}

0801d604 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b084      	sub	sp, #16
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
 801d60c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d60e:	2300      	movs	r3, #0
 801d610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801d612:	683b      	ldr	r3, [r7, #0]
 801d614:	2b00      	cmp	r3, #0
 801d616:	d101      	bne.n	801d61c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801d618:	2303      	movs	r3, #3
 801d61a:	e016      	b.n	801d64a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	683a      	ldr	r2, [r7, #0]
 801d620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d00b      	beq.n	801d648 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d638:	f107 020e 	add.w	r2, r7, #14
 801d63c:	4610      	mov	r0, r2
 801d63e:	4798      	blx	r3
 801d640:	4602      	mov	r2, r0
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801d648:	2300      	movs	r3, #0
}
 801d64a:	4618      	mov	r0, r3
 801d64c:	3710      	adds	r7, #16
 801d64e:	46bd      	mov	sp, r7
 801d650:	bd80      	pop	{r7, pc}

0801d652 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801d652:	b580      	push	{r7, lr}
 801d654:	b082      	sub	sp, #8
 801d656:	af00      	add	r7, sp, #0
 801d658:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801d65a:	6878      	ldr	r0, [r7, #4]
 801d65c:	f004 fad8 	bl	8021c10 <USBD_LL_Start>
 801d660:	4603      	mov	r3, r0
}
 801d662:	4618      	mov	r0, r3
 801d664:	3708      	adds	r7, #8
 801d666:	46bd      	mov	sp, r7
 801d668:	bd80      	pop	{r7, pc}

0801d66a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801d66a:	b480      	push	{r7}
 801d66c:	b083      	sub	sp, #12
 801d66e:	af00      	add	r7, sp, #0
 801d670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801d672:	2300      	movs	r3, #0
}
 801d674:	4618      	mov	r0, r3
 801d676:	370c      	adds	r7, #12
 801d678:	46bd      	mov	sp, r7
 801d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d67e:	4770      	bx	lr

0801d680 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d680:	b580      	push	{r7, lr}
 801d682:	b084      	sub	sp, #16
 801d684:	af00      	add	r7, sp, #0
 801d686:	6078      	str	r0, [r7, #4]
 801d688:	460b      	mov	r3, r1
 801d68a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801d68c:	2303      	movs	r3, #3
 801d68e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d696:	2b00      	cmp	r3, #0
 801d698:	d009      	beq.n	801d6ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	78fa      	ldrb	r2, [r7, #3]
 801d6a4:	4611      	mov	r1, r2
 801d6a6:	6878      	ldr	r0, [r7, #4]
 801d6a8:	4798      	blx	r3
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801d6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	3710      	adds	r7, #16
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}

0801d6b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d6b8:	b580      	push	{r7, lr}
 801d6ba:	b082      	sub	sp, #8
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	6078      	str	r0, [r7, #4]
 801d6c0:	460b      	mov	r3, r1
 801d6c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d007      	beq.n	801d6de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d6d4:	685b      	ldr	r3, [r3, #4]
 801d6d6:	78fa      	ldrb	r2, [r7, #3]
 801d6d8:	4611      	mov	r1, r2
 801d6da:	6878      	ldr	r0, [r7, #4]
 801d6dc:	4798      	blx	r3
  }

  return USBD_OK;
 801d6de:	2300      	movs	r3, #0
}
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	3708      	adds	r7, #8
 801d6e4:	46bd      	mov	sp, r7
 801d6e6:	bd80      	pop	{r7, pc}

0801d6e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b084      	sub	sp, #16
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
 801d6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801d6f8:	6839      	ldr	r1, [r7, #0]
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f000 ff90 	bl	801e620 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	2201      	movs	r2, #1
 801d704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801d70e:	461a      	mov	r2, r3
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801d71c:	f003 031f 	and.w	r3, r3, #31
 801d720:	2b02      	cmp	r3, #2
 801d722:	d01a      	beq.n	801d75a <USBD_LL_SetupStage+0x72>
 801d724:	2b02      	cmp	r3, #2
 801d726:	d822      	bhi.n	801d76e <USBD_LL_SetupStage+0x86>
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d002      	beq.n	801d732 <USBD_LL_SetupStage+0x4a>
 801d72c:	2b01      	cmp	r3, #1
 801d72e:	d00a      	beq.n	801d746 <USBD_LL_SetupStage+0x5e>
 801d730:	e01d      	b.n	801d76e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801d738:	4619      	mov	r1, r3
 801d73a:	6878      	ldr	r0, [r7, #4]
 801d73c:	f000 fa62 	bl	801dc04 <USBD_StdDevReq>
 801d740:	4603      	mov	r3, r0
 801d742:	73fb      	strb	r3, [r7, #15]
      break;
 801d744:	e020      	b.n	801d788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801d74c:	4619      	mov	r1, r3
 801d74e:	6878      	ldr	r0, [r7, #4]
 801d750:	f000 fac6 	bl	801dce0 <USBD_StdItfReq>
 801d754:	4603      	mov	r3, r0
 801d756:	73fb      	strb	r3, [r7, #15]
      break;
 801d758:	e016      	b.n	801d788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801d760:	4619      	mov	r1, r3
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	f000 fb05 	bl	801dd72 <USBD_StdEPReq>
 801d768:	4603      	mov	r3, r0
 801d76a:	73fb      	strb	r3, [r7, #15]
      break;
 801d76c:	e00c      	b.n	801d788 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801d774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d778:	b2db      	uxtb	r3, r3
 801d77a:	4619      	mov	r1, r3
 801d77c:	6878      	ldr	r0, [r7, #4]
 801d77e:	f004 faa7 	bl	8021cd0 <USBD_LL_StallEP>
 801d782:	4603      	mov	r3, r0
 801d784:	73fb      	strb	r3, [r7, #15]
      break;
 801d786:	bf00      	nop
  }

  return ret;
 801d788:	7bfb      	ldrb	r3, [r7, #15]
}
 801d78a:	4618      	mov	r0, r3
 801d78c:	3710      	adds	r7, #16
 801d78e:	46bd      	mov	sp, r7
 801d790:	bd80      	pop	{r7, pc}

0801d792 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801d792:	b580      	push	{r7, lr}
 801d794:	b086      	sub	sp, #24
 801d796:	af00      	add	r7, sp, #0
 801d798:	60f8      	str	r0, [r7, #12]
 801d79a:	460b      	mov	r3, r1
 801d79c:	607a      	str	r2, [r7, #4]
 801d79e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801d7a0:	7afb      	ldrb	r3, [r7, #11]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d138      	bne.n	801d818 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801d7ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801d7b4:	2b03      	cmp	r3, #3
 801d7b6:	d14a      	bne.n	801d84e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801d7b8:	693b      	ldr	r3, [r7, #16]
 801d7ba:	689a      	ldr	r2, [r3, #8]
 801d7bc:	693b      	ldr	r3, [r7, #16]
 801d7be:	68db      	ldr	r3, [r3, #12]
 801d7c0:	429a      	cmp	r2, r3
 801d7c2:	d913      	bls.n	801d7ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801d7c4:	693b      	ldr	r3, [r7, #16]
 801d7c6:	689a      	ldr	r2, [r3, #8]
 801d7c8:	693b      	ldr	r3, [r7, #16]
 801d7ca:	68db      	ldr	r3, [r3, #12]
 801d7cc:	1ad2      	subs	r2, r2, r3
 801d7ce:	693b      	ldr	r3, [r7, #16]
 801d7d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	68da      	ldr	r2, [r3, #12]
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	689b      	ldr	r3, [r3, #8]
 801d7da:	4293      	cmp	r3, r2
 801d7dc:	bf28      	it	cs
 801d7de:	4613      	movcs	r3, r2
 801d7e0:	461a      	mov	r2, r3
 801d7e2:	6879      	ldr	r1, [r7, #4]
 801d7e4:	68f8      	ldr	r0, [r7, #12]
 801d7e6:	f001 f80f 	bl	801e808 <USBD_CtlContinueRx>
 801d7ea:	e030      	b.n	801d84e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d7f2:	b2db      	uxtb	r3, r3
 801d7f4:	2b03      	cmp	r3, #3
 801d7f6:	d10b      	bne.n	801d810 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d7fe:	691b      	ldr	r3, [r3, #16]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d005      	beq.n	801d810 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d80a:	691b      	ldr	r3, [r3, #16]
 801d80c:	68f8      	ldr	r0, [r7, #12]
 801d80e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801d810:	68f8      	ldr	r0, [r7, #12]
 801d812:	f001 f80a 	bl	801e82a <USBD_CtlSendStatus>
 801d816:	e01a      	b.n	801d84e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d81e:	b2db      	uxtb	r3, r3
 801d820:	2b03      	cmp	r3, #3
 801d822:	d114      	bne.n	801d84e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d82a:	699b      	ldr	r3, [r3, #24]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d00e      	beq.n	801d84e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d836:	699b      	ldr	r3, [r3, #24]
 801d838:	7afa      	ldrb	r2, [r7, #11]
 801d83a:	4611      	mov	r1, r2
 801d83c:	68f8      	ldr	r0, [r7, #12]
 801d83e:	4798      	blx	r3
 801d840:	4603      	mov	r3, r0
 801d842:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801d844:	7dfb      	ldrb	r3, [r7, #23]
 801d846:	2b00      	cmp	r3, #0
 801d848:	d001      	beq.n	801d84e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801d84a:	7dfb      	ldrb	r3, [r7, #23]
 801d84c:	e000      	b.n	801d850 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801d84e:	2300      	movs	r3, #0
}
 801d850:	4618      	mov	r0, r3
 801d852:	3718      	adds	r7, #24
 801d854:	46bd      	mov	sp, r7
 801d856:	bd80      	pop	{r7, pc}

0801d858 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801d858:	b580      	push	{r7, lr}
 801d85a:	b086      	sub	sp, #24
 801d85c:	af00      	add	r7, sp, #0
 801d85e:	60f8      	str	r0, [r7, #12]
 801d860:	460b      	mov	r3, r1
 801d862:	607a      	str	r2, [r7, #4]
 801d864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801d866:	7afb      	ldrb	r3, [r7, #11]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d16b      	bne.n	801d944 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	3314      	adds	r3, #20
 801d870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801d878:	2b02      	cmp	r3, #2
 801d87a:	d156      	bne.n	801d92a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801d87c:	693b      	ldr	r3, [r7, #16]
 801d87e:	689a      	ldr	r2, [r3, #8]
 801d880:	693b      	ldr	r3, [r7, #16]
 801d882:	68db      	ldr	r3, [r3, #12]
 801d884:	429a      	cmp	r2, r3
 801d886:	d914      	bls.n	801d8b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801d888:	693b      	ldr	r3, [r7, #16]
 801d88a:	689a      	ldr	r2, [r3, #8]
 801d88c:	693b      	ldr	r3, [r7, #16]
 801d88e:	68db      	ldr	r3, [r3, #12]
 801d890:	1ad2      	subs	r2, r2, r3
 801d892:	693b      	ldr	r3, [r7, #16]
 801d894:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	689b      	ldr	r3, [r3, #8]
 801d89a:	461a      	mov	r2, r3
 801d89c:	6879      	ldr	r1, [r7, #4]
 801d89e:	68f8      	ldr	r0, [r7, #12]
 801d8a0:	f000 ff84 	bl	801e7ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	2100      	movs	r1, #0
 801d8aa:	68f8      	ldr	r0, [r7, #12]
 801d8ac:	f004 faba 	bl	8021e24 <USBD_LL_PrepareReceive>
 801d8b0:	e03b      	b.n	801d92a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801d8b2:	693b      	ldr	r3, [r7, #16]
 801d8b4:	68da      	ldr	r2, [r3, #12]
 801d8b6:	693b      	ldr	r3, [r7, #16]
 801d8b8:	689b      	ldr	r3, [r3, #8]
 801d8ba:	429a      	cmp	r2, r3
 801d8bc:	d11c      	bne.n	801d8f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801d8be:	693b      	ldr	r3, [r7, #16]
 801d8c0:	685a      	ldr	r2, [r3, #4]
 801d8c2:	693b      	ldr	r3, [r7, #16]
 801d8c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801d8c6:	429a      	cmp	r2, r3
 801d8c8:	d316      	bcc.n	801d8f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801d8ca:	693b      	ldr	r3, [r7, #16]
 801d8cc:	685a      	ldr	r2, [r3, #4]
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	d20f      	bcs.n	801d8f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801d8d8:	2200      	movs	r2, #0
 801d8da:	2100      	movs	r1, #0
 801d8dc:	68f8      	ldr	r0, [r7, #12]
 801d8de:	f000 ff65 	bl	801e7ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	2200      	movs	r2, #0
 801d8e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	2200      	movs	r2, #0
 801d8ee:	2100      	movs	r1, #0
 801d8f0:	68f8      	ldr	r0, [r7, #12]
 801d8f2:	f004 fa97 	bl	8021e24 <USBD_LL_PrepareReceive>
 801d8f6:	e018      	b.n	801d92a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d8fe:	b2db      	uxtb	r3, r3
 801d900:	2b03      	cmp	r3, #3
 801d902:	d10b      	bne.n	801d91c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d90a:	68db      	ldr	r3, [r3, #12]
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d005      	beq.n	801d91c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d916:	68db      	ldr	r3, [r3, #12]
 801d918:	68f8      	ldr	r0, [r7, #12]
 801d91a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801d91c:	2180      	movs	r1, #128	; 0x80
 801d91e:	68f8      	ldr	r0, [r7, #12]
 801d920:	f004 f9d6 	bl	8021cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801d924:	68f8      	ldr	r0, [r7, #12]
 801d926:	f000 ff93 	bl	801e850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801d930:	2b01      	cmp	r3, #1
 801d932:	d122      	bne.n	801d97a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801d934:	68f8      	ldr	r0, [r7, #12]
 801d936:	f7ff fe98 	bl	801d66a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	2200      	movs	r2, #0
 801d93e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801d942:	e01a      	b.n	801d97a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d94a:	b2db      	uxtb	r3, r3
 801d94c:	2b03      	cmp	r3, #3
 801d94e:	d114      	bne.n	801d97a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d956:	695b      	ldr	r3, [r3, #20]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d00e      	beq.n	801d97a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d962:	695b      	ldr	r3, [r3, #20]
 801d964:	7afa      	ldrb	r2, [r7, #11]
 801d966:	4611      	mov	r1, r2
 801d968:	68f8      	ldr	r0, [r7, #12]
 801d96a:	4798      	blx	r3
 801d96c:	4603      	mov	r3, r0
 801d96e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801d970:	7dfb      	ldrb	r3, [r7, #23]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d001      	beq.n	801d97a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801d976:	7dfb      	ldrb	r3, [r7, #23]
 801d978:	e000      	b.n	801d97c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801d97a:	2300      	movs	r3, #0
}
 801d97c:	4618      	mov	r0, r3
 801d97e:	3718      	adds	r7, #24
 801d980:	46bd      	mov	sp, r7
 801d982:	bd80      	pop	{r7, pc}

0801d984 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b082      	sub	sp, #8
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	2201      	movs	r2, #1
 801d990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	2200      	movs	r2, #0
 801d998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	2200      	movs	r2, #0
 801d9a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	2200      	movs	r2, #0
 801d9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d101      	bne.n	801d9b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801d9b4:	2303      	movs	r3, #3
 801d9b6:	e02f      	b.n	801da18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d00f      	beq.n	801d9e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d009      	beq.n	801d9e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d9d4:	685b      	ldr	r3, [r3, #4]
 801d9d6:	687a      	ldr	r2, [r7, #4]
 801d9d8:	6852      	ldr	r2, [r2, #4]
 801d9da:	b2d2      	uxtb	r2, r2
 801d9dc:	4611      	mov	r1, r2
 801d9de:	6878      	ldr	r0, [r7, #4]
 801d9e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d9e2:	2340      	movs	r3, #64	; 0x40
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	2100      	movs	r1, #0
 801d9e8:	6878      	ldr	r0, [r7, #4]
 801d9ea:	f004 f92c 	bl	8021c46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	2201      	movs	r2, #1
 801d9f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	2240      	movs	r2, #64	; 0x40
 801d9fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d9fe:	2340      	movs	r3, #64	; 0x40
 801da00:	2200      	movs	r2, #0
 801da02:	2180      	movs	r1, #128	; 0x80
 801da04:	6878      	ldr	r0, [r7, #4]
 801da06:	f004 f91e 	bl	8021c46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	2201      	movs	r2, #1
 801da0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	2240      	movs	r2, #64	; 0x40
 801da14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801da16:	2300      	movs	r3, #0
}
 801da18:	4618      	mov	r0, r3
 801da1a:	3708      	adds	r7, #8
 801da1c:	46bd      	mov	sp, r7
 801da1e:	bd80      	pop	{r7, pc}

0801da20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801da20:	b480      	push	{r7}
 801da22:	b083      	sub	sp, #12
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
 801da28:	460b      	mov	r3, r1
 801da2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	78fa      	ldrb	r2, [r7, #3]
 801da30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801da32:	2300      	movs	r3, #0
}
 801da34:	4618      	mov	r0, r3
 801da36:	370c      	adds	r7, #12
 801da38:	46bd      	mov	sp, r7
 801da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da3e:	4770      	bx	lr

0801da40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801da40:	b480      	push	{r7}
 801da42:	b083      	sub	sp, #12
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801da4e:	b2da      	uxtb	r2, r3
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	2204      	movs	r2, #4
 801da5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801da5e:	2300      	movs	r3, #0
}
 801da60:	4618      	mov	r0, r3
 801da62:	370c      	adds	r7, #12
 801da64:	46bd      	mov	sp, r7
 801da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da6a:	4770      	bx	lr

0801da6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801da6c:	b480      	push	{r7}
 801da6e:	b083      	sub	sp, #12
 801da70:	af00      	add	r7, sp, #0
 801da72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801da7a:	b2db      	uxtb	r3, r3
 801da7c:	2b04      	cmp	r3, #4
 801da7e:	d106      	bne.n	801da8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801da86:	b2da      	uxtb	r2, r3
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801da8e:	2300      	movs	r3, #0
}
 801da90:	4618      	mov	r0, r3
 801da92:	370c      	adds	r7, #12
 801da94:	46bd      	mov	sp, r7
 801da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da9a:	4770      	bx	lr

0801da9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b082      	sub	sp, #8
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d101      	bne.n	801dab2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801daae:	2303      	movs	r3, #3
 801dab0:	e012      	b.n	801dad8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dab8:	b2db      	uxtb	r3, r3
 801daba:	2b03      	cmp	r3, #3
 801dabc:	d10b      	bne.n	801dad6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dac4:	69db      	ldr	r3, [r3, #28]
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d005      	beq.n	801dad6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dad0:	69db      	ldr	r3, [r3, #28]
 801dad2:	6878      	ldr	r0, [r7, #4]
 801dad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801dad6:	2300      	movs	r3, #0
}
 801dad8:	4618      	mov	r0, r3
 801dada:	3708      	adds	r7, #8
 801dadc:	46bd      	mov	sp, r7
 801dade:	bd80      	pop	{r7, pc}

0801dae0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b082      	sub	sp, #8
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
 801dae8:	460b      	mov	r3, r1
 801daea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d101      	bne.n	801dafa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801daf6:	2303      	movs	r3, #3
 801daf8:	e014      	b.n	801db24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801db00:	b2db      	uxtb	r3, r3
 801db02:	2b03      	cmp	r3, #3
 801db04:	d10d      	bne.n	801db22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801db0c:	6a1b      	ldr	r3, [r3, #32]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d007      	beq.n	801db22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801db18:	6a1b      	ldr	r3, [r3, #32]
 801db1a:	78fa      	ldrb	r2, [r7, #3]
 801db1c:	4611      	mov	r1, r2
 801db1e:	6878      	ldr	r0, [r7, #4]
 801db20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801db22:	2300      	movs	r3, #0
}
 801db24:	4618      	mov	r0, r3
 801db26:	3708      	adds	r7, #8
 801db28:	46bd      	mov	sp, r7
 801db2a:	bd80      	pop	{r7, pc}

0801db2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b082      	sub	sp, #8
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
 801db34:	460b      	mov	r3, r1
 801db36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d101      	bne.n	801db46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801db42:	2303      	movs	r3, #3
 801db44:	e014      	b.n	801db70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801db4c:	b2db      	uxtb	r3, r3
 801db4e:	2b03      	cmp	r3, #3
 801db50:	d10d      	bne.n	801db6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801db58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d007      	beq.n	801db6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801db64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db66:	78fa      	ldrb	r2, [r7, #3]
 801db68:	4611      	mov	r1, r2
 801db6a:	6878      	ldr	r0, [r7, #4]
 801db6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801db6e:	2300      	movs	r3, #0
}
 801db70:	4618      	mov	r0, r3
 801db72:	3708      	adds	r7, #8
 801db74:	46bd      	mov	sp, r7
 801db76:	bd80      	pop	{r7, pc}

0801db78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801db78:	b480      	push	{r7}
 801db7a:	b083      	sub	sp, #12
 801db7c:	af00      	add	r7, sp, #0
 801db7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801db80:	2300      	movs	r3, #0
}
 801db82:	4618      	mov	r0, r3
 801db84:	370c      	adds	r7, #12
 801db86:	46bd      	mov	sp, r7
 801db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db8c:	4770      	bx	lr

0801db8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801db8e:	b580      	push	{r7, lr}
 801db90:	b082      	sub	sp, #8
 801db92:	af00      	add	r7, sp, #0
 801db94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	2201      	movs	r2, #1
 801db9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d009      	beq.n	801dbbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dbae:	685b      	ldr	r3, [r3, #4]
 801dbb0:	687a      	ldr	r2, [r7, #4]
 801dbb2:	6852      	ldr	r2, [r2, #4]
 801dbb4:	b2d2      	uxtb	r2, r2
 801dbb6:	4611      	mov	r1, r2
 801dbb8:	6878      	ldr	r0, [r7, #4]
 801dbba:	4798      	blx	r3
  }

  return USBD_OK;
 801dbbc:	2300      	movs	r3, #0
}
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	3708      	adds	r7, #8
 801dbc2:	46bd      	mov	sp, r7
 801dbc4:	bd80      	pop	{r7, pc}

0801dbc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801dbc6:	b480      	push	{r7}
 801dbc8:	b087      	sub	sp, #28
 801dbca:	af00      	add	r7, sp, #0
 801dbcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801dbd2:	697b      	ldr	r3, [r7, #20]
 801dbd4:	781b      	ldrb	r3, [r3, #0]
 801dbd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	3301      	adds	r3, #1
 801dbdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801dbde:	697b      	ldr	r3, [r7, #20]
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801dbe4:	8a3b      	ldrh	r3, [r7, #16]
 801dbe6:	021b      	lsls	r3, r3, #8
 801dbe8:	b21a      	sxth	r2, r3
 801dbea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dbee:	4313      	orrs	r3, r2
 801dbf0:	b21b      	sxth	r3, r3
 801dbf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801dbf4:	89fb      	ldrh	r3, [r7, #14]
}
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	371c      	adds	r7, #28
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc00:	4770      	bx	lr
	...

0801dc04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b084      	sub	sp, #16
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
 801dc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801dc0e:	2300      	movs	r3, #0
 801dc10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801dc12:	683b      	ldr	r3, [r7, #0]
 801dc14:	781b      	ldrb	r3, [r3, #0]
 801dc16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc1a:	2b40      	cmp	r3, #64	; 0x40
 801dc1c:	d005      	beq.n	801dc2a <USBD_StdDevReq+0x26>
 801dc1e:	2b40      	cmp	r3, #64	; 0x40
 801dc20:	d853      	bhi.n	801dcca <USBD_StdDevReq+0xc6>
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d00b      	beq.n	801dc3e <USBD_StdDevReq+0x3a>
 801dc26:	2b20      	cmp	r3, #32
 801dc28:	d14f      	bne.n	801dcca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dc30:	689b      	ldr	r3, [r3, #8]
 801dc32:	6839      	ldr	r1, [r7, #0]
 801dc34:	6878      	ldr	r0, [r7, #4]
 801dc36:	4798      	blx	r3
 801dc38:	4603      	mov	r3, r0
 801dc3a:	73fb      	strb	r3, [r7, #15]
      break;
 801dc3c:	e04a      	b.n	801dcd4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801dc3e:	683b      	ldr	r3, [r7, #0]
 801dc40:	785b      	ldrb	r3, [r3, #1]
 801dc42:	2b09      	cmp	r3, #9
 801dc44:	d83b      	bhi.n	801dcbe <USBD_StdDevReq+0xba>
 801dc46:	a201      	add	r2, pc, #4	; (adr r2, 801dc4c <USBD_StdDevReq+0x48>)
 801dc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc4c:	0801dca1 	.word	0x0801dca1
 801dc50:	0801dcb5 	.word	0x0801dcb5
 801dc54:	0801dcbf 	.word	0x0801dcbf
 801dc58:	0801dcab 	.word	0x0801dcab
 801dc5c:	0801dcbf 	.word	0x0801dcbf
 801dc60:	0801dc7f 	.word	0x0801dc7f
 801dc64:	0801dc75 	.word	0x0801dc75
 801dc68:	0801dcbf 	.word	0x0801dcbf
 801dc6c:	0801dc97 	.word	0x0801dc97
 801dc70:	0801dc89 	.word	0x0801dc89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801dc74:	6839      	ldr	r1, [r7, #0]
 801dc76:	6878      	ldr	r0, [r7, #4]
 801dc78:	f000 f9de 	bl	801e038 <USBD_GetDescriptor>
          break;
 801dc7c:	e024      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801dc7e:	6839      	ldr	r1, [r7, #0]
 801dc80:	6878      	ldr	r0, [r7, #4]
 801dc82:	f000 fb43 	bl	801e30c <USBD_SetAddress>
          break;
 801dc86:	e01f      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801dc88:	6839      	ldr	r1, [r7, #0]
 801dc8a:	6878      	ldr	r0, [r7, #4]
 801dc8c:	f000 fb82 	bl	801e394 <USBD_SetConfig>
 801dc90:	4603      	mov	r3, r0
 801dc92:	73fb      	strb	r3, [r7, #15]
          break;
 801dc94:	e018      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801dc96:	6839      	ldr	r1, [r7, #0]
 801dc98:	6878      	ldr	r0, [r7, #4]
 801dc9a:	f000 fc21 	bl	801e4e0 <USBD_GetConfig>
          break;
 801dc9e:	e013      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801dca0:	6839      	ldr	r1, [r7, #0]
 801dca2:	6878      	ldr	r0, [r7, #4]
 801dca4:	f000 fc52 	bl	801e54c <USBD_GetStatus>
          break;
 801dca8:	e00e      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801dcaa:	6839      	ldr	r1, [r7, #0]
 801dcac:	6878      	ldr	r0, [r7, #4]
 801dcae:	f000 fc81 	bl	801e5b4 <USBD_SetFeature>
          break;
 801dcb2:	e009      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801dcb4:	6839      	ldr	r1, [r7, #0]
 801dcb6:	6878      	ldr	r0, [r7, #4]
 801dcb8:	f000 fc90 	bl	801e5dc <USBD_ClrFeature>
          break;
 801dcbc:	e004      	b.n	801dcc8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801dcbe:	6839      	ldr	r1, [r7, #0]
 801dcc0:	6878      	ldr	r0, [r7, #4]
 801dcc2:	f000 fce7 	bl	801e694 <USBD_CtlError>
          break;
 801dcc6:	bf00      	nop
      }
      break;
 801dcc8:	e004      	b.n	801dcd4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801dcca:	6839      	ldr	r1, [r7, #0]
 801dccc:	6878      	ldr	r0, [r7, #4]
 801dcce:	f000 fce1 	bl	801e694 <USBD_CtlError>
      break;
 801dcd2:	bf00      	nop
  }

  return ret;
 801dcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	3710      	adds	r7, #16
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}
 801dcde:	bf00      	nop

0801dce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dce0:	b580      	push	{r7, lr}
 801dce2:	b084      	sub	sp, #16
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
 801dce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801dcea:	2300      	movs	r3, #0
 801dcec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	781b      	ldrb	r3, [r3, #0]
 801dcf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dcf6:	2b40      	cmp	r3, #64	; 0x40
 801dcf8:	d005      	beq.n	801dd06 <USBD_StdItfReq+0x26>
 801dcfa:	2b40      	cmp	r3, #64	; 0x40
 801dcfc:	d82f      	bhi.n	801dd5e <USBD_StdItfReq+0x7e>
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d001      	beq.n	801dd06 <USBD_StdItfReq+0x26>
 801dd02:	2b20      	cmp	r3, #32
 801dd04:	d12b      	bne.n	801dd5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dd0c:	b2db      	uxtb	r3, r3
 801dd0e:	3b01      	subs	r3, #1
 801dd10:	2b02      	cmp	r3, #2
 801dd12:	d81d      	bhi.n	801dd50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801dd14:	683b      	ldr	r3, [r7, #0]
 801dd16:	889b      	ldrh	r3, [r3, #4]
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	2b01      	cmp	r3, #1
 801dd1c:	d813      	bhi.n	801dd46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dd24:	689b      	ldr	r3, [r3, #8]
 801dd26:	6839      	ldr	r1, [r7, #0]
 801dd28:	6878      	ldr	r0, [r7, #4]
 801dd2a:	4798      	blx	r3
 801dd2c:	4603      	mov	r3, r0
 801dd2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801dd30:	683b      	ldr	r3, [r7, #0]
 801dd32:	88db      	ldrh	r3, [r3, #6]
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d110      	bne.n	801dd5a <USBD_StdItfReq+0x7a>
 801dd38:	7bfb      	ldrb	r3, [r7, #15]
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d10d      	bne.n	801dd5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801dd3e:	6878      	ldr	r0, [r7, #4]
 801dd40:	f000 fd73 	bl	801e82a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801dd44:	e009      	b.n	801dd5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801dd46:	6839      	ldr	r1, [r7, #0]
 801dd48:	6878      	ldr	r0, [r7, #4]
 801dd4a:	f000 fca3 	bl	801e694 <USBD_CtlError>
          break;
 801dd4e:	e004      	b.n	801dd5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801dd50:	6839      	ldr	r1, [r7, #0]
 801dd52:	6878      	ldr	r0, [r7, #4]
 801dd54:	f000 fc9e 	bl	801e694 <USBD_CtlError>
          break;
 801dd58:	e000      	b.n	801dd5c <USBD_StdItfReq+0x7c>
          break;
 801dd5a:	bf00      	nop
      }
      break;
 801dd5c:	e004      	b.n	801dd68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801dd5e:	6839      	ldr	r1, [r7, #0]
 801dd60:	6878      	ldr	r0, [r7, #4]
 801dd62:	f000 fc97 	bl	801e694 <USBD_CtlError>
      break;
 801dd66:	bf00      	nop
  }

  return ret;
 801dd68:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	3710      	adds	r7, #16
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	bd80      	pop	{r7, pc}

0801dd72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801dd72:	b580      	push	{r7, lr}
 801dd74:	b084      	sub	sp, #16
 801dd76:	af00      	add	r7, sp, #0
 801dd78:	6078      	str	r0, [r7, #4]
 801dd7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	889b      	ldrh	r3, [r3, #4]
 801dd84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801dd86:	683b      	ldr	r3, [r7, #0]
 801dd88:	781b      	ldrb	r3, [r3, #0]
 801dd8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dd8e:	2b40      	cmp	r3, #64	; 0x40
 801dd90:	d007      	beq.n	801dda2 <USBD_StdEPReq+0x30>
 801dd92:	2b40      	cmp	r3, #64	; 0x40
 801dd94:	f200 8145 	bhi.w	801e022 <USBD_StdEPReq+0x2b0>
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d00c      	beq.n	801ddb6 <USBD_StdEPReq+0x44>
 801dd9c:	2b20      	cmp	r3, #32
 801dd9e:	f040 8140 	bne.w	801e022 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801dda8:	689b      	ldr	r3, [r3, #8]
 801ddaa:	6839      	ldr	r1, [r7, #0]
 801ddac:	6878      	ldr	r0, [r7, #4]
 801ddae:	4798      	blx	r3
 801ddb0:	4603      	mov	r3, r0
 801ddb2:	73fb      	strb	r3, [r7, #15]
      break;
 801ddb4:	e13a      	b.n	801e02c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ddb6:	683b      	ldr	r3, [r7, #0]
 801ddb8:	785b      	ldrb	r3, [r3, #1]
 801ddba:	2b03      	cmp	r3, #3
 801ddbc:	d007      	beq.n	801ddce <USBD_StdEPReq+0x5c>
 801ddbe:	2b03      	cmp	r3, #3
 801ddc0:	f300 8129 	bgt.w	801e016 <USBD_StdEPReq+0x2a4>
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d07f      	beq.n	801dec8 <USBD_StdEPReq+0x156>
 801ddc8:	2b01      	cmp	r3, #1
 801ddca:	d03c      	beq.n	801de46 <USBD_StdEPReq+0xd4>
 801ddcc:	e123      	b.n	801e016 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ddd4:	b2db      	uxtb	r3, r3
 801ddd6:	2b02      	cmp	r3, #2
 801ddd8:	d002      	beq.n	801dde0 <USBD_StdEPReq+0x6e>
 801ddda:	2b03      	cmp	r3, #3
 801dddc:	d016      	beq.n	801de0c <USBD_StdEPReq+0x9a>
 801ddde:	e02c      	b.n	801de3a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801dde0:	7bbb      	ldrb	r3, [r7, #14]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d00d      	beq.n	801de02 <USBD_StdEPReq+0x90>
 801dde6:	7bbb      	ldrb	r3, [r7, #14]
 801dde8:	2b80      	cmp	r3, #128	; 0x80
 801ddea:	d00a      	beq.n	801de02 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801ddec:	7bbb      	ldrb	r3, [r7, #14]
 801ddee:	4619      	mov	r1, r3
 801ddf0:	6878      	ldr	r0, [r7, #4]
 801ddf2:	f003 ff6d 	bl	8021cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801ddf6:	2180      	movs	r1, #128	; 0x80
 801ddf8:	6878      	ldr	r0, [r7, #4]
 801ddfa:	f003 ff69 	bl	8021cd0 <USBD_LL_StallEP>
 801ddfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801de00:	e020      	b.n	801de44 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801de02:	6839      	ldr	r1, [r7, #0]
 801de04:	6878      	ldr	r0, [r7, #4]
 801de06:	f000 fc45 	bl	801e694 <USBD_CtlError>
              break;
 801de0a:	e01b      	b.n	801de44 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	885b      	ldrh	r3, [r3, #2]
 801de10:	2b00      	cmp	r3, #0
 801de12:	d10e      	bne.n	801de32 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801de14:	7bbb      	ldrb	r3, [r7, #14]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d00b      	beq.n	801de32 <USBD_StdEPReq+0xc0>
 801de1a:	7bbb      	ldrb	r3, [r7, #14]
 801de1c:	2b80      	cmp	r3, #128	; 0x80
 801de1e:	d008      	beq.n	801de32 <USBD_StdEPReq+0xc0>
 801de20:	683b      	ldr	r3, [r7, #0]
 801de22:	88db      	ldrh	r3, [r3, #6]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d104      	bne.n	801de32 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801de28:	7bbb      	ldrb	r3, [r7, #14]
 801de2a:	4619      	mov	r1, r3
 801de2c:	6878      	ldr	r0, [r7, #4]
 801de2e:	f003 ff4f 	bl	8021cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801de32:	6878      	ldr	r0, [r7, #4]
 801de34:	f000 fcf9 	bl	801e82a <USBD_CtlSendStatus>

              break;
 801de38:	e004      	b.n	801de44 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801de3a:	6839      	ldr	r1, [r7, #0]
 801de3c:	6878      	ldr	r0, [r7, #4]
 801de3e:	f000 fc29 	bl	801e694 <USBD_CtlError>
              break;
 801de42:	bf00      	nop
          }
          break;
 801de44:	e0ec      	b.n	801e020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801de4c:	b2db      	uxtb	r3, r3
 801de4e:	2b02      	cmp	r3, #2
 801de50:	d002      	beq.n	801de58 <USBD_StdEPReq+0xe6>
 801de52:	2b03      	cmp	r3, #3
 801de54:	d016      	beq.n	801de84 <USBD_StdEPReq+0x112>
 801de56:	e030      	b.n	801deba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801de58:	7bbb      	ldrb	r3, [r7, #14]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d00d      	beq.n	801de7a <USBD_StdEPReq+0x108>
 801de5e:	7bbb      	ldrb	r3, [r7, #14]
 801de60:	2b80      	cmp	r3, #128	; 0x80
 801de62:	d00a      	beq.n	801de7a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801de64:	7bbb      	ldrb	r3, [r7, #14]
 801de66:	4619      	mov	r1, r3
 801de68:	6878      	ldr	r0, [r7, #4]
 801de6a:	f003 ff31 	bl	8021cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801de6e:	2180      	movs	r1, #128	; 0x80
 801de70:	6878      	ldr	r0, [r7, #4]
 801de72:	f003 ff2d 	bl	8021cd0 <USBD_LL_StallEP>
 801de76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801de78:	e025      	b.n	801dec6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801de7a:	6839      	ldr	r1, [r7, #0]
 801de7c:	6878      	ldr	r0, [r7, #4]
 801de7e:	f000 fc09 	bl	801e694 <USBD_CtlError>
              break;
 801de82:	e020      	b.n	801dec6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801de84:	683b      	ldr	r3, [r7, #0]
 801de86:	885b      	ldrh	r3, [r3, #2]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d11b      	bne.n	801dec4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801de8c:	7bbb      	ldrb	r3, [r7, #14]
 801de8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de92:	2b00      	cmp	r3, #0
 801de94:	d004      	beq.n	801dea0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801de96:	7bbb      	ldrb	r3, [r7, #14]
 801de98:	4619      	mov	r1, r3
 801de9a:	6878      	ldr	r0, [r7, #4]
 801de9c:	f003 ff37 	bl	8021d0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801dea0:	6878      	ldr	r0, [r7, #4]
 801dea2:	f000 fcc2 	bl	801e82a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801deac:	689b      	ldr	r3, [r3, #8]
 801deae:	6839      	ldr	r1, [r7, #0]
 801deb0:	6878      	ldr	r0, [r7, #4]
 801deb2:	4798      	blx	r3
 801deb4:	4603      	mov	r3, r0
 801deb6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801deb8:	e004      	b.n	801dec4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801deba:	6839      	ldr	r1, [r7, #0]
 801debc:	6878      	ldr	r0, [r7, #4]
 801debe:	f000 fbe9 	bl	801e694 <USBD_CtlError>
              break;
 801dec2:	e000      	b.n	801dec6 <USBD_StdEPReq+0x154>
              break;
 801dec4:	bf00      	nop
          }
          break;
 801dec6:	e0ab      	b.n	801e020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dece:	b2db      	uxtb	r3, r3
 801ded0:	2b02      	cmp	r3, #2
 801ded2:	d002      	beq.n	801deda <USBD_StdEPReq+0x168>
 801ded4:	2b03      	cmp	r3, #3
 801ded6:	d032      	beq.n	801df3e <USBD_StdEPReq+0x1cc>
 801ded8:	e097      	b.n	801e00a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801deda:	7bbb      	ldrb	r3, [r7, #14]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d007      	beq.n	801def0 <USBD_StdEPReq+0x17e>
 801dee0:	7bbb      	ldrb	r3, [r7, #14]
 801dee2:	2b80      	cmp	r3, #128	; 0x80
 801dee4:	d004      	beq.n	801def0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801dee6:	6839      	ldr	r1, [r7, #0]
 801dee8:	6878      	ldr	r0, [r7, #4]
 801deea:	f000 fbd3 	bl	801e694 <USBD_CtlError>
                break;
 801deee:	e091      	b.n	801e014 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801def0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801def4:	2b00      	cmp	r3, #0
 801def6:	da0b      	bge.n	801df10 <USBD_StdEPReq+0x19e>
 801def8:	7bbb      	ldrb	r3, [r7, #14]
 801defa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801defe:	4613      	mov	r3, r2
 801df00:	009b      	lsls	r3, r3, #2
 801df02:	4413      	add	r3, r2
 801df04:	009b      	lsls	r3, r3, #2
 801df06:	3310      	adds	r3, #16
 801df08:	687a      	ldr	r2, [r7, #4]
 801df0a:	4413      	add	r3, r2
 801df0c:	3304      	adds	r3, #4
 801df0e:	e00b      	b.n	801df28 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801df10:	7bbb      	ldrb	r3, [r7, #14]
 801df12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801df16:	4613      	mov	r3, r2
 801df18:	009b      	lsls	r3, r3, #2
 801df1a:	4413      	add	r3, r2
 801df1c:	009b      	lsls	r3, r3, #2
 801df1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801df22:	687a      	ldr	r2, [r7, #4]
 801df24:	4413      	add	r3, r2
 801df26:	3304      	adds	r3, #4
 801df28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801df2a:	68bb      	ldr	r3, [r7, #8]
 801df2c:	2200      	movs	r2, #0
 801df2e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801df30:	68bb      	ldr	r3, [r7, #8]
 801df32:	2202      	movs	r2, #2
 801df34:	4619      	mov	r1, r3
 801df36:	6878      	ldr	r0, [r7, #4]
 801df38:	f000 fc1d 	bl	801e776 <USBD_CtlSendData>
              break;
 801df3c:	e06a      	b.n	801e014 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801df3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801df42:	2b00      	cmp	r3, #0
 801df44:	da11      	bge.n	801df6a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801df46:	7bbb      	ldrb	r3, [r7, #14]
 801df48:	f003 020f 	and.w	r2, r3, #15
 801df4c:	6879      	ldr	r1, [r7, #4]
 801df4e:	4613      	mov	r3, r2
 801df50:	009b      	lsls	r3, r3, #2
 801df52:	4413      	add	r3, r2
 801df54:	009b      	lsls	r3, r3, #2
 801df56:	440b      	add	r3, r1
 801df58:	3324      	adds	r3, #36	; 0x24
 801df5a:	881b      	ldrh	r3, [r3, #0]
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d117      	bne.n	801df90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801df60:	6839      	ldr	r1, [r7, #0]
 801df62:	6878      	ldr	r0, [r7, #4]
 801df64:	f000 fb96 	bl	801e694 <USBD_CtlError>
                  break;
 801df68:	e054      	b.n	801e014 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801df6a:	7bbb      	ldrb	r3, [r7, #14]
 801df6c:	f003 020f 	and.w	r2, r3, #15
 801df70:	6879      	ldr	r1, [r7, #4]
 801df72:	4613      	mov	r3, r2
 801df74:	009b      	lsls	r3, r3, #2
 801df76:	4413      	add	r3, r2
 801df78:	009b      	lsls	r3, r3, #2
 801df7a:	440b      	add	r3, r1
 801df7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801df80:	881b      	ldrh	r3, [r3, #0]
 801df82:	2b00      	cmp	r3, #0
 801df84:	d104      	bne.n	801df90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801df86:	6839      	ldr	r1, [r7, #0]
 801df88:	6878      	ldr	r0, [r7, #4]
 801df8a:	f000 fb83 	bl	801e694 <USBD_CtlError>
                  break;
 801df8e:	e041      	b.n	801e014 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801df90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801df94:	2b00      	cmp	r3, #0
 801df96:	da0b      	bge.n	801dfb0 <USBD_StdEPReq+0x23e>
 801df98:	7bbb      	ldrb	r3, [r7, #14]
 801df9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801df9e:	4613      	mov	r3, r2
 801dfa0:	009b      	lsls	r3, r3, #2
 801dfa2:	4413      	add	r3, r2
 801dfa4:	009b      	lsls	r3, r3, #2
 801dfa6:	3310      	adds	r3, #16
 801dfa8:	687a      	ldr	r2, [r7, #4]
 801dfaa:	4413      	add	r3, r2
 801dfac:	3304      	adds	r3, #4
 801dfae:	e00b      	b.n	801dfc8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801dfb0:	7bbb      	ldrb	r3, [r7, #14]
 801dfb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801dfb6:	4613      	mov	r3, r2
 801dfb8:	009b      	lsls	r3, r3, #2
 801dfba:	4413      	add	r3, r2
 801dfbc:	009b      	lsls	r3, r3, #2
 801dfbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801dfc2:	687a      	ldr	r2, [r7, #4]
 801dfc4:	4413      	add	r3, r2
 801dfc6:	3304      	adds	r3, #4
 801dfc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801dfca:	7bbb      	ldrb	r3, [r7, #14]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d002      	beq.n	801dfd6 <USBD_StdEPReq+0x264>
 801dfd0:	7bbb      	ldrb	r3, [r7, #14]
 801dfd2:	2b80      	cmp	r3, #128	; 0x80
 801dfd4:	d103      	bne.n	801dfde <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801dfd6:	68bb      	ldr	r3, [r7, #8]
 801dfd8:	2200      	movs	r2, #0
 801dfda:	601a      	str	r2, [r3, #0]
 801dfdc:	e00e      	b.n	801dffc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801dfde:	7bbb      	ldrb	r3, [r7, #14]
 801dfe0:	4619      	mov	r1, r3
 801dfe2:	6878      	ldr	r0, [r7, #4]
 801dfe4:	f003 feb2 	bl	8021d4c <USBD_LL_IsStallEP>
 801dfe8:	4603      	mov	r3, r0
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d003      	beq.n	801dff6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801dfee:	68bb      	ldr	r3, [r7, #8]
 801dff0:	2201      	movs	r2, #1
 801dff2:	601a      	str	r2, [r3, #0]
 801dff4:	e002      	b.n	801dffc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801dff6:	68bb      	ldr	r3, [r7, #8]
 801dff8:	2200      	movs	r2, #0
 801dffa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801dffc:	68bb      	ldr	r3, [r7, #8]
 801dffe:	2202      	movs	r2, #2
 801e000:	4619      	mov	r1, r3
 801e002:	6878      	ldr	r0, [r7, #4]
 801e004:	f000 fbb7 	bl	801e776 <USBD_CtlSendData>
              break;
 801e008:	e004      	b.n	801e014 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801e00a:	6839      	ldr	r1, [r7, #0]
 801e00c:	6878      	ldr	r0, [r7, #4]
 801e00e:	f000 fb41 	bl	801e694 <USBD_CtlError>
              break;
 801e012:	bf00      	nop
          }
          break;
 801e014:	e004      	b.n	801e020 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801e016:	6839      	ldr	r1, [r7, #0]
 801e018:	6878      	ldr	r0, [r7, #4]
 801e01a:	f000 fb3b 	bl	801e694 <USBD_CtlError>
          break;
 801e01e:	bf00      	nop
      }
      break;
 801e020:	e004      	b.n	801e02c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801e022:	6839      	ldr	r1, [r7, #0]
 801e024:	6878      	ldr	r0, [r7, #4]
 801e026:	f000 fb35 	bl	801e694 <USBD_CtlError>
      break;
 801e02a:	bf00      	nop
  }

  return ret;
 801e02c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e02e:	4618      	mov	r0, r3
 801e030:	3710      	adds	r7, #16
 801e032:	46bd      	mov	sp, r7
 801e034:	bd80      	pop	{r7, pc}
	...

0801e038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e038:	b580      	push	{r7, lr}
 801e03a:	b084      	sub	sp, #16
 801e03c:	af00      	add	r7, sp, #0
 801e03e:	6078      	str	r0, [r7, #4]
 801e040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801e042:	2300      	movs	r3, #0
 801e044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801e046:	2300      	movs	r3, #0
 801e048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801e04a:	2300      	movs	r3, #0
 801e04c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801e04e:	683b      	ldr	r3, [r7, #0]
 801e050:	885b      	ldrh	r3, [r3, #2]
 801e052:	0a1b      	lsrs	r3, r3, #8
 801e054:	b29b      	uxth	r3, r3
 801e056:	3b01      	subs	r3, #1
 801e058:	2b06      	cmp	r3, #6
 801e05a:	f200 8128 	bhi.w	801e2ae <USBD_GetDescriptor+0x276>
 801e05e:	a201      	add	r2, pc, #4	; (adr r2, 801e064 <USBD_GetDescriptor+0x2c>)
 801e060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e064:	0801e081 	.word	0x0801e081
 801e068:	0801e099 	.word	0x0801e099
 801e06c:	0801e0d9 	.word	0x0801e0d9
 801e070:	0801e2af 	.word	0x0801e2af
 801e074:	0801e2af 	.word	0x0801e2af
 801e078:	0801e24f 	.word	0x0801e24f
 801e07c:	0801e27b 	.word	0x0801e27b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	687a      	ldr	r2, [r7, #4]
 801e08a:	7c12      	ldrb	r2, [r2, #16]
 801e08c:	f107 0108 	add.w	r1, r7, #8
 801e090:	4610      	mov	r0, r2
 801e092:	4798      	blx	r3
 801e094:	60f8      	str	r0, [r7, #12]
      break;
 801e096:	e112      	b.n	801e2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	7c1b      	ldrb	r3, [r3, #16]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d10d      	bne.n	801e0bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0a8:	f107 0208 	add.w	r2, r7, #8
 801e0ac:	4610      	mov	r0, r2
 801e0ae:	4798      	blx	r3
 801e0b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	3301      	adds	r3, #1
 801e0b6:	2202      	movs	r2, #2
 801e0b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801e0ba:	e100      	b.n	801e2be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0c4:	f107 0208 	add.w	r2, r7, #8
 801e0c8:	4610      	mov	r0, r2
 801e0ca:	4798      	blx	r3
 801e0cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	3301      	adds	r3, #1
 801e0d2:	2202      	movs	r2, #2
 801e0d4:	701a      	strb	r2, [r3, #0]
      break;
 801e0d6:	e0f2      	b.n	801e2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801e0d8:	683b      	ldr	r3, [r7, #0]
 801e0da:	885b      	ldrh	r3, [r3, #2]
 801e0dc:	b2db      	uxtb	r3, r3
 801e0de:	2b05      	cmp	r3, #5
 801e0e0:	f200 80ac 	bhi.w	801e23c <USBD_GetDescriptor+0x204>
 801e0e4:	a201      	add	r2, pc, #4	; (adr r2, 801e0ec <USBD_GetDescriptor+0xb4>)
 801e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0ea:	bf00      	nop
 801e0ec:	0801e105 	.word	0x0801e105
 801e0f0:	0801e139 	.word	0x0801e139
 801e0f4:	0801e16d 	.word	0x0801e16d
 801e0f8:	0801e1a1 	.word	0x0801e1a1
 801e0fc:	0801e1d5 	.word	0x0801e1d5
 801e100:	0801e209 	.word	0x0801e209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e10a:	685b      	ldr	r3, [r3, #4]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d00b      	beq.n	801e128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e116:	685b      	ldr	r3, [r3, #4]
 801e118:	687a      	ldr	r2, [r7, #4]
 801e11a:	7c12      	ldrb	r2, [r2, #16]
 801e11c:	f107 0108 	add.w	r1, r7, #8
 801e120:	4610      	mov	r0, r2
 801e122:	4798      	blx	r3
 801e124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e126:	e091      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e128:	6839      	ldr	r1, [r7, #0]
 801e12a:	6878      	ldr	r0, [r7, #4]
 801e12c:	f000 fab2 	bl	801e694 <USBD_CtlError>
            err++;
 801e130:	7afb      	ldrb	r3, [r7, #11]
 801e132:	3301      	adds	r3, #1
 801e134:	72fb      	strb	r3, [r7, #11]
          break;
 801e136:	e089      	b.n	801e24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e13e:	689b      	ldr	r3, [r3, #8]
 801e140:	2b00      	cmp	r3, #0
 801e142:	d00b      	beq.n	801e15c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e14a:	689b      	ldr	r3, [r3, #8]
 801e14c:	687a      	ldr	r2, [r7, #4]
 801e14e:	7c12      	ldrb	r2, [r2, #16]
 801e150:	f107 0108 	add.w	r1, r7, #8
 801e154:	4610      	mov	r0, r2
 801e156:	4798      	blx	r3
 801e158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e15a:	e077      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e15c:	6839      	ldr	r1, [r7, #0]
 801e15e:	6878      	ldr	r0, [r7, #4]
 801e160:	f000 fa98 	bl	801e694 <USBD_CtlError>
            err++;
 801e164:	7afb      	ldrb	r3, [r7, #11]
 801e166:	3301      	adds	r3, #1
 801e168:	72fb      	strb	r3, [r7, #11]
          break;
 801e16a:	e06f      	b.n	801e24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e172:	68db      	ldr	r3, [r3, #12]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d00b      	beq.n	801e190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e17e:	68db      	ldr	r3, [r3, #12]
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	7c12      	ldrb	r2, [r2, #16]
 801e184:	f107 0108 	add.w	r1, r7, #8
 801e188:	4610      	mov	r0, r2
 801e18a:	4798      	blx	r3
 801e18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e18e:	e05d      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e190:	6839      	ldr	r1, [r7, #0]
 801e192:	6878      	ldr	r0, [r7, #4]
 801e194:	f000 fa7e 	bl	801e694 <USBD_CtlError>
            err++;
 801e198:	7afb      	ldrb	r3, [r7, #11]
 801e19a:	3301      	adds	r3, #1
 801e19c:	72fb      	strb	r3, [r7, #11]
          break;
 801e19e:	e055      	b.n	801e24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e1a6:	691b      	ldr	r3, [r3, #16]
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d00b      	beq.n	801e1c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e1b2:	691b      	ldr	r3, [r3, #16]
 801e1b4:	687a      	ldr	r2, [r7, #4]
 801e1b6:	7c12      	ldrb	r2, [r2, #16]
 801e1b8:	f107 0108 	add.w	r1, r7, #8
 801e1bc:	4610      	mov	r0, r2
 801e1be:	4798      	blx	r3
 801e1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e1c2:	e043      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e1c4:	6839      	ldr	r1, [r7, #0]
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f000 fa64 	bl	801e694 <USBD_CtlError>
            err++;
 801e1cc:	7afb      	ldrb	r3, [r7, #11]
 801e1ce:	3301      	adds	r3, #1
 801e1d0:	72fb      	strb	r3, [r7, #11]
          break;
 801e1d2:	e03b      	b.n	801e24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e1da:	695b      	ldr	r3, [r3, #20]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d00b      	beq.n	801e1f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e1e6:	695b      	ldr	r3, [r3, #20]
 801e1e8:	687a      	ldr	r2, [r7, #4]
 801e1ea:	7c12      	ldrb	r2, [r2, #16]
 801e1ec:	f107 0108 	add.w	r1, r7, #8
 801e1f0:	4610      	mov	r0, r2
 801e1f2:	4798      	blx	r3
 801e1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e1f6:	e029      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e1f8:	6839      	ldr	r1, [r7, #0]
 801e1fa:	6878      	ldr	r0, [r7, #4]
 801e1fc:	f000 fa4a 	bl	801e694 <USBD_CtlError>
            err++;
 801e200:	7afb      	ldrb	r3, [r7, #11]
 801e202:	3301      	adds	r3, #1
 801e204:	72fb      	strb	r3, [r7, #11]
          break;
 801e206:	e021      	b.n	801e24c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e20e:	699b      	ldr	r3, [r3, #24]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d00b      	beq.n	801e22c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801e21a:	699b      	ldr	r3, [r3, #24]
 801e21c:	687a      	ldr	r2, [r7, #4]
 801e21e:	7c12      	ldrb	r2, [r2, #16]
 801e220:	f107 0108 	add.w	r1, r7, #8
 801e224:	4610      	mov	r0, r2
 801e226:	4798      	blx	r3
 801e228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e22a:	e00f      	b.n	801e24c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801e22c:	6839      	ldr	r1, [r7, #0]
 801e22e:	6878      	ldr	r0, [r7, #4]
 801e230:	f000 fa30 	bl	801e694 <USBD_CtlError>
            err++;
 801e234:	7afb      	ldrb	r3, [r7, #11]
 801e236:	3301      	adds	r3, #1
 801e238:	72fb      	strb	r3, [r7, #11]
          break;
 801e23a:	e007      	b.n	801e24c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801e23c:	6839      	ldr	r1, [r7, #0]
 801e23e:	6878      	ldr	r0, [r7, #4]
 801e240:	f000 fa28 	bl	801e694 <USBD_CtlError>
          err++;
 801e244:	7afb      	ldrb	r3, [r7, #11]
 801e246:	3301      	adds	r3, #1
 801e248:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801e24a:	bf00      	nop
      }
      break;
 801e24c:	e037      	b.n	801e2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	7c1b      	ldrb	r3, [r3, #16]
 801e252:	2b00      	cmp	r3, #0
 801e254:	d109      	bne.n	801e26a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e25e:	f107 0208 	add.w	r2, r7, #8
 801e262:	4610      	mov	r0, r2
 801e264:	4798      	blx	r3
 801e266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801e268:	e029      	b.n	801e2be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801e26a:	6839      	ldr	r1, [r7, #0]
 801e26c:	6878      	ldr	r0, [r7, #4]
 801e26e:	f000 fa11 	bl	801e694 <USBD_CtlError>
        err++;
 801e272:	7afb      	ldrb	r3, [r7, #11]
 801e274:	3301      	adds	r3, #1
 801e276:	72fb      	strb	r3, [r7, #11]
      break;
 801e278:	e021      	b.n	801e2be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	7c1b      	ldrb	r3, [r3, #16]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d10d      	bne.n	801e29e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e28a:	f107 0208 	add.w	r2, r7, #8
 801e28e:	4610      	mov	r0, r2
 801e290:	4798      	blx	r3
 801e292:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	3301      	adds	r3, #1
 801e298:	2207      	movs	r2, #7
 801e29a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801e29c:	e00f      	b.n	801e2be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801e29e:	6839      	ldr	r1, [r7, #0]
 801e2a0:	6878      	ldr	r0, [r7, #4]
 801e2a2:	f000 f9f7 	bl	801e694 <USBD_CtlError>
        err++;
 801e2a6:	7afb      	ldrb	r3, [r7, #11]
 801e2a8:	3301      	adds	r3, #1
 801e2aa:	72fb      	strb	r3, [r7, #11]
      break;
 801e2ac:	e007      	b.n	801e2be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801e2ae:	6839      	ldr	r1, [r7, #0]
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f000 f9ef 	bl	801e694 <USBD_CtlError>
      err++;
 801e2b6:	7afb      	ldrb	r3, [r7, #11]
 801e2b8:	3301      	adds	r3, #1
 801e2ba:	72fb      	strb	r3, [r7, #11]
      break;
 801e2bc:	bf00      	nop
  }

  if (err != 0U)
 801e2be:	7afb      	ldrb	r3, [r7, #11]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d11e      	bne.n	801e302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801e2c4:	683b      	ldr	r3, [r7, #0]
 801e2c6:	88db      	ldrh	r3, [r3, #6]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d016      	beq.n	801e2fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801e2cc:	893b      	ldrh	r3, [r7, #8]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d00e      	beq.n	801e2f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801e2d2:	683b      	ldr	r3, [r7, #0]
 801e2d4:	88da      	ldrh	r2, [r3, #6]
 801e2d6:	893b      	ldrh	r3, [r7, #8]
 801e2d8:	4293      	cmp	r3, r2
 801e2da:	bf28      	it	cs
 801e2dc:	4613      	movcs	r3, r2
 801e2de:	b29b      	uxth	r3, r3
 801e2e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801e2e2:	893b      	ldrh	r3, [r7, #8]
 801e2e4:	461a      	mov	r2, r3
 801e2e6:	68f9      	ldr	r1, [r7, #12]
 801e2e8:	6878      	ldr	r0, [r7, #4]
 801e2ea:	f000 fa44 	bl	801e776 <USBD_CtlSendData>
 801e2ee:	e009      	b.n	801e304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801e2f0:	6839      	ldr	r1, [r7, #0]
 801e2f2:	6878      	ldr	r0, [r7, #4]
 801e2f4:	f000 f9ce 	bl	801e694 <USBD_CtlError>
 801e2f8:	e004      	b.n	801e304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801e2fa:	6878      	ldr	r0, [r7, #4]
 801e2fc:	f000 fa95 	bl	801e82a <USBD_CtlSendStatus>
 801e300:	e000      	b.n	801e304 <USBD_GetDescriptor+0x2cc>
    return;
 801e302:	bf00      	nop
  }
}
 801e304:	3710      	adds	r7, #16
 801e306:	46bd      	mov	sp, r7
 801e308:	bd80      	pop	{r7, pc}
 801e30a:	bf00      	nop

0801e30c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e30c:	b580      	push	{r7, lr}
 801e30e:	b084      	sub	sp, #16
 801e310:	af00      	add	r7, sp, #0
 801e312:	6078      	str	r0, [r7, #4]
 801e314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801e316:	683b      	ldr	r3, [r7, #0]
 801e318:	889b      	ldrh	r3, [r3, #4]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d131      	bne.n	801e382 <USBD_SetAddress+0x76>
 801e31e:	683b      	ldr	r3, [r7, #0]
 801e320:	88db      	ldrh	r3, [r3, #6]
 801e322:	2b00      	cmp	r3, #0
 801e324:	d12d      	bne.n	801e382 <USBD_SetAddress+0x76>
 801e326:	683b      	ldr	r3, [r7, #0]
 801e328:	885b      	ldrh	r3, [r3, #2]
 801e32a:	2b7f      	cmp	r3, #127	; 0x7f
 801e32c:	d829      	bhi.n	801e382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801e32e:	683b      	ldr	r3, [r7, #0]
 801e330:	885b      	ldrh	r3, [r3, #2]
 801e332:	b2db      	uxtb	r3, r3
 801e334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e340:	b2db      	uxtb	r3, r3
 801e342:	2b03      	cmp	r3, #3
 801e344:	d104      	bne.n	801e350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801e346:	6839      	ldr	r1, [r7, #0]
 801e348:	6878      	ldr	r0, [r7, #4]
 801e34a:	f000 f9a3 	bl	801e694 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e34e:	e01d      	b.n	801e38c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	7bfa      	ldrb	r2, [r7, #15]
 801e354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801e358:	7bfb      	ldrb	r3, [r7, #15]
 801e35a:	4619      	mov	r1, r3
 801e35c:	6878      	ldr	r0, [r7, #4]
 801e35e:	f003 fd21 	bl	8021da4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801e362:	6878      	ldr	r0, [r7, #4]
 801e364:	f000 fa61 	bl	801e82a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801e368:	7bfb      	ldrb	r3, [r7, #15]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d004      	beq.n	801e378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	2202      	movs	r2, #2
 801e372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e376:	e009      	b.n	801e38c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	2201      	movs	r2, #1
 801e37c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e380:	e004      	b.n	801e38c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801e382:	6839      	ldr	r1, [r7, #0]
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f000 f985 	bl	801e694 <USBD_CtlError>
  }
}
 801e38a:	bf00      	nop
 801e38c:	bf00      	nop
 801e38e:	3710      	adds	r7, #16
 801e390:	46bd      	mov	sp, r7
 801e392:	bd80      	pop	{r7, pc}

0801e394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e394:	b580      	push	{r7, lr}
 801e396:	b084      	sub	sp, #16
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
 801e39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e39e:	2300      	movs	r3, #0
 801e3a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801e3a2:	683b      	ldr	r3, [r7, #0]
 801e3a4:	885b      	ldrh	r3, [r3, #2]
 801e3a6:	b2da      	uxtb	r2, r3
 801e3a8:	4b4c      	ldr	r3, [pc, #304]	; (801e4dc <USBD_SetConfig+0x148>)
 801e3aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801e3ac:	4b4b      	ldr	r3, [pc, #300]	; (801e4dc <USBD_SetConfig+0x148>)
 801e3ae:	781b      	ldrb	r3, [r3, #0]
 801e3b0:	2b01      	cmp	r3, #1
 801e3b2:	d905      	bls.n	801e3c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801e3b4:	6839      	ldr	r1, [r7, #0]
 801e3b6:	6878      	ldr	r0, [r7, #4]
 801e3b8:	f000 f96c 	bl	801e694 <USBD_CtlError>
    return USBD_FAIL;
 801e3bc:	2303      	movs	r3, #3
 801e3be:	e088      	b.n	801e4d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e3c6:	b2db      	uxtb	r3, r3
 801e3c8:	2b02      	cmp	r3, #2
 801e3ca:	d002      	beq.n	801e3d2 <USBD_SetConfig+0x3e>
 801e3cc:	2b03      	cmp	r3, #3
 801e3ce:	d025      	beq.n	801e41c <USBD_SetConfig+0x88>
 801e3d0:	e071      	b.n	801e4b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801e3d2:	4b42      	ldr	r3, [pc, #264]	; (801e4dc <USBD_SetConfig+0x148>)
 801e3d4:	781b      	ldrb	r3, [r3, #0]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d01c      	beq.n	801e414 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801e3da:	4b40      	ldr	r3, [pc, #256]	; (801e4dc <USBD_SetConfig+0x148>)
 801e3dc:	781b      	ldrb	r3, [r3, #0]
 801e3de:	461a      	mov	r2, r3
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801e3e4:	4b3d      	ldr	r3, [pc, #244]	; (801e4dc <USBD_SetConfig+0x148>)
 801e3e6:	781b      	ldrb	r3, [r3, #0]
 801e3e8:	4619      	mov	r1, r3
 801e3ea:	6878      	ldr	r0, [r7, #4]
 801e3ec:	f7ff f948 	bl	801d680 <USBD_SetClassConfig>
 801e3f0:	4603      	mov	r3, r0
 801e3f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801e3f4:	7bfb      	ldrb	r3, [r7, #15]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d004      	beq.n	801e404 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801e3fa:	6839      	ldr	r1, [r7, #0]
 801e3fc:	6878      	ldr	r0, [r7, #4]
 801e3fe:	f000 f949 	bl	801e694 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801e402:	e065      	b.n	801e4d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801e404:	6878      	ldr	r0, [r7, #4]
 801e406:	f000 fa10 	bl	801e82a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	2203      	movs	r2, #3
 801e40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801e412:	e05d      	b.n	801e4d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801e414:	6878      	ldr	r0, [r7, #4]
 801e416:	f000 fa08 	bl	801e82a <USBD_CtlSendStatus>
      break;
 801e41a:	e059      	b.n	801e4d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801e41c:	4b2f      	ldr	r3, [pc, #188]	; (801e4dc <USBD_SetConfig+0x148>)
 801e41e:	781b      	ldrb	r3, [r3, #0]
 801e420:	2b00      	cmp	r3, #0
 801e422:	d112      	bne.n	801e44a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	2202      	movs	r2, #2
 801e428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801e42c:	4b2b      	ldr	r3, [pc, #172]	; (801e4dc <USBD_SetConfig+0x148>)
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	461a      	mov	r2, r3
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801e436:	4b29      	ldr	r3, [pc, #164]	; (801e4dc <USBD_SetConfig+0x148>)
 801e438:	781b      	ldrb	r3, [r3, #0]
 801e43a:	4619      	mov	r1, r3
 801e43c:	6878      	ldr	r0, [r7, #4]
 801e43e:	f7ff f93b 	bl	801d6b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801e442:	6878      	ldr	r0, [r7, #4]
 801e444:	f000 f9f1 	bl	801e82a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801e448:	e042      	b.n	801e4d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801e44a:	4b24      	ldr	r3, [pc, #144]	; (801e4dc <USBD_SetConfig+0x148>)
 801e44c:	781b      	ldrb	r3, [r3, #0]
 801e44e:	461a      	mov	r2, r3
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	429a      	cmp	r2, r3
 801e456:	d02a      	beq.n	801e4ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	685b      	ldr	r3, [r3, #4]
 801e45c:	b2db      	uxtb	r3, r3
 801e45e:	4619      	mov	r1, r3
 801e460:	6878      	ldr	r0, [r7, #4]
 801e462:	f7ff f929 	bl	801d6b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801e466:	4b1d      	ldr	r3, [pc, #116]	; (801e4dc <USBD_SetConfig+0x148>)
 801e468:	781b      	ldrb	r3, [r3, #0]
 801e46a:	461a      	mov	r2, r3
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801e470:	4b1a      	ldr	r3, [pc, #104]	; (801e4dc <USBD_SetConfig+0x148>)
 801e472:	781b      	ldrb	r3, [r3, #0]
 801e474:	4619      	mov	r1, r3
 801e476:	6878      	ldr	r0, [r7, #4]
 801e478:	f7ff f902 	bl	801d680 <USBD_SetClassConfig>
 801e47c:	4603      	mov	r3, r0
 801e47e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801e480:	7bfb      	ldrb	r3, [r7, #15]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d00f      	beq.n	801e4a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801e486:	6839      	ldr	r1, [r7, #0]
 801e488:	6878      	ldr	r0, [r7, #4]
 801e48a:	f000 f903 	bl	801e694 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	685b      	ldr	r3, [r3, #4]
 801e492:	b2db      	uxtb	r3, r3
 801e494:	4619      	mov	r1, r3
 801e496:	6878      	ldr	r0, [r7, #4]
 801e498:	f7ff f90e 	bl	801d6b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	2202      	movs	r2, #2
 801e4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801e4a4:	e014      	b.n	801e4d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801e4a6:	6878      	ldr	r0, [r7, #4]
 801e4a8:	f000 f9bf 	bl	801e82a <USBD_CtlSendStatus>
      break;
 801e4ac:	e010      	b.n	801e4d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801e4ae:	6878      	ldr	r0, [r7, #4]
 801e4b0:	f000 f9bb 	bl	801e82a <USBD_CtlSendStatus>
      break;
 801e4b4:	e00c      	b.n	801e4d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801e4b6:	6839      	ldr	r1, [r7, #0]
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f000 f8eb 	bl	801e694 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801e4be:	4b07      	ldr	r3, [pc, #28]	; (801e4dc <USBD_SetConfig+0x148>)
 801e4c0:	781b      	ldrb	r3, [r3, #0]
 801e4c2:	4619      	mov	r1, r3
 801e4c4:	6878      	ldr	r0, [r7, #4]
 801e4c6:	f7ff f8f7 	bl	801d6b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801e4ca:	2303      	movs	r3, #3
 801e4cc:	73fb      	strb	r3, [r7, #15]
      break;
 801e4ce:	bf00      	nop
  }

  return ret;
 801e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	3710      	adds	r7, #16
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	bd80      	pop	{r7, pc}
 801e4da:	bf00      	nop
 801e4dc:	20000fed 	.word	0x20000fed

0801e4e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e4e0:	b580      	push	{r7, lr}
 801e4e2:	b082      	sub	sp, #8
 801e4e4:	af00      	add	r7, sp, #0
 801e4e6:	6078      	str	r0, [r7, #4]
 801e4e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801e4ea:	683b      	ldr	r3, [r7, #0]
 801e4ec:	88db      	ldrh	r3, [r3, #6]
 801e4ee:	2b01      	cmp	r3, #1
 801e4f0:	d004      	beq.n	801e4fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801e4f2:	6839      	ldr	r1, [r7, #0]
 801e4f4:	6878      	ldr	r0, [r7, #4]
 801e4f6:	f000 f8cd 	bl	801e694 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801e4fa:	e023      	b.n	801e544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e502:	b2db      	uxtb	r3, r3
 801e504:	2b02      	cmp	r3, #2
 801e506:	dc02      	bgt.n	801e50e <USBD_GetConfig+0x2e>
 801e508:	2b00      	cmp	r3, #0
 801e50a:	dc03      	bgt.n	801e514 <USBD_GetConfig+0x34>
 801e50c:	e015      	b.n	801e53a <USBD_GetConfig+0x5a>
 801e50e:	2b03      	cmp	r3, #3
 801e510:	d00b      	beq.n	801e52a <USBD_GetConfig+0x4a>
 801e512:	e012      	b.n	801e53a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	2200      	movs	r2, #0
 801e518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	3308      	adds	r3, #8
 801e51e:	2201      	movs	r2, #1
 801e520:	4619      	mov	r1, r3
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f000 f927 	bl	801e776 <USBD_CtlSendData>
        break;
 801e528:	e00c      	b.n	801e544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	3304      	adds	r3, #4
 801e52e:	2201      	movs	r2, #1
 801e530:	4619      	mov	r1, r3
 801e532:	6878      	ldr	r0, [r7, #4]
 801e534:	f000 f91f 	bl	801e776 <USBD_CtlSendData>
        break;
 801e538:	e004      	b.n	801e544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801e53a:	6839      	ldr	r1, [r7, #0]
 801e53c:	6878      	ldr	r0, [r7, #4]
 801e53e:	f000 f8a9 	bl	801e694 <USBD_CtlError>
        break;
 801e542:	bf00      	nop
}
 801e544:	bf00      	nop
 801e546:	3708      	adds	r7, #8
 801e548:	46bd      	mov	sp, r7
 801e54a:	bd80      	pop	{r7, pc}

0801e54c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e54c:	b580      	push	{r7, lr}
 801e54e:	b082      	sub	sp, #8
 801e550:	af00      	add	r7, sp, #0
 801e552:	6078      	str	r0, [r7, #4]
 801e554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e55c:	b2db      	uxtb	r3, r3
 801e55e:	3b01      	subs	r3, #1
 801e560:	2b02      	cmp	r3, #2
 801e562:	d81e      	bhi.n	801e5a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801e564:	683b      	ldr	r3, [r7, #0]
 801e566:	88db      	ldrh	r3, [r3, #6]
 801e568:	2b02      	cmp	r3, #2
 801e56a:	d004      	beq.n	801e576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801e56c:	6839      	ldr	r1, [r7, #0]
 801e56e:	6878      	ldr	r0, [r7, #4]
 801e570:	f000 f890 	bl	801e694 <USBD_CtlError>
        break;
 801e574:	e01a      	b.n	801e5ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	2201      	movs	r2, #1
 801e57a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801e582:	2b00      	cmp	r3, #0
 801e584:	d005      	beq.n	801e592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	68db      	ldr	r3, [r3, #12]
 801e58a:	f043 0202 	orr.w	r2, r3, #2
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	330c      	adds	r3, #12
 801e596:	2202      	movs	r2, #2
 801e598:	4619      	mov	r1, r3
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f000 f8eb 	bl	801e776 <USBD_CtlSendData>
      break;
 801e5a0:	e004      	b.n	801e5ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801e5a2:	6839      	ldr	r1, [r7, #0]
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f000 f875 	bl	801e694 <USBD_CtlError>
      break;
 801e5aa:	bf00      	nop
  }
}
 801e5ac:	bf00      	nop
 801e5ae:	3708      	adds	r7, #8
 801e5b0:	46bd      	mov	sp, r7
 801e5b2:	bd80      	pop	{r7, pc}

0801e5b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e5b4:	b580      	push	{r7, lr}
 801e5b6:	b082      	sub	sp, #8
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	6078      	str	r0, [r7, #4]
 801e5bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	885b      	ldrh	r3, [r3, #2]
 801e5c2:	2b01      	cmp	r3, #1
 801e5c4:	d106      	bne.n	801e5d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	2201      	movs	r2, #1
 801e5ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801e5ce:	6878      	ldr	r0, [r7, #4]
 801e5d0:	f000 f92b 	bl	801e82a <USBD_CtlSendStatus>
  }
}
 801e5d4:	bf00      	nop
 801e5d6:	3708      	adds	r7, #8
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	bd80      	pop	{r7, pc}

0801e5dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e5dc:	b580      	push	{r7, lr}
 801e5de:	b082      	sub	sp, #8
 801e5e0:	af00      	add	r7, sp, #0
 801e5e2:	6078      	str	r0, [r7, #4]
 801e5e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e5ec:	b2db      	uxtb	r3, r3
 801e5ee:	3b01      	subs	r3, #1
 801e5f0:	2b02      	cmp	r3, #2
 801e5f2:	d80b      	bhi.n	801e60c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e5f4:	683b      	ldr	r3, [r7, #0]
 801e5f6:	885b      	ldrh	r3, [r3, #2]
 801e5f8:	2b01      	cmp	r3, #1
 801e5fa:	d10c      	bne.n	801e616 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	2200      	movs	r2, #0
 801e600:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801e604:	6878      	ldr	r0, [r7, #4]
 801e606:	f000 f910 	bl	801e82a <USBD_CtlSendStatus>
      }
      break;
 801e60a:	e004      	b.n	801e616 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801e60c:	6839      	ldr	r1, [r7, #0]
 801e60e:	6878      	ldr	r0, [r7, #4]
 801e610:	f000 f840 	bl	801e694 <USBD_CtlError>
      break;
 801e614:	e000      	b.n	801e618 <USBD_ClrFeature+0x3c>
      break;
 801e616:	bf00      	nop
  }
}
 801e618:	bf00      	nop
 801e61a:	3708      	adds	r7, #8
 801e61c:	46bd      	mov	sp, r7
 801e61e:	bd80      	pop	{r7, pc}

0801e620 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801e620:	b580      	push	{r7, lr}
 801e622:	b084      	sub	sp, #16
 801e624:	af00      	add	r7, sp, #0
 801e626:	6078      	str	r0, [r7, #4]
 801e628:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801e62a:	683b      	ldr	r3, [r7, #0]
 801e62c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	781a      	ldrb	r2, [r3, #0]
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	3301      	adds	r3, #1
 801e63a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	781a      	ldrb	r2, [r3, #0]
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801e644:	68fb      	ldr	r3, [r7, #12]
 801e646:	3301      	adds	r3, #1
 801e648:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801e64a:	68f8      	ldr	r0, [r7, #12]
 801e64c:	f7ff fabb 	bl	801dbc6 <SWAPBYTE>
 801e650:	4603      	mov	r3, r0
 801e652:	461a      	mov	r2, r3
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	3301      	adds	r3, #1
 801e65c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	3301      	adds	r3, #1
 801e662:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801e664:	68f8      	ldr	r0, [r7, #12]
 801e666:	f7ff faae 	bl	801dbc6 <SWAPBYTE>
 801e66a:	4603      	mov	r3, r0
 801e66c:	461a      	mov	r2, r3
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	3301      	adds	r3, #1
 801e676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	3301      	adds	r3, #1
 801e67c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801e67e:	68f8      	ldr	r0, [r7, #12]
 801e680:	f7ff faa1 	bl	801dbc6 <SWAPBYTE>
 801e684:	4603      	mov	r3, r0
 801e686:	461a      	mov	r2, r3
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	80da      	strh	r2, [r3, #6]
}
 801e68c:	bf00      	nop
 801e68e:	3710      	adds	r7, #16
 801e690:	46bd      	mov	sp, r7
 801e692:	bd80      	pop	{r7, pc}

0801e694 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e694:	b580      	push	{r7, lr}
 801e696:	b082      	sub	sp, #8
 801e698:	af00      	add	r7, sp, #0
 801e69a:	6078      	str	r0, [r7, #4]
 801e69c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801e69e:	2180      	movs	r1, #128	; 0x80
 801e6a0:	6878      	ldr	r0, [r7, #4]
 801e6a2:	f003 fb15 	bl	8021cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801e6a6:	2100      	movs	r1, #0
 801e6a8:	6878      	ldr	r0, [r7, #4]
 801e6aa:	f003 fb11 	bl	8021cd0 <USBD_LL_StallEP>
}
 801e6ae:	bf00      	nop
 801e6b0:	3708      	adds	r7, #8
 801e6b2:	46bd      	mov	sp, r7
 801e6b4:	bd80      	pop	{r7, pc}

0801e6b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801e6b6:	b580      	push	{r7, lr}
 801e6b8:	b086      	sub	sp, #24
 801e6ba:	af00      	add	r7, sp, #0
 801e6bc:	60f8      	str	r0, [r7, #12]
 801e6be:	60b9      	str	r1, [r7, #8]
 801e6c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801e6c2:	2300      	movs	r3, #0
 801e6c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d036      	beq.n	801e73a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801e6d0:	6938      	ldr	r0, [r7, #16]
 801e6d2:	f000 f836 	bl	801e742 <USBD_GetLen>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	3301      	adds	r3, #1
 801e6da:	b29b      	uxth	r3, r3
 801e6dc:	005b      	lsls	r3, r3, #1
 801e6de:	b29a      	uxth	r2, r3
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801e6e4:	7dfb      	ldrb	r3, [r7, #23]
 801e6e6:	68ba      	ldr	r2, [r7, #8]
 801e6e8:	4413      	add	r3, r2
 801e6ea:	687a      	ldr	r2, [r7, #4]
 801e6ec:	7812      	ldrb	r2, [r2, #0]
 801e6ee:	701a      	strb	r2, [r3, #0]
  idx++;
 801e6f0:	7dfb      	ldrb	r3, [r7, #23]
 801e6f2:	3301      	adds	r3, #1
 801e6f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801e6f6:	7dfb      	ldrb	r3, [r7, #23]
 801e6f8:	68ba      	ldr	r2, [r7, #8]
 801e6fa:	4413      	add	r3, r2
 801e6fc:	2203      	movs	r2, #3
 801e6fe:	701a      	strb	r2, [r3, #0]
  idx++;
 801e700:	7dfb      	ldrb	r3, [r7, #23]
 801e702:	3301      	adds	r3, #1
 801e704:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801e706:	e013      	b.n	801e730 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801e708:	7dfb      	ldrb	r3, [r7, #23]
 801e70a:	68ba      	ldr	r2, [r7, #8]
 801e70c:	4413      	add	r3, r2
 801e70e:	693a      	ldr	r2, [r7, #16]
 801e710:	7812      	ldrb	r2, [r2, #0]
 801e712:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801e714:	693b      	ldr	r3, [r7, #16]
 801e716:	3301      	adds	r3, #1
 801e718:	613b      	str	r3, [r7, #16]
    idx++;
 801e71a:	7dfb      	ldrb	r3, [r7, #23]
 801e71c:	3301      	adds	r3, #1
 801e71e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801e720:	7dfb      	ldrb	r3, [r7, #23]
 801e722:	68ba      	ldr	r2, [r7, #8]
 801e724:	4413      	add	r3, r2
 801e726:	2200      	movs	r2, #0
 801e728:	701a      	strb	r2, [r3, #0]
    idx++;
 801e72a:	7dfb      	ldrb	r3, [r7, #23]
 801e72c:	3301      	adds	r3, #1
 801e72e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801e730:	693b      	ldr	r3, [r7, #16]
 801e732:	781b      	ldrb	r3, [r3, #0]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d1e7      	bne.n	801e708 <USBD_GetString+0x52>
 801e738:	e000      	b.n	801e73c <USBD_GetString+0x86>
    return;
 801e73a:	bf00      	nop
  }
}
 801e73c:	3718      	adds	r7, #24
 801e73e:	46bd      	mov	sp, r7
 801e740:	bd80      	pop	{r7, pc}

0801e742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801e742:	b480      	push	{r7}
 801e744:	b085      	sub	sp, #20
 801e746:	af00      	add	r7, sp, #0
 801e748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801e74a:	2300      	movs	r3, #0
 801e74c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801e752:	e005      	b.n	801e760 <USBD_GetLen+0x1e>
  {
    len++;
 801e754:	7bfb      	ldrb	r3, [r7, #15]
 801e756:	3301      	adds	r3, #1
 801e758:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801e75a:	68bb      	ldr	r3, [r7, #8]
 801e75c:	3301      	adds	r3, #1
 801e75e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801e760:	68bb      	ldr	r3, [r7, #8]
 801e762:	781b      	ldrb	r3, [r3, #0]
 801e764:	2b00      	cmp	r3, #0
 801e766:	d1f5      	bne.n	801e754 <USBD_GetLen+0x12>
  }

  return len;
 801e768:	7bfb      	ldrb	r3, [r7, #15]
}
 801e76a:	4618      	mov	r0, r3
 801e76c:	3714      	adds	r7, #20
 801e76e:	46bd      	mov	sp, r7
 801e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e774:	4770      	bx	lr

0801e776 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801e776:	b580      	push	{r7, lr}
 801e778:	b084      	sub	sp, #16
 801e77a:	af00      	add	r7, sp, #0
 801e77c:	60f8      	str	r0, [r7, #12]
 801e77e:	60b9      	str	r1, [r7, #8]
 801e780:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801e782:	68fb      	ldr	r3, [r7, #12]
 801e784:	2202      	movs	r2, #2
 801e786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	687a      	ldr	r2, [r7, #4]
 801e78e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	687a      	ldr	r2, [r7, #4]
 801e794:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	68ba      	ldr	r2, [r7, #8]
 801e79a:	2100      	movs	r1, #0
 801e79c:	68f8      	ldr	r0, [r7, #12]
 801e79e:	f003 fb20 	bl	8021de2 <USBD_LL_Transmit>

  return USBD_OK;
 801e7a2:	2300      	movs	r3, #0
}
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	3710      	adds	r7, #16
 801e7a8:	46bd      	mov	sp, r7
 801e7aa:	bd80      	pop	{r7, pc}

0801e7ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801e7ac:	b580      	push	{r7, lr}
 801e7ae:	b084      	sub	sp, #16
 801e7b0:	af00      	add	r7, sp, #0
 801e7b2:	60f8      	str	r0, [r7, #12]
 801e7b4:	60b9      	str	r1, [r7, #8]
 801e7b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	68ba      	ldr	r2, [r7, #8]
 801e7bc:	2100      	movs	r1, #0
 801e7be:	68f8      	ldr	r0, [r7, #12]
 801e7c0:	f003 fb0f 	bl	8021de2 <USBD_LL_Transmit>

  return USBD_OK;
 801e7c4:	2300      	movs	r3, #0
}
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	3710      	adds	r7, #16
 801e7ca:	46bd      	mov	sp, r7
 801e7cc:	bd80      	pop	{r7, pc}

0801e7ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801e7ce:	b580      	push	{r7, lr}
 801e7d0:	b084      	sub	sp, #16
 801e7d2:	af00      	add	r7, sp, #0
 801e7d4:	60f8      	str	r0, [r7, #12]
 801e7d6:	60b9      	str	r1, [r7, #8]
 801e7d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	2203      	movs	r2, #3
 801e7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	687a      	ldr	r2, [r7, #4]
 801e7e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	687a      	ldr	r2, [r7, #4]
 801e7ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	68ba      	ldr	r2, [r7, #8]
 801e7f6:	2100      	movs	r1, #0
 801e7f8:	68f8      	ldr	r0, [r7, #12]
 801e7fa:	f003 fb13 	bl	8021e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e7fe:	2300      	movs	r3, #0
}
 801e800:	4618      	mov	r0, r3
 801e802:	3710      	adds	r7, #16
 801e804:	46bd      	mov	sp, r7
 801e806:	bd80      	pop	{r7, pc}

0801e808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801e808:	b580      	push	{r7, lr}
 801e80a:	b084      	sub	sp, #16
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	60f8      	str	r0, [r7, #12]
 801e810:	60b9      	str	r1, [r7, #8]
 801e812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	68ba      	ldr	r2, [r7, #8]
 801e818:	2100      	movs	r1, #0
 801e81a:	68f8      	ldr	r0, [r7, #12]
 801e81c:	f003 fb02 	bl	8021e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e820:	2300      	movs	r3, #0
}
 801e822:	4618      	mov	r0, r3
 801e824:	3710      	adds	r7, #16
 801e826:	46bd      	mov	sp, r7
 801e828:	bd80      	pop	{r7, pc}

0801e82a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801e82a:	b580      	push	{r7, lr}
 801e82c:	b082      	sub	sp, #8
 801e82e:	af00      	add	r7, sp, #0
 801e830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	2204      	movs	r2, #4
 801e836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801e83a:	2300      	movs	r3, #0
 801e83c:	2200      	movs	r2, #0
 801e83e:	2100      	movs	r1, #0
 801e840:	6878      	ldr	r0, [r7, #4]
 801e842:	f003 face 	bl	8021de2 <USBD_LL_Transmit>

  return USBD_OK;
 801e846:	2300      	movs	r3, #0
}
 801e848:	4618      	mov	r0, r3
 801e84a:	3708      	adds	r7, #8
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}

0801e850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801e850:	b580      	push	{r7, lr}
 801e852:	b082      	sub	sp, #8
 801e854:	af00      	add	r7, sp, #0
 801e856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	2205      	movs	r2, #5
 801e85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e860:	2300      	movs	r3, #0
 801e862:	2200      	movs	r2, #0
 801e864:	2100      	movs	r1, #0
 801e866:	6878      	ldr	r0, [r7, #4]
 801e868:	f003 fadc 	bl	8021e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e86c:	2300      	movs	r3, #0
}
 801e86e:	4618      	mov	r0, r3
 801e870:	3708      	adds	r7, #8
 801e872:	46bd      	mov	sp, r7
 801e874:	bd80      	pop	{r7, pc}

0801e876 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801e876:	b480      	push	{r7}
 801e878:	b083      	sub	sp, #12
 801e87a:	af00      	add	r7, sp, #0
 801e87c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	f103 0208 	add.w	r2, r3, #8
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	f04f 32ff 	mov.w	r2, #4294967295
 801e88e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	f103 0208 	add.w	r2, r3, #8
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	f103 0208 	add.w	r2, r3, #8
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	2200      	movs	r2, #0
 801e8a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801e8aa:	bf00      	nop
 801e8ac:	370c      	adds	r7, #12
 801e8ae:	46bd      	mov	sp, r7
 801e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8b4:	4770      	bx	lr

0801e8b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801e8b6:	b480      	push	{r7}
 801e8b8:	b083      	sub	sp, #12
 801e8ba:	af00      	add	r7, sp, #0
 801e8bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801e8c4:	bf00      	nop
 801e8c6:	370c      	adds	r7, #12
 801e8c8:	46bd      	mov	sp, r7
 801e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ce:	4770      	bx	lr

0801e8d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e8d0:	b480      	push	{r7}
 801e8d2:	b085      	sub	sp, #20
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
 801e8d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	685b      	ldr	r3, [r3, #4]
 801e8de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801e8e0:	683b      	ldr	r3, [r7, #0]
 801e8e2:	68fa      	ldr	r2, [r7, #12]
 801e8e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	689a      	ldr	r2, [r3, #8]
 801e8ea:	683b      	ldr	r3, [r7, #0]
 801e8ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	689b      	ldr	r3, [r3, #8]
 801e8f2:	683a      	ldr	r2, [r7, #0]
 801e8f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	683a      	ldr	r2, [r7, #0]
 801e8fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801e8fc:	683b      	ldr	r3, [r7, #0]
 801e8fe:	687a      	ldr	r2, [r7, #4]
 801e900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	1c5a      	adds	r2, r3, #1
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	601a      	str	r2, [r3, #0]
}
 801e90c:	bf00      	nop
 801e90e:	3714      	adds	r7, #20
 801e910:	46bd      	mov	sp, r7
 801e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e916:	4770      	bx	lr

0801e918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e918:	b480      	push	{r7}
 801e91a:	b085      	sub	sp, #20
 801e91c:	af00      	add	r7, sp, #0
 801e91e:	6078      	str	r0, [r7, #4]
 801e920:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801e922:	683b      	ldr	r3, [r7, #0]
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801e928:	68bb      	ldr	r3, [r7, #8]
 801e92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e92e:	d103      	bne.n	801e938 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	691b      	ldr	r3, [r3, #16]
 801e934:	60fb      	str	r3, [r7, #12]
 801e936:	e00c      	b.n	801e952 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	3308      	adds	r3, #8
 801e93c:	60fb      	str	r3, [r7, #12]
 801e93e:	e002      	b.n	801e946 <vListInsert+0x2e>
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	685b      	ldr	r3, [r3, #4]
 801e944:	60fb      	str	r3, [r7, #12]
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	685b      	ldr	r3, [r3, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	68ba      	ldr	r2, [r7, #8]
 801e94e:	429a      	cmp	r2, r3
 801e950:	d2f6      	bcs.n	801e940 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	685a      	ldr	r2, [r3, #4]
 801e956:	683b      	ldr	r3, [r7, #0]
 801e958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801e95a:	683b      	ldr	r3, [r7, #0]
 801e95c:	685b      	ldr	r3, [r3, #4]
 801e95e:	683a      	ldr	r2, [r7, #0]
 801e960:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801e962:	683b      	ldr	r3, [r7, #0]
 801e964:	68fa      	ldr	r2, [r7, #12]
 801e966:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	683a      	ldr	r2, [r7, #0]
 801e96c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801e96e:	683b      	ldr	r3, [r7, #0]
 801e970:	687a      	ldr	r2, [r7, #4]
 801e972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	1c5a      	adds	r2, r3, #1
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	601a      	str	r2, [r3, #0]
}
 801e97e:	bf00      	nop
 801e980:	3714      	adds	r7, #20
 801e982:	46bd      	mov	sp, r7
 801e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e988:	4770      	bx	lr

0801e98a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801e98a:	b480      	push	{r7}
 801e98c:	b085      	sub	sp, #20
 801e98e:	af00      	add	r7, sp, #0
 801e990:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	691b      	ldr	r3, [r3, #16]
 801e996:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	685b      	ldr	r3, [r3, #4]
 801e99c:	687a      	ldr	r2, [r7, #4]
 801e99e:	6892      	ldr	r2, [r2, #8]
 801e9a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	689b      	ldr	r3, [r3, #8]
 801e9a6:	687a      	ldr	r2, [r7, #4]
 801e9a8:	6852      	ldr	r2, [r2, #4]
 801e9aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	685b      	ldr	r3, [r3, #4]
 801e9b0:	687a      	ldr	r2, [r7, #4]
 801e9b2:	429a      	cmp	r2, r3
 801e9b4:	d103      	bne.n	801e9be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801e9b6:	687b      	ldr	r3, [r7, #4]
 801e9b8:	689a      	ldr	r2, [r3, #8]
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801e9be:	687b      	ldr	r3, [r7, #4]
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	1e5a      	subs	r2, r3, #1
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	681b      	ldr	r3, [r3, #0]
}
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	3714      	adds	r7, #20
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9dc:	4770      	bx	lr
	...

0801e9e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801e9e0:	b580      	push	{r7, lr}
 801e9e2:	b084      	sub	sp, #16
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	6078      	str	r0, [r7, #4]
 801e9e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d10a      	bne.n	801ea0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9f8:	f383 8811 	msr	BASEPRI, r3
 801e9fc:	f3bf 8f6f 	isb	sy
 801ea00:	f3bf 8f4f 	dsb	sy
 801ea04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801ea06:	bf00      	nop
 801ea08:	e7fe      	b.n	801ea08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801ea0a:	f002 fa2b 	bl	8020e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ea0e:	68fb      	ldr	r3, [r7, #12]
 801ea10:	681a      	ldr	r2, [r3, #0]
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea16:	68f9      	ldr	r1, [r7, #12]
 801ea18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ea1a:	fb01 f303 	mul.w	r3, r1, r3
 801ea1e:	441a      	add	r2, r3
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	2200      	movs	r2, #0
 801ea28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	681a      	ldr	r2, [r3, #0]
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	681a      	ldr	r2, [r3, #0]
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea3a:	3b01      	subs	r3, #1
 801ea3c:	68f9      	ldr	r1, [r7, #12]
 801ea3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ea40:	fb01 f303 	mul.w	r3, r1, r3
 801ea44:	441a      	add	r2, r3
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	22ff      	movs	r2, #255	; 0xff
 801ea4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801ea52:	68fb      	ldr	r3, [r7, #12]
 801ea54:	22ff      	movs	r2, #255	; 0xff
 801ea56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d114      	bne.n	801ea8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ea60:	68fb      	ldr	r3, [r7, #12]
 801ea62:	691b      	ldr	r3, [r3, #16]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d01a      	beq.n	801ea9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	3310      	adds	r3, #16
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f001 fad7 	bl	8020020 <xTaskRemoveFromEventList>
 801ea72:	4603      	mov	r3, r0
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d012      	beq.n	801ea9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801ea78:	4b0c      	ldr	r3, [pc, #48]	; (801eaac <xQueueGenericReset+0xcc>)
 801ea7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ea7e:	601a      	str	r2, [r3, #0]
 801ea80:	f3bf 8f4f 	dsb	sy
 801ea84:	f3bf 8f6f 	isb	sy
 801ea88:	e009      	b.n	801ea9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	3310      	adds	r3, #16
 801ea8e:	4618      	mov	r0, r3
 801ea90:	f7ff fef1 	bl	801e876 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	3324      	adds	r3, #36	; 0x24
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7ff feec 	bl	801e876 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801ea9e:	f002 fa11 	bl	8020ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801eaa2:	2301      	movs	r3, #1
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	3710      	adds	r7, #16
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}
 801eaac:	e000ed04 	.word	0xe000ed04

0801eab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801eab0:	b580      	push	{r7, lr}
 801eab2:	b08e      	sub	sp, #56	; 0x38
 801eab4:	af02      	add	r7, sp, #8
 801eab6:	60f8      	str	r0, [r7, #12]
 801eab8:	60b9      	str	r1, [r7, #8]
 801eaba:	607a      	str	r2, [r7, #4]
 801eabc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d10a      	bne.n	801eada <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801eac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eac8:	f383 8811 	msr	BASEPRI, r3
 801eacc:	f3bf 8f6f 	isb	sy
 801ead0:	f3bf 8f4f 	dsb	sy
 801ead4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ead6:	bf00      	nop
 801ead8:	e7fe      	b.n	801ead8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801eada:	683b      	ldr	r3, [r7, #0]
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d10a      	bne.n	801eaf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eae4:	f383 8811 	msr	BASEPRI, r3
 801eae8:	f3bf 8f6f 	isb	sy
 801eaec:	f3bf 8f4f 	dsb	sy
 801eaf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 801eaf2:	bf00      	nop
 801eaf4:	e7fe      	b.n	801eaf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d002      	beq.n	801eb02 <xQueueGenericCreateStatic+0x52>
 801eafc:	68bb      	ldr	r3, [r7, #8]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d001      	beq.n	801eb06 <xQueueGenericCreateStatic+0x56>
 801eb02:	2301      	movs	r3, #1
 801eb04:	e000      	b.n	801eb08 <xQueueGenericCreateStatic+0x58>
 801eb06:	2300      	movs	r3, #0
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d10a      	bne.n	801eb22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eb10:	f383 8811 	msr	BASEPRI, r3
 801eb14:	f3bf 8f6f 	isb	sy
 801eb18:	f3bf 8f4f 	dsb	sy
 801eb1c:	623b      	str	r3, [r7, #32]
}
 801eb1e:	bf00      	nop
 801eb20:	e7fe      	b.n	801eb20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d102      	bne.n	801eb2e <xQueueGenericCreateStatic+0x7e>
 801eb28:	68bb      	ldr	r3, [r7, #8]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d101      	bne.n	801eb32 <xQueueGenericCreateStatic+0x82>
 801eb2e:	2301      	movs	r3, #1
 801eb30:	e000      	b.n	801eb34 <xQueueGenericCreateStatic+0x84>
 801eb32:	2300      	movs	r3, #0
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d10a      	bne.n	801eb4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801eb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eb3c:	f383 8811 	msr	BASEPRI, r3
 801eb40:	f3bf 8f6f 	isb	sy
 801eb44:	f3bf 8f4f 	dsb	sy
 801eb48:	61fb      	str	r3, [r7, #28]
}
 801eb4a:	bf00      	nop
 801eb4c:	e7fe      	b.n	801eb4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801eb4e:	2348      	movs	r3, #72	; 0x48
 801eb50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801eb52:	697b      	ldr	r3, [r7, #20]
 801eb54:	2b48      	cmp	r3, #72	; 0x48
 801eb56:	d00a      	beq.n	801eb6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801eb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eb5c:	f383 8811 	msr	BASEPRI, r3
 801eb60:	f3bf 8f6f 	isb	sy
 801eb64:	f3bf 8f4f 	dsb	sy
 801eb68:	61bb      	str	r3, [r7, #24]
}
 801eb6a:	bf00      	nop
 801eb6c:	e7fe      	b.n	801eb6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801eb6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d00d      	beq.n	801eb96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb7c:	2201      	movs	r2, #1
 801eb7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801eb82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb88:	9300      	str	r3, [sp, #0]
 801eb8a:	4613      	mov	r3, r2
 801eb8c:	687a      	ldr	r2, [r7, #4]
 801eb8e:	68b9      	ldr	r1, [r7, #8]
 801eb90:	68f8      	ldr	r0, [r7, #12]
 801eb92:	f000 f83f 	bl	801ec14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801eb98:	4618      	mov	r0, r3
 801eb9a:	3730      	adds	r7, #48	; 0x30
 801eb9c:	46bd      	mov	sp, r7
 801eb9e:	bd80      	pop	{r7, pc}

0801eba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801eba0:	b580      	push	{r7, lr}
 801eba2:	b08a      	sub	sp, #40	; 0x28
 801eba4:	af02      	add	r7, sp, #8
 801eba6:	60f8      	str	r0, [r7, #12]
 801eba8:	60b9      	str	r1, [r7, #8]
 801ebaa:	4613      	mov	r3, r2
 801ebac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ebae:	68fb      	ldr	r3, [r7, #12]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d10a      	bne.n	801ebca <xQueueGenericCreate+0x2a>
	__asm volatile
 801ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebb8:	f383 8811 	msr	BASEPRI, r3
 801ebbc:	f3bf 8f6f 	isb	sy
 801ebc0:	f3bf 8f4f 	dsb	sy
 801ebc4:	613b      	str	r3, [r7, #16]
}
 801ebc6:	bf00      	nop
 801ebc8:	e7fe      	b.n	801ebc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ebca:	68fb      	ldr	r3, [r7, #12]
 801ebcc:	68ba      	ldr	r2, [r7, #8]
 801ebce:	fb02 f303 	mul.w	r3, r2, r3
 801ebd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801ebd4:	69fb      	ldr	r3, [r7, #28]
 801ebd6:	3348      	adds	r3, #72	; 0x48
 801ebd8:	4618      	mov	r0, r3
 801ebda:	f002 fa65 	bl	80210a8 <pvPortMalloc>
 801ebde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801ebe0:	69bb      	ldr	r3, [r7, #24]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d011      	beq.n	801ec0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801ebe6:	69bb      	ldr	r3, [r7, #24]
 801ebe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ebea:	697b      	ldr	r3, [r7, #20]
 801ebec:	3348      	adds	r3, #72	; 0x48
 801ebee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801ebf0:	69bb      	ldr	r3, [r7, #24]
 801ebf2:	2200      	movs	r2, #0
 801ebf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ebf8:	79fa      	ldrb	r2, [r7, #7]
 801ebfa:	69bb      	ldr	r3, [r7, #24]
 801ebfc:	9300      	str	r3, [sp, #0]
 801ebfe:	4613      	mov	r3, r2
 801ec00:	697a      	ldr	r2, [r7, #20]
 801ec02:	68b9      	ldr	r1, [r7, #8]
 801ec04:	68f8      	ldr	r0, [r7, #12]
 801ec06:	f000 f805 	bl	801ec14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ec0a:	69bb      	ldr	r3, [r7, #24]
	}
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	3720      	adds	r7, #32
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b084      	sub	sp, #16
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	60b9      	str	r1, [r7, #8]
 801ec1e:	607a      	str	r2, [r7, #4]
 801ec20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801ec22:	68bb      	ldr	r3, [r7, #8]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d103      	bne.n	801ec30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ec28:	69bb      	ldr	r3, [r7, #24]
 801ec2a:	69ba      	ldr	r2, [r7, #24]
 801ec2c:	601a      	str	r2, [r3, #0]
 801ec2e:	e002      	b.n	801ec36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ec30:	69bb      	ldr	r3, [r7, #24]
 801ec32:	687a      	ldr	r2, [r7, #4]
 801ec34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ec36:	69bb      	ldr	r3, [r7, #24]
 801ec38:	68fa      	ldr	r2, [r7, #12]
 801ec3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ec3c:	69bb      	ldr	r3, [r7, #24]
 801ec3e:	68ba      	ldr	r2, [r7, #8]
 801ec40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ec42:	2101      	movs	r1, #1
 801ec44:	69b8      	ldr	r0, [r7, #24]
 801ec46:	f7ff fecb 	bl	801e9e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ec4a:	bf00      	nop
 801ec4c:	3710      	adds	r7, #16
 801ec4e:	46bd      	mov	sp, r7
 801ec50:	bd80      	pop	{r7, pc}
	...

0801ec54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ec54:	b580      	push	{r7, lr}
 801ec56:	b08e      	sub	sp, #56	; 0x38
 801ec58:	af00      	add	r7, sp, #0
 801ec5a:	60f8      	str	r0, [r7, #12]
 801ec5c:	60b9      	str	r1, [r7, #8]
 801ec5e:	607a      	str	r2, [r7, #4]
 801ec60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ec62:	2300      	movs	r3, #0
 801ec64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ec66:	68fb      	ldr	r3, [r7, #12]
 801ec68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801ec6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d10a      	bne.n	801ec86 <xQueueGenericSend+0x32>
	__asm volatile
 801ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec74:	f383 8811 	msr	BASEPRI, r3
 801ec78:	f3bf 8f6f 	isb	sy
 801ec7c:	f3bf 8f4f 	dsb	sy
 801ec80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ec82:	bf00      	nop
 801ec84:	e7fe      	b.n	801ec84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ec86:	68bb      	ldr	r3, [r7, #8]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d103      	bne.n	801ec94 <xQueueGenericSend+0x40>
 801ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d101      	bne.n	801ec98 <xQueueGenericSend+0x44>
 801ec94:	2301      	movs	r3, #1
 801ec96:	e000      	b.n	801ec9a <xQueueGenericSend+0x46>
 801ec98:	2300      	movs	r3, #0
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d10a      	bne.n	801ecb4 <xQueueGenericSend+0x60>
	__asm volatile
 801ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eca2:	f383 8811 	msr	BASEPRI, r3
 801eca6:	f3bf 8f6f 	isb	sy
 801ecaa:	f3bf 8f4f 	dsb	sy
 801ecae:	627b      	str	r3, [r7, #36]	; 0x24
}
 801ecb0:	bf00      	nop
 801ecb2:	e7fe      	b.n	801ecb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	2b02      	cmp	r3, #2
 801ecb8:	d103      	bne.n	801ecc2 <xQueueGenericSend+0x6e>
 801ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ecbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ecbe:	2b01      	cmp	r3, #1
 801ecc0:	d101      	bne.n	801ecc6 <xQueueGenericSend+0x72>
 801ecc2:	2301      	movs	r3, #1
 801ecc4:	e000      	b.n	801ecc8 <xQueueGenericSend+0x74>
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	d10a      	bne.n	801ece2 <xQueueGenericSend+0x8e>
	__asm volatile
 801eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ecd0:	f383 8811 	msr	BASEPRI, r3
 801ecd4:	f3bf 8f6f 	isb	sy
 801ecd8:	f3bf 8f4f 	dsb	sy
 801ecdc:	623b      	str	r3, [r7, #32]
}
 801ecde:	bf00      	nop
 801ece0:	e7fe      	b.n	801ece0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ece2:	f001 fb59 	bl	8020398 <xTaskGetSchedulerState>
 801ece6:	4603      	mov	r3, r0
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d102      	bne.n	801ecf2 <xQueueGenericSend+0x9e>
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d101      	bne.n	801ecf6 <xQueueGenericSend+0xa2>
 801ecf2:	2301      	movs	r3, #1
 801ecf4:	e000      	b.n	801ecf8 <xQueueGenericSend+0xa4>
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d10a      	bne.n	801ed12 <xQueueGenericSend+0xbe>
	__asm volatile
 801ecfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed00:	f383 8811 	msr	BASEPRI, r3
 801ed04:	f3bf 8f6f 	isb	sy
 801ed08:	f3bf 8f4f 	dsb	sy
 801ed0c:	61fb      	str	r3, [r7, #28]
}
 801ed0e:	bf00      	nop
 801ed10:	e7fe      	b.n	801ed10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ed12:	f002 f8a7 	bl	8020e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed1e:	429a      	cmp	r2, r3
 801ed20:	d302      	bcc.n	801ed28 <xQueueGenericSend+0xd4>
 801ed22:	683b      	ldr	r3, [r7, #0]
 801ed24:	2b02      	cmp	r3, #2
 801ed26:	d129      	bne.n	801ed7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ed28:	683a      	ldr	r2, [r7, #0]
 801ed2a:	68b9      	ldr	r1, [r7, #8]
 801ed2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ed2e:	f000 fa0b 	bl	801f148 <prvCopyDataToQueue>
 801ed32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d010      	beq.n	801ed5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ed3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed3e:	3324      	adds	r3, #36	; 0x24
 801ed40:	4618      	mov	r0, r3
 801ed42:	f001 f96d 	bl	8020020 <xTaskRemoveFromEventList>
 801ed46:	4603      	mov	r3, r0
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d013      	beq.n	801ed74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ed4c:	4b3f      	ldr	r3, [pc, #252]	; (801ee4c <xQueueGenericSend+0x1f8>)
 801ed4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ed52:	601a      	str	r2, [r3, #0]
 801ed54:	f3bf 8f4f 	dsb	sy
 801ed58:	f3bf 8f6f 	isb	sy
 801ed5c:	e00a      	b.n	801ed74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ed5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d007      	beq.n	801ed74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ed64:	4b39      	ldr	r3, [pc, #228]	; (801ee4c <xQueueGenericSend+0x1f8>)
 801ed66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ed6a:	601a      	str	r2, [r3, #0]
 801ed6c:	f3bf 8f4f 	dsb	sy
 801ed70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ed74:	f002 f8a6 	bl	8020ec4 <vPortExitCritical>
				return pdPASS;
 801ed78:	2301      	movs	r3, #1
 801ed7a:	e063      	b.n	801ee44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d103      	bne.n	801ed8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ed82:	f002 f89f 	bl	8020ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801ed86:	2300      	movs	r3, #0
 801ed88:	e05c      	b.n	801ee44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ed8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d106      	bne.n	801ed9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ed90:	f107 0314 	add.w	r3, r7, #20
 801ed94:	4618      	mov	r0, r3
 801ed96:	f001 f9a5 	bl	80200e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ed9a:	2301      	movs	r3, #1
 801ed9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ed9e:	f002 f891 	bl	8020ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801eda2:	f000 ff1f 	bl	801fbe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801eda6:	f002 f85d 	bl	8020e64 <vPortEnterCritical>
 801edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801edb0:	b25b      	sxtb	r3, r3
 801edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edb6:	d103      	bne.n	801edc0 <xQueueGenericSend+0x16c>
 801edb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edba:	2200      	movs	r2, #0
 801edbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801edc6:	b25b      	sxtb	r3, r3
 801edc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edcc:	d103      	bne.n	801edd6 <xQueueGenericSend+0x182>
 801edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edd0:	2200      	movs	r2, #0
 801edd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801edd6:	f002 f875 	bl	8020ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801edda:	1d3a      	adds	r2, r7, #4
 801eddc:	f107 0314 	add.w	r3, r7, #20
 801ede0:	4611      	mov	r1, r2
 801ede2:	4618      	mov	r0, r3
 801ede4:	f001 f994 	bl	8020110 <xTaskCheckForTimeOut>
 801ede8:	4603      	mov	r3, r0
 801edea:	2b00      	cmp	r3, #0
 801edec:	d124      	bne.n	801ee38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801edee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801edf0:	f000 faa2 	bl	801f338 <prvIsQueueFull>
 801edf4:	4603      	mov	r3, r0
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d018      	beq.n	801ee2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edfc:	3310      	adds	r3, #16
 801edfe:	687a      	ldr	r2, [r7, #4]
 801ee00:	4611      	mov	r1, r2
 801ee02:	4618      	mov	r0, r3
 801ee04:	f001 f8bc 	bl	801ff80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801ee08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ee0a:	f000 fa2d 	bl	801f268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801ee0e:	f000 fef7 	bl	801fc00 <xTaskResumeAll>
 801ee12:	4603      	mov	r3, r0
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	f47f af7c 	bne.w	801ed12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801ee1a:	4b0c      	ldr	r3, [pc, #48]	; (801ee4c <xQueueGenericSend+0x1f8>)
 801ee1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ee20:	601a      	str	r2, [r3, #0]
 801ee22:	f3bf 8f4f 	dsb	sy
 801ee26:	f3bf 8f6f 	isb	sy
 801ee2a:	e772      	b.n	801ed12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801ee2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ee2e:	f000 fa1b 	bl	801f268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ee32:	f000 fee5 	bl	801fc00 <xTaskResumeAll>
 801ee36:	e76c      	b.n	801ed12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801ee38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ee3a:	f000 fa15 	bl	801f268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ee3e:	f000 fedf 	bl	801fc00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801ee42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801ee44:	4618      	mov	r0, r3
 801ee46:	3738      	adds	r7, #56	; 0x38
 801ee48:	46bd      	mov	sp, r7
 801ee4a:	bd80      	pop	{r7, pc}
 801ee4c:	e000ed04 	.word	0xe000ed04

0801ee50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801ee50:	b580      	push	{r7, lr}
 801ee52:	b090      	sub	sp, #64	; 0x40
 801ee54:	af00      	add	r7, sp, #0
 801ee56:	60f8      	str	r0, [r7, #12]
 801ee58:	60b9      	str	r1, [r7, #8]
 801ee5a:	607a      	str	r2, [r7, #4]
 801ee5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d10a      	bne.n	801ee7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee6c:	f383 8811 	msr	BASEPRI, r3
 801ee70:	f3bf 8f6f 	isb	sy
 801ee74:	f3bf 8f4f 	dsb	sy
 801ee78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ee7a:	bf00      	nop
 801ee7c:	e7fe      	b.n	801ee7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d103      	bne.n	801ee8c <xQueueGenericSendFromISR+0x3c>
 801ee84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d101      	bne.n	801ee90 <xQueueGenericSendFromISR+0x40>
 801ee8c:	2301      	movs	r3, #1
 801ee8e:	e000      	b.n	801ee92 <xQueueGenericSendFromISR+0x42>
 801ee90:	2300      	movs	r3, #0
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d10a      	bne.n	801eeac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801ee96:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee9a:	f383 8811 	msr	BASEPRI, r3
 801ee9e:	f3bf 8f6f 	isb	sy
 801eea2:	f3bf 8f4f 	dsb	sy
 801eea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 801eea8:	bf00      	nop
 801eeaa:	e7fe      	b.n	801eeaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801eeac:	683b      	ldr	r3, [r7, #0]
 801eeae:	2b02      	cmp	r3, #2
 801eeb0:	d103      	bne.n	801eeba <xQueueGenericSendFromISR+0x6a>
 801eeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eeb6:	2b01      	cmp	r3, #1
 801eeb8:	d101      	bne.n	801eebe <xQueueGenericSendFromISR+0x6e>
 801eeba:	2301      	movs	r3, #1
 801eebc:	e000      	b.n	801eec0 <xQueueGenericSendFromISR+0x70>
 801eebe:	2300      	movs	r3, #0
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d10a      	bne.n	801eeda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eec8:	f383 8811 	msr	BASEPRI, r3
 801eecc:	f3bf 8f6f 	isb	sy
 801eed0:	f3bf 8f4f 	dsb	sy
 801eed4:	623b      	str	r3, [r7, #32]
}
 801eed6:	bf00      	nop
 801eed8:	e7fe      	b.n	801eed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801eeda:	f002 f8a5 	bl	8021028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801eede:	f3ef 8211 	mrs	r2, BASEPRI
 801eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eee6:	f383 8811 	msr	BASEPRI, r3
 801eeea:	f3bf 8f6f 	isb	sy
 801eeee:	f3bf 8f4f 	dsb	sy
 801eef2:	61fa      	str	r2, [r7, #28]
 801eef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801eef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801eef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eefc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef02:	429a      	cmp	r2, r3
 801ef04:	d302      	bcc.n	801ef0c <xQueueGenericSendFromISR+0xbc>
 801ef06:	683b      	ldr	r3, [r7, #0]
 801ef08:	2b02      	cmp	r3, #2
 801ef0a:	d12f      	bne.n	801ef6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ef12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ef1c:	683a      	ldr	r2, [r7, #0]
 801ef1e:	68b9      	ldr	r1, [r7, #8]
 801ef20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ef22:	f000 f911 	bl	801f148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801ef26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801ef2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef2e:	d112      	bne.n	801ef56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d016      	beq.n	801ef66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef3a:	3324      	adds	r3, #36	; 0x24
 801ef3c:	4618      	mov	r0, r3
 801ef3e:	f001 f86f 	bl	8020020 <xTaskRemoveFromEventList>
 801ef42:	4603      	mov	r3, r0
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d00e      	beq.n	801ef66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d00b      	beq.n	801ef66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	2201      	movs	r2, #1
 801ef52:	601a      	str	r2, [r3, #0]
 801ef54:	e007      	b.n	801ef66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801ef56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ef5a:	3301      	adds	r3, #1
 801ef5c:	b2db      	uxtb	r3, r3
 801ef5e:	b25a      	sxtb	r2, r3
 801ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801ef66:	2301      	movs	r3, #1
 801ef68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801ef6a:	e001      	b.n	801ef70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ef70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801ef74:	697b      	ldr	r3, [r7, #20]
 801ef76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801ef7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ef7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3740      	adds	r7, #64	; 0x40
 801ef82:	46bd      	mov	sp, r7
 801ef84:	bd80      	pop	{r7, pc}
	...

0801ef88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801ef88:	b580      	push	{r7, lr}
 801ef8a:	b08c      	sub	sp, #48	; 0x30
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	60f8      	str	r0, [r7, #12]
 801ef90:	60b9      	str	r1, [r7, #8]
 801ef92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801ef94:	2300      	movs	r3, #0
 801ef96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ef98:	68fb      	ldr	r3, [r7, #12]
 801ef9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d10a      	bne.n	801efb8 <xQueueReceive+0x30>
	__asm volatile
 801efa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801efa6:	f383 8811 	msr	BASEPRI, r3
 801efaa:	f3bf 8f6f 	isb	sy
 801efae:	f3bf 8f4f 	dsb	sy
 801efb2:	623b      	str	r3, [r7, #32]
}
 801efb4:	bf00      	nop
 801efb6:	e7fe      	b.n	801efb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801efb8:	68bb      	ldr	r3, [r7, #8]
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d103      	bne.n	801efc6 <xQueueReceive+0x3e>
 801efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d101      	bne.n	801efca <xQueueReceive+0x42>
 801efc6:	2301      	movs	r3, #1
 801efc8:	e000      	b.n	801efcc <xQueueReceive+0x44>
 801efca:	2300      	movs	r3, #0
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d10a      	bne.n	801efe6 <xQueueReceive+0x5e>
	__asm volatile
 801efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801efd4:	f383 8811 	msr	BASEPRI, r3
 801efd8:	f3bf 8f6f 	isb	sy
 801efdc:	f3bf 8f4f 	dsb	sy
 801efe0:	61fb      	str	r3, [r7, #28]
}
 801efe2:	bf00      	nop
 801efe4:	e7fe      	b.n	801efe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801efe6:	f001 f9d7 	bl	8020398 <xTaskGetSchedulerState>
 801efea:	4603      	mov	r3, r0
 801efec:	2b00      	cmp	r3, #0
 801efee:	d102      	bne.n	801eff6 <xQueueReceive+0x6e>
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d101      	bne.n	801effa <xQueueReceive+0x72>
 801eff6:	2301      	movs	r3, #1
 801eff8:	e000      	b.n	801effc <xQueueReceive+0x74>
 801effa:	2300      	movs	r3, #0
 801effc:	2b00      	cmp	r3, #0
 801effe:	d10a      	bne.n	801f016 <xQueueReceive+0x8e>
	__asm volatile
 801f000:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f004:	f383 8811 	msr	BASEPRI, r3
 801f008:	f3bf 8f6f 	isb	sy
 801f00c:	f3bf 8f4f 	dsb	sy
 801f010:	61bb      	str	r3, [r7, #24]
}
 801f012:	bf00      	nop
 801f014:	e7fe      	b.n	801f014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f016:	f001 ff25 	bl	8020e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f01e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f022:	2b00      	cmp	r3, #0
 801f024:	d01f      	beq.n	801f066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f026:	68b9      	ldr	r1, [r7, #8]
 801f028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f02a:	f000 f8f7 	bl	801f21c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f030:	1e5a      	subs	r2, r3, #1
 801f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f038:	691b      	ldr	r3, [r3, #16]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d00f      	beq.n	801f05e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f040:	3310      	adds	r3, #16
 801f042:	4618      	mov	r0, r3
 801f044:	f000 ffec 	bl	8020020 <xTaskRemoveFromEventList>
 801f048:	4603      	mov	r3, r0
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d007      	beq.n	801f05e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f04e:	4b3d      	ldr	r3, [pc, #244]	; (801f144 <xQueueReceive+0x1bc>)
 801f050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f054:	601a      	str	r2, [r3, #0]
 801f056:	f3bf 8f4f 	dsb	sy
 801f05a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f05e:	f001 ff31 	bl	8020ec4 <vPortExitCritical>
				return pdPASS;
 801f062:	2301      	movs	r3, #1
 801f064:	e069      	b.n	801f13a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d103      	bne.n	801f074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f06c:	f001 ff2a 	bl	8020ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f070:	2300      	movs	r3, #0
 801f072:	e062      	b.n	801f13a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f076:	2b00      	cmp	r3, #0
 801f078:	d106      	bne.n	801f088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f07a:	f107 0310 	add.w	r3, r7, #16
 801f07e:	4618      	mov	r0, r3
 801f080:	f001 f830 	bl	80200e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f084:	2301      	movs	r3, #1
 801f086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f088:	f001 ff1c 	bl	8020ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f08c:	f000 fdaa 	bl	801fbe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f090:	f001 fee8 	bl	8020e64 <vPortEnterCritical>
 801f094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f09a:	b25b      	sxtb	r3, r3
 801f09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0a0:	d103      	bne.n	801f0aa <xQueueReceive+0x122>
 801f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f0b0:	b25b      	sxtb	r3, r3
 801f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0b6:	d103      	bne.n	801f0c0 <xQueueReceive+0x138>
 801f0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f0c0:	f001 ff00 	bl	8020ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f0c4:	1d3a      	adds	r2, r7, #4
 801f0c6:	f107 0310 	add.w	r3, r7, #16
 801f0ca:	4611      	mov	r1, r2
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	f001 f81f 	bl	8020110 <xTaskCheckForTimeOut>
 801f0d2:	4603      	mov	r3, r0
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	d123      	bne.n	801f120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f0da:	f000 f917 	bl	801f30c <prvIsQueueEmpty>
 801f0de:	4603      	mov	r3, r0
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d017      	beq.n	801f114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0e6:	3324      	adds	r3, #36	; 0x24
 801f0e8:	687a      	ldr	r2, [r7, #4]
 801f0ea:	4611      	mov	r1, r2
 801f0ec:	4618      	mov	r0, r3
 801f0ee:	f000 ff47 	bl	801ff80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f0f4:	f000 f8b8 	bl	801f268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f0f8:	f000 fd82 	bl	801fc00 <xTaskResumeAll>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d189      	bne.n	801f016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801f102:	4b10      	ldr	r3, [pc, #64]	; (801f144 <xQueueReceive+0x1bc>)
 801f104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f108:	601a      	str	r2, [r3, #0]
 801f10a:	f3bf 8f4f 	dsb	sy
 801f10e:	f3bf 8f6f 	isb	sy
 801f112:	e780      	b.n	801f016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801f114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f116:	f000 f8a7 	bl	801f268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f11a:	f000 fd71 	bl	801fc00 <xTaskResumeAll>
 801f11e:	e77a      	b.n	801f016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801f120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f122:	f000 f8a1 	bl	801f268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f126:	f000 fd6b 	bl	801fc00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f12c:	f000 f8ee 	bl	801f30c <prvIsQueueEmpty>
 801f130:	4603      	mov	r3, r0
 801f132:	2b00      	cmp	r3, #0
 801f134:	f43f af6f 	beq.w	801f016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f13a:	4618      	mov	r0, r3
 801f13c:	3730      	adds	r7, #48	; 0x30
 801f13e:	46bd      	mov	sp, r7
 801f140:	bd80      	pop	{r7, pc}
 801f142:	bf00      	nop
 801f144:	e000ed04 	.word	0xe000ed04

0801f148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f148:	b580      	push	{r7, lr}
 801f14a:	b086      	sub	sp, #24
 801f14c:	af00      	add	r7, sp, #0
 801f14e:	60f8      	str	r0, [r7, #12]
 801f150:	60b9      	str	r1, [r7, #8]
 801f152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f154:	2300      	movs	r3, #0
 801f156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f15c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f162:	2b00      	cmp	r3, #0
 801f164:	d10d      	bne.n	801f182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d14d      	bne.n	801f20a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f16e:	68fb      	ldr	r3, [r7, #12]
 801f170:	689b      	ldr	r3, [r3, #8]
 801f172:	4618      	mov	r0, r3
 801f174:	f001 f92e 	bl	80203d4 <xTaskPriorityDisinherit>
 801f178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	2200      	movs	r2, #0
 801f17e:	609a      	str	r2, [r3, #8]
 801f180:	e043      	b.n	801f20a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2b00      	cmp	r3, #0
 801f186:	d119      	bne.n	801f1bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f188:	68fb      	ldr	r3, [r7, #12]
 801f18a:	6858      	ldr	r0, [r3, #4]
 801f18c:	68fb      	ldr	r3, [r7, #12]
 801f18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f190:	461a      	mov	r2, r3
 801f192:	68b9      	ldr	r1, [r7, #8]
 801f194:	f002 fee2 	bl	8021f5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f198:	68fb      	ldr	r3, [r7, #12]
 801f19a:	685a      	ldr	r2, [r3, #4]
 801f19c:	68fb      	ldr	r3, [r7, #12]
 801f19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1a0:	441a      	add	r2, r3
 801f1a2:	68fb      	ldr	r3, [r7, #12]
 801f1a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	685a      	ldr	r2, [r3, #4]
 801f1aa:	68fb      	ldr	r3, [r7, #12]
 801f1ac:	689b      	ldr	r3, [r3, #8]
 801f1ae:	429a      	cmp	r2, r3
 801f1b0:	d32b      	bcc.n	801f20a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	681a      	ldr	r2, [r3, #0]
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	605a      	str	r2, [r3, #4]
 801f1ba:	e026      	b.n	801f20a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	68d8      	ldr	r0, [r3, #12]
 801f1c0:	68fb      	ldr	r3, [r7, #12]
 801f1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1c4:	461a      	mov	r2, r3
 801f1c6:	68b9      	ldr	r1, [r7, #8]
 801f1c8:	f002 fec8 	bl	8021f5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f1cc:	68fb      	ldr	r3, [r7, #12]
 801f1ce:	68da      	ldr	r2, [r3, #12]
 801f1d0:	68fb      	ldr	r3, [r7, #12]
 801f1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1d4:	425b      	negs	r3, r3
 801f1d6:	441a      	add	r2, r3
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f1dc:	68fb      	ldr	r3, [r7, #12]
 801f1de:	68da      	ldr	r2, [r3, #12]
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	429a      	cmp	r2, r3
 801f1e6:	d207      	bcs.n	801f1f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	689a      	ldr	r2, [r3, #8]
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1f0:	425b      	negs	r3, r3
 801f1f2:	441a      	add	r2, r3
 801f1f4:	68fb      	ldr	r3, [r7, #12]
 801f1f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	2b02      	cmp	r3, #2
 801f1fc:	d105      	bne.n	801f20a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f1fe:	693b      	ldr	r3, [r7, #16]
 801f200:	2b00      	cmp	r3, #0
 801f202:	d002      	beq.n	801f20a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f204:	693b      	ldr	r3, [r7, #16]
 801f206:	3b01      	subs	r3, #1
 801f208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f20a:	693b      	ldr	r3, [r7, #16]
 801f20c:	1c5a      	adds	r2, r3, #1
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f212:	697b      	ldr	r3, [r7, #20]
}
 801f214:	4618      	mov	r0, r3
 801f216:	3718      	adds	r7, #24
 801f218:	46bd      	mov	sp, r7
 801f21a:	bd80      	pop	{r7, pc}

0801f21c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b082      	sub	sp, #8
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
 801f224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d018      	beq.n	801f260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	68da      	ldr	r2, [r3, #12]
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f236:	441a      	add	r2, r3
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	68da      	ldr	r2, [r3, #12]
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	689b      	ldr	r3, [r3, #8]
 801f244:	429a      	cmp	r2, r3
 801f246:	d303      	bcc.n	801f250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	681a      	ldr	r2, [r3, #0]
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	68d9      	ldr	r1, [r3, #12]
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f258:	461a      	mov	r2, r3
 801f25a:	6838      	ldr	r0, [r7, #0]
 801f25c:	f002 fe7e 	bl	8021f5c <memcpy>
	}
}
 801f260:	bf00      	nop
 801f262:	3708      	adds	r7, #8
 801f264:	46bd      	mov	sp, r7
 801f266:	bd80      	pop	{r7, pc}

0801f268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b084      	sub	sp, #16
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f270:	f001 fdf8 	bl	8020e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f27a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f27c:	e011      	b.n	801f2a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f282:	2b00      	cmp	r3, #0
 801f284:	d012      	beq.n	801f2ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	3324      	adds	r3, #36	; 0x24
 801f28a:	4618      	mov	r0, r3
 801f28c:	f000 fec8 	bl	8020020 <xTaskRemoveFromEventList>
 801f290:	4603      	mov	r3, r0
 801f292:	2b00      	cmp	r3, #0
 801f294:	d001      	beq.n	801f29a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f296:	f000 ff9d 	bl	80201d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f29a:	7bfb      	ldrb	r3, [r7, #15]
 801f29c:	3b01      	subs	r3, #1
 801f29e:	b2db      	uxtb	r3, r3
 801f2a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	dce9      	bgt.n	801f27e <prvUnlockQueue+0x16>
 801f2aa:	e000      	b.n	801f2ae <prvUnlockQueue+0x46>
					break;
 801f2ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	22ff      	movs	r2, #255	; 0xff
 801f2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f2b6:	f001 fe05 	bl	8020ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f2ba:	f001 fdd3 	bl	8020e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f2c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f2c6:	e011      	b.n	801f2ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	691b      	ldr	r3, [r3, #16]
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d012      	beq.n	801f2f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	3310      	adds	r3, #16
 801f2d4:	4618      	mov	r0, r3
 801f2d6:	f000 fea3 	bl	8020020 <xTaskRemoveFromEventList>
 801f2da:	4603      	mov	r3, r0
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d001      	beq.n	801f2e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f2e0:	f000 ff78 	bl	80201d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f2e4:	7bbb      	ldrb	r3, [r7, #14]
 801f2e6:	3b01      	subs	r3, #1
 801f2e8:	b2db      	uxtb	r3, r3
 801f2ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	dce9      	bgt.n	801f2c8 <prvUnlockQueue+0x60>
 801f2f4:	e000      	b.n	801f2f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f2f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	22ff      	movs	r2, #255	; 0xff
 801f2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f300:	f001 fde0 	bl	8020ec4 <vPortExitCritical>
}
 801f304:	bf00      	nop
 801f306:	3710      	adds	r7, #16
 801f308:	46bd      	mov	sp, r7
 801f30a:	bd80      	pop	{r7, pc}

0801f30c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f30c:	b580      	push	{r7, lr}
 801f30e:	b084      	sub	sp, #16
 801f310:	af00      	add	r7, sp, #0
 801f312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f314:	f001 fda6 	bl	8020e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d102      	bne.n	801f326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801f320:	2301      	movs	r3, #1
 801f322:	60fb      	str	r3, [r7, #12]
 801f324:	e001      	b.n	801f32a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801f326:	2300      	movs	r3, #0
 801f328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f32a:	f001 fdcb 	bl	8020ec4 <vPortExitCritical>

	return xReturn;
 801f32e:	68fb      	ldr	r3, [r7, #12]
}
 801f330:	4618      	mov	r0, r3
 801f332:	3710      	adds	r7, #16
 801f334:	46bd      	mov	sp, r7
 801f336:	bd80      	pop	{r7, pc}

0801f338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801f338:	b580      	push	{r7, lr}
 801f33a:	b084      	sub	sp, #16
 801f33c:	af00      	add	r7, sp, #0
 801f33e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f340:	f001 fd90 	bl	8020e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f34c:	429a      	cmp	r2, r3
 801f34e:	d102      	bne.n	801f356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801f350:	2301      	movs	r3, #1
 801f352:	60fb      	str	r3, [r7, #12]
 801f354:	e001      	b.n	801f35a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801f356:	2300      	movs	r3, #0
 801f358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f35a:	f001 fdb3 	bl	8020ec4 <vPortExitCritical>

	return xReturn;
 801f35e:	68fb      	ldr	r3, [r7, #12]
}
 801f360:	4618      	mov	r0, r3
 801f362:	3710      	adds	r7, #16
 801f364:	46bd      	mov	sp, r7
 801f366:	bd80      	pop	{r7, pc}

0801f368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801f368:	b480      	push	{r7}
 801f36a:	b085      	sub	sp, #20
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
 801f370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f372:	2300      	movs	r3, #0
 801f374:	60fb      	str	r3, [r7, #12]
 801f376:	e014      	b.n	801f3a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801f378:	4a0f      	ldr	r2, [pc, #60]	; (801f3b8 <vQueueAddToRegistry+0x50>)
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f380:	2b00      	cmp	r3, #0
 801f382:	d10b      	bne.n	801f39c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801f384:	490c      	ldr	r1, [pc, #48]	; (801f3b8 <vQueueAddToRegistry+0x50>)
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	683a      	ldr	r2, [r7, #0]
 801f38a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801f38e:	4a0a      	ldr	r2, [pc, #40]	; (801f3b8 <vQueueAddToRegistry+0x50>)
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	00db      	lsls	r3, r3, #3
 801f394:	4413      	add	r3, r2
 801f396:	687a      	ldr	r2, [r7, #4]
 801f398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801f39a:	e006      	b.n	801f3aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	3301      	adds	r3, #1
 801f3a0:	60fb      	str	r3, [r7, #12]
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	2b07      	cmp	r3, #7
 801f3a6:	d9e7      	bls.n	801f378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f3a8:	bf00      	nop
 801f3aa:	bf00      	nop
 801f3ac:	3714      	adds	r7, #20
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b4:	4770      	bx	lr
 801f3b6:	bf00      	nop
 801f3b8:	20017098 	.word	0x20017098

0801f3bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b086      	sub	sp, #24
 801f3c0:	af00      	add	r7, sp, #0
 801f3c2:	60f8      	str	r0, [r7, #12]
 801f3c4:	60b9      	str	r1, [r7, #8]
 801f3c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801f3cc:	f001 fd4a 	bl	8020e64 <vPortEnterCritical>
 801f3d0:	697b      	ldr	r3, [r7, #20]
 801f3d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f3d6:	b25b      	sxtb	r3, r3
 801f3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3dc:	d103      	bne.n	801f3e6 <vQueueWaitForMessageRestricted+0x2a>
 801f3de:	697b      	ldr	r3, [r7, #20]
 801f3e0:	2200      	movs	r2, #0
 801f3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f3e6:	697b      	ldr	r3, [r7, #20]
 801f3e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f3ec:	b25b      	sxtb	r3, r3
 801f3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3f2:	d103      	bne.n	801f3fc <vQueueWaitForMessageRestricted+0x40>
 801f3f4:	697b      	ldr	r3, [r7, #20]
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f3fc:	f001 fd62 	bl	8020ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f404:	2b00      	cmp	r3, #0
 801f406:	d106      	bne.n	801f416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801f408:	697b      	ldr	r3, [r7, #20]
 801f40a:	3324      	adds	r3, #36	; 0x24
 801f40c:	687a      	ldr	r2, [r7, #4]
 801f40e:	68b9      	ldr	r1, [r7, #8]
 801f410:	4618      	mov	r0, r3
 801f412:	f000 fdd9 	bl	801ffc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801f416:	6978      	ldr	r0, [r7, #20]
 801f418:	f7ff ff26 	bl	801f268 <prvUnlockQueue>
	}
 801f41c:	bf00      	nop
 801f41e:	3718      	adds	r7, #24
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}

0801f424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801f424:	b580      	push	{r7, lr}
 801f426:	b08e      	sub	sp, #56	; 0x38
 801f428:	af04      	add	r7, sp, #16
 801f42a:	60f8      	str	r0, [r7, #12]
 801f42c:	60b9      	str	r1, [r7, #8]
 801f42e:	607a      	str	r2, [r7, #4]
 801f430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801f432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f434:	2b00      	cmp	r3, #0
 801f436:	d10a      	bne.n	801f44e <xTaskCreateStatic+0x2a>
	__asm volatile
 801f438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f43c:	f383 8811 	msr	BASEPRI, r3
 801f440:	f3bf 8f6f 	isb	sy
 801f444:	f3bf 8f4f 	dsb	sy
 801f448:	623b      	str	r3, [r7, #32]
}
 801f44a:	bf00      	nop
 801f44c:	e7fe      	b.n	801f44c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f450:	2b00      	cmp	r3, #0
 801f452:	d10a      	bne.n	801f46a <xTaskCreateStatic+0x46>
	__asm volatile
 801f454:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f458:	f383 8811 	msr	BASEPRI, r3
 801f45c:	f3bf 8f6f 	isb	sy
 801f460:	f3bf 8f4f 	dsb	sy
 801f464:	61fb      	str	r3, [r7, #28]
}
 801f466:	bf00      	nop
 801f468:	e7fe      	b.n	801f468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801f46a:	2354      	movs	r3, #84	; 0x54
 801f46c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801f46e:	693b      	ldr	r3, [r7, #16]
 801f470:	2b54      	cmp	r3, #84	; 0x54
 801f472:	d00a      	beq.n	801f48a <xTaskCreateStatic+0x66>
	__asm volatile
 801f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f478:	f383 8811 	msr	BASEPRI, r3
 801f47c:	f3bf 8f6f 	isb	sy
 801f480:	f3bf 8f4f 	dsb	sy
 801f484:	61bb      	str	r3, [r7, #24]
}
 801f486:	bf00      	nop
 801f488:	e7fe      	b.n	801f488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801f48a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801f48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d01e      	beq.n	801f4d0 <xTaskCreateStatic+0xac>
 801f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f494:	2b00      	cmp	r3, #0
 801f496:	d01b      	beq.n	801f4d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f49a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f4a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4a4:	2202      	movs	r2, #2
 801f4a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	9303      	str	r3, [sp, #12]
 801f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4b0:	9302      	str	r3, [sp, #8]
 801f4b2:	f107 0314 	add.w	r3, r7, #20
 801f4b6:	9301      	str	r3, [sp, #4]
 801f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4ba:	9300      	str	r3, [sp, #0]
 801f4bc:	683b      	ldr	r3, [r7, #0]
 801f4be:	687a      	ldr	r2, [r7, #4]
 801f4c0:	68b9      	ldr	r1, [r7, #8]
 801f4c2:	68f8      	ldr	r0, [r7, #12]
 801f4c4:	f000 f850 	bl	801f568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4ca:	f000 f8d5 	bl	801f678 <prvAddNewTaskToReadyList>
 801f4ce:	e001      	b.n	801f4d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801f4d4:	697b      	ldr	r3, [r7, #20]
	}
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	3728      	adds	r7, #40	; 0x28
 801f4da:	46bd      	mov	sp, r7
 801f4dc:	bd80      	pop	{r7, pc}

0801f4de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801f4de:	b580      	push	{r7, lr}
 801f4e0:	b08c      	sub	sp, #48	; 0x30
 801f4e2:	af04      	add	r7, sp, #16
 801f4e4:	60f8      	str	r0, [r7, #12]
 801f4e6:	60b9      	str	r1, [r7, #8]
 801f4e8:	603b      	str	r3, [r7, #0]
 801f4ea:	4613      	mov	r3, r2
 801f4ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801f4ee:	88fb      	ldrh	r3, [r7, #6]
 801f4f0:	009b      	lsls	r3, r3, #2
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f001 fdd8 	bl	80210a8 <pvPortMalloc>
 801f4f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801f4fa:	697b      	ldr	r3, [r7, #20]
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d00e      	beq.n	801f51e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801f500:	2054      	movs	r0, #84	; 0x54
 801f502:	f001 fdd1 	bl	80210a8 <pvPortMalloc>
 801f506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801f508:	69fb      	ldr	r3, [r7, #28]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d003      	beq.n	801f516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801f50e:	69fb      	ldr	r3, [r7, #28]
 801f510:	697a      	ldr	r2, [r7, #20]
 801f512:	631a      	str	r2, [r3, #48]	; 0x30
 801f514:	e005      	b.n	801f522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801f516:	6978      	ldr	r0, [r7, #20]
 801f518:	f001 fe92 	bl	8021240 <vPortFree>
 801f51c:	e001      	b.n	801f522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801f51e:	2300      	movs	r3, #0
 801f520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801f522:	69fb      	ldr	r3, [r7, #28]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d017      	beq.n	801f558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801f528:	69fb      	ldr	r3, [r7, #28]
 801f52a:	2200      	movs	r2, #0
 801f52c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801f530:	88fa      	ldrh	r2, [r7, #6]
 801f532:	2300      	movs	r3, #0
 801f534:	9303      	str	r3, [sp, #12]
 801f536:	69fb      	ldr	r3, [r7, #28]
 801f538:	9302      	str	r3, [sp, #8]
 801f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f53c:	9301      	str	r3, [sp, #4]
 801f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f540:	9300      	str	r3, [sp, #0]
 801f542:	683b      	ldr	r3, [r7, #0]
 801f544:	68b9      	ldr	r1, [r7, #8]
 801f546:	68f8      	ldr	r0, [r7, #12]
 801f548:	f000 f80e 	bl	801f568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f54c:	69f8      	ldr	r0, [r7, #28]
 801f54e:	f000 f893 	bl	801f678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801f552:	2301      	movs	r3, #1
 801f554:	61bb      	str	r3, [r7, #24]
 801f556:	e002      	b.n	801f55e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801f558:	f04f 33ff 	mov.w	r3, #4294967295
 801f55c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f55e:	69bb      	ldr	r3, [r7, #24]
	}
 801f560:	4618      	mov	r0, r3
 801f562:	3720      	adds	r7, #32
 801f564:	46bd      	mov	sp, r7
 801f566:	bd80      	pop	{r7, pc}

0801f568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801f568:	b580      	push	{r7, lr}
 801f56a:	b088      	sub	sp, #32
 801f56c:	af00      	add	r7, sp, #0
 801f56e:	60f8      	str	r0, [r7, #12]
 801f570:	60b9      	str	r1, [r7, #8]
 801f572:	607a      	str	r2, [r7, #4]
 801f574:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f580:	3b01      	subs	r3, #1
 801f582:	009b      	lsls	r3, r3, #2
 801f584:	4413      	add	r3, r2
 801f586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801f588:	69bb      	ldr	r3, [r7, #24]
 801f58a:	f023 0307 	bic.w	r3, r3, #7
 801f58e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801f590:	69bb      	ldr	r3, [r7, #24]
 801f592:	f003 0307 	and.w	r3, r3, #7
 801f596:	2b00      	cmp	r3, #0
 801f598:	d00a      	beq.n	801f5b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 801f59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f59e:	f383 8811 	msr	BASEPRI, r3
 801f5a2:	f3bf 8f6f 	isb	sy
 801f5a6:	f3bf 8f4f 	dsb	sy
 801f5aa:	617b      	str	r3, [r7, #20]
}
 801f5ac:	bf00      	nop
 801f5ae:	e7fe      	b.n	801f5ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801f5b0:	68bb      	ldr	r3, [r7, #8]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d01f      	beq.n	801f5f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	61fb      	str	r3, [r7, #28]
 801f5ba:	e012      	b.n	801f5e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801f5bc:	68ba      	ldr	r2, [r7, #8]
 801f5be:	69fb      	ldr	r3, [r7, #28]
 801f5c0:	4413      	add	r3, r2
 801f5c2:	7819      	ldrb	r1, [r3, #0]
 801f5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f5c6:	69fb      	ldr	r3, [r7, #28]
 801f5c8:	4413      	add	r3, r2
 801f5ca:	3334      	adds	r3, #52	; 0x34
 801f5cc:	460a      	mov	r2, r1
 801f5ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801f5d0:	68ba      	ldr	r2, [r7, #8]
 801f5d2:	69fb      	ldr	r3, [r7, #28]
 801f5d4:	4413      	add	r3, r2
 801f5d6:	781b      	ldrb	r3, [r3, #0]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d006      	beq.n	801f5ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f5dc:	69fb      	ldr	r3, [r7, #28]
 801f5de:	3301      	adds	r3, #1
 801f5e0:	61fb      	str	r3, [r7, #28]
 801f5e2:	69fb      	ldr	r3, [r7, #28]
 801f5e4:	2b0f      	cmp	r3, #15
 801f5e6:	d9e9      	bls.n	801f5bc <prvInitialiseNewTask+0x54>
 801f5e8:	e000      	b.n	801f5ec <prvInitialiseNewTask+0x84>
			{
				break;
 801f5ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5ee:	2200      	movs	r2, #0
 801f5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f5f4:	e003      	b.n	801f5fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5f8:	2200      	movs	r2, #0
 801f5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801f5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f600:	2b06      	cmp	r3, #6
 801f602:	d901      	bls.n	801f608 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801f604:	2306      	movs	r3, #6
 801f606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f60c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801f60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f612:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f616:	2200      	movs	r2, #0
 801f618:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f61c:	3304      	adds	r3, #4
 801f61e:	4618      	mov	r0, r3
 801f620:	f7ff f949 	bl	801e8b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f626:	3318      	adds	r3, #24
 801f628:	4618      	mov	r0, r3
 801f62a:	f7ff f944 	bl	801e8b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f636:	f1c3 0207 	rsb	r2, r3, #7
 801f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f63c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f646:	2200      	movs	r2, #0
 801f648:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f64c:	2200      	movs	r2, #0
 801f64e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801f652:	683a      	ldr	r2, [r7, #0]
 801f654:	68f9      	ldr	r1, [r7, #12]
 801f656:	69b8      	ldr	r0, [r7, #24]
 801f658:	f001 fada 	bl	8020c10 <pxPortInitialiseStack>
 801f65c:	4602      	mov	r2, r0
 801f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f664:	2b00      	cmp	r3, #0
 801f666:	d002      	beq.n	801f66e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f66c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f66e:	bf00      	nop
 801f670:	3720      	adds	r7, #32
 801f672:	46bd      	mov	sp, r7
 801f674:	bd80      	pop	{r7, pc}
	...

0801f678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b082      	sub	sp, #8
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f680:	f001 fbf0 	bl	8020e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f684:	4b2a      	ldr	r3, [pc, #168]	; (801f730 <prvAddNewTaskToReadyList+0xb8>)
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	3301      	adds	r3, #1
 801f68a:	4a29      	ldr	r2, [pc, #164]	; (801f730 <prvAddNewTaskToReadyList+0xb8>)
 801f68c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f68e:	4b29      	ldr	r3, [pc, #164]	; (801f734 <prvAddNewTaskToReadyList+0xbc>)
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d109      	bne.n	801f6aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f696:	4a27      	ldr	r2, [pc, #156]	; (801f734 <prvAddNewTaskToReadyList+0xbc>)
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f69c:	4b24      	ldr	r3, [pc, #144]	; (801f730 <prvAddNewTaskToReadyList+0xb8>)
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	2b01      	cmp	r3, #1
 801f6a2:	d110      	bne.n	801f6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f6a4:	f000 fdba 	bl	802021c <prvInitialiseTaskLists>
 801f6a8:	e00d      	b.n	801f6c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f6aa:	4b23      	ldr	r3, [pc, #140]	; (801f738 <prvAddNewTaskToReadyList+0xc0>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d109      	bne.n	801f6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f6b2:	4b20      	ldr	r3, [pc, #128]	; (801f734 <prvAddNewTaskToReadyList+0xbc>)
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6bc:	429a      	cmp	r2, r3
 801f6be:	d802      	bhi.n	801f6c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f6c0:	4a1c      	ldr	r2, [pc, #112]	; (801f734 <prvAddNewTaskToReadyList+0xbc>)
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f6c6:	4b1d      	ldr	r3, [pc, #116]	; (801f73c <prvAddNewTaskToReadyList+0xc4>)
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	3301      	adds	r3, #1
 801f6cc:	4a1b      	ldr	r2, [pc, #108]	; (801f73c <prvAddNewTaskToReadyList+0xc4>)
 801f6ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6d4:	2201      	movs	r2, #1
 801f6d6:	409a      	lsls	r2, r3
 801f6d8:	4b19      	ldr	r3, [pc, #100]	; (801f740 <prvAddNewTaskToReadyList+0xc8>)
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	4313      	orrs	r3, r2
 801f6de:	4a18      	ldr	r2, [pc, #96]	; (801f740 <prvAddNewTaskToReadyList+0xc8>)
 801f6e0:	6013      	str	r3, [r2, #0]
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f6e6:	4613      	mov	r3, r2
 801f6e8:	009b      	lsls	r3, r3, #2
 801f6ea:	4413      	add	r3, r2
 801f6ec:	009b      	lsls	r3, r3, #2
 801f6ee:	4a15      	ldr	r2, [pc, #84]	; (801f744 <prvAddNewTaskToReadyList+0xcc>)
 801f6f0:	441a      	add	r2, r3
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	3304      	adds	r3, #4
 801f6f6:	4619      	mov	r1, r3
 801f6f8:	4610      	mov	r0, r2
 801f6fa:	f7ff f8e9 	bl	801e8d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f6fe:	f001 fbe1 	bl	8020ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f702:	4b0d      	ldr	r3, [pc, #52]	; (801f738 <prvAddNewTaskToReadyList+0xc0>)
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d00e      	beq.n	801f728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f70a:	4b0a      	ldr	r3, [pc, #40]	; (801f734 <prvAddNewTaskToReadyList+0xbc>)
 801f70c:	681b      	ldr	r3, [r3, #0]
 801f70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f714:	429a      	cmp	r2, r3
 801f716:	d207      	bcs.n	801f728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f718:	4b0b      	ldr	r3, [pc, #44]	; (801f748 <prvAddNewTaskToReadyList+0xd0>)
 801f71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f71e:	601a      	str	r2, [r3, #0]
 801f720:	f3bf 8f4f 	dsb	sy
 801f724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f728:	bf00      	nop
 801f72a:	3708      	adds	r7, #8
 801f72c:	46bd      	mov	sp, r7
 801f72e:	bd80      	pop	{r7, pc}
 801f730:	200010f0 	.word	0x200010f0
 801f734:	20000ff0 	.word	0x20000ff0
 801f738:	200010fc 	.word	0x200010fc
 801f73c:	2000110c 	.word	0x2000110c
 801f740:	200010f8 	.word	0x200010f8
 801f744:	20000ff4 	.word	0x20000ff4
 801f748:	e000ed04 	.word	0xe000ed04

0801f74c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801f74c:	b580      	push	{r7, lr}
 801f74e:	b084      	sub	sp, #16
 801f750:	af00      	add	r7, sp, #0
 801f752:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801f754:	f001 fb86 	bl	8020e64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d102      	bne.n	801f764 <vTaskDelete+0x18>
 801f75e:	4b39      	ldr	r3, [pc, #228]	; (801f844 <vTaskDelete+0xf8>)
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	e000      	b.n	801f766 <vTaskDelete+0x1a>
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	3304      	adds	r3, #4
 801f76c:	4618      	mov	r0, r3
 801f76e:	f7ff f90c 	bl	801e98a <uxListRemove>
 801f772:	4603      	mov	r3, r0
 801f774:	2b00      	cmp	r3, #0
 801f776:	d115      	bne.n	801f7a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f77c:	4932      	ldr	r1, [pc, #200]	; (801f848 <vTaskDelete+0xfc>)
 801f77e:	4613      	mov	r3, r2
 801f780:	009b      	lsls	r3, r3, #2
 801f782:	4413      	add	r3, r2
 801f784:	009b      	lsls	r3, r3, #2
 801f786:	440b      	add	r3, r1
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d10a      	bne.n	801f7a4 <vTaskDelete+0x58>
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f792:	2201      	movs	r2, #1
 801f794:	fa02 f303 	lsl.w	r3, r2, r3
 801f798:	43da      	mvns	r2, r3
 801f79a:	4b2c      	ldr	r3, [pc, #176]	; (801f84c <vTaskDelete+0x100>)
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	4013      	ands	r3, r2
 801f7a0:	4a2a      	ldr	r2, [pc, #168]	; (801f84c <vTaskDelete+0x100>)
 801f7a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d004      	beq.n	801f7b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	3318      	adds	r3, #24
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	f7ff f8ea 	bl	801e98a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801f7b6:	4b26      	ldr	r3, [pc, #152]	; (801f850 <vTaskDelete+0x104>)
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	4a24      	ldr	r2, [pc, #144]	; (801f850 <vTaskDelete+0x104>)
 801f7be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801f7c0:	4b20      	ldr	r3, [pc, #128]	; (801f844 <vTaskDelete+0xf8>)
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	68fa      	ldr	r2, [r7, #12]
 801f7c6:	429a      	cmp	r2, r3
 801f7c8:	d10b      	bne.n	801f7e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801f7ca:	68fb      	ldr	r3, [r7, #12]
 801f7cc:	3304      	adds	r3, #4
 801f7ce:	4619      	mov	r1, r3
 801f7d0:	4820      	ldr	r0, [pc, #128]	; (801f854 <vTaskDelete+0x108>)
 801f7d2:	f7ff f87d 	bl	801e8d0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801f7d6:	4b20      	ldr	r3, [pc, #128]	; (801f858 <vTaskDelete+0x10c>)
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	3301      	adds	r3, #1
 801f7dc:	4a1e      	ldr	r2, [pc, #120]	; (801f858 <vTaskDelete+0x10c>)
 801f7de:	6013      	str	r3, [r2, #0]
 801f7e0:	e009      	b.n	801f7f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801f7e2:	4b1e      	ldr	r3, [pc, #120]	; (801f85c <vTaskDelete+0x110>)
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	3b01      	subs	r3, #1
 801f7e8:	4a1c      	ldr	r2, [pc, #112]	; (801f85c <vTaskDelete+0x110>)
 801f7ea:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801f7ec:	68f8      	ldr	r0, [r7, #12]
 801f7ee:	f000 fd83 	bl	80202f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801f7f2:	f000 fdb1 	bl	8020358 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801f7f6:	f001 fb65 	bl	8020ec4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801f7fa:	4b19      	ldr	r3, [pc, #100]	; (801f860 <vTaskDelete+0x114>)
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d01b      	beq.n	801f83a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 801f802:	4b10      	ldr	r3, [pc, #64]	; (801f844 <vTaskDelete+0xf8>)
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	68fa      	ldr	r2, [r7, #12]
 801f808:	429a      	cmp	r2, r3
 801f80a:	d116      	bne.n	801f83a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801f80c:	4b15      	ldr	r3, [pc, #84]	; (801f864 <vTaskDelete+0x118>)
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	2b00      	cmp	r3, #0
 801f812:	d00a      	beq.n	801f82a <vTaskDelete+0xde>
	__asm volatile
 801f814:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f818:	f383 8811 	msr	BASEPRI, r3
 801f81c:	f3bf 8f6f 	isb	sy
 801f820:	f3bf 8f4f 	dsb	sy
 801f824:	60bb      	str	r3, [r7, #8]
}
 801f826:	bf00      	nop
 801f828:	e7fe      	b.n	801f828 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 801f82a:	4b0f      	ldr	r3, [pc, #60]	; (801f868 <vTaskDelete+0x11c>)
 801f82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f830:	601a      	str	r2, [r3, #0]
 801f832:	f3bf 8f4f 	dsb	sy
 801f836:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f83a:	bf00      	nop
 801f83c:	3710      	adds	r7, #16
 801f83e:	46bd      	mov	sp, r7
 801f840:	bd80      	pop	{r7, pc}
 801f842:	bf00      	nop
 801f844:	20000ff0 	.word	0x20000ff0
 801f848:	20000ff4 	.word	0x20000ff4
 801f84c:	200010f8 	.word	0x200010f8
 801f850:	2000110c 	.word	0x2000110c
 801f854:	200010c4 	.word	0x200010c4
 801f858:	200010d8 	.word	0x200010d8
 801f85c:	200010f0 	.word	0x200010f0
 801f860:	200010fc 	.word	0x200010fc
 801f864:	20001118 	.word	0x20001118
 801f868:	e000ed04 	.word	0xe000ed04

0801f86c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801f86c:	b580      	push	{r7, lr}
 801f86e:	b084      	sub	sp, #16
 801f870:	af00      	add	r7, sp, #0
 801f872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801f874:	2300      	movs	r3, #0
 801f876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d017      	beq.n	801f8ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801f87e:	4b13      	ldr	r3, [pc, #76]	; (801f8cc <vTaskDelay+0x60>)
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	2b00      	cmp	r3, #0
 801f884:	d00a      	beq.n	801f89c <vTaskDelay+0x30>
	__asm volatile
 801f886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f88a:	f383 8811 	msr	BASEPRI, r3
 801f88e:	f3bf 8f6f 	isb	sy
 801f892:	f3bf 8f4f 	dsb	sy
 801f896:	60bb      	str	r3, [r7, #8]
}
 801f898:	bf00      	nop
 801f89a:	e7fe      	b.n	801f89a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801f89c:	f000 f9a2 	bl	801fbe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801f8a0:	2100      	movs	r1, #0
 801f8a2:	6878      	ldr	r0, [r7, #4]
 801f8a4:	f000 fe1c 	bl	80204e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801f8a8:	f000 f9aa 	bl	801fc00 <xTaskResumeAll>
 801f8ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	d107      	bne.n	801f8c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801f8b4:	4b06      	ldr	r3, [pc, #24]	; (801f8d0 <vTaskDelay+0x64>)
 801f8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f8ba:	601a      	str	r2, [r3, #0]
 801f8bc:	f3bf 8f4f 	dsb	sy
 801f8c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f8c4:	bf00      	nop
 801f8c6:	3710      	adds	r7, #16
 801f8c8:	46bd      	mov	sp, r7
 801f8ca:	bd80      	pop	{r7, pc}
 801f8cc:	20001118 	.word	0x20001118
 801f8d0:	e000ed04 	.word	0xe000ed04

0801f8d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801f8d4:	b580      	push	{r7, lr}
 801f8d6:	b084      	sub	sp, #16
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801f8dc:	f001 fac2 	bl	8020e64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d102      	bne.n	801f8ec <vTaskSuspend+0x18>
 801f8e6:	4b3c      	ldr	r3, [pc, #240]	; (801f9d8 <vTaskSuspend+0x104>)
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	e000      	b.n	801f8ee <vTaskSuspend+0x1a>
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f8f0:	68fb      	ldr	r3, [r7, #12]
 801f8f2:	3304      	adds	r3, #4
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f7ff f848 	bl	801e98a <uxListRemove>
 801f8fa:	4603      	mov	r3, r0
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d115      	bne.n	801f92c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f904:	4935      	ldr	r1, [pc, #212]	; (801f9dc <vTaskSuspend+0x108>)
 801f906:	4613      	mov	r3, r2
 801f908:	009b      	lsls	r3, r3, #2
 801f90a:	4413      	add	r3, r2
 801f90c:	009b      	lsls	r3, r3, #2
 801f90e:	440b      	add	r3, r1
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d10a      	bne.n	801f92c <vTaskSuspend+0x58>
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f91a:	2201      	movs	r2, #1
 801f91c:	fa02 f303 	lsl.w	r3, r2, r3
 801f920:	43da      	mvns	r2, r3
 801f922:	4b2f      	ldr	r3, [pc, #188]	; (801f9e0 <vTaskSuspend+0x10c>)
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	4013      	ands	r3, r2
 801f928:	4a2d      	ldr	r2, [pc, #180]	; (801f9e0 <vTaskSuspend+0x10c>)
 801f92a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f92c:	68fb      	ldr	r3, [r7, #12]
 801f92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f930:	2b00      	cmp	r3, #0
 801f932:	d004      	beq.n	801f93e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	3318      	adds	r3, #24
 801f938:	4618      	mov	r0, r3
 801f93a:	f7ff f826 	bl	801e98a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801f93e:	68fb      	ldr	r3, [r7, #12]
 801f940:	3304      	adds	r3, #4
 801f942:	4619      	mov	r1, r3
 801f944:	4827      	ldr	r0, [pc, #156]	; (801f9e4 <vTaskSuspend+0x110>)
 801f946:	f7fe ffc3 	bl	801e8d0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801f94a:	68fb      	ldr	r3, [r7, #12]
 801f94c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f950:	b2db      	uxtb	r3, r3
 801f952:	2b01      	cmp	r3, #1
 801f954:	d103      	bne.n	801f95e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	2200      	movs	r2, #0
 801f95a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801f95e:	f001 fab1 	bl	8020ec4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801f962:	4b21      	ldr	r3, [pc, #132]	; (801f9e8 <vTaskSuspend+0x114>)
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	2b00      	cmp	r3, #0
 801f968:	d005      	beq.n	801f976 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801f96a:	f001 fa7b 	bl	8020e64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801f96e:	f000 fcf3 	bl	8020358 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801f972:	f001 faa7 	bl	8020ec4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801f976:	4b18      	ldr	r3, [pc, #96]	; (801f9d8 <vTaskSuspend+0x104>)
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	68fa      	ldr	r2, [r7, #12]
 801f97c:	429a      	cmp	r2, r3
 801f97e:	d127      	bne.n	801f9d0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 801f980:	4b19      	ldr	r3, [pc, #100]	; (801f9e8 <vTaskSuspend+0x114>)
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	2b00      	cmp	r3, #0
 801f986:	d017      	beq.n	801f9b8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801f988:	4b18      	ldr	r3, [pc, #96]	; (801f9ec <vTaskSuspend+0x118>)
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d00a      	beq.n	801f9a6 <vTaskSuspend+0xd2>
	__asm volatile
 801f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f994:	f383 8811 	msr	BASEPRI, r3
 801f998:	f3bf 8f6f 	isb	sy
 801f99c:	f3bf 8f4f 	dsb	sy
 801f9a0:	60bb      	str	r3, [r7, #8]
}
 801f9a2:	bf00      	nop
 801f9a4:	e7fe      	b.n	801f9a4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801f9a6:	4b12      	ldr	r3, [pc, #72]	; (801f9f0 <vTaskSuspend+0x11c>)
 801f9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f9ac:	601a      	str	r2, [r3, #0]
 801f9ae:	f3bf 8f4f 	dsb	sy
 801f9b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f9b6:	e00b      	b.n	801f9d0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801f9b8:	4b0a      	ldr	r3, [pc, #40]	; (801f9e4 <vTaskSuspend+0x110>)
 801f9ba:	681a      	ldr	r2, [r3, #0]
 801f9bc:	4b0d      	ldr	r3, [pc, #52]	; (801f9f4 <vTaskSuspend+0x120>)
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	429a      	cmp	r2, r3
 801f9c2:	d103      	bne.n	801f9cc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801f9c4:	4b04      	ldr	r3, [pc, #16]	; (801f9d8 <vTaskSuspend+0x104>)
 801f9c6:	2200      	movs	r2, #0
 801f9c8:	601a      	str	r2, [r3, #0]
	}
 801f9ca:	e001      	b.n	801f9d0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801f9cc:	f000 fa7c 	bl	801fec8 <vTaskSwitchContext>
	}
 801f9d0:	bf00      	nop
 801f9d2:	3710      	adds	r7, #16
 801f9d4:	46bd      	mov	sp, r7
 801f9d6:	bd80      	pop	{r7, pc}
 801f9d8:	20000ff0 	.word	0x20000ff0
 801f9dc:	20000ff4 	.word	0x20000ff4
 801f9e0:	200010f8 	.word	0x200010f8
 801f9e4:	200010dc 	.word	0x200010dc
 801f9e8:	200010fc 	.word	0x200010fc
 801f9ec:	20001118 	.word	0x20001118
 801f9f0:	e000ed04 	.word	0xe000ed04
 801f9f4:	200010f0 	.word	0x200010f0

0801f9f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801f9f8:	b480      	push	{r7}
 801f9fa:	b087      	sub	sp, #28
 801f9fc:	af00      	add	r7, sp, #0
 801f9fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801fa00:	2300      	movs	r3, #0
 801fa02:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d10a      	bne.n	801fa24 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa12:	f383 8811 	msr	BASEPRI, r3
 801fa16:	f3bf 8f6f 	isb	sy
 801fa1a:	f3bf 8f4f 	dsb	sy
 801fa1e:	60fb      	str	r3, [r7, #12]
}
 801fa20:	bf00      	nop
 801fa22:	e7fe      	b.n	801fa22 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801fa24:	693b      	ldr	r3, [r7, #16]
 801fa26:	695b      	ldr	r3, [r3, #20]
 801fa28:	4a0a      	ldr	r2, [pc, #40]	; (801fa54 <prvTaskIsTaskSuspended+0x5c>)
 801fa2a:	4293      	cmp	r3, r2
 801fa2c:	d10a      	bne.n	801fa44 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801fa2e:	693b      	ldr	r3, [r7, #16]
 801fa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa32:	4a09      	ldr	r2, [pc, #36]	; (801fa58 <prvTaskIsTaskSuspended+0x60>)
 801fa34:	4293      	cmp	r3, r2
 801fa36:	d005      	beq.n	801fa44 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801fa38:	693b      	ldr	r3, [r7, #16]
 801fa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d101      	bne.n	801fa44 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801fa40:	2301      	movs	r3, #1
 801fa42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801fa44:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801fa46:	4618      	mov	r0, r3
 801fa48:	371c      	adds	r7, #28
 801fa4a:	46bd      	mov	sp, r7
 801fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa50:	4770      	bx	lr
 801fa52:	bf00      	nop
 801fa54:	200010dc 	.word	0x200010dc
 801fa58:	200010b0 	.word	0x200010b0

0801fa5c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b084      	sub	sp, #16
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d10a      	bne.n	801fa84 <vTaskResume+0x28>
	__asm volatile
 801fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa72:	f383 8811 	msr	BASEPRI, r3
 801fa76:	f3bf 8f6f 	isb	sy
 801fa7a:	f3bf 8f4f 	dsb	sy
 801fa7e:	60bb      	str	r3, [r7, #8]
}
 801fa80:	bf00      	nop
 801fa82:	e7fe      	b.n	801fa82 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801fa84:	4b20      	ldr	r3, [pc, #128]	; (801fb08 <vTaskResume+0xac>)
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	68fa      	ldr	r2, [r7, #12]
 801fa8a:	429a      	cmp	r2, r3
 801fa8c:	d037      	beq.n	801fafe <vTaskResume+0xa2>
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d034      	beq.n	801fafe <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 801fa94:	f001 f9e6 	bl	8020e64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801fa98:	68f8      	ldr	r0, [r7, #12]
 801fa9a:	f7ff ffad 	bl	801f9f8 <prvTaskIsTaskSuspended>
 801fa9e:	4603      	mov	r3, r0
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d02a      	beq.n	801fafa <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	3304      	adds	r3, #4
 801faa8:	4618      	mov	r0, r3
 801faaa:	f7fe ff6e 	bl	801e98a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fab2:	2201      	movs	r2, #1
 801fab4:	409a      	lsls	r2, r3
 801fab6:	4b15      	ldr	r3, [pc, #84]	; (801fb0c <vTaskResume+0xb0>)
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	4313      	orrs	r3, r2
 801fabc:	4a13      	ldr	r2, [pc, #76]	; (801fb0c <vTaskResume+0xb0>)
 801fabe:	6013      	str	r3, [r2, #0]
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fac4:	4613      	mov	r3, r2
 801fac6:	009b      	lsls	r3, r3, #2
 801fac8:	4413      	add	r3, r2
 801faca:	009b      	lsls	r3, r3, #2
 801facc:	4a10      	ldr	r2, [pc, #64]	; (801fb10 <vTaskResume+0xb4>)
 801face:	441a      	add	r2, r3
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	3304      	adds	r3, #4
 801fad4:	4619      	mov	r1, r3
 801fad6:	4610      	mov	r0, r2
 801fad8:	f7fe fefa 	bl	801e8d0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fadc:	68fb      	ldr	r3, [r7, #12]
 801fade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fae0:	4b09      	ldr	r3, [pc, #36]	; (801fb08 <vTaskResume+0xac>)
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fae6:	429a      	cmp	r2, r3
 801fae8:	d307      	bcc.n	801fafa <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801faea:	4b0a      	ldr	r3, [pc, #40]	; (801fb14 <vTaskResume+0xb8>)
 801faec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801faf0:	601a      	str	r2, [r3, #0]
 801faf2:	f3bf 8f4f 	dsb	sy
 801faf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801fafa:	f001 f9e3 	bl	8020ec4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801fafe:	bf00      	nop
 801fb00:	3710      	adds	r7, #16
 801fb02:	46bd      	mov	sp, r7
 801fb04:	bd80      	pop	{r7, pc}
 801fb06:	bf00      	nop
 801fb08:	20000ff0 	.word	0x20000ff0
 801fb0c:	200010f8 	.word	0x200010f8
 801fb10:	20000ff4 	.word	0x20000ff4
 801fb14:	e000ed04 	.word	0xe000ed04

0801fb18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801fb18:	b580      	push	{r7, lr}
 801fb1a:	b08a      	sub	sp, #40	; 0x28
 801fb1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801fb1e:	2300      	movs	r3, #0
 801fb20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801fb22:	2300      	movs	r3, #0
 801fb24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801fb26:	463a      	mov	r2, r7
 801fb28:	1d39      	adds	r1, r7, #4
 801fb2a:	f107 0308 	add.w	r3, r7, #8
 801fb2e:	4618      	mov	r0, r3
 801fb30:	f7f3 fccc 	bl	80134cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801fb34:	6839      	ldr	r1, [r7, #0]
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	68ba      	ldr	r2, [r7, #8]
 801fb3a:	9202      	str	r2, [sp, #8]
 801fb3c:	9301      	str	r3, [sp, #4]
 801fb3e:	2300      	movs	r3, #0
 801fb40:	9300      	str	r3, [sp, #0]
 801fb42:	2300      	movs	r3, #0
 801fb44:	460a      	mov	r2, r1
 801fb46:	4921      	ldr	r1, [pc, #132]	; (801fbcc <vTaskStartScheduler+0xb4>)
 801fb48:	4821      	ldr	r0, [pc, #132]	; (801fbd0 <vTaskStartScheduler+0xb8>)
 801fb4a:	f7ff fc6b 	bl	801f424 <xTaskCreateStatic>
 801fb4e:	4603      	mov	r3, r0
 801fb50:	4a20      	ldr	r2, [pc, #128]	; (801fbd4 <vTaskStartScheduler+0xbc>)
 801fb52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801fb54:	4b1f      	ldr	r3, [pc, #124]	; (801fbd4 <vTaskStartScheduler+0xbc>)
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d002      	beq.n	801fb62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801fb5c:	2301      	movs	r3, #1
 801fb5e:	617b      	str	r3, [r7, #20]
 801fb60:	e001      	b.n	801fb66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801fb62:	2300      	movs	r3, #0
 801fb64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801fb66:	697b      	ldr	r3, [r7, #20]
 801fb68:	2b01      	cmp	r3, #1
 801fb6a:	d102      	bne.n	801fb72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801fb6c:	f000 fd1e 	bl	80205ac <xTimerCreateTimerTask>
 801fb70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801fb72:	697b      	ldr	r3, [r7, #20]
 801fb74:	2b01      	cmp	r3, #1
 801fb76:	d116      	bne.n	801fba6 <vTaskStartScheduler+0x8e>
	__asm volatile
 801fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb7c:	f383 8811 	msr	BASEPRI, r3
 801fb80:	f3bf 8f6f 	isb	sy
 801fb84:	f3bf 8f4f 	dsb	sy
 801fb88:	613b      	str	r3, [r7, #16]
}
 801fb8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801fb8c:	4b12      	ldr	r3, [pc, #72]	; (801fbd8 <vTaskStartScheduler+0xc0>)
 801fb8e:	f04f 32ff 	mov.w	r2, #4294967295
 801fb92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801fb94:	4b11      	ldr	r3, [pc, #68]	; (801fbdc <vTaskStartScheduler+0xc4>)
 801fb96:	2201      	movs	r2, #1
 801fb98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801fb9a:	4b11      	ldr	r3, [pc, #68]	; (801fbe0 <vTaskStartScheduler+0xc8>)
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801fba0:	f001 f8be 	bl	8020d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801fba4:	e00e      	b.n	801fbc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801fba6:	697b      	ldr	r3, [r7, #20]
 801fba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fbac:	d10a      	bne.n	801fbc4 <vTaskStartScheduler+0xac>
	__asm volatile
 801fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fbb2:	f383 8811 	msr	BASEPRI, r3
 801fbb6:	f3bf 8f6f 	isb	sy
 801fbba:	f3bf 8f4f 	dsb	sy
 801fbbe:	60fb      	str	r3, [r7, #12]
}
 801fbc0:	bf00      	nop
 801fbc2:	e7fe      	b.n	801fbc2 <vTaskStartScheduler+0xaa>
}
 801fbc4:	bf00      	nop
 801fbc6:	3718      	adds	r7, #24
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd80      	pop	{r7, pc}
 801fbcc:	08022244 	.word	0x08022244
 801fbd0:	080201ed 	.word	0x080201ed
 801fbd4:	20001114 	.word	0x20001114
 801fbd8:	20001110 	.word	0x20001110
 801fbdc:	200010fc 	.word	0x200010fc
 801fbe0:	200010f4 	.word	0x200010f4

0801fbe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801fbe4:	b480      	push	{r7}
 801fbe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801fbe8:	4b04      	ldr	r3, [pc, #16]	; (801fbfc <vTaskSuspendAll+0x18>)
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	3301      	adds	r3, #1
 801fbee:	4a03      	ldr	r2, [pc, #12]	; (801fbfc <vTaskSuspendAll+0x18>)
 801fbf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801fbf2:	bf00      	nop
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbfa:	4770      	bx	lr
 801fbfc:	20001118 	.word	0x20001118

0801fc00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801fc00:	b580      	push	{r7, lr}
 801fc02:	b084      	sub	sp, #16
 801fc04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801fc06:	2300      	movs	r3, #0
 801fc08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801fc0a:	2300      	movs	r3, #0
 801fc0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801fc0e:	4b41      	ldr	r3, [pc, #260]	; (801fd14 <xTaskResumeAll+0x114>)
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d10a      	bne.n	801fc2c <xTaskResumeAll+0x2c>
	__asm volatile
 801fc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fc1a:	f383 8811 	msr	BASEPRI, r3
 801fc1e:	f3bf 8f6f 	isb	sy
 801fc22:	f3bf 8f4f 	dsb	sy
 801fc26:	603b      	str	r3, [r7, #0]
}
 801fc28:	bf00      	nop
 801fc2a:	e7fe      	b.n	801fc2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801fc2c:	f001 f91a 	bl	8020e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801fc30:	4b38      	ldr	r3, [pc, #224]	; (801fd14 <xTaskResumeAll+0x114>)
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	3b01      	subs	r3, #1
 801fc36:	4a37      	ldr	r2, [pc, #220]	; (801fd14 <xTaskResumeAll+0x114>)
 801fc38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fc3a:	4b36      	ldr	r3, [pc, #216]	; (801fd14 <xTaskResumeAll+0x114>)
 801fc3c:	681b      	ldr	r3, [r3, #0]
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d161      	bne.n	801fd06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801fc42:	4b35      	ldr	r3, [pc, #212]	; (801fd18 <xTaskResumeAll+0x118>)
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d05d      	beq.n	801fd06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fc4a:	e02e      	b.n	801fcaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fc4c:	4b33      	ldr	r3, [pc, #204]	; (801fd1c <xTaskResumeAll+0x11c>)
 801fc4e:	68db      	ldr	r3, [r3, #12]
 801fc50:	68db      	ldr	r3, [r3, #12]
 801fc52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	3318      	adds	r3, #24
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f7fe fe96 	bl	801e98a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	3304      	adds	r3, #4
 801fc62:	4618      	mov	r0, r3
 801fc64:	f7fe fe91 	bl	801e98a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801fc68:	68fb      	ldr	r3, [r7, #12]
 801fc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc6c:	2201      	movs	r2, #1
 801fc6e:	409a      	lsls	r2, r3
 801fc70:	4b2b      	ldr	r3, [pc, #172]	; (801fd20 <xTaskResumeAll+0x120>)
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	4313      	orrs	r3, r2
 801fc76:	4a2a      	ldr	r2, [pc, #168]	; (801fd20 <xTaskResumeAll+0x120>)
 801fc78:	6013      	str	r3, [r2, #0]
 801fc7a:	68fb      	ldr	r3, [r7, #12]
 801fc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fc7e:	4613      	mov	r3, r2
 801fc80:	009b      	lsls	r3, r3, #2
 801fc82:	4413      	add	r3, r2
 801fc84:	009b      	lsls	r3, r3, #2
 801fc86:	4a27      	ldr	r2, [pc, #156]	; (801fd24 <xTaskResumeAll+0x124>)
 801fc88:	441a      	add	r2, r3
 801fc8a:	68fb      	ldr	r3, [r7, #12]
 801fc8c:	3304      	adds	r3, #4
 801fc8e:	4619      	mov	r1, r3
 801fc90:	4610      	mov	r0, r2
 801fc92:	f7fe fe1d 	bl	801e8d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fc9a:	4b23      	ldr	r3, [pc, #140]	; (801fd28 <xTaskResumeAll+0x128>)
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fca0:	429a      	cmp	r2, r3
 801fca2:	d302      	bcc.n	801fcaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801fca4:	4b21      	ldr	r3, [pc, #132]	; (801fd2c <xTaskResumeAll+0x12c>)
 801fca6:	2201      	movs	r2, #1
 801fca8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fcaa:	4b1c      	ldr	r3, [pc, #112]	; (801fd1c <xTaskResumeAll+0x11c>)
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d1cc      	bne.n	801fc4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801fcb2:	68fb      	ldr	r3, [r7, #12]
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d001      	beq.n	801fcbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801fcb8:	f000 fb4e 	bl	8020358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801fcbc:	4b1c      	ldr	r3, [pc, #112]	; (801fd30 <xTaskResumeAll+0x130>)
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d010      	beq.n	801fcea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801fcc8:	f000 f846 	bl	801fd58 <xTaskIncrementTick>
 801fccc:	4603      	mov	r3, r0
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d002      	beq.n	801fcd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801fcd2:	4b16      	ldr	r3, [pc, #88]	; (801fd2c <xTaskResumeAll+0x12c>)
 801fcd4:	2201      	movs	r2, #1
 801fcd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	3b01      	subs	r3, #1
 801fcdc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d1f1      	bne.n	801fcc8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801fce4:	4b12      	ldr	r3, [pc, #72]	; (801fd30 <xTaskResumeAll+0x130>)
 801fce6:	2200      	movs	r2, #0
 801fce8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801fcea:	4b10      	ldr	r3, [pc, #64]	; (801fd2c <xTaskResumeAll+0x12c>)
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d009      	beq.n	801fd06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801fcf2:	2301      	movs	r3, #1
 801fcf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801fcf6:	4b0f      	ldr	r3, [pc, #60]	; (801fd34 <xTaskResumeAll+0x134>)
 801fcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fcfc:	601a      	str	r2, [r3, #0]
 801fcfe:	f3bf 8f4f 	dsb	sy
 801fd02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801fd06:	f001 f8dd 	bl	8020ec4 <vPortExitCritical>

	return xAlreadyYielded;
 801fd0a:	68bb      	ldr	r3, [r7, #8]
}
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	3710      	adds	r7, #16
 801fd10:	46bd      	mov	sp, r7
 801fd12:	bd80      	pop	{r7, pc}
 801fd14:	20001118 	.word	0x20001118
 801fd18:	200010f0 	.word	0x200010f0
 801fd1c:	200010b0 	.word	0x200010b0
 801fd20:	200010f8 	.word	0x200010f8
 801fd24:	20000ff4 	.word	0x20000ff4
 801fd28:	20000ff0 	.word	0x20000ff0
 801fd2c:	20001104 	.word	0x20001104
 801fd30:	20001100 	.word	0x20001100
 801fd34:	e000ed04 	.word	0xe000ed04

0801fd38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801fd38:	b480      	push	{r7}
 801fd3a:	b083      	sub	sp, #12
 801fd3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801fd3e:	4b05      	ldr	r3, [pc, #20]	; (801fd54 <xTaskGetTickCount+0x1c>)
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801fd44:	687b      	ldr	r3, [r7, #4]
}
 801fd46:	4618      	mov	r0, r3
 801fd48:	370c      	adds	r7, #12
 801fd4a:	46bd      	mov	sp, r7
 801fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd50:	4770      	bx	lr
 801fd52:	bf00      	nop
 801fd54:	200010f4 	.word	0x200010f4

0801fd58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801fd58:	b580      	push	{r7, lr}
 801fd5a:	b086      	sub	sp, #24
 801fd5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801fd5e:	2300      	movs	r3, #0
 801fd60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fd62:	4b4e      	ldr	r3, [pc, #312]	; (801fe9c <xTaskIncrementTick+0x144>)
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	f040 808e 	bne.w	801fe88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801fd6c:	4b4c      	ldr	r3, [pc, #304]	; (801fea0 <xTaskIncrementTick+0x148>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	3301      	adds	r3, #1
 801fd72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801fd74:	4a4a      	ldr	r2, [pc, #296]	; (801fea0 <xTaskIncrementTick+0x148>)
 801fd76:	693b      	ldr	r3, [r7, #16]
 801fd78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801fd7a:	693b      	ldr	r3, [r7, #16]
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	d120      	bne.n	801fdc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801fd80:	4b48      	ldr	r3, [pc, #288]	; (801fea4 <xTaskIncrementTick+0x14c>)
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d00a      	beq.n	801fda0 <xTaskIncrementTick+0x48>
	__asm volatile
 801fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd8e:	f383 8811 	msr	BASEPRI, r3
 801fd92:	f3bf 8f6f 	isb	sy
 801fd96:	f3bf 8f4f 	dsb	sy
 801fd9a:	603b      	str	r3, [r7, #0]
}
 801fd9c:	bf00      	nop
 801fd9e:	e7fe      	b.n	801fd9e <xTaskIncrementTick+0x46>
 801fda0:	4b40      	ldr	r3, [pc, #256]	; (801fea4 <xTaskIncrementTick+0x14c>)
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	60fb      	str	r3, [r7, #12]
 801fda6:	4b40      	ldr	r3, [pc, #256]	; (801fea8 <xTaskIncrementTick+0x150>)
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	4a3e      	ldr	r2, [pc, #248]	; (801fea4 <xTaskIncrementTick+0x14c>)
 801fdac:	6013      	str	r3, [r2, #0]
 801fdae:	4a3e      	ldr	r2, [pc, #248]	; (801fea8 <xTaskIncrementTick+0x150>)
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	6013      	str	r3, [r2, #0]
 801fdb4:	4b3d      	ldr	r3, [pc, #244]	; (801feac <xTaskIncrementTick+0x154>)
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	3301      	adds	r3, #1
 801fdba:	4a3c      	ldr	r2, [pc, #240]	; (801feac <xTaskIncrementTick+0x154>)
 801fdbc:	6013      	str	r3, [r2, #0]
 801fdbe:	f000 facb 	bl	8020358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801fdc2:	4b3b      	ldr	r3, [pc, #236]	; (801feb0 <xTaskIncrementTick+0x158>)
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	693a      	ldr	r2, [r7, #16]
 801fdc8:	429a      	cmp	r2, r3
 801fdca:	d348      	bcc.n	801fe5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fdcc:	4b35      	ldr	r3, [pc, #212]	; (801fea4 <xTaskIncrementTick+0x14c>)
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	681b      	ldr	r3, [r3, #0]
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d104      	bne.n	801fde0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fdd6:	4b36      	ldr	r3, [pc, #216]	; (801feb0 <xTaskIncrementTick+0x158>)
 801fdd8:	f04f 32ff 	mov.w	r2, #4294967295
 801fddc:	601a      	str	r2, [r3, #0]
					break;
 801fdde:	e03e      	b.n	801fe5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fde0:	4b30      	ldr	r3, [pc, #192]	; (801fea4 <xTaskIncrementTick+0x14c>)
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	68db      	ldr	r3, [r3, #12]
 801fde8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801fdea:	68bb      	ldr	r3, [r7, #8]
 801fdec:	685b      	ldr	r3, [r3, #4]
 801fdee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801fdf0:	693a      	ldr	r2, [r7, #16]
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	d203      	bcs.n	801fe00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801fdf8:	4a2d      	ldr	r2, [pc, #180]	; (801feb0 <xTaskIncrementTick+0x158>)
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801fdfe:	e02e      	b.n	801fe5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fe00:	68bb      	ldr	r3, [r7, #8]
 801fe02:	3304      	adds	r3, #4
 801fe04:	4618      	mov	r0, r3
 801fe06:	f7fe fdc0 	bl	801e98a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801fe0a:	68bb      	ldr	r3, [r7, #8]
 801fe0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d004      	beq.n	801fe1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fe12:	68bb      	ldr	r3, [r7, #8]
 801fe14:	3318      	adds	r3, #24
 801fe16:	4618      	mov	r0, r3
 801fe18:	f7fe fdb7 	bl	801e98a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801fe1c:	68bb      	ldr	r3, [r7, #8]
 801fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe20:	2201      	movs	r2, #1
 801fe22:	409a      	lsls	r2, r3
 801fe24:	4b23      	ldr	r3, [pc, #140]	; (801feb4 <xTaskIncrementTick+0x15c>)
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	4313      	orrs	r3, r2
 801fe2a:	4a22      	ldr	r2, [pc, #136]	; (801feb4 <xTaskIncrementTick+0x15c>)
 801fe2c:	6013      	str	r3, [r2, #0]
 801fe2e:	68bb      	ldr	r3, [r7, #8]
 801fe30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe32:	4613      	mov	r3, r2
 801fe34:	009b      	lsls	r3, r3, #2
 801fe36:	4413      	add	r3, r2
 801fe38:	009b      	lsls	r3, r3, #2
 801fe3a:	4a1f      	ldr	r2, [pc, #124]	; (801feb8 <xTaskIncrementTick+0x160>)
 801fe3c:	441a      	add	r2, r3
 801fe3e:	68bb      	ldr	r3, [r7, #8]
 801fe40:	3304      	adds	r3, #4
 801fe42:	4619      	mov	r1, r3
 801fe44:	4610      	mov	r0, r2
 801fe46:	f7fe fd43 	bl	801e8d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fe4a:	68bb      	ldr	r3, [r7, #8]
 801fe4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe4e:	4b1b      	ldr	r3, [pc, #108]	; (801febc <xTaskIncrementTick+0x164>)
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe54:	429a      	cmp	r2, r3
 801fe56:	d3b9      	bcc.n	801fdcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801fe58:	2301      	movs	r3, #1
 801fe5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fe5c:	e7b6      	b.n	801fdcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801fe5e:	4b17      	ldr	r3, [pc, #92]	; (801febc <xTaskIncrementTick+0x164>)
 801fe60:	681b      	ldr	r3, [r3, #0]
 801fe62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe64:	4914      	ldr	r1, [pc, #80]	; (801feb8 <xTaskIncrementTick+0x160>)
 801fe66:	4613      	mov	r3, r2
 801fe68:	009b      	lsls	r3, r3, #2
 801fe6a:	4413      	add	r3, r2
 801fe6c:	009b      	lsls	r3, r3, #2
 801fe6e:	440b      	add	r3, r1
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	2b01      	cmp	r3, #1
 801fe74:	d901      	bls.n	801fe7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801fe76:	2301      	movs	r3, #1
 801fe78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801fe7a:	4b11      	ldr	r3, [pc, #68]	; (801fec0 <xTaskIncrementTick+0x168>)
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d007      	beq.n	801fe92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801fe82:	2301      	movs	r3, #1
 801fe84:	617b      	str	r3, [r7, #20]
 801fe86:	e004      	b.n	801fe92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801fe88:	4b0e      	ldr	r3, [pc, #56]	; (801fec4 <xTaskIncrementTick+0x16c>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	3301      	adds	r3, #1
 801fe8e:	4a0d      	ldr	r2, [pc, #52]	; (801fec4 <xTaskIncrementTick+0x16c>)
 801fe90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801fe92:	697b      	ldr	r3, [r7, #20]
}
 801fe94:	4618      	mov	r0, r3
 801fe96:	3718      	adds	r7, #24
 801fe98:	46bd      	mov	sp, r7
 801fe9a:	bd80      	pop	{r7, pc}
 801fe9c:	20001118 	.word	0x20001118
 801fea0:	200010f4 	.word	0x200010f4
 801fea4:	200010a8 	.word	0x200010a8
 801fea8:	200010ac 	.word	0x200010ac
 801feac:	20001108 	.word	0x20001108
 801feb0:	20001110 	.word	0x20001110
 801feb4:	200010f8 	.word	0x200010f8
 801feb8:	20000ff4 	.word	0x20000ff4
 801febc:	20000ff0 	.word	0x20000ff0
 801fec0:	20001104 	.word	0x20001104
 801fec4:	20001100 	.word	0x20001100

0801fec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801fec8:	b480      	push	{r7}
 801feca:	b087      	sub	sp, #28
 801fecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801fece:	4b27      	ldr	r3, [pc, #156]	; (801ff6c <vTaskSwitchContext+0xa4>)
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d003      	beq.n	801fede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801fed6:	4b26      	ldr	r3, [pc, #152]	; (801ff70 <vTaskSwitchContext+0xa8>)
 801fed8:	2201      	movs	r2, #1
 801feda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801fedc:	e03f      	b.n	801ff5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801fede:	4b24      	ldr	r3, [pc, #144]	; (801ff70 <vTaskSwitchContext+0xa8>)
 801fee0:	2200      	movs	r2, #0
 801fee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fee4:	4b23      	ldr	r3, [pc, #140]	; (801ff74 <vTaskSwitchContext+0xac>)
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	fab3 f383 	clz	r3, r3
 801fef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801fef2:	7afb      	ldrb	r3, [r7, #11]
 801fef4:	f1c3 031f 	rsb	r3, r3, #31
 801fef8:	617b      	str	r3, [r7, #20]
 801fefa:	491f      	ldr	r1, [pc, #124]	; (801ff78 <vTaskSwitchContext+0xb0>)
 801fefc:	697a      	ldr	r2, [r7, #20]
 801fefe:	4613      	mov	r3, r2
 801ff00:	009b      	lsls	r3, r3, #2
 801ff02:	4413      	add	r3, r2
 801ff04:	009b      	lsls	r3, r3, #2
 801ff06:	440b      	add	r3, r1
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d10a      	bne.n	801ff24 <vTaskSwitchContext+0x5c>
	__asm volatile
 801ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff12:	f383 8811 	msr	BASEPRI, r3
 801ff16:	f3bf 8f6f 	isb	sy
 801ff1a:	f3bf 8f4f 	dsb	sy
 801ff1e:	607b      	str	r3, [r7, #4]
}
 801ff20:	bf00      	nop
 801ff22:	e7fe      	b.n	801ff22 <vTaskSwitchContext+0x5a>
 801ff24:	697a      	ldr	r2, [r7, #20]
 801ff26:	4613      	mov	r3, r2
 801ff28:	009b      	lsls	r3, r3, #2
 801ff2a:	4413      	add	r3, r2
 801ff2c:	009b      	lsls	r3, r3, #2
 801ff2e:	4a12      	ldr	r2, [pc, #72]	; (801ff78 <vTaskSwitchContext+0xb0>)
 801ff30:	4413      	add	r3, r2
 801ff32:	613b      	str	r3, [r7, #16]
 801ff34:	693b      	ldr	r3, [r7, #16]
 801ff36:	685b      	ldr	r3, [r3, #4]
 801ff38:	685a      	ldr	r2, [r3, #4]
 801ff3a:	693b      	ldr	r3, [r7, #16]
 801ff3c:	605a      	str	r2, [r3, #4]
 801ff3e:	693b      	ldr	r3, [r7, #16]
 801ff40:	685a      	ldr	r2, [r3, #4]
 801ff42:	693b      	ldr	r3, [r7, #16]
 801ff44:	3308      	adds	r3, #8
 801ff46:	429a      	cmp	r2, r3
 801ff48:	d104      	bne.n	801ff54 <vTaskSwitchContext+0x8c>
 801ff4a:	693b      	ldr	r3, [r7, #16]
 801ff4c:	685b      	ldr	r3, [r3, #4]
 801ff4e:	685a      	ldr	r2, [r3, #4]
 801ff50:	693b      	ldr	r3, [r7, #16]
 801ff52:	605a      	str	r2, [r3, #4]
 801ff54:	693b      	ldr	r3, [r7, #16]
 801ff56:	685b      	ldr	r3, [r3, #4]
 801ff58:	68db      	ldr	r3, [r3, #12]
 801ff5a:	4a08      	ldr	r2, [pc, #32]	; (801ff7c <vTaskSwitchContext+0xb4>)
 801ff5c:	6013      	str	r3, [r2, #0]
}
 801ff5e:	bf00      	nop
 801ff60:	371c      	adds	r7, #28
 801ff62:	46bd      	mov	sp, r7
 801ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff68:	4770      	bx	lr
 801ff6a:	bf00      	nop
 801ff6c:	20001118 	.word	0x20001118
 801ff70:	20001104 	.word	0x20001104
 801ff74:	200010f8 	.word	0x200010f8
 801ff78:	20000ff4 	.word	0x20000ff4
 801ff7c:	20000ff0 	.word	0x20000ff0

0801ff80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801ff80:	b580      	push	{r7, lr}
 801ff82:	b084      	sub	sp, #16
 801ff84:	af00      	add	r7, sp, #0
 801ff86:	6078      	str	r0, [r7, #4]
 801ff88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d10a      	bne.n	801ffa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff94:	f383 8811 	msr	BASEPRI, r3
 801ff98:	f3bf 8f6f 	isb	sy
 801ff9c:	f3bf 8f4f 	dsb	sy
 801ffa0:	60fb      	str	r3, [r7, #12]
}
 801ffa2:	bf00      	nop
 801ffa4:	e7fe      	b.n	801ffa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ffa6:	4b07      	ldr	r3, [pc, #28]	; (801ffc4 <vTaskPlaceOnEventList+0x44>)
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	3318      	adds	r3, #24
 801ffac:	4619      	mov	r1, r3
 801ffae:	6878      	ldr	r0, [r7, #4]
 801ffb0:	f7fe fcb2 	bl	801e918 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ffb4:	2101      	movs	r1, #1
 801ffb6:	6838      	ldr	r0, [r7, #0]
 801ffb8:	f000 fa92 	bl	80204e0 <prvAddCurrentTaskToDelayedList>
}
 801ffbc:	bf00      	nop
 801ffbe:	3710      	adds	r7, #16
 801ffc0:	46bd      	mov	sp, r7
 801ffc2:	bd80      	pop	{r7, pc}
 801ffc4:	20000ff0 	.word	0x20000ff0

0801ffc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ffc8:	b580      	push	{r7, lr}
 801ffca:	b086      	sub	sp, #24
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	60f8      	str	r0, [r7, #12]
 801ffd0:	60b9      	str	r1, [r7, #8]
 801ffd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ffd4:	68fb      	ldr	r3, [r7, #12]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d10a      	bne.n	801fff0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801ffda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffde:	f383 8811 	msr	BASEPRI, r3
 801ffe2:	f3bf 8f6f 	isb	sy
 801ffe6:	f3bf 8f4f 	dsb	sy
 801ffea:	617b      	str	r3, [r7, #20]
}
 801ffec:	bf00      	nop
 801ffee:	e7fe      	b.n	801ffee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801fff0:	4b0a      	ldr	r3, [pc, #40]	; (802001c <vTaskPlaceOnEventListRestricted+0x54>)
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	3318      	adds	r3, #24
 801fff6:	4619      	mov	r1, r3
 801fff8:	68f8      	ldr	r0, [r7, #12]
 801fffa:	f7fe fc69 	bl	801e8d0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	2b00      	cmp	r3, #0
 8020002:	d002      	beq.n	802000a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8020004:	f04f 33ff 	mov.w	r3, #4294967295
 8020008:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802000a:	6879      	ldr	r1, [r7, #4]
 802000c:	68b8      	ldr	r0, [r7, #8]
 802000e:	f000 fa67 	bl	80204e0 <prvAddCurrentTaskToDelayedList>
	}
 8020012:	bf00      	nop
 8020014:	3718      	adds	r7, #24
 8020016:	46bd      	mov	sp, r7
 8020018:	bd80      	pop	{r7, pc}
 802001a:	bf00      	nop
 802001c:	20000ff0 	.word	0x20000ff0

08020020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b086      	sub	sp, #24
 8020024:	af00      	add	r7, sp, #0
 8020026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	68db      	ldr	r3, [r3, #12]
 802002c:	68db      	ldr	r3, [r3, #12]
 802002e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8020030:	693b      	ldr	r3, [r7, #16]
 8020032:	2b00      	cmp	r3, #0
 8020034:	d10a      	bne.n	802004c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8020036:	f04f 0350 	mov.w	r3, #80	; 0x50
 802003a:	f383 8811 	msr	BASEPRI, r3
 802003e:	f3bf 8f6f 	isb	sy
 8020042:	f3bf 8f4f 	dsb	sy
 8020046:	60fb      	str	r3, [r7, #12]
}
 8020048:	bf00      	nop
 802004a:	e7fe      	b.n	802004a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802004c:	693b      	ldr	r3, [r7, #16]
 802004e:	3318      	adds	r3, #24
 8020050:	4618      	mov	r0, r3
 8020052:	f7fe fc9a 	bl	801e98a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020056:	4b1d      	ldr	r3, [pc, #116]	; (80200cc <xTaskRemoveFromEventList+0xac>)
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d11c      	bne.n	8020098 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802005e:	693b      	ldr	r3, [r7, #16]
 8020060:	3304      	adds	r3, #4
 8020062:	4618      	mov	r0, r3
 8020064:	f7fe fc91 	bl	801e98a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8020068:	693b      	ldr	r3, [r7, #16]
 802006a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802006c:	2201      	movs	r2, #1
 802006e:	409a      	lsls	r2, r3
 8020070:	4b17      	ldr	r3, [pc, #92]	; (80200d0 <xTaskRemoveFromEventList+0xb0>)
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	4313      	orrs	r3, r2
 8020076:	4a16      	ldr	r2, [pc, #88]	; (80200d0 <xTaskRemoveFromEventList+0xb0>)
 8020078:	6013      	str	r3, [r2, #0]
 802007a:	693b      	ldr	r3, [r7, #16]
 802007c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802007e:	4613      	mov	r3, r2
 8020080:	009b      	lsls	r3, r3, #2
 8020082:	4413      	add	r3, r2
 8020084:	009b      	lsls	r3, r3, #2
 8020086:	4a13      	ldr	r2, [pc, #76]	; (80200d4 <xTaskRemoveFromEventList+0xb4>)
 8020088:	441a      	add	r2, r3
 802008a:	693b      	ldr	r3, [r7, #16]
 802008c:	3304      	adds	r3, #4
 802008e:	4619      	mov	r1, r3
 8020090:	4610      	mov	r0, r2
 8020092:	f7fe fc1d 	bl	801e8d0 <vListInsertEnd>
 8020096:	e005      	b.n	80200a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8020098:	693b      	ldr	r3, [r7, #16]
 802009a:	3318      	adds	r3, #24
 802009c:	4619      	mov	r1, r3
 802009e:	480e      	ldr	r0, [pc, #56]	; (80200d8 <xTaskRemoveFromEventList+0xb8>)
 80200a0:	f7fe fc16 	bl	801e8d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80200a4:	693b      	ldr	r3, [r7, #16]
 80200a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80200a8:	4b0c      	ldr	r3, [pc, #48]	; (80200dc <xTaskRemoveFromEventList+0xbc>)
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200ae:	429a      	cmp	r2, r3
 80200b0:	d905      	bls.n	80200be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80200b2:	2301      	movs	r3, #1
 80200b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80200b6:	4b0a      	ldr	r3, [pc, #40]	; (80200e0 <xTaskRemoveFromEventList+0xc0>)
 80200b8:	2201      	movs	r2, #1
 80200ba:	601a      	str	r2, [r3, #0]
 80200bc:	e001      	b.n	80200c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80200be:	2300      	movs	r3, #0
 80200c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80200c2:	697b      	ldr	r3, [r7, #20]
}
 80200c4:	4618      	mov	r0, r3
 80200c6:	3718      	adds	r7, #24
 80200c8:	46bd      	mov	sp, r7
 80200ca:	bd80      	pop	{r7, pc}
 80200cc:	20001118 	.word	0x20001118
 80200d0:	200010f8 	.word	0x200010f8
 80200d4:	20000ff4 	.word	0x20000ff4
 80200d8:	200010b0 	.word	0x200010b0
 80200dc:	20000ff0 	.word	0x20000ff0
 80200e0:	20001104 	.word	0x20001104

080200e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80200e4:	b480      	push	{r7}
 80200e6:	b083      	sub	sp, #12
 80200e8:	af00      	add	r7, sp, #0
 80200ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80200ec:	4b06      	ldr	r3, [pc, #24]	; (8020108 <vTaskInternalSetTimeOutState+0x24>)
 80200ee:	681a      	ldr	r2, [r3, #0]
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80200f4:	4b05      	ldr	r3, [pc, #20]	; (802010c <vTaskInternalSetTimeOutState+0x28>)
 80200f6:	681a      	ldr	r2, [r3, #0]
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	605a      	str	r2, [r3, #4]
}
 80200fc:	bf00      	nop
 80200fe:	370c      	adds	r7, #12
 8020100:	46bd      	mov	sp, r7
 8020102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020106:	4770      	bx	lr
 8020108:	20001108 	.word	0x20001108
 802010c:	200010f4 	.word	0x200010f4

08020110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8020110:	b580      	push	{r7, lr}
 8020112:	b088      	sub	sp, #32
 8020114:	af00      	add	r7, sp, #0
 8020116:	6078      	str	r0, [r7, #4]
 8020118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	2b00      	cmp	r3, #0
 802011e:	d10a      	bne.n	8020136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8020120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020124:	f383 8811 	msr	BASEPRI, r3
 8020128:	f3bf 8f6f 	isb	sy
 802012c:	f3bf 8f4f 	dsb	sy
 8020130:	613b      	str	r3, [r7, #16]
}
 8020132:	bf00      	nop
 8020134:	e7fe      	b.n	8020134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8020136:	683b      	ldr	r3, [r7, #0]
 8020138:	2b00      	cmp	r3, #0
 802013a:	d10a      	bne.n	8020152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802013c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020140:	f383 8811 	msr	BASEPRI, r3
 8020144:	f3bf 8f6f 	isb	sy
 8020148:	f3bf 8f4f 	dsb	sy
 802014c:	60fb      	str	r3, [r7, #12]
}
 802014e:	bf00      	nop
 8020150:	e7fe      	b.n	8020150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8020152:	f000 fe87 	bl	8020e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8020156:	4b1d      	ldr	r3, [pc, #116]	; (80201cc <xTaskCheckForTimeOut+0xbc>)
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	685b      	ldr	r3, [r3, #4]
 8020160:	69ba      	ldr	r2, [r7, #24]
 8020162:	1ad3      	subs	r3, r2, r3
 8020164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802016e:	d102      	bne.n	8020176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8020170:	2300      	movs	r3, #0
 8020172:	61fb      	str	r3, [r7, #28]
 8020174:	e023      	b.n	80201be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	681a      	ldr	r2, [r3, #0]
 802017a:	4b15      	ldr	r3, [pc, #84]	; (80201d0 <xTaskCheckForTimeOut+0xc0>)
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	429a      	cmp	r2, r3
 8020180:	d007      	beq.n	8020192 <xTaskCheckForTimeOut+0x82>
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	685b      	ldr	r3, [r3, #4]
 8020186:	69ba      	ldr	r2, [r7, #24]
 8020188:	429a      	cmp	r2, r3
 802018a:	d302      	bcc.n	8020192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802018c:	2301      	movs	r3, #1
 802018e:	61fb      	str	r3, [r7, #28]
 8020190:	e015      	b.n	80201be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8020192:	683b      	ldr	r3, [r7, #0]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	697a      	ldr	r2, [r7, #20]
 8020198:	429a      	cmp	r2, r3
 802019a:	d20b      	bcs.n	80201b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802019c:	683b      	ldr	r3, [r7, #0]
 802019e:	681a      	ldr	r2, [r3, #0]
 80201a0:	697b      	ldr	r3, [r7, #20]
 80201a2:	1ad2      	subs	r2, r2, r3
 80201a4:	683b      	ldr	r3, [r7, #0]
 80201a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80201a8:	6878      	ldr	r0, [r7, #4]
 80201aa:	f7ff ff9b 	bl	80200e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80201ae:	2300      	movs	r3, #0
 80201b0:	61fb      	str	r3, [r7, #28]
 80201b2:	e004      	b.n	80201be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80201b4:	683b      	ldr	r3, [r7, #0]
 80201b6:	2200      	movs	r2, #0
 80201b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80201ba:	2301      	movs	r3, #1
 80201bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80201be:	f000 fe81 	bl	8020ec4 <vPortExitCritical>

	return xReturn;
 80201c2:	69fb      	ldr	r3, [r7, #28]
}
 80201c4:	4618      	mov	r0, r3
 80201c6:	3720      	adds	r7, #32
 80201c8:	46bd      	mov	sp, r7
 80201ca:	bd80      	pop	{r7, pc}
 80201cc:	200010f4 	.word	0x200010f4
 80201d0:	20001108 	.word	0x20001108

080201d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80201d4:	b480      	push	{r7}
 80201d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80201d8:	4b03      	ldr	r3, [pc, #12]	; (80201e8 <vTaskMissedYield+0x14>)
 80201da:	2201      	movs	r2, #1
 80201dc:	601a      	str	r2, [r3, #0]
}
 80201de:	bf00      	nop
 80201e0:	46bd      	mov	sp, r7
 80201e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e6:	4770      	bx	lr
 80201e8:	20001104 	.word	0x20001104

080201ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80201ec:	b580      	push	{r7, lr}
 80201ee:	b082      	sub	sp, #8
 80201f0:	af00      	add	r7, sp, #0
 80201f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80201f4:	f000 f852 	bl	802029c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80201f8:	4b06      	ldr	r3, [pc, #24]	; (8020214 <prvIdleTask+0x28>)
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	2b01      	cmp	r3, #1
 80201fe:	d9f9      	bls.n	80201f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8020200:	4b05      	ldr	r3, [pc, #20]	; (8020218 <prvIdleTask+0x2c>)
 8020202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020206:	601a      	str	r2, [r3, #0]
 8020208:	f3bf 8f4f 	dsb	sy
 802020c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8020210:	e7f0      	b.n	80201f4 <prvIdleTask+0x8>
 8020212:	bf00      	nop
 8020214:	20000ff4 	.word	0x20000ff4
 8020218:	e000ed04 	.word	0xe000ed04

0802021c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802021c:	b580      	push	{r7, lr}
 802021e:	b082      	sub	sp, #8
 8020220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020222:	2300      	movs	r3, #0
 8020224:	607b      	str	r3, [r7, #4]
 8020226:	e00c      	b.n	8020242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8020228:	687a      	ldr	r2, [r7, #4]
 802022a:	4613      	mov	r3, r2
 802022c:	009b      	lsls	r3, r3, #2
 802022e:	4413      	add	r3, r2
 8020230:	009b      	lsls	r3, r3, #2
 8020232:	4a12      	ldr	r2, [pc, #72]	; (802027c <prvInitialiseTaskLists+0x60>)
 8020234:	4413      	add	r3, r2
 8020236:	4618      	mov	r0, r3
 8020238:	f7fe fb1d 	bl	801e876 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	3301      	adds	r3, #1
 8020240:	607b      	str	r3, [r7, #4]
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	2b06      	cmp	r3, #6
 8020246:	d9ef      	bls.n	8020228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8020248:	480d      	ldr	r0, [pc, #52]	; (8020280 <prvInitialiseTaskLists+0x64>)
 802024a:	f7fe fb14 	bl	801e876 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802024e:	480d      	ldr	r0, [pc, #52]	; (8020284 <prvInitialiseTaskLists+0x68>)
 8020250:	f7fe fb11 	bl	801e876 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8020254:	480c      	ldr	r0, [pc, #48]	; (8020288 <prvInitialiseTaskLists+0x6c>)
 8020256:	f7fe fb0e 	bl	801e876 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802025a:	480c      	ldr	r0, [pc, #48]	; (802028c <prvInitialiseTaskLists+0x70>)
 802025c:	f7fe fb0b 	bl	801e876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8020260:	480b      	ldr	r0, [pc, #44]	; (8020290 <prvInitialiseTaskLists+0x74>)
 8020262:	f7fe fb08 	bl	801e876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8020266:	4b0b      	ldr	r3, [pc, #44]	; (8020294 <prvInitialiseTaskLists+0x78>)
 8020268:	4a05      	ldr	r2, [pc, #20]	; (8020280 <prvInitialiseTaskLists+0x64>)
 802026a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802026c:	4b0a      	ldr	r3, [pc, #40]	; (8020298 <prvInitialiseTaskLists+0x7c>)
 802026e:	4a05      	ldr	r2, [pc, #20]	; (8020284 <prvInitialiseTaskLists+0x68>)
 8020270:	601a      	str	r2, [r3, #0]
}
 8020272:	bf00      	nop
 8020274:	3708      	adds	r7, #8
 8020276:	46bd      	mov	sp, r7
 8020278:	bd80      	pop	{r7, pc}
 802027a:	bf00      	nop
 802027c:	20000ff4 	.word	0x20000ff4
 8020280:	20001080 	.word	0x20001080
 8020284:	20001094 	.word	0x20001094
 8020288:	200010b0 	.word	0x200010b0
 802028c:	200010c4 	.word	0x200010c4
 8020290:	200010dc 	.word	0x200010dc
 8020294:	200010a8 	.word	0x200010a8
 8020298:	200010ac 	.word	0x200010ac

0802029c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802029c:	b580      	push	{r7, lr}
 802029e:	b082      	sub	sp, #8
 80202a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80202a2:	e019      	b.n	80202d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80202a4:	f000 fdde 	bl	8020e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80202a8:	4b10      	ldr	r3, [pc, #64]	; (80202ec <prvCheckTasksWaitingTermination+0x50>)
 80202aa:	68db      	ldr	r3, [r3, #12]
 80202ac:	68db      	ldr	r3, [r3, #12]
 80202ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	3304      	adds	r3, #4
 80202b4:	4618      	mov	r0, r3
 80202b6:	f7fe fb68 	bl	801e98a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80202ba:	4b0d      	ldr	r3, [pc, #52]	; (80202f0 <prvCheckTasksWaitingTermination+0x54>)
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	3b01      	subs	r3, #1
 80202c0:	4a0b      	ldr	r2, [pc, #44]	; (80202f0 <prvCheckTasksWaitingTermination+0x54>)
 80202c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80202c4:	4b0b      	ldr	r3, [pc, #44]	; (80202f4 <prvCheckTasksWaitingTermination+0x58>)
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	3b01      	subs	r3, #1
 80202ca:	4a0a      	ldr	r2, [pc, #40]	; (80202f4 <prvCheckTasksWaitingTermination+0x58>)
 80202cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80202ce:	f000 fdf9 	bl	8020ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80202d2:	6878      	ldr	r0, [r7, #4]
 80202d4:	f000 f810 	bl	80202f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80202d8:	4b06      	ldr	r3, [pc, #24]	; (80202f4 <prvCheckTasksWaitingTermination+0x58>)
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d1e1      	bne.n	80202a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80202e0:	bf00      	nop
 80202e2:	bf00      	nop
 80202e4:	3708      	adds	r7, #8
 80202e6:	46bd      	mov	sp, r7
 80202e8:	bd80      	pop	{r7, pc}
 80202ea:	bf00      	nop
 80202ec:	200010c4 	.word	0x200010c4
 80202f0:	200010f0 	.word	0x200010f0
 80202f4:	200010d8 	.word	0x200010d8

080202f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80202f8:	b580      	push	{r7, lr}
 80202fa:	b084      	sub	sp, #16
 80202fc:	af00      	add	r7, sp, #0
 80202fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8020306:	2b00      	cmp	r3, #0
 8020308:	d108      	bne.n	802031c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802030e:	4618      	mov	r0, r3
 8020310:	f000 ff96 	bl	8021240 <vPortFree>
				vPortFree( pxTCB );
 8020314:	6878      	ldr	r0, [r7, #4]
 8020316:	f000 ff93 	bl	8021240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802031a:	e018      	b.n	802034e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8020322:	2b01      	cmp	r3, #1
 8020324:	d103      	bne.n	802032e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8020326:	6878      	ldr	r0, [r7, #4]
 8020328:	f000 ff8a 	bl	8021240 <vPortFree>
	}
 802032c:	e00f      	b.n	802034e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8020334:	2b02      	cmp	r3, #2
 8020336:	d00a      	beq.n	802034e <prvDeleteTCB+0x56>
	__asm volatile
 8020338:	f04f 0350 	mov.w	r3, #80	; 0x50
 802033c:	f383 8811 	msr	BASEPRI, r3
 8020340:	f3bf 8f6f 	isb	sy
 8020344:	f3bf 8f4f 	dsb	sy
 8020348:	60fb      	str	r3, [r7, #12]
}
 802034a:	bf00      	nop
 802034c:	e7fe      	b.n	802034c <prvDeleteTCB+0x54>
	}
 802034e:	bf00      	nop
 8020350:	3710      	adds	r7, #16
 8020352:	46bd      	mov	sp, r7
 8020354:	bd80      	pop	{r7, pc}
	...

08020358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8020358:	b480      	push	{r7}
 802035a:	b083      	sub	sp, #12
 802035c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802035e:	4b0c      	ldr	r3, [pc, #48]	; (8020390 <prvResetNextTaskUnblockTime+0x38>)
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	2b00      	cmp	r3, #0
 8020366:	d104      	bne.n	8020372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8020368:	4b0a      	ldr	r3, [pc, #40]	; (8020394 <prvResetNextTaskUnblockTime+0x3c>)
 802036a:	f04f 32ff 	mov.w	r2, #4294967295
 802036e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8020370:	e008      	b.n	8020384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020372:	4b07      	ldr	r3, [pc, #28]	; (8020390 <prvResetNextTaskUnblockTime+0x38>)
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	68db      	ldr	r3, [r3, #12]
 8020378:	68db      	ldr	r3, [r3, #12]
 802037a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	685b      	ldr	r3, [r3, #4]
 8020380:	4a04      	ldr	r2, [pc, #16]	; (8020394 <prvResetNextTaskUnblockTime+0x3c>)
 8020382:	6013      	str	r3, [r2, #0]
}
 8020384:	bf00      	nop
 8020386:	370c      	adds	r7, #12
 8020388:	46bd      	mov	sp, r7
 802038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038e:	4770      	bx	lr
 8020390:	200010a8 	.word	0x200010a8
 8020394:	20001110 	.word	0x20001110

08020398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8020398:	b480      	push	{r7}
 802039a:	b083      	sub	sp, #12
 802039c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802039e:	4b0b      	ldr	r3, [pc, #44]	; (80203cc <xTaskGetSchedulerState+0x34>)
 80203a0:	681b      	ldr	r3, [r3, #0]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d102      	bne.n	80203ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80203a6:	2301      	movs	r3, #1
 80203a8:	607b      	str	r3, [r7, #4]
 80203aa:	e008      	b.n	80203be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80203ac:	4b08      	ldr	r3, [pc, #32]	; (80203d0 <xTaskGetSchedulerState+0x38>)
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d102      	bne.n	80203ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80203b4:	2302      	movs	r3, #2
 80203b6:	607b      	str	r3, [r7, #4]
 80203b8:	e001      	b.n	80203be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80203ba:	2300      	movs	r3, #0
 80203bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80203be:	687b      	ldr	r3, [r7, #4]
	}
 80203c0:	4618      	mov	r0, r3
 80203c2:	370c      	adds	r7, #12
 80203c4:	46bd      	mov	sp, r7
 80203c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ca:	4770      	bx	lr
 80203cc:	200010fc 	.word	0x200010fc
 80203d0:	20001118 	.word	0x20001118

080203d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80203d4:	b580      	push	{r7, lr}
 80203d6:	b086      	sub	sp, #24
 80203d8:	af00      	add	r7, sp, #0
 80203da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80203e0:	2300      	movs	r3, #0
 80203e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d06e      	beq.n	80204c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80203ea:	4b3a      	ldr	r3, [pc, #232]	; (80204d4 <xTaskPriorityDisinherit+0x100>)
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	693a      	ldr	r2, [r7, #16]
 80203f0:	429a      	cmp	r2, r3
 80203f2:	d00a      	beq.n	802040a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80203f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80203f8:	f383 8811 	msr	BASEPRI, r3
 80203fc:	f3bf 8f6f 	isb	sy
 8020400:	f3bf 8f4f 	dsb	sy
 8020404:	60fb      	str	r3, [r7, #12]
}
 8020406:	bf00      	nop
 8020408:	e7fe      	b.n	8020408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802040a:	693b      	ldr	r3, [r7, #16]
 802040c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802040e:	2b00      	cmp	r3, #0
 8020410:	d10a      	bne.n	8020428 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8020412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020416:	f383 8811 	msr	BASEPRI, r3
 802041a:	f3bf 8f6f 	isb	sy
 802041e:	f3bf 8f4f 	dsb	sy
 8020422:	60bb      	str	r3, [r7, #8]
}
 8020424:	bf00      	nop
 8020426:	e7fe      	b.n	8020426 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8020428:	693b      	ldr	r3, [r7, #16]
 802042a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802042c:	1e5a      	subs	r2, r3, #1
 802042e:	693b      	ldr	r3, [r7, #16]
 8020430:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8020432:	693b      	ldr	r3, [r7, #16]
 8020434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020436:	693b      	ldr	r3, [r7, #16]
 8020438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802043a:	429a      	cmp	r2, r3
 802043c:	d044      	beq.n	80204c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802043e:	693b      	ldr	r3, [r7, #16]
 8020440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020442:	2b00      	cmp	r3, #0
 8020444:	d140      	bne.n	80204c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020446:	693b      	ldr	r3, [r7, #16]
 8020448:	3304      	adds	r3, #4
 802044a:	4618      	mov	r0, r3
 802044c:	f7fe fa9d 	bl	801e98a <uxListRemove>
 8020450:	4603      	mov	r3, r0
 8020452:	2b00      	cmp	r3, #0
 8020454:	d115      	bne.n	8020482 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8020456:	693b      	ldr	r3, [r7, #16]
 8020458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802045a:	491f      	ldr	r1, [pc, #124]	; (80204d8 <xTaskPriorityDisinherit+0x104>)
 802045c:	4613      	mov	r3, r2
 802045e:	009b      	lsls	r3, r3, #2
 8020460:	4413      	add	r3, r2
 8020462:	009b      	lsls	r3, r3, #2
 8020464:	440b      	add	r3, r1
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d10a      	bne.n	8020482 <xTaskPriorityDisinherit+0xae>
 802046c:	693b      	ldr	r3, [r7, #16]
 802046e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020470:	2201      	movs	r2, #1
 8020472:	fa02 f303 	lsl.w	r3, r2, r3
 8020476:	43da      	mvns	r2, r3
 8020478:	4b18      	ldr	r3, [pc, #96]	; (80204dc <xTaskPriorityDisinherit+0x108>)
 802047a:	681b      	ldr	r3, [r3, #0]
 802047c:	4013      	ands	r3, r2
 802047e:	4a17      	ldr	r2, [pc, #92]	; (80204dc <xTaskPriorityDisinherit+0x108>)
 8020480:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8020482:	693b      	ldr	r3, [r7, #16]
 8020484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020486:	693b      	ldr	r3, [r7, #16]
 8020488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802048a:	693b      	ldr	r3, [r7, #16]
 802048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802048e:	f1c3 0207 	rsb	r2, r3, #7
 8020492:	693b      	ldr	r3, [r7, #16]
 8020494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8020496:	693b      	ldr	r3, [r7, #16]
 8020498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802049a:	2201      	movs	r2, #1
 802049c:	409a      	lsls	r2, r3
 802049e:	4b0f      	ldr	r3, [pc, #60]	; (80204dc <xTaskPriorityDisinherit+0x108>)
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	4313      	orrs	r3, r2
 80204a4:	4a0d      	ldr	r2, [pc, #52]	; (80204dc <xTaskPriorityDisinherit+0x108>)
 80204a6:	6013      	str	r3, [r2, #0]
 80204a8:	693b      	ldr	r3, [r7, #16]
 80204aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204ac:	4613      	mov	r3, r2
 80204ae:	009b      	lsls	r3, r3, #2
 80204b0:	4413      	add	r3, r2
 80204b2:	009b      	lsls	r3, r3, #2
 80204b4:	4a08      	ldr	r2, [pc, #32]	; (80204d8 <xTaskPriorityDisinherit+0x104>)
 80204b6:	441a      	add	r2, r3
 80204b8:	693b      	ldr	r3, [r7, #16]
 80204ba:	3304      	adds	r3, #4
 80204bc:	4619      	mov	r1, r3
 80204be:	4610      	mov	r0, r2
 80204c0:	f7fe fa06 	bl	801e8d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80204c4:	2301      	movs	r3, #1
 80204c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80204c8:	697b      	ldr	r3, [r7, #20]
	}
 80204ca:	4618      	mov	r0, r3
 80204cc:	3718      	adds	r7, #24
 80204ce:	46bd      	mov	sp, r7
 80204d0:	bd80      	pop	{r7, pc}
 80204d2:	bf00      	nop
 80204d4:	20000ff0 	.word	0x20000ff0
 80204d8:	20000ff4 	.word	0x20000ff4
 80204dc:	200010f8 	.word	0x200010f8

080204e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80204e0:	b580      	push	{r7, lr}
 80204e2:	b084      	sub	sp, #16
 80204e4:	af00      	add	r7, sp, #0
 80204e6:	6078      	str	r0, [r7, #4]
 80204e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80204ea:	4b29      	ldr	r3, [pc, #164]	; (8020590 <prvAddCurrentTaskToDelayedList+0xb0>)
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80204f0:	4b28      	ldr	r3, [pc, #160]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	3304      	adds	r3, #4
 80204f6:	4618      	mov	r0, r3
 80204f8:	f7fe fa47 	bl	801e98a <uxListRemove>
 80204fc:	4603      	mov	r3, r0
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d10b      	bne.n	802051a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8020502:	4b24      	ldr	r3, [pc, #144]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020508:	2201      	movs	r2, #1
 802050a:	fa02 f303 	lsl.w	r3, r2, r3
 802050e:	43da      	mvns	r2, r3
 8020510:	4b21      	ldr	r3, [pc, #132]	; (8020598 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	4013      	ands	r3, r2
 8020516:	4a20      	ldr	r2, [pc, #128]	; (8020598 <prvAddCurrentTaskToDelayedList+0xb8>)
 8020518:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020520:	d10a      	bne.n	8020538 <prvAddCurrentTaskToDelayedList+0x58>
 8020522:	683b      	ldr	r3, [r7, #0]
 8020524:	2b00      	cmp	r3, #0
 8020526:	d007      	beq.n	8020538 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020528:	4b1a      	ldr	r3, [pc, #104]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	3304      	adds	r3, #4
 802052e:	4619      	mov	r1, r3
 8020530:	481a      	ldr	r0, [pc, #104]	; (802059c <prvAddCurrentTaskToDelayedList+0xbc>)
 8020532:	f7fe f9cd 	bl	801e8d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020536:	e026      	b.n	8020586 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020538:	68fa      	ldr	r2, [r7, #12]
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	4413      	add	r3, r2
 802053e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8020540:	4b14      	ldr	r3, [pc, #80]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	68ba      	ldr	r2, [r7, #8]
 8020546:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020548:	68ba      	ldr	r2, [r7, #8]
 802054a:	68fb      	ldr	r3, [r7, #12]
 802054c:	429a      	cmp	r2, r3
 802054e:	d209      	bcs.n	8020564 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020550:	4b13      	ldr	r3, [pc, #76]	; (80205a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8020552:	681a      	ldr	r2, [r3, #0]
 8020554:	4b0f      	ldr	r3, [pc, #60]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	3304      	adds	r3, #4
 802055a:	4619      	mov	r1, r3
 802055c:	4610      	mov	r0, r2
 802055e:	f7fe f9db 	bl	801e918 <vListInsert>
}
 8020562:	e010      	b.n	8020586 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020564:	4b0f      	ldr	r3, [pc, #60]	; (80205a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8020566:	681a      	ldr	r2, [r3, #0]
 8020568:	4b0a      	ldr	r3, [pc, #40]	; (8020594 <prvAddCurrentTaskToDelayedList+0xb4>)
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	3304      	adds	r3, #4
 802056e:	4619      	mov	r1, r3
 8020570:	4610      	mov	r0, r2
 8020572:	f7fe f9d1 	bl	801e918 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020576:	4b0c      	ldr	r3, [pc, #48]	; (80205a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	68ba      	ldr	r2, [r7, #8]
 802057c:	429a      	cmp	r2, r3
 802057e:	d202      	bcs.n	8020586 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8020580:	4a09      	ldr	r2, [pc, #36]	; (80205a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8020582:	68bb      	ldr	r3, [r7, #8]
 8020584:	6013      	str	r3, [r2, #0]
}
 8020586:	bf00      	nop
 8020588:	3710      	adds	r7, #16
 802058a:	46bd      	mov	sp, r7
 802058c:	bd80      	pop	{r7, pc}
 802058e:	bf00      	nop
 8020590:	200010f4 	.word	0x200010f4
 8020594:	20000ff0 	.word	0x20000ff0
 8020598:	200010f8 	.word	0x200010f8
 802059c:	200010dc 	.word	0x200010dc
 80205a0:	200010ac 	.word	0x200010ac
 80205a4:	200010a8 	.word	0x200010a8
 80205a8:	20001110 	.word	0x20001110

080205ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b08a      	sub	sp, #40	; 0x28
 80205b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80205b2:	2300      	movs	r3, #0
 80205b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80205b6:	f000 faeb 	bl	8020b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80205ba:	4b1c      	ldr	r3, [pc, #112]	; (802062c <xTimerCreateTimerTask+0x80>)
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d021      	beq.n	8020606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80205c2:	2300      	movs	r3, #0
 80205c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80205c6:	2300      	movs	r3, #0
 80205c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80205ca:	1d3a      	adds	r2, r7, #4
 80205cc:	f107 0108 	add.w	r1, r7, #8
 80205d0:	f107 030c 	add.w	r3, r7, #12
 80205d4:	4618      	mov	r0, r3
 80205d6:	f7f2 ff93 	bl	8013500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80205da:	6879      	ldr	r1, [r7, #4]
 80205dc:	68bb      	ldr	r3, [r7, #8]
 80205de:	68fa      	ldr	r2, [r7, #12]
 80205e0:	9202      	str	r2, [sp, #8]
 80205e2:	9301      	str	r3, [sp, #4]
 80205e4:	2306      	movs	r3, #6
 80205e6:	9300      	str	r3, [sp, #0]
 80205e8:	2300      	movs	r3, #0
 80205ea:	460a      	mov	r2, r1
 80205ec:	4910      	ldr	r1, [pc, #64]	; (8020630 <xTimerCreateTimerTask+0x84>)
 80205ee:	4811      	ldr	r0, [pc, #68]	; (8020634 <xTimerCreateTimerTask+0x88>)
 80205f0:	f7fe ff18 	bl	801f424 <xTaskCreateStatic>
 80205f4:	4603      	mov	r3, r0
 80205f6:	4a10      	ldr	r2, [pc, #64]	; (8020638 <xTimerCreateTimerTask+0x8c>)
 80205f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80205fa:	4b0f      	ldr	r3, [pc, #60]	; (8020638 <xTimerCreateTimerTask+0x8c>)
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d001      	beq.n	8020606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8020602:	2301      	movs	r3, #1
 8020604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020606:	697b      	ldr	r3, [r7, #20]
 8020608:	2b00      	cmp	r3, #0
 802060a:	d10a      	bne.n	8020622 <xTimerCreateTimerTask+0x76>
	__asm volatile
 802060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020610:	f383 8811 	msr	BASEPRI, r3
 8020614:	f3bf 8f6f 	isb	sy
 8020618:	f3bf 8f4f 	dsb	sy
 802061c:	613b      	str	r3, [r7, #16]
}
 802061e:	bf00      	nop
 8020620:	e7fe      	b.n	8020620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8020622:	697b      	ldr	r3, [r7, #20]
}
 8020624:	4618      	mov	r0, r3
 8020626:	3718      	adds	r7, #24
 8020628:	46bd      	mov	sp, r7
 802062a:	bd80      	pop	{r7, pc}
 802062c:	2000114c 	.word	0x2000114c
 8020630:	0802224c 	.word	0x0802224c
 8020634:	08020771 	.word	0x08020771
 8020638:	20001150 	.word	0x20001150

0802063c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802063c:	b580      	push	{r7, lr}
 802063e:	b08a      	sub	sp, #40	; 0x28
 8020640:	af00      	add	r7, sp, #0
 8020642:	60f8      	str	r0, [r7, #12]
 8020644:	60b9      	str	r1, [r7, #8]
 8020646:	607a      	str	r2, [r7, #4]
 8020648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802064a:	2300      	movs	r3, #0
 802064c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	2b00      	cmp	r3, #0
 8020652:	d10a      	bne.n	802066a <xTimerGenericCommand+0x2e>
	__asm volatile
 8020654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020658:	f383 8811 	msr	BASEPRI, r3
 802065c:	f3bf 8f6f 	isb	sy
 8020660:	f3bf 8f4f 	dsb	sy
 8020664:	623b      	str	r3, [r7, #32]
}
 8020666:	bf00      	nop
 8020668:	e7fe      	b.n	8020668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802066a:	4b1a      	ldr	r3, [pc, #104]	; (80206d4 <xTimerGenericCommand+0x98>)
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d02a      	beq.n	80206c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020672:	68bb      	ldr	r3, [r7, #8]
 8020674:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802067e:	68bb      	ldr	r3, [r7, #8]
 8020680:	2b05      	cmp	r3, #5
 8020682:	dc18      	bgt.n	80206b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020684:	f7ff fe88 	bl	8020398 <xTaskGetSchedulerState>
 8020688:	4603      	mov	r3, r0
 802068a:	2b02      	cmp	r3, #2
 802068c:	d109      	bne.n	80206a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802068e:	4b11      	ldr	r3, [pc, #68]	; (80206d4 <xTimerGenericCommand+0x98>)
 8020690:	6818      	ldr	r0, [r3, #0]
 8020692:	f107 0114 	add.w	r1, r7, #20
 8020696:	2300      	movs	r3, #0
 8020698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802069a:	f7fe fadb 	bl	801ec54 <xQueueGenericSend>
 802069e:	6278      	str	r0, [r7, #36]	; 0x24
 80206a0:	e012      	b.n	80206c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80206a2:	4b0c      	ldr	r3, [pc, #48]	; (80206d4 <xTimerGenericCommand+0x98>)
 80206a4:	6818      	ldr	r0, [r3, #0]
 80206a6:	f107 0114 	add.w	r1, r7, #20
 80206aa:	2300      	movs	r3, #0
 80206ac:	2200      	movs	r2, #0
 80206ae:	f7fe fad1 	bl	801ec54 <xQueueGenericSend>
 80206b2:	6278      	str	r0, [r7, #36]	; 0x24
 80206b4:	e008      	b.n	80206c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80206b6:	4b07      	ldr	r3, [pc, #28]	; (80206d4 <xTimerGenericCommand+0x98>)
 80206b8:	6818      	ldr	r0, [r3, #0]
 80206ba:	f107 0114 	add.w	r1, r7, #20
 80206be:	2300      	movs	r3, #0
 80206c0:	683a      	ldr	r2, [r7, #0]
 80206c2:	f7fe fbc5 	bl	801ee50 <xQueueGenericSendFromISR>
 80206c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80206c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80206ca:	4618      	mov	r0, r3
 80206cc:	3728      	adds	r7, #40	; 0x28
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}
 80206d2:	bf00      	nop
 80206d4:	2000114c 	.word	0x2000114c

080206d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80206d8:	b580      	push	{r7, lr}
 80206da:	b088      	sub	sp, #32
 80206dc:	af02      	add	r7, sp, #8
 80206de:	6078      	str	r0, [r7, #4]
 80206e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80206e2:	4b22      	ldr	r3, [pc, #136]	; (802076c <prvProcessExpiredTimer+0x94>)
 80206e4:	681b      	ldr	r3, [r3, #0]
 80206e6:	68db      	ldr	r3, [r3, #12]
 80206e8:	68db      	ldr	r3, [r3, #12]
 80206ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80206ec:	697b      	ldr	r3, [r7, #20]
 80206ee:	3304      	adds	r3, #4
 80206f0:	4618      	mov	r0, r3
 80206f2:	f7fe f94a 	bl	801e98a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80206f6:	697b      	ldr	r3, [r7, #20]
 80206f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80206fc:	f003 0304 	and.w	r3, r3, #4
 8020700:	2b00      	cmp	r3, #0
 8020702:	d022      	beq.n	802074a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020704:	697b      	ldr	r3, [r7, #20]
 8020706:	699a      	ldr	r2, [r3, #24]
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	18d1      	adds	r1, r2, r3
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	683a      	ldr	r2, [r7, #0]
 8020710:	6978      	ldr	r0, [r7, #20]
 8020712:	f000 f8d1 	bl	80208b8 <prvInsertTimerInActiveList>
 8020716:	4603      	mov	r3, r0
 8020718:	2b00      	cmp	r3, #0
 802071a:	d01f      	beq.n	802075c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802071c:	2300      	movs	r3, #0
 802071e:	9300      	str	r3, [sp, #0]
 8020720:	2300      	movs	r3, #0
 8020722:	687a      	ldr	r2, [r7, #4]
 8020724:	2100      	movs	r1, #0
 8020726:	6978      	ldr	r0, [r7, #20]
 8020728:	f7ff ff88 	bl	802063c <xTimerGenericCommand>
 802072c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802072e:	693b      	ldr	r3, [r7, #16]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d113      	bne.n	802075c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8020734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020738:	f383 8811 	msr	BASEPRI, r3
 802073c:	f3bf 8f6f 	isb	sy
 8020740:	f3bf 8f4f 	dsb	sy
 8020744:	60fb      	str	r3, [r7, #12]
}
 8020746:	bf00      	nop
 8020748:	e7fe      	b.n	8020748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802074a:	697b      	ldr	r3, [r7, #20]
 802074c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020750:	f023 0301 	bic.w	r3, r3, #1
 8020754:	b2da      	uxtb	r2, r3
 8020756:	697b      	ldr	r3, [r7, #20]
 8020758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802075c:	697b      	ldr	r3, [r7, #20]
 802075e:	6a1b      	ldr	r3, [r3, #32]
 8020760:	6978      	ldr	r0, [r7, #20]
 8020762:	4798      	blx	r3
}
 8020764:	bf00      	nop
 8020766:	3718      	adds	r7, #24
 8020768:	46bd      	mov	sp, r7
 802076a:	bd80      	pop	{r7, pc}
 802076c:	20001144 	.word	0x20001144

08020770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020770:	b580      	push	{r7, lr}
 8020772:	b084      	sub	sp, #16
 8020774:	af00      	add	r7, sp, #0
 8020776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020778:	f107 0308 	add.w	r3, r7, #8
 802077c:	4618      	mov	r0, r3
 802077e:	f000 f857 	bl	8020830 <prvGetNextExpireTime>
 8020782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020784:	68bb      	ldr	r3, [r7, #8]
 8020786:	4619      	mov	r1, r3
 8020788:	68f8      	ldr	r0, [r7, #12]
 802078a:	f000 f803 	bl	8020794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802078e:	f000 f8d5 	bl	802093c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020792:	e7f1      	b.n	8020778 <prvTimerTask+0x8>

08020794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8020794:	b580      	push	{r7, lr}
 8020796:	b084      	sub	sp, #16
 8020798:	af00      	add	r7, sp, #0
 802079a:	6078      	str	r0, [r7, #4]
 802079c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802079e:	f7ff fa21 	bl	801fbe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80207a2:	f107 0308 	add.w	r3, r7, #8
 80207a6:	4618      	mov	r0, r3
 80207a8:	f000 f866 	bl	8020878 <prvSampleTimeNow>
 80207ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80207ae:	68bb      	ldr	r3, [r7, #8]
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d130      	bne.n	8020816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80207b4:	683b      	ldr	r3, [r7, #0]
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	d10a      	bne.n	80207d0 <prvProcessTimerOrBlockTask+0x3c>
 80207ba:	687a      	ldr	r2, [r7, #4]
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	429a      	cmp	r2, r3
 80207c0:	d806      	bhi.n	80207d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80207c2:	f7ff fa1d 	bl	801fc00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80207c6:	68f9      	ldr	r1, [r7, #12]
 80207c8:	6878      	ldr	r0, [r7, #4]
 80207ca:	f7ff ff85 	bl	80206d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80207ce:	e024      	b.n	802081a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80207d0:	683b      	ldr	r3, [r7, #0]
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d008      	beq.n	80207e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80207d6:	4b13      	ldr	r3, [pc, #76]	; (8020824 <prvProcessTimerOrBlockTask+0x90>)
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d101      	bne.n	80207e4 <prvProcessTimerOrBlockTask+0x50>
 80207e0:	2301      	movs	r3, #1
 80207e2:	e000      	b.n	80207e6 <prvProcessTimerOrBlockTask+0x52>
 80207e4:	2300      	movs	r3, #0
 80207e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80207e8:	4b0f      	ldr	r3, [pc, #60]	; (8020828 <prvProcessTimerOrBlockTask+0x94>)
 80207ea:	6818      	ldr	r0, [r3, #0]
 80207ec:	687a      	ldr	r2, [r7, #4]
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	1ad3      	subs	r3, r2, r3
 80207f2:	683a      	ldr	r2, [r7, #0]
 80207f4:	4619      	mov	r1, r3
 80207f6:	f7fe fde1 	bl	801f3bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80207fa:	f7ff fa01 	bl	801fc00 <xTaskResumeAll>
 80207fe:	4603      	mov	r3, r0
 8020800:	2b00      	cmp	r3, #0
 8020802:	d10a      	bne.n	802081a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8020804:	4b09      	ldr	r3, [pc, #36]	; (802082c <prvProcessTimerOrBlockTask+0x98>)
 8020806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802080a:	601a      	str	r2, [r3, #0]
 802080c:	f3bf 8f4f 	dsb	sy
 8020810:	f3bf 8f6f 	isb	sy
}
 8020814:	e001      	b.n	802081a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020816:	f7ff f9f3 	bl	801fc00 <xTaskResumeAll>
}
 802081a:	bf00      	nop
 802081c:	3710      	adds	r7, #16
 802081e:	46bd      	mov	sp, r7
 8020820:	bd80      	pop	{r7, pc}
 8020822:	bf00      	nop
 8020824:	20001148 	.word	0x20001148
 8020828:	2000114c 	.word	0x2000114c
 802082c:	e000ed04 	.word	0xe000ed04

08020830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020830:	b480      	push	{r7}
 8020832:	b085      	sub	sp, #20
 8020834:	af00      	add	r7, sp, #0
 8020836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020838:	4b0e      	ldr	r3, [pc, #56]	; (8020874 <prvGetNextExpireTime+0x44>)
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	2b00      	cmp	r3, #0
 8020840:	d101      	bne.n	8020846 <prvGetNextExpireTime+0x16>
 8020842:	2201      	movs	r2, #1
 8020844:	e000      	b.n	8020848 <prvGetNextExpireTime+0x18>
 8020846:	2200      	movs	r2, #0
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d105      	bne.n	8020860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020854:	4b07      	ldr	r3, [pc, #28]	; (8020874 <prvGetNextExpireTime+0x44>)
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	68db      	ldr	r3, [r3, #12]
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	60fb      	str	r3, [r7, #12]
 802085e:	e001      	b.n	8020864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020860:	2300      	movs	r3, #0
 8020862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020864:	68fb      	ldr	r3, [r7, #12]
}
 8020866:	4618      	mov	r0, r3
 8020868:	3714      	adds	r7, #20
 802086a:	46bd      	mov	sp, r7
 802086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020870:	4770      	bx	lr
 8020872:	bf00      	nop
 8020874:	20001144 	.word	0x20001144

08020878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020878:	b580      	push	{r7, lr}
 802087a:	b084      	sub	sp, #16
 802087c:	af00      	add	r7, sp, #0
 802087e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020880:	f7ff fa5a 	bl	801fd38 <xTaskGetTickCount>
 8020884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020886:	4b0b      	ldr	r3, [pc, #44]	; (80208b4 <prvSampleTimeNow+0x3c>)
 8020888:	681b      	ldr	r3, [r3, #0]
 802088a:	68fa      	ldr	r2, [r7, #12]
 802088c:	429a      	cmp	r2, r3
 802088e:	d205      	bcs.n	802089c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8020890:	f000 f91a 	bl	8020ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	2201      	movs	r2, #1
 8020898:	601a      	str	r2, [r3, #0]
 802089a:	e002      	b.n	80208a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	2200      	movs	r2, #0
 80208a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80208a2:	4a04      	ldr	r2, [pc, #16]	; (80208b4 <prvSampleTimeNow+0x3c>)
 80208a4:	68fb      	ldr	r3, [r7, #12]
 80208a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80208a8:	68fb      	ldr	r3, [r7, #12]
}
 80208aa:	4618      	mov	r0, r3
 80208ac:	3710      	adds	r7, #16
 80208ae:	46bd      	mov	sp, r7
 80208b0:	bd80      	pop	{r7, pc}
 80208b2:	bf00      	nop
 80208b4:	20001154 	.word	0x20001154

080208b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80208b8:	b580      	push	{r7, lr}
 80208ba:	b086      	sub	sp, #24
 80208bc:	af00      	add	r7, sp, #0
 80208be:	60f8      	str	r0, [r7, #12]
 80208c0:	60b9      	str	r1, [r7, #8]
 80208c2:	607a      	str	r2, [r7, #4]
 80208c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80208c6:	2300      	movs	r3, #0
 80208c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80208ca:	68fb      	ldr	r3, [r7, #12]
 80208cc:	68ba      	ldr	r2, [r7, #8]
 80208ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	68fa      	ldr	r2, [r7, #12]
 80208d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80208d6:	68ba      	ldr	r2, [r7, #8]
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	429a      	cmp	r2, r3
 80208dc:	d812      	bhi.n	8020904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80208de:	687a      	ldr	r2, [r7, #4]
 80208e0:	683b      	ldr	r3, [r7, #0]
 80208e2:	1ad2      	subs	r2, r2, r3
 80208e4:	68fb      	ldr	r3, [r7, #12]
 80208e6:	699b      	ldr	r3, [r3, #24]
 80208e8:	429a      	cmp	r2, r3
 80208ea:	d302      	bcc.n	80208f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80208ec:	2301      	movs	r3, #1
 80208ee:	617b      	str	r3, [r7, #20]
 80208f0:	e01b      	b.n	802092a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80208f2:	4b10      	ldr	r3, [pc, #64]	; (8020934 <prvInsertTimerInActiveList+0x7c>)
 80208f4:	681a      	ldr	r2, [r3, #0]
 80208f6:	68fb      	ldr	r3, [r7, #12]
 80208f8:	3304      	adds	r3, #4
 80208fa:	4619      	mov	r1, r3
 80208fc:	4610      	mov	r0, r2
 80208fe:	f7fe f80b 	bl	801e918 <vListInsert>
 8020902:	e012      	b.n	802092a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8020904:	687a      	ldr	r2, [r7, #4]
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	429a      	cmp	r2, r3
 802090a:	d206      	bcs.n	802091a <prvInsertTimerInActiveList+0x62>
 802090c:	68ba      	ldr	r2, [r7, #8]
 802090e:	683b      	ldr	r3, [r7, #0]
 8020910:	429a      	cmp	r2, r3
 8020912:	d302      	bcc.n	802091a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8020914:	2301      	movs	r3, #1
 8020916:	617b      	str	r3, [r7, #20]
 8020918:	e007      	b.n	802092a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802091a:	4b07      	ldr	r3, [pc, #28]	; (8020938 <prvInsertTimerInActiveList+0x80>)
 802091c:	681a      	ldr	r2, [r3, #0]
 802091e:	68fb      	ldr	r3, [r7, #12]
 8020920:	3304      	adds	r3, #4
 8020922:	4619      	mov	r1, r3
 8020924:	4610      	mov	r0, r2
 8020926:	f7fd fff7 	bl	801e918 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802092a:	697b      	ldr	r3, [r7, #20]
}
 802092c:	4618      	mov	r0, r3
 802092e:	3718      	adds	r7, #24
 8020930:	46bd      	mov	sp, r7
 8020932:	bd80      	pop	{r7, pc}
 8020934:	20001148 	.word	0x20001148
 8020938:	20001144 	.word	0x20001144

0802093c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b08c      	sub	sp, #48	; 0x30
 8020940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8020942:	e0ae      	b.n	8020aa2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8020944:	68bb      	ldr	r3, [r7, #8]
 8020946:	2b00      	cmp	r3, #0
 8020948:	f2c0 80aa 	blt.w	8020aa0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802094c:	693b      	ldr	r3, [r7, #16]
 802094e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8020950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020952:	695b      	ldr	r3, [r3, #20]
 8020954:	2b00      	cmp	r3, #0
 8020956:	d004      	beq.n	8020962 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802095a:	3304      	adds	r3, #4
 802095c:	4618      	mov	r0, r3
 802095e:	f7fe f814 	bl	801e98a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020962:	1d3b      	adds	r3, r7, #4
 8020964:	4618      	mov	r0, r3
 8020966:	f7ff ff87 	bl	8020878 <prvSampleTimeNow>
 802096a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 802096c:	68bb      	ldr	r3, [r7, #8]
 802096e:	2b09      	cmp	r3, #9
 8020970:	f200 8097 	bhi.w	8020aa2 <prvProcessReceivedCommands+0x166>
 8020974:	a201      	add	r2, pc, #4	; (adr r2, 802097c <prvProcessReceivedCommands+0x40>)
 8020976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802097a:	bf00      	nop
 802097c:	080209a5 	.word	0x080209a5
 8020980:	080209a5 	.word	0x080209a5
 8020984:	080209a5 	.word	0x080209a5
 8020988:	08020a19 	.word	0x08020a19
 802098c:	08020a2d 	.word	0x08020a2d
 8020990:	08020a77 	.word	0x08020a77
 8020994:	080209a5 	.word	0x080209a5
 8020998:	080209a5 	.word	0x080209a5
 802099c:	08020a19 	.word	0x08020a19
 80209a0:	08020a2d 	.word	0x08020a2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80209a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80209aa:	f043 0301 	orr.w	r3, r3, #1
 80209ae:	b2da      	uxtb	r2, r3
 80209b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80209b6:	68fa      	ldr	r2, [r7, #12]
 80209b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209ba:	699b      	ldr	r3, [r3, #24]
 80209bc:	18d1      	adds	r1, r2, r3
 80209be:	68fb      	ldr	r3, [r7, #12]
 80209c0:	6a3a      	ldr	r2, [r7, #32]
 80209c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80209c4:	f7ff ff78 	bl	80208b8 <prvInsertTimerInActiveList>
 80209c8:	4603      	mov	r3, r0
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d069      	beq.n	8020aa2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80209ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209d0:	6a1b      	ldr	r3, [r3, #32]
 80209d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80209d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80209d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80209dc:	f003 0304 	and.w	r3, r3, #4
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d05e      	beq.n	8020aa2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80209e4:	68fa      	ldr	r2, [r7, #12]
 80209e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209e8:	699b      	ldr	r3, [r3, #24]
 80209ea:	441a      	add	r2, r3
 80209ec:	2300      	movs	r3, #0
 80209ee:	9300      	str	r3, [sp, #0]
 80209f0:	2300      	movs	r3, #0
 80209f2:	2100      	movs	r1, #0
 80209f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80209f6:	f7ff fe21 	bl	802063c <xTimerGenericCommand>
 80209fa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80209fc:	69fb      	ldr	r3, [r7, #28]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d14f      	bne.n	8020aa2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8020a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a06:	f383 8811 	msr	BASEPRI, r3
 8020a0a:	f3bf 8f6f 	isb	sy
 8020a0e:	f3bf 8f4f 	dsb	sy
 8020a12:	61bb      	str	r3, [r7, #24]
}
 8020a14:	bf00      	nop
 8020a16:	e7fe      	b.n	8020a16 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020a1e:	f023 0301 	bic.w	r3, r3, #1
 8020a22:	b2da      	uxtb	r2, r3
 8020a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8020a2a:	e03a      	b.n	8020aa2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8020a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020a32:	f043 0301 	orr.w	r3, r3, #1
 8020a36:	b2da      	uxtb	r2, r3
 8020a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8020a3e:	68fa      	ldr	r2, [r7, #12]
 8020a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8020a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a46:	699b      	ldr	r3, [r3, #24]
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d10a      	bne.n	8020a62 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8020a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a50:	f383 8811 	msr	BASEPRI, r3
 8020a54:	f3bf 8f6f 	isb	sy
 8020a58:	f3bf 8f4f 	dsb	sy
 8020a5c:	617b      	str	r3, [r7, #20]
}
 8020a5e:	bf00      	nop
 8020a60:	e7fe      	b.n	8020a60 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8020a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a64:	699a      	ldr	r2, [r3, #24]
 8020a66:	6a3b      	ldr	r3, [r7, #32]
 8020a68:	18d1      	adds	r1, r2, r3
 8020a6a:	6a3b      	ldr	r3, [r7, #32]
 8020a6c:	6a3a      	ldr	r2, [r7, #32]
 8020a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020a70:	f7ff ff22 	bl	80208b8 <prvInsertTimerInActiveList>
					break;
 8020a74:	e015      	b.n	8020aa2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8020a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020a7c:	f003 0302 	and.w	r3, r3, #2
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d103      	bne.n	8020a8c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8020a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020a86:	f000 fbdb 	bl	8021240 <vPortFree>
 8020a8a:	e00a      	b.n	8020aa2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020a92:	f023 0301 	bic.w	r3, r3, #1
 8020a96:	b2da      	uxtb	r2, r3
 8020a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8020a9e:	e000      	b.n	8020aa2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8020aa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8020aa2:	4b08      	ldr	r3, [pc, #32]	; (8020ac4 <prvProcessReceivedCommands+0x188>)
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	f107 0108 	add.w	r1, r7, #8
 8020aaa:	2200      	movs	r2, #0
 8020aac:	4618      	mov	r0, r3
 8020aae:	f7fe fa6b 	bl	801ef88 <xQueueReceive>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	f47f af45 	bne.w	8020944 <prvProcessReceivedCommands+0x8>
	}
}
 8020aba:	bf00      	nop
 8020abc:	bf00      	nop
 8020abe:	3728      	adds	r7, #40	; 0x28
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	bd80      	pop	{r7, pc}
 8020ac4:	2000114c 	.word	0x2000114c

08020ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b088      	sub	sp, #32
 8020acc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020ace:	e048      	b.n	8020b62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020ad0:	4b2d      	ldr	r3, [pc, #180]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	68db      	ldr	r3, [r3, #12]
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020ada:	4b2b      	ldr	r3, [pc, #172]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	68db      	ldr	r3, [r3, #12]
 8020ae0:	68db      	ldr	r3, [r3, #12]
 8020ae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020ae4:	68fb      	ldr	r3, [r7, #12]
 8020ae6:	3304      	adds	r3, #4
 8020ae8:	4618      	mov	r0, r3
 8020aea:	f7fd ff4e 	bl	801e98a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020aee:	68fb      	ldr	r3, [r7, #12]
 8020af0:	6a1b      	ldr	r3, [r3, #32]
 8020af2:	68f8      	ldr	r0, [r7, #12]
 8020af4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020afc:	f003 0304 	and.w	r3, r3, #4
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d02e      	beq.n	8020b62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	699b      	ldr	r3, [r3, #24]
 8020b08:	693a      	ldr	r2, [r7, #16]
 8020b0a:	4413      	add	r3, r2
 8020b0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8020b0e:	68ba      	ldr	r2, [r7, #8]
 8020b10:	693b      	ldr	r3, [r7, #16]
 8020b12:	429a      	cmp	r2, r3
 8020b14:	d90e      	bls.n	8020b34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8020b16:	68fb      	ldr	r3, [r7, #12]
 8020b18:	68ba      	ldr	r2, [r7, #8]
 8020b1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8020b1c:	68fb      	ldr	r3, [r7, #12]
 8020b1e:	68fa      	ldr	r2, [r7, #12]
 8020b20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020b22:	4b19      	ldr	r3, [pc, #100]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020b24:	681a      	ldr	r2, [r3, #0]
 8020b26:	68fb      	ldr	r3, [r7, #12]
 8020b28:	3304      	adds	r3, #4
 8020b2a:	4619      	mov	r1, r3
 8020b2c:	4610      	mov	r0, r2
 8020b2e:	f7fd fef3 	bl	801e918 <vListInsert>
 8020b32:	e016      	b.n	8020b62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020b34:	2300      	movs	r3, #0
 8020b36:	9300      	str	r3, [sp, #0]
 8020b38:	2300      	movs	r3, #0
 8020b3a:	693a      	ldr	r2, [r7, #16]
 8020b3c:	2100      	movs	r1, #0
 8020b3e:	68f8      	ldr	r0, [r7, #12]
 8020b40:	f7ff fd7c 	bl	802063c <xTimerGenericCommand>
 8020b44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	d10a      	bne.n	8020b62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8020b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b50:	f383 8811 	msr	BASEPRI, r3
 8020b54:	f3bf 8f6f 	isb	sy
 8020b58:	f3bf 8f4f 	dsb	sy
 8020b5c:	603b      	str	r3, [r7, #0]
}
 8020b5e:	bf00      	nop
 8020b60:	e7fe      	b.n	8020b60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020b62:	4b09      	ldr	r3, [pc, #36]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d1b1      	bne.n	8020ad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8020b6c:	4b06      	ldr	r3, [pc, #24]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020b6e:	681b      	ldr	r3, [r3, #0]
 8020b70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8020b72:	4b06      	ldr	r3, [pc, #24]	; (8020b8c <prvSwitchTimerLists+0xc4>)
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	4a04      	ldr	r2, [pc, #16]	; (8020b88 <prvSwitchTimerLists+0xc0>)
 8020b78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8020b7a:	4a04      	ldr	r2, [pc, #16]	; (8020b8c <prvSwitchTimerLists+0xc4>)
 8020b7c:	697b      	ldr	r3, [r7, #20]
 8020b7e:	6013      	str	r3, [r2, #0]
}
 8020b80:	bf00      	nop
 8020b82:	3718      	adds	r7, #24
 8020b84:	46bd      	mov	sp, r7
 8020b86:	bd80      	pop	{r7, pc}
 8020b88:	20001144 	.word	0x20001144
 8020b8c:	20001148 	.word	0x20001148

08020b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8020b90:	b580      	push	{r7, lr}
 8020b92:	b082      	sub	sp, #8
 8020b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8020b96:	f000 f965 	bl	8020e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8020b9a:	4b15      	ldr	r3, [pc, #84]	; (8020bf0 <prvCheckForValidListAndQueue+0x60>)
 8020b9c:	681b      	ldr	r3, [r3, #0]
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d120      	bne.n	8020be4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8020ba2:	4814      	ldr	r0, [pc, #80]	; (8020bf4 <prvCheckForValidListAndQueue+0x64>)
 8020ba4:	f7fd fe67 	bl	801e876 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8020ba8:	4813      	ldr	r0, [pc, #76]	; (8020bf8 <prvCheckForValidListAndQueue+0x68>)
 8020baa:	f7fd fe64 	bl	801e876 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8020bae:	4b13      	ldr	r3, [pc, #76]	; (8020bfc <prvCheckForValidListAndQueue+0x6c>)
 8020bb0:	4a10      	ldr	r2, [pc, #64]	; (8020bf4 <prvCheckForValidListAndQueue+0x64>)
 8020bb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8020bb4:	4b12      	ldr	r3, [pc, #72]	; (8020c00 <prvCheckForValidListAndQueue+0x70>)
 8020bb6:	4a10      	ldr	r2, [pc, #64]	; (8020bf8 <prvCheckForValidListAndQueue+0x68>)
 8020bb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8020bba:	2300      	movs	r3, #0
 8020bbc:	9300      	str	r3, [sp, #0]
 8020bbe:	4b11      	ldr	r3, [pc, #68]	; (8020c04 <prvCheckForValidListAndQueue+0x74>)
 8020bc0:	4a11      	ldr	r2, [pc, #68]	; (8020c08 <prvCheckForValidListAndQueue+0x78>)
 8020bc2:	210c      	movs	r1, #12
 8020bc4:	200a      	movs	r0, #10
 8020bc6:	f7fd ff73 	bl	801eab0 <xQueueGenericCreateStatic>
 8020bca:	4603      	mov	r3, r0
 8020bcc:	4a08      	ldr	r2, [pc, #32]	; (8020bf0 <prvCheckForValidListAndQueue+0x60>)
 8020bce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8020bd0:	4b07      	ldr	r3, [pc, #28]	; (8020bf0 <prvCheckForValidListAndQueue+0x60>)
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d005      	beq.n	8020be4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8020bd8:	4b05      	ldr	r3, [pc, #20]	; (8020bf0 <prvCheckForValidListAndQueue+0x60>)
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	490b      	ldr	r1, [pc, #44]	; (8020c0c <prvCheckForValidListAndQueue+0x7c>)
 8020bde:	4618      	mov	r0, r3
 8020be0:	f7fe fbc2 	bl	801f368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020be4:	f000 f96e 	bl	8020ec4 <vPortExitCritical>
}
 8020be8:	bf00      	nop
 8020bea:	46bd      	mov	sp, r7
 8020bec:	bd80      	pop	{r7, pc}
 8020bee:	bf00      	nop
 8020bf0:	2000114c 	.word	0x2000114c
 8020bf4:	2000111c 	.word	0x2000111c
 8020bf8:	20001130 	.word	0x20001130
 8020bfc:	20001144 	.word	0x20001144
 8020c00:	20001148 	.word	0x20001148
 8020c04:	200011d0 	.word	0x200011d0
 8020c08:	20001158 	.word	0x20001158
 8020c0c:	08022254 	.word	0x08022254

08020c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8020c10:	b480      	push	{r7}
 8020c12:	b085      	sub	sp, #20
 8020c14:	af00      	add	r7, sp, #0
 8020c16:	60f8      	str	r0, [r7, #12]
 8020c18:	60b9      	str	r1, [r7, #8]
 8020c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8020c1c:	68fb      	ldr	r3, [r7, #12]
 8020c1e:	3b04      	subs	r3, #4
 8020c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8020c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8020c2a:	68fb      	ldr	r3, [r7, #12]
 8020c2c:	3b04      	subs	r3, #4
 8020c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8020c30:	68bb      	ldr	r3, [r7, #8]
 8020c32:	f023 0201 	bic.w	r2, r3, #1
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	3b04      	subs	r3, #4
 8020c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8020c40:	4a0c      	ldr	r2, [pc, #48]	; (8020c74 <pxPortInitialiseStack+0x64>)
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8020c46:	68fb      	ldr	r3, [r7, #12]
 8020c48:	3b14      	subs	r3, #20
 8020c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8020c4c:	687a      	ldr	r2, [r7, #4]
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	3b04      	subs	r3, #4
 8020c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8020c58:	68fb      	ldr	r3, [r7, #12]
 8020c5a:	f06f 0202 	mvn.w	r2, #2
 8020c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8020c60:	68fb      	ldr	r3, [r7, #12]
 8020c62:	3b20      	subs	r3, #32
 8020c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8020c66:	68fb      	ldr	r3, [r7, #12]
}
 8020c68:	4618      	mov	r0, r3
 8020c6a:	3714      	adds	r7, #20
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c72:	4770      	bx	lr
 8020c74:	08020c79 	.word	0x08020c79

08020c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8020c78:	b480      	push	{r7}
 8020c7a:	b085      	sub	sp, #20
 8020c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8020c7e:	2300      	movs	r3, #0
 8020c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8020c82:	4b12      	ldr	r3, [pc, #72]	; (8020ccc <prvTaskExitError+0x54>)
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c8a:	d00a      	beq.n	8020ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8020c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c90:	f383 8811 	msr	BASEPRI, r3
 8020c94:	f3bf 8f6f 	isb	sy
 8020c98:	f3bf 8f4f 	dsb	sy
 8020c9c:	60fb      	str	r3, [r7, #12]
}
 8020c9e:	bf00      	nop
 8020ca0:	e7fe      	b.n	8020ca0 <prvTaskExitError+0x28>
	__asm volatile
 8020ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ca6:	f383 8811 	msr	BASEPRI, r3
 8020caa:	f3bf 8f6f 	isb	sy
 8020cae:	f3bf 8f4f 	dsb	sy
 8020cb2:	60bb      	str	r3, [r7, #8]
}
 8020cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8020cb6:	bf00      	nop
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	d0fc      	beq.n	8020cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8020cbe:	bf00      	nop
 8020cc0:	bf00      	nop
 8020cc2:	3714      	adds	r7, #20
 8020cc4:	46bd      	mov	sp, r7
 8020cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cca:	4770      	bx	lr
 8020ccc:	20000264 	.word	0x20000264

08020cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8020cd0:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <pxCurrentTCBConst2>)
 8020cd2:	6819      	ldr	r1, [r3, #0]
 8020cd4:	6808      	ldr	r0, [r1, #0]
 8020cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cda:	f380 8809 	msr	PSP, r0
 8020cde:	f3bf 8f6f 	isb	sy
 8020ce2:	f04f 0000 	mov.w	r0, #0
 8020ce6:	f380 8811 	msr	BASEPRI, r0
 8020cea:	4770      	bx	lr
 8020cec:	f3af 8000 	nop.w

08020cf0 <pxCurrentTCBConst2>:
 8020cf0:	20000ff0 	.word	0x20000ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8020cf4:	bf00      	nop
 8020cf6:	bf00      	nop

08020cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8020cf8:	4808      	ldr	r0, [pc, #32]	; (8020d1c <prvPortStartFirstTask+0x24>)
 8020cfa:	6800      	ldr	r0, [r0, #0]
 8020cfc:	6800      	ldr	r0, [r0, #0]
 8020cfe:	f380 8808 	msr	MSP, r0
 8020d02:	f04f 0000 	mov.w	r0, #0
 8020d06:	f380 8814 	msr	CONTROL, r0
 8020d0a:	b662      	cpsie	i
 8020d0c:	b661      	cpsie	f
 8020d0e:	f3bf 8f4f 	dsb	sy
 8020d12:	f3bf 8f6f 	isb	sy
 8020d16:	df00      	svc	0
 8020d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8020d1a:	bf00      	nop
 8020d1c:	e000ed08 	.word	0xe000ed08

08020d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b086      	sub	sp, #24
 8020d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8020d26:	4b46      	ldr	r3, [pc, #280]	; (8020e40 <xPortStartScheduler+0x120>)
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	4a46      	ldr	r2, [pc, #280]	; (8020e44 <xPortStartScheduler+0x124>)
 8020d2c:	4293      	cmp	r3, r2
 8020d2e:	d10a      	bne.n	8020d46 <xPortStartScheduler+0x26>
	__asm volatile
 8020d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d34:	f383 8811 	msr	BASEPRI, r3
 8020d38:	f3bf 8f6f 	isb	sy
 8020d3c:	f3bf 8f4f 	dsb	sy
 8020d40:	613b      	str	r3, [r7, #16]
}
 8020d42:	bf00      	nop
 8020d44:	e7fe      	b.n	8020d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8020d46:	4b3e      	ldr	r3, [pc, #248]	; (8020e40 <xPortStartScheduler+0x120>)
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	4a3f      	ldr	r2, [pc, #252]	; (8020e48 <xPortStartScheduler+0x128>)
 8020d4c:	4293      	cmp	r3, r2
 8020d4e:	d10a      	bne.n	8020d66 <xPortStartScheduler+0x46>
	__asm volatile
 8020d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d54:	f383 8811 	msr	BASEPRI, r3
 8020d58:	f3bf 8f6f 	isb	sy
 8020d5c:	f3bf 8f4f 	dsb	sy
 8020d60:	60fb      	str	r3, [r7, #12]
}
 8020d62:	bf00      	nop
 8020d64:	e7fe      	b.n	8020d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8020d66:	4b39      	ldr	r3, [pc, #228]	; (8020e4c <xPortStartScheduler+0x12c>)
 8020d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8020d6a:	697b      	ldr	r3, [r7, #20]
 8020d6c:	781b      	ldrb	r3, [r3, #0]
 8020d6e:	b2db      	uxtb	r3, r3
 8020d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	22ff      	movs	r2, #255	; 0xff
 8020d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8020d78:	697b      	ldr	r3, [r7, #20]
 8020d7a:	781b      	ldrb	r3, [r3, #0]
 8020d7c:	b2db      	uxtb	r3, r3
 8020d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8020d80:	78fb      	ldrb	r3, [r7, #3]
 8020d82:	b2db      	uxtb	r3, r3
 8020d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8020d88:	b2da      	uxtb	r2, r3
 8020d8a:	4b31      	ldr	r3, [pc, #196]	; (8020e50 <xPortStartScheduler+0x130>)
 8020d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8020d8e:	4b31      	ldr	r3, [pc, #196]	; (8020e54 <xPortStartScheduler+0x134>)
 8020d90:	2207      	movs	r2, #7
 8020d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8020d94:	e009      	b.n	8020daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8020d96:	4b2f      	ldr	r3, [pc, #188]	; (8020e54 <xPortStartScheduler+0x134>)
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	3b01      	subs	r3, #1
 8020d9c:	4a2d      	ldr	r2, [pc, #180]	; (8020e54 <xPortStartScheduler+0x134>)
 8020d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8020da0:	78fb      	ldrb	r3, [r7, #3]
 8020da2:	b2db      	uxtb	r3, r3
 8020da4:	005b      	lsls	r3, r3, #1
 8020da6:	b2db      	uxtb	r3, r3
 8020da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8020daa:	78fb      	ldrb	r3, [r7, #3]
 8020dac:	b2db      	uxtb	r3, r3
 8020dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020db2:	2b80      	cmp	r3, #128	; 0x80
 8020db4:	d0ef      	beq.n	8020d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8020db6:	4b27      	ldr	r3, [pc, #156]	; (8020e54 <xPortStartScheduler+0x134>)
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	f1c3 0307 	rsb	r3, r3, #7
 8020dbe:	2b04      	cmp	r3, #4
 8020dc0:	d00a      	beq.n	8020dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8020dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dc6:	f383 8811 	msr	BASEPRI, r3
 8020dca:	f3bf 8f6f 	isb	sy
 8020dce:	f3bf 8f4f 	dsb	sy
 8020dd2:	60bb      	str	r3, [r7, #8]
}
 8020dd4:	bf00      	nop
 8020dd6:	e7fe      	b.n	8020dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8020dd8:	4b1e      	ldr	r3, [pc, #120]	; (8020e54 <xPortStartScheduler+0x134>)
 8020dda:	681b      	ldr	r3, [r3, #0]
 8020ddc:	021b      	lsls	r3, r3, #8
 8020dde:	4a1d      	ldr	r2, [pc, #116]	; (8020e54 <xPortStartScheduler+0x134>)
 8020de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8020de2:	4b1c      	ldr	r3, [pc, #112]	; (8020e54 <xPortStartScheduler+0x134>)
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8020dea:	4a1a      	ldr	r2, [pc, #104]	; (8020e54 <xPortStartScheduler+0x134>)
 8020dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	b2da      	uxtb	r2, r3
 8020df2:	697b      	ldr	r3, [r7, #20]
 8020df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8020df6:	4b18      	ldr	r3, [pc, #96]	; (8020e58 <xPortStartScheduler+0x138>)
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	4a17      	ldr	r2, [pc, #92]	; (8020e58 <xPortStartScheduler+0x138>)
 8020dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8020e02:	4b15      	ldr	r3, [pc, #84]	; (8020e58 <xPortStartScheduler+0x138>)
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	4a14      	ldr	r2, [pc, #80]	; (8020e58 <xPortStartScheduler+0x138>)
 8020e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8020e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8020e0e:	f000 f8dd 	bl	8020fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8020e12:	4b12      	ldr	r3, [pc, #72]	; (8020e5c <xPortStartScheduler+0x13c>)
 8020e14:	2200      	movs	r2, #0
 8020e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8020e18:	f000 f8fc 	bl	8021014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8020e1c:	4b10      	ldr	r3, [pc, #64]	; (8020e60 <xPortStartScheduler+0x140>)
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	4a0f      	ldr	r2, [pc, #60]	; (8020e60 <xPortStartScheduler+0x140>)
 8020e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8020e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8020e28:	f7ff ff66 	bl	8020cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8020e2c:	f7ff f84c 	bl	801fec8 <vTaskSwitchContext>
	prvTaskExitError();
 8020e30:	f7ff ff22 	bl	8020c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8020e34:	2300      	movs	r3, #0
}
 8020e36:	4618      	mov	r0, r3
 8020e38:	3718      	adds	r7, #24
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	e000ed00 	.word	0xe000ed00
 8020e44:	410fc271 	.word	0x410fc271
 8020e48:	410fc270 	.word	0x410fc270
 8020e4c:	e000e400 	.word	0xe000e400
 8020e50:	20001218 	.word	0x20001218
 8020e54:	2000121c 	.word	0x2000121c
 8020e58:	e000ed20 	.word	0xe000ed20
 8020e5c:	20000264 	.word	0x20000264
 8020e60:	e000ef34 	.word	0xe000ef34

08020e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8020e64:	b480      	push	{r7}
 8020e66:	b083      	sub	sp, #12
 8020e68:	af00      	add	r7, sp, #0
	__asm volatile
 8020e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e6e:	f383 8811 	msr	BASEPRI, r3
 8020e72:	f3bf 8f6f 	isb	sy
 8020e76:	f3bf 8f4f 	dsb	sy
 8020e7a:	607b      	str	r3, [r7, #4]
}
 8020e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8020e7e:	4b0f      	ldr	r3, [pc, #60]	; (8020ebc <vPortEnterCritical+0x58>)
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	3301      	adds	r3, #1
 8020e84:	4a0d      	ldr	r2, [pc, #52]	; (8020ebc <vPortEnterCritical+0x58>)
 8020e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8020e88:	4b0c      	ldr	r3, [pc, #48]	; (8020ebc <vPortEnterCritical+0x58>)
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	2b01      	cmp	r3, #1
 8020e8e:	d10f      	bne.n	8020eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8020e90:	4b0b      	ldr	r3, [pc, #44]	; (8020ec0 <vPortEnterCritical+0x5c>)
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	b2db      	uxtb	r3, r3
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d00a      	beq.n	8020eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8020e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e9e:	f383 8811 	msr	BASEPRI, r3
 8020ea2:	f3bf 8f6f 	isb	sy
 8020ea6:	f3bf 8f4f 	dsb	sy
 8020eaa:	603b      	str	r3, [r7, #0]
}
 8020eac:	bf00      	nop
 8020eae:	e7fe      	b.n	8020eae <vPortEnterCritical+0x4a>
	}
}
 8020eb0:	bf00      	nop
 8020eb2:	370c      	adds	r7, #12
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eba:	4770      	bx	lr
 8020ebc:	20000264 	.word	0x20000264
 8020ec0:	e000ed04 	.word	0xe000ed04

08020ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8020ec4:	b480      	push	{r7}
 8020ec6:	b083      	sub	sp, #12
 8020ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8020eca:	4b12      	ldr	r3, [pc, #72]	; (8020f14 <vPortExitCritical+0x50>)
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d10a      	bne.n	8020ee8 <vPortExitCritical+0x24>
	__asm volatile
 8020ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ed6:	f383 8811 	msr	BASEPRI, r3
 8020eda:	f3bf 8f6f 	isb	sy
 8020ede:	f3bf 8f4f 	dsb	sy
 8020ee2:	607b      	str	r3, [r7, #4]
}
 8020ee4:	bf00      	nop
 8020ee6:	e7fe      	b.n	8020ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8020ee8:	4b0a      	ldr	r3, [pc, #40]	; (8020f14 <vPortExitCritical+0x50>)
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	3b01      	subs	r3, #1
 8020eee:	4a09      	ldr	r2, [pc, #36]	; (8020f14 <vPortExitCritical+0x50>)
 8020ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8020ef2:	4b08      	ldr	r3, [pc, #32]	; (8020f14 <vPortExitCritical+0x50>)
 8020ef4:	681b      	ldr	r3, [r3, #0]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d105      	bne.n	8020f06 <vPortExitCritical+0x42>
 8020efa:	2300      	movs	r3, #0
 8020efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020efe:	683b      	ldr	r3, [r7, #0]
 8020f00:	f383 8811 	msr	BASEPRI, r3
}
 8020f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8020f06:	bf00      	nop
 8020f08:	370c      	adds	r7, #12
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f10:	4770      	bx	lr
 8020f12:	bf00      	nop
 8020f14:	20000264 	.word	0x20000264
	...

08020f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8020f20:	f3ef 8009 	mrs	r0, PSP
 8020f24:	f3bf 8f6f 	isb	sy
 8020f28:	4b15      	ldr	r3, [pc, #84]	; (8020f80 <pxCurrentTCBConst>)
 8020f2a:	681a      	ldr	r2, [r3, #0]
 8020f2c:	f01e 0f10 	tst.w	lr, #16
 8020f30:	bf08      	it	eq
 8020f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8020f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f3a:	6010      	str	r0, [r2, #0]
 8020f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8020f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8020f44:	f380 8811 	msr	BASEPRI, r0
 8020f48:	f3bf 8f4f 	dsb	sy
 8020f4c:	f3bf 8f6f 	isb	sy
 8020f50:	f7fe ffba 	bl	801fec8 <vTaskSwitchContext>
 8020f54:	f04f 0000 	mov.w	r0, #0
 8020f58:	f380 8811 	msr	BASEPRI, r0
 8020f5c:	bc09      	pop	{r0, r3}
 8020f5e:	6819      	ldr	r1, [r3, #0]
 8020f60:	6808      	ldr	r0, [r1, #0]
 8020f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f66:	f01e 0f10 	tst.w	lr, #16
 8020f6a:	bf08      	it	eq
 8020f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8020f70:	f380 8809 	msr	PSP, r0
 8020f74:	f3bf 8f6f 	isb	sy
 8020f78:	4770      	bx	lr
 8020f7a:	bf00      	nop
 8020f7c:	f3af 8000 	nop.w

08020f80 <pxCurrentTCBConst>:
 8020f80:	20000ff0 	.word	0x20000ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8020f84:	bf00      	nop
 8020f86:	bf00      	nop

08020f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8020f88:	b580      	push	{r7, lr}
 8020f8a:	b082      	sub	sp, #8
 8020f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8020f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f92:	f383 8811 	msr	BASEPRI, r3
 8020f96:	f3bf 8f6f 	isb	sy
 8020f9a:	f3bf 8f4f 	dsb	sy
 8020f9e:	607b      	str	r3, [r7, #4]
}
 8020fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8020fa2:	f7fe fed9 	bl	801fd58 <xTaskIncrementTick>
 8020fa6:	4603      	mov	r3, r0
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	d003      	beq.n	8020fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020fac:	4b06      	ldr	r3, [pc, #24]	; (8020fc8 <SysTick_Handler+0x40>)
 8020fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020fb2:	601a      	str	r2, [r3, #0]
 8020fb4:	2300      	movs	r3, #0
 8020fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020fb8:	683b      	ldr	r3, [r7, #0]
 8020fba:	f383 8811 	msr	BASEPRI, r3
}
 8020fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8020fc0:	bf00      	nop
 8020fc2:	3708      	adds	r7, #8
 8020fc4:	46bd      	mov	sp, r7
 8020fc6:	bd80      	pop	{r7, pc}
 8020fc8:	e000ed04 	.word	0xe000ed04

08020fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8020fcc:	b480      	push	{r7}
 8020fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8020fd0:	4b0b      	ldr	r3, [pc, #44]	; (8021000 <vPortSetupTimerInterrupt+0x34>)
 8020fd2:	2200      	movs	r2, #0
 8020fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8020fd6:	4b0b      	ldr	r3, [pc, #44]	; (8021004 <vPortSetupTimerInterrupt+0x38>)
 8020fd8:	2200      	movs	r2, #0
 8020fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8020fdc:	4b0a      	ldr	r3, [pc, #40]	; (8021008 <vPortSetupTimerInterrupt+0x3c>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	4a0a      	ldr	r2, [pc, #40]	; (802100c <vPortSetupTimerInterrupt+0x40>)
 8020fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8020fe6:	099b      	lsrs	r3, r3, #6
 8020fe8:	4a09      	ldr	r2, [pc, #36]	; (8021010 <vPortSetupTimerInterrupt+0x44>)
 8020fea:	3b01      	subs	r3, #1
 8020fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8020fee:	4b04      	ldr	r3, [pc, #16]	; (8021000 <vPortSetupTimerInterrupt+0x34>)
 8020ff0:	2207      	movs	r2, #7
 8020ff2:	601a      	str	r2, [r3, #0]
}
 8020ff4:	bf00      	nop
 8020ff6:	46bd      	mov	sp, r7
 8020ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffc:	4770      	bx	lr
 8020ffe:	bf00      	nop
 8021000:	e000e010 	.word	0xe000e010
 8021004:	e000e018 	.word	0xe000e018
 8021008:	20000148 	.word	0x20000148
 802100c:	10624dd3 	.word	0x10624dd3
 8021010:	e000e014 	.word	0xe000e014

08021014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8021014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8021024 <vPortEnableVFP+0x10>
 8021018:	6801      	ldr	r1, [r0, #0]
 802101a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802101e:	6001      	str	r1, [r0, #0]
 8021020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8021022:	bf00      	nop
 8021024:	e000ed88 	.word	0xe000ed88

08021028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8021028:	b480      	push	{r7}
 802102a:	b085      	sub	sp, #20
 802102c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802102e:	f3ef 8305 	mrs	r3, IPSR
 8021032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8021034:	68fb      	ldr	r3, [r7, #12]
 8021036:	2b0f      	cmp	r3, #15
 8021038:	d914      	bls.n	8021064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802103a:	4a17      	ldr	r2, [pc, #92]	; (8021098 <vPortValidateInterruptPriority+0x70>)
 802103c:	68fb      	ldr	r3, [r7, #12]
 802103e:	4413      	add	r3, r2
 8021040:	781b      	ldrb	r3, [r3, #0]
 8021042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8021044:	4b15      	ldr	r3, [pc, #84]	; (802109c <vPortValidateInterruptPriority+0x74>)
 8021046:	781b      	ldrb	r3, [r3, #0]
 8021048:	7afa      	ldrb	r2, [r7, #11]
 802104a:	429a      	cmp	r2, r3
 802104c:	d20a      	bcs.n	8021064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021052:	f383 8811 	msr	BASEPRI, r3
 8021056:	f3bf 8f6f 	isb	sy
 802105a:	f3bf 8f4f 	dsb	sy
 802105e:	607b      	str	r3, [r7, #4]
}
 8021060:	bf00      	nop
 8021062:	e7fe      	b.n	8021062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8021064:	4b0e      	ldr	r3, [pc, #56]	; (80210a0 <vPortValidateInterruptPriority+0x78>)
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802106c:	4b0d      	ldr	r3, [pc, #52]	; (80210a4 <vPortValidateInterruptPriority+0x7c>)
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	429a      	cmp	r2, r3
 8021072:	d90a      	bls.n	802108a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8021074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021078:	f383 8811 	msr	BASEPRI, r3
 802107c:	f3bf 8f6f 	isb	sy
 8021080:	f3bf 8f4f 	dsb	sy
 8021084:	603b      	str	r3, [r7, #0]
}
 8021086:	bf00      	nop
 8021088:	e7fe      	b.n	8021088 <vPortValidateInterruptPriority+0x60>
	}
 802108a:	bf00      	nop
 802108c:	3714      	adds	r7, #20
 802108e:	46bd      	mov	sp, r7
 8021090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021094:	4770      	bx	lr
 8021096:	bf00      	nop
 8021098:	e000e3f0 	.word	0xe000e3f0
 802109c:	20001218 	.word	0x20001218
 80210a0:	e000ed0c 	.word	0xe000ed0c
 80210a4:	2000121c 	.word	0x2000121c

080210a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80210a8:	b580      	push	{r7, lr}
 80210aa:	b08a      	sub	sp, #40	; 0x28
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80210b0:	2300      	movs	r3, #0
 80210b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80210b4:	f7fe fd96 	bl	801fbe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80210b8:	4b5b      	ldr	r3, [pc, #364]	; (8021228 <pvPortMalloc+0x180>)
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	2b00      	cmp	r3, #0
 80210be:	d101      	bne.n	80210c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80210c0:	f000 f920 	bl	8021304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80210c4:	4b59      	ldr	r3, [pc, #356]	; (802122c <pvPortMalloc+0x184>)
 80210c6:	681a      	ldr	r2, [r3, #0]
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	4013      	ands	r3, r2
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	f040 8093 	bne.w	80211f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d01d      	beq.n	8021114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80210d8:	2208      	movs	r2, #8
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	4413      	add	r3, r2
 80210de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	f003 0307 	and.w	r3, r3, #7
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d014      	beq.n	8021114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	f023 0307 	bic.w	r3, r3, #7
 80210f0:	3308      	adds	r3, #8
 80210f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	f003 0307 	and.w	r3, r3, #7
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d00a      	beq.n	8021114 <pvPortMalloc+0x6c>
	__asm volatile
 80210fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021102:	f383 8811 	msr	BASEPRI, r3
 8021106:	f3bf 8f6f 	isb	sy
 802110a:	f3bf 8f4f 	dsb	sy
 802110e:	617b      	str	r3, [r7, #20]
}
 8021110:	bf00      	nop
 8021112:	e7fe      	b.n	8021112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d06e      	beq.n	80211f8 <pvPortMalloc+0x150>
 802111a:	4b45      	ldr	r3, [pc, #276]	; (8021230 <pvPortMalloc+0x188>)
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	687a      	ldr	r2, [r7, #4]
 8021120:	429a      	cmp	r2, r3
 8021122:	d869      	bhi.n	80211f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8021124:	4b43      	ldr	r3, [pc, #268]	; (8021234 <pvPortMalloc+0x18c>)
 8021126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8021128:	4b42      	ldr	r3, [pc, #264]	; (8021234 <pvPortMalloc+0x18c>)
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802112e:	e004      	b.n	802113a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8021130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8021134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021136:	681b      	ldr	r3, [r3, #0]
 8021138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802113c:	685b      	ldr	r3, [r3, #4]
 802113e:	687a      	ldr	r2, [r7, #4]
 8021140:	429a      	cmp	r2, r3
 8021142:	d903      	bls.n	802114c <pvPortMalloc+0xa4>
 8021144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d1f1      	bne.n	8021130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802114c:	4b36      	ldr	r3, [pc, #216]	; (8021228 <pvPortMalloc+0x180>)
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021152:	429a      	cmp	r2, r3
 8021154:	d050      	beq.n	80211f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8021156:	6a3b      	ldr	r3, [r7, #32]
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	2208      	movs	r2, #8
 802115c:	4413      	add	r3, r2
 802115e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8021160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021162:	681a      	ldr	r2, [r3, #0]
 8021164:	6a3b      	ldr	r3, [r7, #32]
 8021166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8021168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802116a:	685a      	ldr	r2, [r3, #4]
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	1ad2      	subs	r2, r2, r3
 8021170:	2308      	movs	r3, #8
 8021172:	005b      	lsls	r3, r3, #1
 8021174:	429a      	cmp	r2, r3
 8021176:	d91f      	bls.n	80211b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8021178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	4413      	add	r3, r2
 802117e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8021180:	69bb      	ldr	r3, [r7, #24]
 8021182:	f003 0307 	and.w	r3, r3, #7
 8021186:	2b00      	cmp	r3, #0
 8021188:	d00a      	beq.n	80211a0 <pvPortMalloc+0xf8>
	__asm volatile
 802118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802118e:	f383 8811 	msr	BASEPRI, r3
 8021192:	f3bf 8f6f 	isb	sy
 8021196:	f3bf 8f4f 	dsb	sy
 802119a:	613b      	str	r3, [r7, #16]
}
 802119c:	bf00      	nop
 802119e:	e7fe      	b.n	802119e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80211a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211a2:	685a      	ldr	r2, [r3, #4]
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	1ad2      	subs	r2, r2, r3
 80211a8:	69bb      	ldr	r3, [r7, #24]
 80211aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80211ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ae:	687a      	ldr	r2, [r7, #4]
 80211b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80211b2:	69b8      	ldr	r0, [r7, #24]
 80211b4:	f000 f908 	bl	80213c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80211b8:	4b1d      	ldr	r3, [pc, #116]	; (8021230 <pvPortMalloc+0x188>)
 80211ba:	681a      	ldr	r2, [r3, #0]
 80211bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211be:	685b      	ldr	r3, [r3, #4]
 80211c0:	1ad3      	subs	r3, r2, r3
 80211c2:	4a1b      	ldr	r2, [pc, #108]	; (8021230 <pvPortMalloc+0x188>)
 80211c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80211c6:	4b1a      	ldr	r3, [pc, #104]	; (8021230 <pvPortMalloc+0x188>)
 80211c8:	681a      	ldr	r2, [r3, #0]
 80211ca:	4b1b      	ldr	r3, [pc, #108]	; (8021238 <pvPortMalloc+0x190>)
 80211cc:	681b      	ldr	r3, [r3, #0]
 80211ce:	429a      	cmp	r2, r3
 80211d0:	d203      	bcs.n	80211da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80211d2:	4b17      	ldr	r3, [pc, #92]	; (8021230 <pvPortMalloc+0x188>)
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	4a18      	ldr	r2, [pc, #96]	; (8021238 <pvPortMalloc+0x190>)
 80211d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80211da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211dc:	685a      	ldr	r2, [r3, #4]
 80211de:	4b13      	ldr	r3, [pc, #76]	; (802122c <pvPortMalloc+0x184>)
 80211e0:	681b      	ldr	r3, [r3, #0]
 80211e2:	431a      	orrs	r2, r3
 80211e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80211e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ea:	2200      	movs	r2, #0
 80211ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80211ee:	4b13      	ldr	r3, [pc, #76]	; (802123c <pvPortMalloc+0x194>)
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	3301      	adds	r3, #1
 80211f4:	4a11      	ldr	r2, [pc, #68]	; (802123c <pvPortMalloc+0x194>)
 80211f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80211f8:	f7fe fd02 	bl	801fc00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80211fc:	69fb      	ldr	r3, [r7, #28]
 80211fe:	f003 0307 	and.w	r3, r3, #7
 8021202:	2b00      	cmp	r3, #0
 8021204:	d00a      	beq.n	802121c <pvPortMalloc+0x174>
	__asm volatile
 8021206:	f04f 0350 	mov.w	r3, #80	; 0x50
 802120a:	f383 8811 	msr	BASEPRI, r3
 802120e:	f3bf 8f6f 	isb	sy
 8021212:	f3bf 8f4f 	dsb	sy
 8021216:	60fb      	str	r3, [r7, #12]
}
 8021218:	bf00      	nop
 802121a:	e7fe      	b.n	802121a <pvPortMalloc+0x172>
	return pvReturn;
 802121c:	69fb      	ldr	r3, [r7, #28]
}
 802121e:	4618      	mov	r0, r3
 8021220:	3728      	adds	r7, #40	; 0x28
 8021222:	46bd      	mov	sp, r7
 8021224:	bd80      	pop	{r7, pc}
 8021226:	bf00      	nop
 8021228:	20016628 	.word	0x20016628
 802122c:	2001663c 	.word	0x2001663c
 8021230:	2001662c 	.word	0x2001662c
 8021234:	20016620 	.word	0x20016620
 8021238:	20016630 	.word	0x20016630
 802123c:	20016634 	.word	0x20016634

08021240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8021240:	b580      	push	{r7, lr}
 8021242:	b086      	sub	sp, #24
 8021244:	af00      	add	r7, sp, #0
 8021246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	2b00      	cmp	r3, #0
 8021250:	d04d      	beq.n	80212ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8021252:	2308      	movs	r3, #8
 8021254:	425b      	negs	r3, r3
 8021256:	697a      	ldr	r2, [r7, #20]
 8021258:	4413      	add	r3, r2
 802125a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802125c:	697b      	ldr	r3, [r7, #20]
 802125e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8021260:	693b      	ldr	r3, [r7, #16]
 8021262:	685a      	ldr	r2, [r3, #4]
 8021264:	4b24      	ldr	r3, [pc, #144]	; (80212f8 <vPortFree+0xb8>)
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	4013      	ands	r3, r2
 802126a:	2b00      	cmp	r3, #0
 802126c:	d10a      	bne.n	8021284 <vPortFree+0x44>
	__asm volatile
 802126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021272:	f383 8811 	msr	BASEPRI, r3
 8021276:	f3bf 8f6f 	isb	sy
 802127a:	f3bf 8f4f 	dsb	sy
 802127e:	60fb      	str	r3, [r7, #12]
}
 8021280:	bf00      	nop
 8021282:	e7fe      	b.n	8021282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8021284:	693b      	ldr	r3, [r7, #16]
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	2b00      	cmp	r3, #0
 802128a:	d00a      	beq.n	80212a2 <vPortFree+0x62>
	__asm volatile
 802128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021290:	f383 8811 	msr	BASEPRI, r3
 8021294:	f3bf 8f6f 	isb	sy
 8021298:	f3bf 8f4f 	dsb	sy
 802129c:	60bb      	str	r3, [r7, #8]
}
 802129e:	bf00      	nop
 80212a0:	e7fe      	b.n	80212a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80212a2:	693b      	ldr	r3, [r7, #16]
 80212a4:	685a      	ldr	r2, [r3, #4]
 80212a6:	4b14      	ldr	r3, [pc, #80]	; (80212f8 <vPortFree+0xb8>)
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	4013      	ands	r3, r2
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d01e      	beq.n	80212ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80212b0:	693b      	ldr	r3, [r7, #16]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d11a      	bne.n	80212ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80212b8:	693b      	ldr	r3, [r7, #16]
 80212ba:	685a      	ldr	r2, [r3, #4]
 80212bc:	4b0e      	ldr	r3, [pc, #56]	; (80212f8 <vPortFree+0xb8>)
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	43db      	mvns	r3, r3
 80212c2:	401a      	ands	r2, r3
 80212c4:	693b      	ldr	r3, [r7, #16]
 80212c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80212c8:	f7fe fc8c 	bl	801fbe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80212cc:	693b      	ldr	r3, [r7, #16]
 80212ce:	685a      	ldr	r2, [r3, #4]
 80212d0:	4b0a      	ldr	r3, [pc, #40]	; (80212fc <vPortFree+0xbc>)
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	4413      	add	r3, r2
 80212d6:	4a09      	ldr	r2, [pc, #36]	; (80212fc <vPortFree+0xbc>)
 80212d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80212da:	6938      	ldr	r0, [r7, #16]
 80212dc:	f000 f874 	bl	80213c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80212e0:	4b07      	ldr	r3, [pc, #28]	; (8021300 <vPortFree+0xc0>)
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	3301      	adds	r3, #1
 80212e6:	4a06      	ldr	r2, [pc, #24]	; (8021300 <vPortFree+0xc0>)
 80212e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80212ea:	f7fe fc89 	bl	801fc00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80212ee:	bf00      	nop
 80212f0:	3718      	adds	r7, #24
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bd80      	pop	{r7, pc}
 80212f6:	bf00      	nop
 80212f8:	2001663c 	.word	0x2001663c
 80212fc:	2001662c 	.word	0x2001662c
 8021300:	20016638 	.word	0x20016638

08021304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8021304:	b480      	push	{r7}
 8021306:	b085      	sub	sp, #20
 8021308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802130a:	f44f 33aa 	mov.w	r3, #87040	; 0x15400
 802130e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021310:	4b27      	ldr	r3, [pc, #156]	; (80213b0 <prvHeapInit+0xac>)
 8021312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	f003 0307 	and.w	r3, r3, #7
 802131a:	2b00      	cmp	r3, #0
 802131c:	d00c      	beq.n	8021338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	3307      	adds	r3, #7
 8021322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021324:	68fb      	ldr	r3, [r7, #12]
 8021326:	f023 0307 	bic.w	r3, r3, #7
 802132a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802132c:	68ba      	ldr	r2, [r7, #8]
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	1ad3      	subs	r3, r2, r3
 8021332:	4a1f      	ldr	r2, [pc, #124]	; (80213b0 <prvHeapInit+0xac>)
 8021334:	4413      	add	r3, r2
 8021336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802133c:	4a1d      	ldr	r2, [pc, #116]	; (80213b4 <prvHeapInit+0xb0>)
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8021342:	4b1c      	ldr	r3, [pc, #112]	; (80213b4 <prvHeapInit+0xb0>)
 8021344:	2200      	movs	r2, #0
 8021346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021348:	687b      	ldr	r3, [r7, #4]
 802134a:	68ba      	ldr	r2, [r7, #8]
 802134c:	4413      	add	r3, r2
 802134e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021350:	2208      	movs	r2, #8
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	1a9b      	subs	r3, r3, r2
 8021356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021358:	68fb      	ldr	r3, [r7, #12]
 802135a:	f023 0307 	bic.w	r3, r3, #7
 802135e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	4a15      	ldr	r2, [pc, #84]	; (80213b8 <prvHeapInit+0xb4>)
 8021364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8021366:	4b14      	ldr	r3, [pc, #80]	; (80213b8 <prvHeapInit+0xb4>)
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	2200      	movs	r2, #0
 802136c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802136e:	4b12      	ldr	r3, [pc, #72]	; (80213b8 <prvHeapInit+0xb4>)
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	2200      	movs	r2, #0
 8021374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802137a:	683b      	ldr	r3, [r7, #0]
 802137c:	68fa      	ldr	r2, [r7, #12]
 802137e:	1ad2      	subs	r2, r2, r3
 8021380:	683b      	ldr	r3, [r7, #0]
 8021382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8021384:	4b0c      	ldr	r3, [pc, #48]	; (80213b8 <prvHeapInit+0xb4>)
 8021386:	681a      	ldr	r2, [r3, #0]
 8021388:	683b      	ldr	r3, [r7, #0]
 802138a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802138c:	683b      	ldr	r3, [r7, #0]
 802138e:	685b      	ldr	r3, [r3, #4]
 8021390:	4a0a      	ldr	r2, [pc, #40]	; (80213bc <prvHeapInit+0xb8>)
 8021392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021394:	683b      	ldr	r3, [r7, #0]
 8021396:	685b      	ldr	r3, [r3, #4]
 8021398:	4a09      	ldr	r2, [pc, #36]	; (80213c0 <prvHeapInit+0xbc>)
 802139a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802139c:	4b09      	ldr	r3, [pc, #36]	; (80213c4 <prvHeapInit+0xc0>)
 802139e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80213a2:	601a      	str	r2, [r3, #0]
}
 80213a4:	bf00      	nop
 80213a6:	3714      	adds	r7, #20
 80213a8:	46bd      	mov	sp, r7
 80213aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ae:	4770      	bx	lr
 80213b0:	20001220 	.word	0x20001220
 80213b4:	20016620 	.word	0x20016620
 80213b8:	20016628 	.word	0x20016628
 80213bc:	20016630 	.word	0x20016630
 80213c0:	2001662c 	.word	0x2001662c
 80213c4:	2001663c 	.word	0x2001663c

080213c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80213c8:	b480      	push	{r7}
 80213ca:	b085      	sub	sp, #20
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80213d0:	4b28      	ldr	r3, [pc, #160]	; (8021474 <prvInsertBlockIntoFreeList+0xac>)
 80213d2:	60fb      	str	r3, [r7, #12]
 80213d4:	e002      	b.n	80213dc <prvInsertBlockIntoFreeList+0x14>
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	681b      	ldr	r3, [r3, #0]
 80213da:	60fb      	str	r3, [r7, #12]
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	687a      	ldr	r2, [r7, #4]
 80213e2:	429a      	cmp	r2, r3
 80213e4:	d8f7      	bhi.n	80213d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80213e6:	68fb      	ldr	r3, [r7, #12]
 80213e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80213ea:	68fb      	ldr	r3, [r7, #12]
 80213ec:	685b      	ldr	r3, [r3, #4]
 80213ee:	68ba      	ldr	r2, [r7, #8]
 80213f0:	4413      	add	r3, r2
 80213f2:	687a      	ldr	r2, [r7, #4]
 80213f4:	429a      	cmp	r2, r3
 80213f6:	d108      	bne.n	802140a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	685a      	ldr	r2, [r3, #4]
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	685b      	ldr	r3, [r3, #4]
 8021400:	441a      	add	r2, r3
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	685b      	ldr	r3, [r3, #4]
 8021412:	68ba      	ldr	r2, [r7, #8]
 8021414:	441a      	add	r2, r3
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	429a      	cmp	r2, r3
 802141c:	d118      	bne.n	8021450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802141e:	68fb      	ldr	r3, [r7, #12]
 8021420:	681a      	ldr	r2, [r3, #0]
 8021422:	4b15      	ldr	r3, [pc, #84]	; (8021478 <prvInsertBlockIntoFreeList+0xb0>)
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	429a      	cmp	r2, r3
 8021428:	d00d      	beq.n	8021446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	685a      	ldr	r2, [r3, #4]
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	685b      	ldr	r3, [r3, #4]
 8021434:	441a      	add	r2, r3
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802143a:	68fb      	ldr	r3, [r7, #12]
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	681a      	ldr	r2, [r3, #0]
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	601a      	str	r2, [r3, #0]
 8021444:	e008      	b.n	8021458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8021446:	4b0c      	ldr	r3, [pc, #48]	; (8021478 <prvInsertBlockIntoFreeList+0xb0>)
 8021448:	681a      	ldr	r2, [r3, #0]
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	601a      	str	r2, [r3, #0]
 802144e:	e003      	b.n	8021458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	681a      	ldr	r2, [r3, #0]
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021458:	68fa      	ldr	r2, [r7, #12]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	429a      	cmp	r2, r3
 802145e:	d002      	beq.n	8021466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021460:	68fb      	ldr	r3, [r7, #12]
 8021462:	687a      	ldr	r2, [r7, #4]
 8021464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021466:	bf00      	nop
 8021468:	3714      	adds	r7, #20
 802146a:	46bd      	mov	sp, r7
 802146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021470:	4770      	bx	lr
 8021472:	bf00      	nop
 8021474:	20016620 	.word	0x20016620
 8021478:	20016628 	.word	0x20016628

0802147c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802147c:	b580      	push	{r7, lr}
 802147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021480:	2200      	movs	r2, #0
 8021482:	4912      	ldr	r1, [pc, #72]	; (80214cc <MX_USB_DEVICE_Init+0x50>)
 8021484:	4812      	ldr	r0, [pc, #72]	; (80214d0 <MX_USB_DEVICE_Init+0x54>)
 8021486:	f7fc f88d 	bl	801d5a4 <USBD_Init>
 802148a:	4603      	mov	r3, r0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d001      	beq.n	8021494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8021490:	f7f3 f944 	bl	801471c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021494:	490f      	ldr	r1, [pc, #60]	; (80214d4 <MX_USB_DEVICE_Init+0x58>)
 8021496:	480e      	ldr	r0, [pc, #56]	; (80214d0 <MX_USB_DEVICE_Init+0x54>)
 8021498:	f7fc f8b4 	bl	801d604 <USBD_RegisterClass>
 802149c:	4603      	mov	r3, r0
 802149e:	2b00      	cmp	r3, #0
 80214a0:	d001      	beq.n	80214a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80214a2:	f7f3 f93b 	bl	801471c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80214a6:	490c      	ldr	r1, [pc, #48]	; (80214d8 <MX_USB_DEVICE_Init+0x5c>)
 80214a8:	4809      	ldr	r0, [pc, #36]	; (80214d0 <MX_USB_DEVICE_Init+0x54>)
 80214aa:	f7fb ffd5 	bl	801d458 <USBD_CDC_RegisterInterface>
 80214ae:	4603      	mov	r3, r0
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d001      	beq.n	80214b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80214b4:	f7f3 f932 	bl	801471c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80214b8:	4805      	ldr	r0, [pc, #20]	; (80214d0 <MX_USB_DEVICE_Init+0x54>)
 80214ba:	f7fc f8ca 	bl	801d652 <USBD_Start>
 80214be:	4603      	mov	r3, r0
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d001      	beq.n	80214c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80214c4:	f7f3 f92a 	bl	801471c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80214c8:	bf00      	nop
 80214ca:	bd80      	pop	{r7, pc}
 80214cc:	2000027c 	.word	0x2000027c
 80214d0:	200170d8 	.word	0x200170d8
 80214d4:	20000160 	.word	0x20000160
 80214d8:	20000268 	.word	0x20000268

080214dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80214dc:	b580      	push	{r7, lr}
 80214de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80214e0:	2200      	movs	r2, #0
 80214e2:	4905      	ldr	r1, [pc, #20]	; (80214f8 <CDC_Init_FS+0x1c>)
 80214e4:	4805      	ldr	r0, [pc, #20]	; (80214fc <CDC_Init_FS+0x20>)
 80214e6:	f7fb ffcc 	bl	801d482 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80214ea:	4905      	ldr	r1, [pc, #20]	; (8021500 <CDC_Init_FS+0x24>)
 80214ec:	4803      	ldr	r0, [pc, #12]	; (80214fc <CDC_Init_FS+0x20>)
 80214ee:	f7fb ffe6 	bl	801d4be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80214f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80214f4:	4618      	mov	r0, r3
 80214f6:	bd80      	pop	{r7, pc}
 80214f8:	20017ba8 	.word	0x20017ba8
 80214fc:	200170d8 	.word	0x200170d8
 8021500:	200173a8 	.word	0x200173a8

08021504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8021504:	b480      	push	{r7}
 8021506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8021508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802150a:	4618      	mov	r0, r3
 802150c:	46bd      	mov	sp, r7
 802150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021512:	4770      	bx	lr

08021514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8021514:	b480      	push	{r7}
 8021516:	b083      	sub	sp, #12
 8021518:	af00      	add	r7, sp, #0
 802151a:	4603      	mov	r3, r0
 802151c:	6039      	str	r1, [r7, #0]
 802151e:	71fb      	strb	r3, [r7, #7]
 8021520:	4613      	mov	r3, r2
 8021522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8021524:	79fb      	ldrb	r3, [r7, #7]
 8021526:	2b23      	cmp	r3, #35	; 0x23
 8021528:	d84a      	bhi.n	80215c0 <CDC_Control_FS+0xac>
 802152a:	a201      	add	r2, pc, #4	; (adr r2, 8021530 <CDC_Control_FS+0x1c>)
 802152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021530:	080215c1 	.word	0x080215c1
 8021534:	080215c1 	.word	0x080215c1
 8021538:	080215c1 	.word	0x080215c1
 802153c:	080215c1 	.word	0x080215c1
 8021540:	080215c1 	.word	0x080215c1
 8021544:	080215c1 	.word	0x080215c1
 8021548:	080215c1 	.word	0x080215c1
 802154c:	080215c1 	.word	0x080215c1
 8021550:	080215c1 	.word	0x080215c1
 8021554:	080215c1 	.word	0x080215c1
 8021558:	080215c1 	.word	0x080215c1
 802155c:	080215c1 	.word	0x080215c1
 8021560:	080215c1 	.word	0x080215c1
 8021564:	080215c1 	.word	0x080215c1
 8021568:	080215c1 	.word	0x080215c1
 802156c:	080215c1 	.word	0x080215c1
 8021570:	080215c1 	.word	0x080215c1
 8021574:	080215c1 	.word	0x080215c1
 8021578:	080215c1 	.word	0x080215c1
 802157c:	080215c1 	.word	0x080215c1
 8021580:	080215c1 	.word	0x080215c1
 8021584:	080215c1 	.word	0x080215c1
 8021588:	080215c1 	.word	0x080215c1
 802158c:	080215c1 	.word	0x080215c1
 8021590:	080215c1 	.word	0x080215c1
 8021594:	080215c1 	.word	0x080215c1
 8021598:	080215c1 	.word	0x080215c1
 802159c:	080215c1 	.word	0x080215c1
 80215a0:	080215c1 	.word	0x080215c1
 80215a4:	080215c1 	.word	0x080215c1
 80215a8:	080215c1 	.word	0x080215c1
 80215ac:	080215c1 	.word	0x080215c1
 80215b0:	080215c1 	.word	0x080215c1
 80215b4:	080215c1 	.word	0x080215c1
 80215b8:	080215c1 	.word	0x080215c1
 80215bc:	080215c1 	.word	0x080215c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80215c0:	bf00      	nop
  }

  return (USBD_OK);
 80215c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80215c4:	4618      	mov	r0, r3
 80215c6:	370c      	adds	r7, #12
 80215c8:	46bd      	mov	sp, r7
 80215ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ce:	4770      	bx	lr

080215d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80215d0:	b580      	push	{r7, lr}
 80215d2:	b084      	sub	sp, #16
 80215d4:	af00      	add	r7, sp, #0
 80215d6:	6078      	str	r0, [r7, #4]
 80215d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80215da:	6879      	ldr	r1, [r7, #4]
 80215dc:	481b      	ldr	r0, [pc, #108]	; (802164c <CDC_Receive_FS+0x7c>)
 80215de:	f7fb ff6e 	bl	801d4be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80215e2:	481a      	ldr	r0, [pc, #104]	; (802164c <CDC_Receive_FS+0x7c>)
 80215e4:	f7fb ffb4 	bl	801d550 <USBD_CDC_ReceivePacket>



    memset (UART_RX_BUF, '\0', 17);  // clear the buffer
 80215e8:	2211      	movs	r2, #17
 80215ea:	2100      	movs	r1, #0
 80215ec:	4818      	ldr	r0, [pc, #96]	; (8021650 <CDC_Receive_FS+0x80>)
 80215ee:	f000 fcc3 	bl	8021f78 <memset>
    uint8_t len = (uint8_t)*Len;
 80215f2:	683b      	ldr	r3, [r7, #0]
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	73fb      	strb	r3, [r7, #15]
    memcpy(UART_RX_BUF, Buf, len);  // copy the data to the buffer
 80215f8:	7bfb      	ldrb	r3, [r7, #15]
 80215fa:	461a      	mov	r2, r3
 80215fc:	6879      	ldr	r1, [r7, #4]
 80215fe:	4814      	ldr	r0, [pc, #80]	; (8021650 <CDC_Receive_FS+0x80>)
 8021600:	f000 fcac 	bl	8021f5c <memcpy>


    if(len==17)
 8021604:	7bfb      	ldrb	r3, [r7, #15]
 8021606:	2b11      	cmp	r3, #17
 8021608:	d114      	bne.n	8021634 <CDC_Receive_FS+0x64>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 802160a:	2300      	movs	r3, #0
 802160c:	60bb      	str	r3, [r7, #8]
    	xQueueSendToFrontFromISR(Uart_Receive, &UART_RX_BUF, &xHigherPriorityTaskWoken);
 802160e:	4b11      	ldr	r3, [pc, #68]	; (8021654 <CDC_Receive_FS+0x84>)
 8021610:	6818      	ldr	r0, [r3, #0]
 8021612:	f107 0208 	add.w	r2, r7, #8
 8021616:	2301      	movs	r3, #1
 8021618:	490d      	ldr	r1, [pc, #52]	; (8021650 <CDC_Receive_FS+0x80>)
 802161a:	f7fd fc19 	bl	801ee50 <xQueueGenericSendFromISR>
    	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 802161e:	68bb      	ldr	r3, [r7, #8]
 8021620:	2b00      	cmp	r3, #0
 8021622:	d007      	beq.n	8021634 <CDC_Receive_FS+0x64>
 8021624:	4b0c      	ldr	r3, [pc, #48]	; (8021658 <CDC_Receive_FS+0x88>)
 8021626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802162a:	601a      	str	r2, [r3, #0]
 802162c:	f3bf 8f4f 	dsb	sy
 8021630:	f3bf 8f6f 	isb	sy
    }

    memset(Buf, '\0', len);   // clear the Buf also
 8021634:	7bfb      	ldrb	r3, [r7, #15]
 8021636:	461a      	mov	r2, r3
 8021638:	2100      	movs	r1, #0
 802163a:	6878      	ldr	r0, [r7, #4]
 802163c:	f000 fc9c 	bl	8021f78 <memset>



  return (USBD_OK);
 8021640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8021642:	4618      	mov	r0, r3
 8021644:	3710      	adds	r7, #16
 8021646:	46bd      	mov	sp, r7
 8021648:	bd80      	pop	{r7, pc}
 802164a:	bf00      	nop
 802164c:	200170d8 	.word	0x200170d8
 8021650:	20016d28 	.word	0x20016d28
 8021654:	20016da8 	.word	0x20016da8
 8021658:	e000ed04 	.word	0xe000ed04

0802165c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	460b      	mov	r3, r1
 8021666:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8021668:	2300      	movs	r3, #0
 802166a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802166c:	4b0d      	ldr	r3, [pc, #52]	; (80216a4 <CDC_Transmit_FS+0x48>)
 802166e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021672:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8021674:	68bb      	ldr	r3, [r7, #8]
 8021676:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802167a:	2b00      	cmp	r3, #0
 802167c:	d001      	beq.n	8021682 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 802167e:	2301      	movs	r3, #1
 8021680:	e00b      	b.n	802169a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8021682:	887b      	ldrh	r3, [r7, #2]
 8021684:	461a      	mov	r2, r3
 8021686:	6879      	ldr	r1, [r7, #4]
 8021688:	4806      	ldr	r0, [pc, #24]	; (80216a4 <CDC_Transmit_FS+0x48>)
 802168a:	f7fb fefa 	bl	801d482 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802168e:	4805      	ldr	r0, [pc, #20]	; (80216a4 <CDC_Transmit_FS+0x48>)
 8021690:	f7fb ff2e 	bl	801d4f0 <USBD_CDC_TransmitPacket>
 8021694:	4603      	mov	r3, r0
 8021696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8021698:	7bfb      	ldrb	r3, [r7, #15]
}
 802169a:	4618      	mov	r0, r3
 802169c:	3710      	adds	r7, #16
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}
 80216a2:	bf00      	nop
 80216a4:	200170d8 	.word	0x200170d8

080216a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80216a8:	b480      	push	{r7}
 80216aa:	b087      	sub	sp, #28
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	60f8      	str	r0, [r7, #12]
 80216b0:	60b9      	str	r1, [r7, #8]
 80216b2:	4613      	mov	r3, r2
 80216b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80216b6:	2300      	movs	r3, #0
 80216b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80216ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80216be:	4618      	mov	r0, r3
 80216c0:	371c      	adds	r7, #28
 80216c2:	46bd      	mov	sp, r7
 80216c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216c8:	4770      	bx	lr
	...

080216cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80216cc:	b480      	push	{r7}
 80216ce:	b083      	sub	sp, #12
 80216d0:	af00      	add	r7, sp, #0
 80216d2:	4603      	mov	r3, r0
 80216d4:	6039      	str	r1, [r7, #0]
 80216d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80216d8:	683b      	ldr	r3, [r7, #0]
 80216da:	2212      	movs	r2, #18
 80216dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80216de:	4b03      	ldr	r3, [pc, #12]	; (80216ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80216e0:	4618      	mov	r0, r3
 80216e2:	370c      	adds	r7, #12
 80216e4:	46bd      	mov	sp, r7
 80216e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ea:	4770      	bx	lr
 80216ec:	20000298 	.word	0x20000298

080216f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80216f0:	b480      	push	{r7}
 80216f2:	b083      	sub	sp, #12
 80216f4:	af00      	add	r7, sp, #0
 80216f6:	4603      	mov	r3, r0
 80216f8:	6039      	str	r1, [r7, #0]
 80216fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80216fc:	683b      	ldr	r3, [r7, #0]
 80216fe:	2204      	movs	r2, #4
 8021700:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8021702:	4b03      	ldr	r3, [pc, #12]	; (8021710 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8021704:	4618      	mov	r0, r3
 8021706:	370c      	adds	r7, #12
 8021708:	46bd      	mov	sp, r7
 802170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802170e:	4770      	bx	lr
 8021710:	200002ac 	.word	0x200002ac

08021714 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021714:	b580      	push	{r7, lr}
 8021716:	b082      	sub	sp, #8
 8021718:	af00      	add	r7, sp, #0
 802171a:	4603      	mov	r3, r0
 802171c:	6039      	str	r1, [r7, #0]
 802171e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8021720:	79fb      	ldrb	r3, [r7, #7]
 8021722:	2b00      	cmp	r3, #0
 8021724:	d105      	bne.n	8021732 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021726:	683a      	ldr	r2, [r7, #0]
 8021728:	4907      	ldr	r1, [pc, #28]	; (8021748 <USBD_FS_ProductStrDescriptor+0x34>)
 802172a:	4808      	ldr	r0, [pc, #32]	; (802174c <USBD_FS_ProductStrDescriptor+0x38>)
 802172c:	f7fc ffc3 	bl	801e6b6 <USBD_GetString>
 8021730:	e004      	b.n	802173c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021732:	683a      	ldr	r2, [r7, #0]
 8021734:	4904      	ldr	r1, [pc, #16]	; (8021748 <USBD_FS_ProductStrDescriptor+0x34>)
 8021736:	4805      	ldr	r0, [pc, #20]	; (802174c <USBD_FS_ProductStrDescriptor+0x38>)
 8021738:	f7fc ffbd 	bl	801e6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 802173c:	4b02      	ldr	r3, [pc, #8]	; (8021748 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802173e:	4618      	mov	r0, r3
 8021740:	3708      	adds	r7, #8
 8021742:	46bd      	mov	sp, r7
 8021744:	bd80      	pop	{r7, pc}
 8021746:	bf00      	nop
 8021748:	200183a8 	.word	0x200183a8
 802174c:	0802225c 	.word	0x0802225c

08021750 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021750:	b580      	push	{r7, lr}
 8021752:	b082      	sub	sp, #8
 8021754:	af00      	add	r7, sp, #0
 8021756:	4603      	mov	r3, r0
 8021758:	6039      	str	r1, [r7, #0]
 802175a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802175c:	683a      	ldr	r2, [r7, #0]
 802175e:	4904      	ldr	r1, [pc, #16]	; (8021770 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8021760:	4804      	ldr	r0, [pc, #16]	; (8021774 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8021762:	f7fc ffa8 	bl	801e6b6 <USBD_GetString>
  return USBD_StrDesc;
 8021766:	4b02      	ldr	r3, [pc, #8]	; (8021770 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8021768:	4618      	mov	r0, r3
 802176a:	3708      	adds	r7, #8
 802176c:	46bd      	mov	sp, r7
 802176e:	bd80      	pop	{r7, pc}
 8021770:	200183a8 	.word	0x200183a8
 8021774:	08022274 	.word	0x08022274

08021778 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b082      	sub	sp, #8
 802177c:	af00      	add	r7, sp, #0
 802177e:	4603      	mov	r3, r0
 8021780:	6039      	str	r1, [r7, #0]
 8021782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8021784:	683b      	ldr	r3, [r7, #0]
 8021786:	221a      	movs	r2, #26
 8021788:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802178a:	f000 f843 	bl	8021814 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802178e:	4b02      	ldr	r3, [pc, #8]	; (8021798 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8021790:	4618      	mov	r0, r3
 8021792:	3708      	adds	r7, #8
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}
 8021798:	200002b0 	.word	0x200002b0

0802179c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802179c:	b580      	push	{r7, lr}
 802179e:	b082      	sub	sp, #8
 80217a0:	af00      	add	r7, sp, #0
 80217a2:	4603      	mov	r3, r0
 80217a4:	6039      	str	r1, [r7, #0]
 80217a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80217a8:	79fb      	ldrb	r3, [r7, #7]
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d105      	bne.n	80217ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80217ae:	683a      	ldr	r2, [r7, #0]
 80217b0:	4907      	ldr	r1, [pc, #28]	; (80217d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80217b2:	4808      	ldr	r0, [pc, #32]	; (80217d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80217b4:	f7fc ff7f 	bl	801e6b6 <USBD_GetString>
 80217b8:	e004      	b.n	80217c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80217ba:	683a      	ldr	r2, [r7, #0]
 80217bc:	4904      	ldr	r1, [pc, #16]	; (80217d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80217be:	4805      	ldr	r0, [pc, #20]	; (80217d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80217c0:	f7fc ff79 	bl	801e6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80217c4:	4b02      	ldr	r3, [pc, #8]	; (80217d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80217c6:	4618      	mov	r0, r3
 80217c8:	3708      	adds	r7, #8
 80217ca:	46bd      	mov	sp, r7
 80217cc:	bd80      	pop	{r7, pc}
 80217ce:	bf00      	nop
 80217d0:	200183a8 	.word	0x200183a8
 80217d4:	08022288 	.word	0x08022288

080217d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80217d8:	b580      	push	{r7, lr}
 80217da:	b082      	sub	sp, #8
 80217dc:	af00      	add	r7, sp, #0
 80217de:	4603      	mov	r3, r0
 80217e0:	6039      	str	r1, [r7, #0]
 80217e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80217e4:	79fb      	ldrb	r3, [r7, #7]
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d105      	bne.n	80217f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80217ea:	683a      	ldr	r2, [r7, #0]
 80217ec:	4907      	ldr	r1, [pc, #28]	; (802180c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80217ee:	4808      	ldr	r0, [pc, #32]	; (8021810 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80217f0:	f7fc ff61 	bl	801e6b6 <USBD_GetString>
 80217f4:	e004      	b.n	8021800 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80217f6:	683a      	ldr	r2, [r7, #0]
 80217f8:	4904      	ldr	r1, [pc, #16]	; (802180c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80217fa:	4805      	ldr	r0, [pc, #20]	; (8021810 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80217fc:	f7fc ff5b 	bl	801e6b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021800:	4b02      	ldr	r3, [pc, #8]	; (802180c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8021802:	4618      	mov	r0, r3
 8021804:	3708      	adds	r7, #8
 8021806:	46bd      	mov	sp, r7
 8021808:	bd80      	pop	{r7, pc}
 802180a:	bf00      	nop
 802180c:	200183a8 	.word	0x200183a8
 8021810:	08022294 	.word	0x08022294

08021814 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8021814:	b580      	push	{r7, lr}
 8021816:	b084      	sub	sp, #16
 8021818:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802181a:	4b0f      	ldr	r3, [pc, #60]	; (8021858 <Get_SerialNum+0x44>)
 802181c:	681b      	ldr	r3, [r3, #0]
 802181e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021820:	4b0e      	ldr	r3, [pc, #56]	; (802185c <Get_SerialNum+0x48>)
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8021826:	4b0e      	ldr	r3, [pc, #56]	; (8021860 <Get_SerialNum+0x4c>)
 8021828:	681b      	ldr	r3, [r3, #0]
 802182a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802182c:	68fa      	ldr	r2, [r7, #12]
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	4413      	add	r3, r2
 8021832:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	2b00      	cmp	r3, #0
 8021838:	d009      	beq.n	802184e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802183a:	2208      	movs	r2, #8
 802183c:	4909      	ldr	r1, [pc, #36]	; (8021864 <Get_SerialNum+0x50>)
 802183e:	68f8      	ldr	r0, [r7, #12]
 8021840:	f000 f814 	bl	802186c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8021844:	2204      	movs	r2, #4
 8021846:	4908      	ldr	r1, [pc, #32]	; (8021868 <Get_SerialNum+0x54>)
 8021848:	68b8      	ldr	r0, [r7, #8]
 802184a:	f000 f80f 	bl	802186c <IntToUnicode>
  }
}
 802184e:	bf00      	nop
 8021850:	3710      	adds	r7, #16
 8021852:	46bd      	mov	sp, r7
 8021854:	bd80      	pop	{r7, pc}
 8021856:	bf00      	nop
 8021858:	1fff7a10 	.word	0x1fff7a10
 802185c:	1fff7a14 	.word	0x1fff7a14
 8021860:	1fff7a18 	.word	0x1fff7a18
 8021864:	200002b2 	.word	0x200002b2
 8021868:	200002c2 	.word	0x200002c2

0802186c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802186c:	b480      	push	{r7}
 802186e:	b087      	sub	sp, #28
 8021870:	af00      	add	r7, sp, #0
 8021872:	60f8      	str	r0, [r7, #12]
 8021874:	60b9      	str	r1, [r7, #8]
 8021876:	4613      	mov	r3, r2
 8021878:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802187a:	2300      	movs	r3, #0
 802187c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802187e:	2300      	movs	r3, #0
 8021880:	75fb      	strb	r3, [r7, #23]
 8021882:	e027      	b.n	80218d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8021884:	68fb      	ldr	r3, [r7, #12]
 8021886:	0f1b      	lsrs	r3, r3, #28
 8021888:	2b09      	cmp	r3, #9
 802188a:	d80b      	bhi.n	80218a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802188c:	68fb      	ldr	r3, [r7, #12]
 802188e:	0f1b      	lsrs	r3, r3, #28
 8021890:	b2da      	uxtb	r2, r3
 8021892:	7dfb      	ldrb	r3, [r7, #23]
 8021894:	005b      	lsls	r3, r3, #1
 8021896:	4619      	mov	r1, r3
 8021898:	68bb      	ldr	r3, [r7, #8]
 802189a:	440b      	add	r3, r1
 802189c:	3230      	adds	r2, #48	; 0x30
 802189e:	b2d2      	uxtb	r2, r2
 80218a0:	701a      	strb	r2, [r3, #0]
 80218a2:	e00a      	b.n	80218ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	0f1b      	lsrs	r3, r3, #28
 80218a8:	b2da      	uxtb	r2, r3
 80218aa:	7dfb      	ldrb	r3, [r7, #23]
 80218ac:	005b      	lsls	r3, r3, #1
 80218ae:	4619      	mov	r1, r3
 80218b0:	68bb      	ldr	r3, [r7, #8]
 80218b2:	440b      	add	r3, r1
 80218b4:	3237      	adds	r2, #55	; 0x37
 80218b6:	b2d2      	uxtb	r2, r2
 80218b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80218ba:	68fb      	ldr	r3, [r7, #12]
 80218bc:	011b      	lsls	r3, r3, #4
 80218be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80218c0:	7dfb      	ldrb	r3, [r7, #23]
 80218c2:	005b      	lsls	r3, r3, #1
 80218c4:	3301      	adds	r3, #1
 80218c6:	68ba      	ldr	r2, [r7, #8]
 80218c8:	4413      	add	r3, r2
 80218ca:	2200      	movs	r2, #0
 80218cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80218ce:	7dfb      	ldrb	r3, [r7, #23]
 80218d0:	3301      	adds	r3, #1
 80218d2:	75fb      	strb	r3, [r7, #23]
 80218d4:	7dfa      	ldrb	r2, [r7, #23]
 80218d6:	79fb      	ldrb	r3, [r7, #7]
 80218d8:	429a      	cmp	r2, r3
 80218da:	d3d3      	bcc.n	8021884 <IntToUnicode+0x18>
  }
}
 80218dc:	bf00      	nop
 80218de:	bf00      	nop
 80218e0:	371c      	adds	r7, #28
 80218e2:	46bd      	mov	sp, r7
 80218e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e8:	4770      	bx	lr
	...

080218ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b08a      	sub	sp, #40	; 0x28
 80218f0:	af00      	add	r7, sp, #0
 80218f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218f4:	f107 0314 	add.w	r3, r7, #20
 80218f8:	2200      	movs	r2, #0
 80218fa:	601a      	str	r2, [r3, #0]
 80218fc:	605a      	str	r2, [r3, #4]
 80218fe:	609a      	str	r2, [r3, #8]
 8021900:	60da      	str	r2, [r3, #12]
 8021902:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	681b      	ldr	r3, [r3, #0]
 8021908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802190c:	d13a      	bne.n	8021984 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802190e:	2300      	movs	r3, #0
 8021910:	613b      	str	r3, [r7, #16]
 8021912:	4b1e      	ldr	r3, [pc, #120]	; (802198c <HAL_PCD_MspInit+0xa0>)
 8021914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021916:	4a1d      	ldr	r2, [pc, #116]	; (802198c <HAL_PCD_MspInit+0xa0>)
 8021918:	f043 0301 	orr.w	r3, r3, #1
 802191c:	6313      	str	r3, [r2, #48]	; 0x30
 802191e:	4b1b      	ldr	r3, [pc, #108]	; (802198c <HAL_PCD_MspInit+0xa0>)
 8021920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021922:	f003 0301 	and.w	r3, r3, #1
 8021926:	613b      	str	r3, [r7, #16]
 8021928:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 802192a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021930:	2302      	movs	r3, #2
 8021932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021934:	2300      	movs	r3, #0
 8021936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021938:	2303      	movs	r3, #3
 802193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802193c:	230a      	movs	r3, #10
 802193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021940:	f107 0314 	add.w	r3, r7, #20
 8021944:	4619      	mov	r1, r3
 8021946:	4812      	ldr	r0, [pc, #72]	; (8021990 <HAL_PCD_MspInit+0xa4>)
 8021948:	f7f4 fff8 	bl	801693c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802194c:	4b0f      	ldr	r3, [pc, #60]	; (802198c <HAL_PCD_MspInit+0xa0>)
 802194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021950:	4a0e      	ldr	r2, [pc, #56]	; (802198c <HAL_PCD_MspInit+0xa0>)
 8021952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021956:	6353      	str	r3, [r2, #52]	; 0x34
 8021958:	2300      	movs	r3, #0
 802195a:	60fb      	str	r3, [r7, #12]
 802195c:	4b0b      	ldr	r3, [pc, #44]	; (802198c <HAL_PCD_MspInit+0xa0>)
 802195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021960:	4a0a      	ldr	r2, [pc, #40]	; (802198c <HAL_PCD_MspInit+0xa0>)
 8021962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021966:	6453      	str	r3, [r2, #68]	; 0x44
 8021968:	4b08      	ldr	r3, [pc, #32]	; (802198c <HAL_PCD_MspInit+0xa0>)
 802196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802196c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021970:	60fb      	str	r3, [r7, #12]
 8021972:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8021974:	2200      	movs	r2, #0
 8021976:	2105      	movs	r1, #5
 8021978:	2043      	movs	r0, #67	; 0x43
 802197a:	f7f4 fa81 	bl	8015e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802197e:	2043      	movs	r0, #67	; 0x43
 8021980:	f7f4 fa9a 	bl	8015eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021984:	bf00      	nop
 8021986:	3728      	adds	r7, #40	; 0x28
 8021988:	46bd      	mov	sp, r7
 802198a:	bd80      	pop	{r7, pc}
 802198c:	40023800 	.word	0x40023800
 8021990:	40020000 	.word	0x40020000

08021994 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021994:	b580      	push	{r7, lr}
 8021996:	b082      	sub	sp, #8
 8021998:	af00      	add	r7, sp, #0
 802199a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80219a8:	4619      	mov	r1, r3
 80219aa:	4610      	mov	r0, r2
 80219ac:	f7fb fe9c 	bl	801d6e8 <USBD_LL_SetupStage>
}
 80219b0:	bf00      	nop
 80219b2:	3708      	adds	r7, #8
 80219b4:	46bd      	mov	sp, r7
 80219b6:	bd80      	pop	{r7, pc}

080219b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80219b8:	b580      	push	{r7, lr}
 80219ba:	b082      	sub	sp, #8
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
 80219c0:	460b      	mov	r3, r1
 80219c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80219ca:	78fa      	ldrb	r2, [r7, #3]
 80219cc:	6879      	ldr	r1, [r7, #4]
 80219ce:	4613      	mov	r3, r2
 80219d0:	00db      	lsls	r3, r3, #3
 80219d2:	1a9b      	subs	r3, r3, r2
 80219d4:	009b      	lsls	r3, r3, #2
 80219d6:	440b      	add	r3, r1
 80219d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80219dc:	681a      	ldr	r2, [r3, #0]
 80219de:	78fb      	ldrb	r3, [r7, #3]
 80219e0:	4619      	mov	r1, r3
 80219e2:	f7fb fed6 	bl	801d792 <USBD_LL_DataOutStage>
}
 80219e6:	bf00      	nop
 80219e8:	3708      	adds	r7, #8
 80219ea:	46bd      	mov	sp, r7
 80219ec:	bd80      	pop	{r7, pc}

080219ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80219ee:	b580      	push	{r7, lr}
 80219f0:	b082      	sub	sp, #8
 80219f2:	af00      	add	r7, sp, #0
 80219f4:	6078      	str	r0, [r7, #4]
 80219f6:	460b      	mov	r3, r1
 80219f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8021a00:	78fa      	ldrb	r2, [r7, #3]
 8021a02:	6879      	ldr	r1, [r7, #4]
 8021a04:	4613      	mov	r3, r2
 8021a06:	00db      	lsls	r3, r3, #3
 8021a08:	1a9b      	subs	r3, r3, r2
 8021a0a:	009b      	lsls	r3, r3, #2
 8021a0c:	440b      	add	r3, r1
 8021a0e:	3348      	adds	r3, #72	; 0x48
 8021a10:	681a      	ldr	r2, [r3, #0]
 8021a12:	78fb      	ldrb	r3, [r7, #3]
 8021a14:	4619      	mov	r1, r3
 8021a16:	f7fb ff1f 	bl	801d858 <USBD_LL_DataInStage>
}
 8021a1a:	bf00      	nop
 8021a1c:	3708      	adds	r7, #8
 8021a1e:	46bd      	mov	sp, r7
 8021a20:	bd80      	pop	{r7, pc}

08021a22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021a22:	b580      	push	{r7, lr}
 8021a24:	b082      	sub	sp, #8
 8021a26:	af00      	add	r7, sp, #0
 8021a28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021a30:	4618      	mov	r0, r3
 8021a32:	f7fc f833 	bl	801da9c <USBD_LL_SOF>
}
 8021a36:	bf00      	nop
 8021a38:	3708      	adds	r7, #8
 8021a3a:	46bd      	mov	sp, r7
 8021a3c:	bd80      	pop	{r7, pc}

08021a3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021a3e:	b580      	push	{r7, lr}
 8021a40:	b084      	sub	sp, #16
 8021a42:	af00      	add	r7, sp, #0
 8021a44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8021a46:	2301      	movs	r3, #1
 8021a48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	68db      	ldr	r3, [r3, #12]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d102      	bne.n	8021a58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8021a52:	2300      	movs	r3, #0
 8021a54:	73fb      	strb	r3, [r7, #15]
 8021a56:	e008      	b.n	8021a6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	68db      	ldr	r3, [r3, #12]
 8021a5c:	2b02      	cmp	r3, #2
 8021a5e:	d102      	bne.n	8021a66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8021a60:	2301      	movs	r3, #1
 8021a62:	73fb      	strb	r3, [r7, #15]
 8021a64:	e001      	b.n	8021a6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8021a66:	f7f2 fe59 	bl	801471c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021a70:	7bfa      	ldrb	r2, [r7, #15]
 8021a72:	4611      	mov	r1, r2
 8021a74:	4618      	mov	r0, r3
 8021a76:	f7fb ffd3 	bl	801da20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021a80:	4618      	mov	r0, r3
 8021a82:	f7fb ff7f 	bl	801d984 <USBD_LL_Reset>
}
 8021a86:	bf00      	nop
 8021a88:	3710      	adds	r7, #16
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	bd80      	pop	{r7, pc}
	...

08021a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b082      	sub	sp, #8
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021a9e:	4618      	mov	r0, r3
 8021aa0:	f7fb ffce 	bl	801da40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	687a      	ldr	r2, [r7, #4]
 8021ab0:	6812      	ldr	r2, [r2, #0]
 8021ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8021ab6:	f043 0301 	orr.w	r3, r3, #1
 8021aba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	6a1b      	ldr	r3, [r3, #32]
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d005      	beq.n	8021ad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021ac4:	4b04      	ldr	r3, [pc, #16]	; (8021ad8 <HAL_PCD_SuspendCallback+0x48>)
 8021ac6:	691b      	ldr	r3, [r3, #16]
 8021ac8:	4a03      	ldr	r2, [pc, #12]	; (8021ad8 <HAL_PCD_SuspendCallback+0x48>)
 8021aca:	f043 0306 	orr.w	r3, r3, #6
 8021ace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8021ad0:	bf00      	nop
 8021ad2:	3708      	adds	r7, #8
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	bd80      	pop	{r7, pc}
 8021ad8:	e000ed00 	.word	0xe000ed00

08021adc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b082      	sub	sp, #8
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021aea:	4618      	mov	r0, r3
 8021aec:	f7fb ffbe 	bl	801da6c <USBD_LL_Resume>
}
 8021af0:	bf00      	nop
 8021af2:	3708      	adds	r7, #8
 8021af4:	46bd      	mov	sp, r7
 8021af6:	bd80      	pop	{r7, pc}

08021af8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b082      	sub	sp, #8
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
 8021b00:	460b      	mov	r3, r1
 8021b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021b0a:	78fa      	ldrb	r2, [r7, #3]
 8021b0c:	4611      	mov	r1, r2
 8021b0e:	4618      	mov	r0, r3
 8021b10:	f7fc f80c 	bl	801db2c <USBD_LL_IsoOUTIncomplete>
}
 8021b14:	bf00      	nop
 8021b16:	3708      	adds	r7, #8
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}

08021b1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b082      	sub	sp, #8
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
 8021b24:	460b      	mov	r3, r1
 8021b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021b2e:	78fa      	ldrb	r2, [r7, #3]
 8021b30:	4611      	mov	r1, r2
 8021b32:	4618      	mov	r0, r3
 8021b34:	f7fb ffd4 	bl	801dae0 <USBD_LL_IsoINIncomplete>
}
 8021b38:	bf00      	nop
 8021b3a:	3708      	adds	r7, #8
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b082      	sub	sp, #8
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021b4e:	4618      	mov	r0, r3
 8021b50:	f7fc f812 	bl	801db78 <USBD_LL_DevConnected>
}
 8021b54:	bf00      	nop
 8021b56:	3708      	adds	r7, #8
 8021b58:	46bd      	mov	sp, r7
 8021b5a:	bd80      	pop	{r7, pc}

08021b5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b082      	sub	sp, #8
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8021b6a:	4618      	mov	r0, r3
 8021b6c:	f7fc f80f 	bl	801db8e <USBD_LL_DevDisconnected>
}
 8021b70:	bf00      	nop
 8021b72:	3708      	adds	r7, #8
 8021b74:	46bd      	mov	sp, r7
 8021b76:	bd80      	pop	{r7, pc}

08021b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b082      	sub	sp, #8
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	781b      	ldrb	r3, [r3, #0]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d13c      	bne.n	8021c02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8021b88:	4a20      	ldr	r2, [pc, #128]	; (8021c0c <USBD_LL_Init+0x94>)
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	4a1e      	ldr	r2, [pc, #120]	; (8021c0c <USBD_LL_Init+0x94>)
 8021b94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8021b98:	4b1c      	ldr	r3, [pc, #112]	; (8021c0c <USBD_LL_Init+0x94>)
 8021b9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8021b9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8021ba0:	4b1a      	ldr	r3, [pc, #104]	; (8021c0c <USBD_LL_Init+0x94>)
 8021ba2:	2204      	movs	r2, #4
 8021ba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8021ba6:	4b19      	ldr	r3, [pc, #100]	; (8021c0c <USBD_LL_Init+0x94>)
 8021ba8:	2202      	movs	r2, #2
 8021baa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8021bac:	4b17      	ldr	r3, [pc, #92]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bae:	2200      	movs	r2, #0
 8021bb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021bb2:	4b16      	ldr	r3, [pc, #88]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bb4:	2202      	movs	r2, #2
 8021bb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8021bb8:	4b14      	ldr	r3, [pc, #80]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bba:	2200      	movs	r2, #0
 8021bbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8021bbe:	4b13      	ldr	r3, [pc, #76]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bc0:	2200      	movs	r2, #0
 8021bc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8021bc4:	4b11      	ldr	r3, [pc, #68]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bc6:	2200      	movs	r2, #0
 8021bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8021bca:	4b10      	ldr	r3, [pc, #64]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bcc:	2200      	movs	r2, #0
 8021bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8021bd0:	4b0e      	ldr	r3, [pc, #56]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bd2:	2200      	movs	r2, #0
 8021bd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021bd6:	480d      	ldr	r0, [pc, #52]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bd8:	f7f6 f851 	bl	8017c7e <HAL_PCD_Init>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d001      	beq.n	8021be6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8021be2:	f7f2 fd9b 	bl	801471c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021be6:	2180      	movs	r1, #128	; 0x80
 8021be8:	4808      	ldr	r0, [pc, #32]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bea:	f7f7 f9ae 	bl	8018f4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8021bee:	2240      	movs	r2, #64	; 0x40
 8021bf0:	2100      	movs	r1, #0
 8021bf2:	4806      	ldr	r0, [pc, #24]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bf4:	f7f7 f962 	bl	8018ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021bf8:	2280      	movs	r2, #128	; 0x80
 8021bfa:	2101      	movs	r1, #1
 8021bfc:	4803      	ldr	r0, [pc, #12]	; (8021c0c <USBD_LL_Init+0x94>)
 8021bfe:	f7f7 f95d 	bl	8018ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8021c02:	2300      	movs	r3, #0
}
 8021c04:	4618      	mov	r0, r3
 8021c06:	3708      	adds	r7, #8
 8021c08:	46bd      	mov	sp, r7
 8021c0a:	bd80      	pop	{r7, pc}
 8021c0c:	200185a8 	.word	0x200185a8

08021c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b084      	sub	sp, #16
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021c18:	2300      	movs	r3, #0
 8021c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021c1c:	2300      	movs	r3, #0
 8021c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021c26:	4618      	mov	r0, r3
 8021c28:	f7f6 f946 	bl	8017eb8 <HAL_PCD_Start>
 8021c2c:	4603      	mov	r3, r0
 8021c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021c30:	7bfb      	ldrb	r3, [r7, #15]
 8021c32:	4618      	mov	r0, r3
 8021c34:	f000 f942 	bl	8021ebc <USBD_Get_USB_Status>
 8021c38:	4603      	mov	r3, r0
 8021c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8021c3e:	4618      	mov	r0, r3
 8021c40:	3710      	adds	r7, #16
 8021c42:	46bd      	mov	sp, r7
 8021c44:	bd80      	pop	{r7, pc}

08021c46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8021c46:	b580      	push	{r7, lr}
 8021c48:	b084      	sub	sp, #16
 8021c4a:	af00      	add	r7, sp, #0
 8021c4c:	6078      	str	r0, [r7, #4]
 8021c4e:	4608      	mov	r0, r1
 8021c50:	4611      	mov	r1, r2
 8021c52:	461a      	mov	r2, r3
 8021c54:	4603      	mov	r3, r0
 8021c56:	70fb      	strb	r3, [r7, #3]
 8021c58:	460b      	mov	r3, r1
 8021c5a:	70bb      	strb	r3, [r7, #2]
 8021c5c:	4613      	mov	r3, r2
 8021c5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021c60:	2300      	movs	r3, #0
 8021c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021c64:	2300      	movs	r3, #0
 8021c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021c6e:	78bb      	ldrb	r3, [r7, #2]
 8021c70:	883a      	ldrh	r2, [r7, #0]
 8021c72:	78f9      	ldrb	r1, [r7, #3]
 8021c74:	f7f6 fd2a 	bl	80186cc <HAL_PCD_EP_Open>
 8021c78:	4603      	mov	r3, r0
 8021c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021c7c:	7bfb      	ldrb	r3, [r7, #15]
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f000 f91c 	bl	8021ebc <USBD_Get_USB_Status>
 8021c84:	4603      	mov	r3, r0
 8021c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	3710      	adds	r7, #16
 8021c8e:	46bd      	mov	sp, r7
 8021c90:	bd80      	pop	{r7, pc}

08021c92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021c92:	b580      	push	{r7, lr}
 8021c94:	b084      	sub	sp, #16
 8021c96:	af00      	add	r7, sp, #0
 8021c98:	6078      	str	r0, [r7, #4]
 8021c9a:	460b      	mov	r3, r1
 8021c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021cac:	78fa      	ldrb	r2, [r7, #3]
 8021cae:	4611      	mov	r1, r2
 8021cb0:	4618      	mov	r0, r3
 8021cb2:	f7f6 fd73 	bl	801879c <HAL_PCD_EP_Close>
 8021cb6:	4603      	mov	r3, r0
 8021cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021cba:	7bfb      	ldrb	r3, [r7, #15]
 8021cbc:	4618      	mov	r0, r3
 8021cbe:	f000 f8fd 	bl	8021ebc <USBD_Get_USB_Status>
 8021cc2:	4603      	mov	r3, r0
 8021cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8021cc8:	4618      	mov	r0, r3
 8021cca:	3710      	adds	r7, #16
 8021ccc:	46bd      	mov	sp, r7
 8021cce:	bd80      	pop	{r7, pc}

08021cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021cd0:	b580      	push	{r7, lr}
 8021cd2:	b084      	sub	sp, #16
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
 8021cd8:	460b      	mov	r3, r1
 8021cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021cdc:	2300      	movs	r3, #0
 8021cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021cea:	78fa      	ldrb	r2, [r7, #3]
 8021cec:	4611      	mov	r1, r2
 8021cee:	4618      	mov	r0, r3
 8021cf0:	f7f6 fe4b 	bl	801898a <HAL_PCD_EP_SetStall>
 8021cf4:	4603      	mov	r3, r0
 8021cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021cf8:	7bfb      	ldrb	r3, [r7, #15]
 8021cfa:	4618      	mov	r0, r3
 8021cfc:	f000 f8de 	bl	8021ebc <USBD_Get_USB_Status>
 8021d00:	4603      	mov	r3, r0
 8021d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8021d06:	4618      	mov	r0, r3
 8021d08:	3710      	adds	r7, #16
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	bd80      	pop	{r7, pc}

08021d0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021d0e:	b580      	push	{r7, lr}
 8021d10:	b084      	sub	sp, #16
 8021d12:	af00      	add	r7, sp, #0
 8021d14:	6078      	str	r0, [r7, #4]
 8021d16:	460b      	mov	r3, r1
 8021d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021d1e:	2300      	movs	r3, #0
 8021d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021d28:	78fa      	ldrb	r2, [r7, #3]
 8021d2a:	4611      	mov	r1, r2
 8021d2c:	4618      	mov	r0, r3
 8021d2e:	f7f6 fe90 	bl	8018a52 <HAL_PCD_EP_ClrStall>
 8021d32:	4603      	mov	r3, r0
 8021d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021d36:	7bfb      	ldrb	r3, [r7, #15]
 8021d38:	4618      	mov	r0, r3
 8021d3a:	f000 f8bf 	bl	8021ebc <USBD_Get_USB_Status>
 8021d3e:	4603      	mov	r3, r0
 8021d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8021d44:	4618      	mov	r0, r3
 8021d46:	3710      	adds	r7, #16
 8021d48:	46bd      	mov	sp, r7
 8021d4a:	bd80      	pop	{r7, pc}

08021d4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021d4c:	b480      	push	{r7}
 8021d4e:	b085      	sub	sp, #20
 8021d50:	af00      	add	r7, sp, #0
 8021d52:	6078      	str	r0, [r7, #4]
 8021d54:	460b      	mov	r3, r1
 8021d56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021d5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8021d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	da0b      	bge.n	8021d80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8021d68:	78fb      	ldrb	r3, [r7, #3]
 8021d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021d6e:	68f9      	ldr	r1, [r7, #12]
 8021d70:	4613      	mov	r3, r2
 8021d72:	00db      	lsls	r3, r3, #3
 8021d74:	1a9b      	subs	r3, r3, r2
 8021d76:	009b      	lsls	r3, r3, #2
 8021d78:	440b      	add	r3, r1
 8021d7a:	333e      	adds	r3, #62	; 0x3e
 8021d7c:	781b      	ldrb	r3, [r3, #0]
 8021d7e:	e00b      	b.n	8021d98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021d80:	78fb      	ldrb	r3, [r7, #3]
 8021d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021d86:	68f9      	ldr	r1, [r7, #12]
 8021d88:	4613      	mov	r3, r2
 8021d8a:	00db      	lsls	r3, r3, #3
 8021d8c:	1a9b      	subs	r3, r3, r2
 8021d8e:	009b      	lsls	r3, r3, #2
 8021d90:	440b      	add	r3, r1
 8021d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8021d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8021d98:	4618      	mov	r0, r3
 8021d9a:	3714      	adds	r7, #20
 8021d9c:	46bd      	mov	sp, r7
 8021d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021da2:	4770      	bx	lr

08021da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8021da4:	b580      	push	{r7, lr}
 8021da6:	b084      	sub	sp, #16
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
 8021dac:	460b      	mov	r3, r1
 8021dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021db0:	2300      	movs	r3, #0
 8021db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021db4:	2300      	movs	r3, #0
 8021db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021dbe:	78fa      	ldrb	r2, [r7, #3]
 8021dc0:	4611      	mov	r1, r2
 8021dc2:	4618      	mov	r0, r3
 8021dc4:	f7f6 fc5d 	bl	8018682 <HAL_PCD_SetAddress>
 8021dc8:	4603      	mov	r3, r0
 8021dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021dcc:	7bfb      	ldrb	r3, [r7, #15]
 8021dce:	4618      	mov	r0, r3
 8021dd0:	f000 f874 	bl	8021ebc <USBD_Get_USB_Status>
 8021dd4:	4603      	mov	r3, r0
 8021dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8021dda:	4618      	mov	r0, r3
 8021ddc:	3710      	adds	r7, #16
 8021dde:	46bd      	mov	sp, r7
 8021de0:	bd80      	pop	{r7, pc}

08021de2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8021de2:	b580      	push	{r7, lr}
 8021de4:	b086      	sub	sp, #24
 8021de6:	af00      	add	r7, sp, #0
 8021de8:	60f8      	str	r0, [r7, #12]
 8021dea:	607a      	str	r2, [r7, #4]
 8021dec:	603b      	str	r3, [r7, #0]
 8021dee:	460b      	mov	r3, r1
 8021df0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021df2:	2300      	movs	r3, #0
 8021df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021df6:	2300      	movs	r3, #0
 8021df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021dfa:	68fb      	ldr	r3, [r7, #12]
 8021dfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021e00:	7af9      	ldrb	r1, [r7, #11]
 8021e02:	683b      	ldr	r3, [r7, #0]
 8021e04:	687a      	ldr	r2, [r7, #4]
 8021e06:	f7f6 fd76 	bl	80188f6 <HAL_PCD_EP_Transmit>
 8021e0a:	4603      	mov	r3, r0
 8021e0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021e0e:	7dfb      	ldrb	r3, [r7, #23]
 8021e10:	4618      	mov	r0, r3
 8021e12:	f000 f853 	bl	8021ebc <USBD_Get_USB_Status>
 8021e16:	4603      	mov	r3, r0
 8021e18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8021e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8021e1c:	4618      	mov	r0, r3
 8021e1e:	3718      	adds	r7, #24
 8021e20:	46bd      	mov	sp, r7
 8021e22:	bd80      	pop	{r7, pc}

08021e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b086      	sub	sp, #24
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	60f8      	str	r0, [r7, #12]
 8021e2c:	607a      	str	r2, [r7, #4]
 8021e2e:	603b      	str	r3, [r7, #0]
 8021e30:	460b      	mov	r3, r1
 8021e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021e34:	2300      	movs	r3, #0
 8021e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021e38:	2300      	movs	r3, #0
 8021e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021e3c:	68fb      	ldr	r3, [r7, #12]
 8021e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8021e42:	7af9      	ldrb	r1, [r7, #11]
 8021e44:	683b      	ldr	r3, [r7, #0]
 8021e46:	687a      	ldr	r2, [r7, #4]
 8021e48:	f7f6 fcf2 	bl	8018830 <HAL_PCD_EP_Receive>
 8021e4c:	4603      	mov	r3, r0
 8021e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021e50:	7dfb      	ldrb	r3, [r7, #23]
 8021e52:	4618      	mov	r0, r3
 8021e54:	f000 f832 	bl	8021ebc <USBD_Get_USB_Status>
 8021e58:	4603      	mov	r3, r0
 8021e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8021e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8021e5e:	4618      	mov	r0, r3
 8021e60:	3718      	adds	r7, #24
 8021e62:	46bd      	mov	sp, r7
 8021e64:	bd80      	pop	{r7, pc}

08021e66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021e66:	b580      	push	{r7, lr}
 8021e68:	b082      	sub	sp, #8
 8021e6a:	af00      	add	r7, sp, #0
 8021e6c:	6078      	str	r0, [r7, #4]
 8021e6e:	460b      	mov	r3, r1
 8021e70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8021e78:	78fa      	ldrb	r2, [r7, #3]
 8021e7a:	4611      	mov	r1, r2
 8021e7c:	4618      	mov	r0, r3
 8021e7e:	f7f6 fd22 	bl	80188c6 <HAL_PCD_EP_GetRxCount>
 8021e82:	4603      	mov	r3, r0
}
 8021e84:	4618      	mov	r0, r3
 8021e86:	3708      	adds	r7, #8
 8021e88:	46bd      	mov	sp, r7
 8021e8a:	bd80      	pop	{r7, pc}

08021e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8021e8c:	b480      	push	{r7}
 8021e8e:	b083      	sub	sp, #12
 8021e90:	af00      	add	r7, sp, #0
 8021e92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8021e94:	4b03      	ldr	r3, [pc, #12]	; (8021ea4 <USBD_static_malloc+0x18>)
}
 8021e96:	4618      	mov	r0, r3
 8021e98:	370c      	adds	r7, #12
 8021e9a:	46bd      	mov	sp, r7
 8021e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ea0:	4770      	bx	lr
 8021ea2:	bf00      	nop
 8021ea4:	20016640 	.word	0x20016640

08021ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8021ea8:	b480      	push	{r7}
 8021eaa:	b083      	sub	sp, #12
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	6078      	str	r0, [r7, #4]

}
 8021eb0:	bf00      	nop
 8021eb2:	370c      	adds	r7, #12
 8021eb4:	46bd      	mov	sp, r7
 8021eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eba:	4770      	bx	lr

08021ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021ebc:	b480      	push	{r7}
 8021ebe:	b085      	sub	sp, #20
 8021ec0:	af00      	add	r7, sp, #0
 8021ec2:	4603      	mov	r3, r0
 8021ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8021eca:	79fb      	ldrb	r3, [r7, #7]
 8021ecc:	2b03      	cmp	r3, #3
 8021ece:	d817      	bhi.n	8021f00 <USBD_Get_USB_Status+0x44>
 8021ed0:	a201      	add	r2, pc, #4	; (adr r2, 8021ed8 <USBD_Get_USB_Status+0x1c>)
 8021ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ed6:	bf00      	nop
 8021ed8:	08021ee9 	.word	0x08021ee9
 8021edc:	08021eef 	.word	0x08021eef
 8021ee0:	08021ef5 	.word	0x08021ef5
 8021ee4:	08021efb 	.word	0x08021efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8021ee8:	2300      	movs	r3, #0
 8021eea:	73fb      	strb	r3, [r7, #15]
    break;
 8021eec:	e00b      	b.n	8021f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8021eee:	2303      	movs	r3, #3
 8021ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8021ef2:	e008      	b.n	8021f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8021ef4:	2301      	movs	r3, #1
 8021ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8021ef8:	e005      	b.n	8021f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8021efa:	2303      	movs	r3, #3
 8021efc:	73fb      	strb	r3, [r7, #15]
    break;
 8021efe:	e002      	b.n	8021f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8021f00:	2303      	movs	r3, #3
 8021f02:	73fb      	strb	r3, [r7, #15]
    break;
 8021f04:	bf00      	nop
  }
  return usb_status;
 8021f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f08:	4618      	mov	r0, r3
 8021f0a:	3714      	adds	r7, #20
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f12:	4770      	bx	lr

08021f14 <__libc_init_array>:
 8021f14:	b570      	push	{r4, r5, r6, lr}
 8021f16:	4d0d      	ldr	r5, [pc, #52]	; (8021f4c <__libc_init_array+0x38>)
 8021f18:	4c0d      	ldr	r4, [pc, #52]	; (8021f50 <__libc_init_array+0x3c>)
 8021f1a:	1b64      	subs	r4, r4, r5
 8021f1c:	10a4      	asrs	r4, r4, #2
 8021f1e:	2600      	movs	r6, #0
 8021f20:	42a6      	cmp	r6, r4
 8021f22:	d109      	bne.n	8021f38 <__libc_init_array+0x24>
 8021f24:	4d0b      	ldr	r5, [pc, #44]	; (8021f54 <__libc_init_array+0x40>)
 8021f26:	4c0c      	ldr	r4, [pc, #48]	; (8021f58 <__libc_init_array+0x44>)
 8021f28:	f000 f82e 	bl	8021f88 <_init>
 8021f2c:	1b64      	subs	r4, r4, r5
 8021f2e:	10a4      	asrs	r4, r4, #2
 8021f30:	2600      	movs	r6, #0
 8021f32:	42a6      	cmp	r6, r4
 8021f34:	d105      	bne.n	8021f42 <__libc_init_array+0x2e>
 8021f36:	bd70      	pop	{r4, r5, r6, pc}
 8021f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8021f3c:	4798      	blx	r3
 8021f3e:	3601      	adds	r6, #1
 8021f40:	e7ee      	b.n	8021f20 <__libc_init_array+0xc>
 8021f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8021f46:	4798      	blx	r3
 8021f48:	3601      	adds	r6, #1
 8021f4a:	e7f2      	b.n	8021f32 <__libc_init_array+0x1e>
 8021f4c:	080222cc 	.word	0x080222cc
 8021f50:	080222cc 	.word	0x080222cc
 8021f54:	080222cc 	.word	0x080222cc
 8021f58:	080222d0 	.word	0x080222d0

08021f5c <memcpy>:
 8021f5c:	440a      	add	r2, r1
 8021f5e:	4291      	cmp	r1, r2
 8021f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8021f64:	d100      	bne.n	8021f68 <memcpy+0xc>
 8021f66:	4770      	bx	lr
 8021f68:	b510      	push	{r4, lr}
 8021f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021f72:	4291      	cmp	r1, r2
 8021f74:	d1f9      	bne.n	8021f6a <memcpy+0xe>
 8021f76:	bd10      	pop	{r4, pc}

08021f78 <memset>:
 8021f78:	4402      	add	r2, r0
 8021f7a:	4603      	mov	r3, r0
 8021f7c:	4293      	cmp	r3, r2
 8021f7e:	d100      	bne.n	8021f82 <memset+0xa>
 8021f80:	4770      	bx	lr
 8021f82:	f803 1b01 	strb.w	r1, [r3], #1
 8021f86:	e7f9      	b.n	8021f7c <memset+0x4>

08021f88 <_init>:
 8021f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f8a:	bf00      	nop
 8021f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f8e:	bc08      	pop	{r3}
 8021f90:	469e      	mov	lr, r3
 8021f92:	4770      	bx	lr

08021f94 <_fini>:
 8021f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f96:	bf00      	nop
 8021f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f9a:	bc08      	pop	{r3}
 8021f9c:	469e      	mov	lr, r3
 8021f9e:	4770      	bx	lr
